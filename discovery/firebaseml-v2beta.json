{
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "basePath": "",
  "baseUrl": "https://firebaseml.googleapis.com/",
  "batchPath": "batch",
  "canonicalName": "Firebase ML",
  "description": "Access custom machine learning models hosted via Firebase ML.",
  "discoveryVersion": "v1",
  "documentationLink": "https://firebase.google.com",
  "fullyEncodeReservedExpansion": true,
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "id": "firebaseml:v2beta",
  "kind": "discovery#restDescription",
  "mtlsRootUrl": "https://firebaseml.mtls.googleapis.com/",
  "name": "firebaseml",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "parameters": {
    "$.xgafv": {
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "default": "json",
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "type": "string"
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "type": "boolean"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    }
  },
  "protocol": "rest",
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "publishers": {
              "resources": {
                "models": {
                  "methods": {
                    "countTokens": {
                      "description": "Perform a token counting.",
                      "flatPath": "v2beta/projects/{projectsId}/locations/{locationsId}/publishers/{publishersId}/models/{modelsId}:countTokens",
                      "httpMethod": "POST",
                      "id": "firebaseml.projects.locations.publishers.models.countTokens",
                      "parameterOrder": [
                        "endpoint"
                      ],
                      "parameters": {
                        "endpoint": {
                          "description": "Required. The name of the Endpoint requested to perform token counting. Format: `projects/{project}/locations/{location}/endpoints/{endpoint}`",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/publishers/[^/]+/models/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v2beta/{+endpoint}:countTokens",
                      "request": {
                        "$ref": "GoogleCloudAiplatformV1beta1CountTokensRequest"
                      },
                      "response": {
                        "$ref": "GoogleCloudAiplatformV1beta1CountTokensResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "generateContent": {
                      "description": "Generate content with multimodal inputs.",
                      "flatPath": "v2beta/projects/{projectsId}/locations/{locationsId}/publishers/{publishersId}/models/{modelsId}:generateContent",
                      "httpMethod": "POST",
                      "id": "firebaseml.projects.locations.publishers.models.generateContent",
                      "parameterOrder": [
                        "model"
                      ],
                      "parameters": {
                        "model": {
                          "description": "Required. The fully qualified name of the publisher model or tuned model endpoint to use. Publisher model format: `projects/{project}/locations/{location}/publishers/*/models/*` Tuned model endpoint format: `projects/{project}/locations/{location}/endpoints/{endpoint}`",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/publishers/[^/]+/models/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v2beta/{+model}:generateContent",
                      "request": {
                        "$ref": "GoogleCloudAiplatformV1beta1GenerateContentRequest"
                      },
                      "response": {
                        "$ref": "GoogleCloudAiplatformV1beta1GenerateContentResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "streamGenerateContent": {
                      "description": "Generate content with multimodal inputs with streaming support.",
                      "flatPath": "v2beta/projects/{projectsId}/locations/{locationsId}/publishers/{publishersId}/models/{modelsId}:streamGenerateContent",
                      "httpMethod": "POST",
                      "id": "firebaseml.projects.locations.publishers.models.streamGenerateContent",
                      "parameterOrder": [
                        "model"
                      ],
                      "parameters": {
                        "model": {
                          "description": "Required. The fully qualified name of the publisher model or tuned model endpoint to use. Publisher model format: `projects/{project}/locations/{location}/publishers/*/models/*` Tuned model endpoint format: `projects/{project}/locations/{location}/endpoints/{endpoint}`",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/publishers/[^/]+/models/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v2beta/{+model}:streamGenerateContent",
                      "request": {
                        "$ref": "GoogleCloudAiplatformV1beta1GenerateContentRequest"
                      },
                      "response": {
                        "$ref": "GoogleCloudAiplatformV1beta1GenerateContentResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "revision": "20251022",
  "rootUrl": "https://firebaseml.googleapis.com/",
  "schemas": {
    "Date": {
      "description": "Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp",
      "id": "Date",
      "properties": {
        "day": {
          "description": "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
          "format": "int32",
          "type": "integer"
        },
        "month": {
          "description": "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "description": "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1ApiAuth": {
      "description": "The generic reusable api auth config. Deprecated. Please use AuthConfig (google/cloud/aiplatform/master/auth.proto) instead.",
      "id": "GoogleCloudAiplatformV1beta1ApiAuth",
      "properties": {
        "apiKeyConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1ApiAuthApiKeyConfig",
          "description": "The API secret."
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1ApiAuthApiKeyConfig": {
      "description": "The API secret.",
      "id": "GoogleCloudAiplatformV1beta1ApiAuthApiKeyConfig",
      "properties": {
        "apiKeySecretVersion": {
          "description": "Required. The SecretManager secret version resource name storing API key. e.g. projects/{project}/secrets/{secret}/versions/{version}",
          "type": "string"
        },
        "apiKeyString": {
          "description": "The API key string. Either this or `api_key_secret_version` must be set.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1AuthConfig": {
      "description": "Auth configuration to run the extension.",
      "id": "GoogleCloudAiplatformV1beta1AuthConfig",
      "properties": {
        "apiKeyConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1AuthConfigApiKeyConfig",
          "description": "Config for API key auth."
        },
        "authType": {
          "description": "Type of auth scheme.",
          "enum": [
            "AUTH_TYPE_UNSPECIFIED",
            "NO_AUTH",
            "API_KEY_AUTH",
            "HTTP_BASIC_AUTH",
            "GOOGLE_SERVICE_ACCOUNT_AUTH",
            "OAUTH",
            "OIDC_AUTH"
          ],
          "enumDescriptions": [
            "",
            "No Auth.",
            "API Key Auth.",
            "HTTP Basic Auth.",
            "Google Service Account Auth.",
            "OAuth auth.",
            "OpenID Connect (OIDC) Auth."
          ],
          "type": "string"
        },
        "googleServiceAccountConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1AuthConfigGoogleServiceAccountConfig",
          "description": "Config for Google Service Account auth."
        },
        "httpBasicAuthConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1AuthConfigHttpBasicAuthConfig",
          "description": "Config for HTTP Basic auth."
        },
        "oauthConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1AuthConfigOauthConfig",
          "description": "Config for user oauth."
        },
        "oidcConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1AuthConfigOidcConfig",
          "description": "Config for user OIDC auth."
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1AuthConfigApiKeyConfig": {
      "description": "Config for authentication with API key.",
      "id": "GoogleCloudAiplatformV1beta1AuthConfigApiKeyConfig",
      "properties": {
        "apiKeySecret": {
          "description": "Optional. The name of the SecretManager secret version resource storing the API key. Format: `projects/{project}/secrets/{secrete}/versions/{version}` - If both `api_key_secret` and `api_key_string` are specified, this field takes precedence over `api_key_string`. - If specified, the `secretmanager.versions.access` permission should be granted to Vertex AI Extension Service Agent (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents) on the specified resource.",
          "type": "string"
        },
        "apiKeyString": {
          "description": "Optional. The API key to be used in the request directly.",
          "type": "string"
        },
        "httpElementLocation": {
          "description": "Optional. The location of the API key.",
          "enum": [
            "HTTP_IN_UNSPECIFIED",
            "HTTP_IN_QUERY",
            "HTTP_IN_HEADER",
            "HTTP_IN_PATH",
            "HTTP_IN_BODY",
            "HTTP_IN_COOKIE"
          ],
          "enumDescriptions": [
            "",
            "Element is in the HTTP request query.",
            "Element is in the HTTP request header.",
            "Element is in the HTTP request path.",
            "Element is in the HTTP request body.",
            "Element is in the HTTP request cookie."
          ],
          "type": "string"
        },
        "name": {
          "description": "Optional. The parameter name of the API key. E.g. If the API request is \"https://example.com/act?api_key=\", \"api_key\" would be the parameter name.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1AuthConfigGoogleServiceAccountConfig": {
      "description": "Config for Google Service Account Authentication.",
      "id": "GoogleCloudAiplatformV1beta1AuthConfigGoogleServiceAccountConfig",
      "properties": {
        "serviceAccount": {
          "description": "Optional. The service account that the extension execution service runs as. - If the service account is specified, the `iam.serviceAccounts.getAccessToken` permission should be granted to Vertex AI Extension Service Agent (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents) on the specified service account. - If not specified, the Vertex AI Extension Service Agent will be used to execute the Extension.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1AuthConfigHttpBasicAuthConfig": {
      "description": "Config for HTTP Basic Authentication.",
      "id": "GoogleCloudAiplatformV1beta1AuthConfigHttpBasicAuthConfig",
      "properties": {
        "credentialSecret": {
          "description": "Required. The name of the SecretManager secret version resource storing the base64 encoded credentials. Format: `projects/{project}/secrets/{secrete}/versions/{version}` - If specified, the `secretmanager.versions.access` permission should be granted to Vertex AI Extension Service Agent (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents) on the specified resource.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1AuthConfigOauthConfig": {
      "description": "Config for user oauth.",
      "id": "GoogleCloudAiplatformV1beta1AuthConfigOauthConfig",
      "properties": {
        "accessToken": {
          "description": "Access token for extension endpoint. Only used to propagate token from [[ExecuteExtensionRequest.runtime_auth_config]] at request time.",
          "type": "string"
        },
        "serviceAccount": {
          "description": "The service account used to generate access tokens for executing the Extension. - If the service account is specified, the `iam.serviceAccounts.getAccessToken` permission should be granted to Vertex AI Extension Service Agent (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents) on the provided service account.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1AuthConfigOidcConfig": {
      "description": "Config for user OIDC auth.",
      "id": "GoogleCloudAiplatformV1beta1AuthConfigOidcConfig",
      "properties": {
        "idToken": {
          "description": "OpenID Connect formatted ID token for extension endpoint. Only used to propagate token from [[ExecuteExtensionRequest.runtime_auth_config]] at request time.",
          "type": "string"
        },
        "serviceAccount": {
          "description": "The service account used to generate an OpenID Connect (OIDC)-compatible JWT token signed by the Google OIDC Provider (accounts.google.com) for extension endpoint (https://cloud.google.com/iam/docs/create-short-lived-credentials-direct#sa-credentials-oidc). - The audience for the token will be set to the URL in the server url defined in the OpenApi spec. - If the service account is provided, the service account should grant `iam.serviceAccounts.getOpenIdToken` permission to Vertex AI Extension Service Agent (https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1Blob": {
      "description": "A content blob. A Blob contains data of a specific media type. It is used to represent images, audio, and video.",
      "id": "GoogleCloudAiplatformV1beta1Blob",
      "properties": {
        "data": {
          "description": "Required. The raw bytes of the data.",
          "format": "byte",
          "type": "string"
        },
        "displayName": {
          "description": "Optional. The display name of the blob. Used to provide a label or filename to distinguish blobs. This field is only returned in `PromptMessage` for prompt management. It is used in the Gemini calls only when server-side tools (`code_execution`, `google_search`, and `url_context`) are enabled.",
          "type": "string"
        },
        "mimeType": {
          "description": "Required. The IANA standard MIME type of the source data.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1Candidate": {
      "description": "A response candidate generated from the model.",
      "id": "GoogleCloudAiplatformV1beta1Candidate",
      "properties": {
        "avgLogprobs": {
          "description": "Output only. The average log probability of the tokens in this candidate. This is a length-normalized score that can be used to compare the quality of candidates of different lengths. A higher average log probability suggests a more confident and coherent response.",
          "format": "double",
          "readOnly": true,
          "type": "number"
        },
        "citationMetadata": {
          "$ref": "GoogleCloudAiplatformV1beta1CitationMetadata",
          "description": "Output only. A collection of citations that apply to the generated content.",
          "readOnly": true
        },
        "content": {
          "$ref": "GoogleCloudAiplatformV1beta1Content",
          "description": "Output only. The content of the candidate.",
          "readOnly": true
        },
        "finishMessage": {
          "description": "Output only. Describes the reason the model stopped generating tokens in more detail. This field is returned only when `finish_reason` is set.",
          "readOnly": true,
          "type": "string"
        },
        "finishReason": {
          "description": "Output only. The reason why the model stopped generating tokens. If empty, the model has not stopped generating.",
          "enum": [
            "FINISH_REASON_UNSPECIFIED",
            "STOP",
            "MAX_TOKENS",
            "SAFETY",
            "RECITATION",
            "OTHER",
            "BLOCKLIST",
            "PROHIBITED_CONTENT",
            "SPII",
            "MALFORMED_FUNCTION_CALL",
            "MODEL_ARMOR",
            "IMAGE_SAFETY",
            "IMAGE_PROHIBITED_CONTENT",
            "IMAGE_RECITATION",
            "IMAGE_OTHER",
            "UNEXPECTED_TOOL_CALL",
            "NO_IMAGE"
          ],
          "enumDescriptions": [
            "The finish reason is unspecified.",
            "The model reached a natural stopping point or a configured stop sequence.",
            "The model generated the maximum number of tokens allowed by the `max_output_tokens` parameter.",
            "The model stopped generating because the content potentially violates safety policies. NOTE: When streaming, the `content` field is empty if content filters block the output.",
            "The model stopped generating because the content may be a recitation from a source.",
            "The model stopped generating for a reason not otherwise specified.",
            "The model stopped generating because the content contains a term from a configured blocklist.",
            "The model stopped generating because the content may be prohibited.",
            "The model stopped generating because the content may contain sensitive personally identifiable information (SPII).",
            "The model generated a function call that is syntactically invalid and can't be parsed.",
            "The model response was blocked by Model Armor.",
            "The generated image potentially violates safety policies.",
            "The generated image may contain prohibited content.",
            "The generated image may be a recitation from a source.",
            "The image generation stopped for a reason not otherwise specified.",
            "The model generated a function call that is semantically invalid. This can happen, for example, if function calling is not enabled or the generated function is not in the function declaration.",
            "The model was expected to generate an image, but didn't."
          ],
          "readOnly": true,
          "type": "string"
        },
        "groundingMetadata": {
          "$ref": "GoogleCloudAiplatformV1beta1GroundingMetadata",
          "description": "Output only. Metadata returned when grounding is enabled. It contains the sources used to ground the generated content.",
          "readOnly": true
        },
        "index": {
          "description": "Output only. The 0-based index of this candidate in the list of generated responses. This is useful for distinguishing between multiple candidates when `candidate_count` > 1.",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "logprobsResult": {
          "$ref": "GoogleCloudAiplatformV1beta1LogprobsResult",
          "description": "Output only. The detailed log probability information for the tokens in this candidate. This is useful for debugging, understanding model uncertainty, and identifying potential \"hallucinations\".",
          "readOnly": true
        },
        "safetyRatings": {
          "description": "Output only. A list of ratings for the safety of a response candidate. There is at most one rating per category.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1SafetyRating"
          },
          "readOnly": true,
          "type": "array"
        },
        "urlContextMetadata": {
          "$ref": "GoogleCloudAiplatformV1beta1UrlContextMetadata",
          "description": "Output only. Metadata returned when the model uses the `url_context` tool to get information from a user-provided URL.",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1Citation": {
      "description": "A citation for a piece of generatedcontent.",
      "id": "GoogleCloudAiplatformV1beta1Citation",
      "properties": {
        "endIndex": {
          "description": "Output only. The end index of the citation in the content.",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "license": {
          "description": "Output only. The license of the source of the citation.",
          "readOnly": true,
          "type": "string"
        },
        "publicationDate": {
          "$ref": "Date",
          "description": "Output only. The publication date of the source of the citation.",
          "readOnly": true
        },
        "startIndex": {
          "description": "Output only. The start index of the citation in the content.",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "title": {
          "description": "Output only. The title of the source of the citation.",
          "readOnly": true,
          "type": "string"
        },
        "uri": {
          "description": "Output only. The URI of the source of the citation.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1CitationMetadata": {
      "description": "A collection of citations that apply to a piece of generated content.",
      "id": "GoogleCloudAiplatformV1beta1CitationMetadata",
      "properties": {
        "citations": {
          "description": "Output only. A list of citations for the content.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1Citation"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1CodeExecutionResult": {
      "description": "Result of executing the [ExecutableCode]. Only generated when using the [CodeExecution] tool, and always follows a `part` containing the [ExecutableCode].",
      "id": "GoogleCloudAiplatformV1beta1CodeExecutionResult",
      "properties": {
        "outcome": {
          "description": "Required. Outcome of the code execution.",
          "enum": [
            "OUTCOME_UNSPECIFIED",
            "OUTCOME_OK",
            "OUTCOME_FAILED",
            "OUTCOME_DEADLINE_EXCEEDED"
          ],
          "enumDescriptions": [
            "Unspecified status. This value should not be used.",
            "Code execution completed successfully.",
            "Code execution finished but with a failure. `stderr` should contain the reason.",
            "Code execution ran for too long, and was cancelled. There may or may not be a partial output present."
          ],
          "type": "string"
        },
        "output": {
          "description": "Optional. Contains stdout when code execution is successful, stderr or other description otherwise.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1Content": {
      "description": "The structured data content of a message. A Content message contains a `role` field, which indicates the producer of the content, and a `parts` field, which contains the multi-part data of the message.",
      "id": "GoogleCloudAiplatformV1beta1Content",
      "properties": {
        "parts": {
          "description": "Required. A list of Part objects that make up a single message. Parts of a message can have different MIME types. A Content message must have at least one Part.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1Part"
          },
          "type": "array"
        },
        "role": {
          "description": "Optional. The producer of the content. Must be either 'user' or 'model'. If not set, the service will default to 'user'.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1CountTokensRequest": {
      "description": "Request message for PredictionService.CountTokens.",
      "id": "GoogleCloudAiplatformV1beta1CountTokensRequest",
      "properties": {
        "contents": {
          "description": "Optional. Input content.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1Content"
          },
          "type": "array"
        },
        "generationConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1GenerationConfig",
          "description": "Optional. Generation config that the model will use to generate the response."
        },
        "instances": {
          "description": "Optional. The instances that are the input to token counting call. Schema is identical to the prediction schema of the underlying model.",
          "items": {
            "type": "any"
          },
          "type": "array"
        },
        "model": {
          "description": "Optional. The name of the publisher model requested to serve the prediction. Format: `projects/{project}/locations/{location}/publishers/*/models/*`",
          "type": "string"
        },
        "systemInstruction": {
          "$ref": "GoogleCloudAiplatformV1beta1Content",
          "description": "Optional. The user provided system instructions for the model. Note: only text should be used in parts and content in each part will be in a separate paragraph."
        },
        "tools": {
          "description": "Optional. A list of `Tools` the model may use to generate the next response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1Tool"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1CountTokensResponse": {
      "description": "Response message for PredictionService.CountTokens.",
      "id": "GoogleCloudAiplatformV1beta1CountTokensResponse",
      "properties": {
        "promptTokensDetails": {
          "description": "Output only. List of modalities that were processed in the request input.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1ModalityTokenCount"
          },
          "readOnly": true,
          "type": "array"
        },
        "totalBillableCharacters": {
          "description": "The total number of billable characters counted across all instances from the request.",
          "format": "int32",
          "type": "integer"
        },
        "totalTokens": {
          "description": "The total number of tokens counted across all instances from the request.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1DynamicRetrievalConfig": {
      "description": "Describes the options to customize dynamic retrieval.",
      "id": "GoogleCloudAiplatformV1beta1DynamicRetrievalConfig",
      "properties": {
        "dynamicThreshold": {
          "description": "Optional. The threshold to be used in dynamic retrieval. If not set, a system default value is used.",
          "format": "float",
          "type": "number"
        },
        "mode": {
          "description": "The mode of the predictor to be used in dynamic retrieval.",
          "enum": [
            "MODE_UNSPECIFIED",
            "MODE_DYNAMIC"
          ],
          "enumDescriptions": [
            "Always trigger retrieval.",
            "Run retrieval only when system decides it is necessary."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1EnterpriseWebSearch": {
      "description": "Tool to search public web data, powered by Vertex AI Search and Sec4 compliance.",
      "id": "GoogleCloudAiplatformV1beta1EnterpriseWebSearch",
      "properties": {
        "blockingConfidence": {
          "description": "Optional. Sites with confidence level chosen & above this value will be blocked from the search results.",
          "enum": [
            "PHISH_BLOCK_THRESHOLD_UNSPECIFIED",
            "BLOCK_LOW_AND_ABOVE",
            "BLOCK_MEDIUM_AND_ABOVE",
            "BLOCK_HIGH_AND_ABOVE",
            "BLOCK_HIGHER_AND_ABOVE",
            "BLOCK_VERY_HIGH_AND_ABOVE",
            "BLOCK_ONLY_EXTREMELY_HIGH"
          ],
          "enumDescriptions": [
            "Defaults to unspecified.",
            "Blocks Low and above confidence URL that is risky.",
            "Blocks Medium and above confidence URL that is risky.",
            "Blocks High and above confidence URL that is risky.",
            "Blocks Higher and above confidence URL that is risky.",
            "Blocks Very high and above confidence URL that is risky.",
            "Blocks Extremely high confidence URL that is risky."
          ],
          "type": "string"
        },
        "excludeDomains": {
          "description": "Optional. List of domains to be excluded from the search results. The default limit is 2000 domains.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1ExecutableCode": {
      "description": "Code generated by the model that is meant to be executed, and the result returned to the model. Generated when using the [CodeExecution] tool, in which the code will be automatically executed, and a corresponding [CodeExecutionResult] will also be generated.",
      "id": "GoogleCloudAiplatformV1beta1ExecutableCode",
      "properties": {
        "code": {
          "description": "Required. The code to be executed.",
          "type": "string"
        },
        "language": {
          "description": "Required. Programming language of the `code`.",
          "enum": [
            "LANGUAGE_UNSPECIFIED",
            "PYTHON"
          ],
          "enumDescriptions": [
            "Unspecified language. This value should not be used.",
            "Python >= 3.10, with numpy and simpy available."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1ExternalApi": {
      "description": "Retrieve from data source powered by external API for grounding. The external API is not owned by Google, but need to follow the pre-defined API spec.",
      "id": "GoogleCloudAiplatformV1beta1ExternalApi",
      "properties": {
        "apiAuth": {
          "$ref": "GoogleCloudAiplatformV1beta1ApiAuth",
          "deprecated": true,
          "description": "The authentication config to access the API. Deprecated. Please use auth_config instead."
        },
        "apiSpec": {
          "description": "The API spec that the external API implements.",
          "enum": [
            "API_SPEC_UNSPECIFIED",
            "SIMPLE_SEARCH",
            "ELASTIC_SEARCH"
          ],
          "enumDescriptions": [
            "Unspecified API spec. This value should not be used.",
            "Simple search API spec.",
            "Elastic search API spec."
          ],
          "type": "string"
        },
        "authConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1AuthConfig",
          "description": "The authentication config to access the API."
        },
        "elasticSearchParams": {
          "$ref": "GoogleCloudAiplatformV1beta1ExternalApiElasticSearchParams",
          "description": "Parameters for the elastic search API."
        },
        "endpoint": {
          "description": "The endpoint of the external API. The system will call the API at this endpoint to retrieve the data for grounding. Example: https://acme.com:443/search",
          "type": "string"
        },
        "simpleSearchParams": {
          "$ref": "GoogleCloudAiplatformV1beta1ExternalApiSimpleSearchParams",
          "description": "Parameters for the simple search API."
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1ExternalApiElasticSearchParams": {
      "description": "The search parameters to use for the ELASTIC_SEARCH spec.",
      "id": "GoogleCloudAiplatformV1beta1ExternalApiElasticSearchParams",
      "properties": {
        "index": {
          "description": "The ElasticSearch index to use.",
          "type": "string"
        },
        "numHits": {
          "description": "Optional. Number of hits (chunks) to request. When specified, it is passed to Elasticsearch as the `num_hits` param.",
          "format": "int32",
          "type": "integer"
        },
        "searchTemplate": {
          "description": "The ElasticSearch search template to use.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1ExternalApiSimpleSearchParams": {
      "description": "The search parameters to use for SIMPLE_SEARCH spec.",
      "id": "GoogleCloudAiplatformV1beta1ExternalApiSimpleSearchParams",
      "properties": {},
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1FileData": {
      "description": "URI-based data. A FileData message contains a URI pointing to data of a specific media type. It is used to represent images, audio, and video stored in Google Cloud Storage.",
      "id": "GoogleCloudAiplatformV1beta1FileData",
      "properties": {
        "displayName": {
          "description": "Optional. The display name of the file. Used to provide a label or filename to distinguish files. This field is only returned in `PromptMessage` for prompt management. It is used in the Gemini calls only when server side tools (`code_execution`, `google_search`, and `url_context`) are enabled.",
          "type": "string"
        },
        "fileUri": {
          "description": "Required. The URI of the file in Google Cloud Storage.",
          "type": "string"
        },
        "mimeType": {
          "description": "Required. The IANA standard MIME type of the source data.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1FunctionCall": {
      "description": "A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing the parameters and their values.",
      "id": "GoogleCloudAiplatformV1beta1FunctionCall",
      "properties": {
        "args": {
          "additionalProperties": {
            "description": "Properties of the object.",
            "type": "any"
          },
          "description": "Optional. The function parameters and values in JSON object format. See [FunctionDeclaration.parameters] for parameter details.",
          "type": "object"
        },
        "id": {
          "description": "Optional. The unique id of the function call. If populated, the client to execute the `function_call` and return the response with the matching `id`.",
          "type": "string"
        },
        "name": {
          "description": "Optional. The name of the function to call. Matches [FunctionDeclaration.name].",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1FunctionCallingConfig": {
      "description": "Function calling config.",
      "id": "GoogleCloudAiplatformV1beta1FunctionCallingConfig",
      "properties": {
        "allowedFunctionNames": {
          "description": "Optional. Function names to call. Only set when the Mode is ANY. Function names should match [FunctionDeclaration.name]. With mode set to ANY, model will predict a function call from the set of function names provided.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mode": {
          "description": "Optional. Function calling mode.",
          "enum": [
            "MODE_UNSPECIFIED",
            "AUTO",
            "ANY",
            "NONE",
            "VALIDATED"
          ],
          "enumDescriptions": [
            "Unspecified function calling mode. This value should not be used.",
            "Default model behavior, model decides to predict either function calls or natural language response.",
            "Model is constrained to always predicting function calls only. If \"allowed_function_names\" are set, the predicted function calls will be limited to any one of \"allowed_function_names\", else the predicted function calls will be any one of the provided \"function_declarations\".",
            "Model will not predict any function calls. Model behavior is same as when not passing any function declarations.",
            "Model is constrained to predict either function calls or natural language response. If \"allowed_function_names\" are set, the predicted function calls will be limited to any one of \"allowed_function_names\", else the predicted function calls will be any one of the provided \"function_declarations\"."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1FunctionDeclaration": {
      "description": "Structured representation of a function declaration as defined by the [OpenAPI 3.0 specification](https://spec.openapis.org/oas/v3.0.3). Included in this declaration are the function name, description, parameters and response type. This FunctionDeclaration is a representation of a block of code that can be used as a `Tool` by the model and executed by the client.",
      "id": "GoogleCloudAiplatformV1beta1FunctionDeclaration",
      "properties": {
        "description": {
          "description": "Optional. Description and purpose of the function. Model uses it to decide how and whether to call the function.",
          "type": "string"
        },
        "name": {
          "description": "Required. The name of the function to call. Must start with a letter or an underscore. Must be a-z, A-Z, 0-9, or contain underscores, dots and dashes, with a maximum length of 64.",
          "type": "string"
        },
        "parameters": {
          "$ref": "GoogleCloudAiplatformV1beta1Schema",
          "description": "Optional. Describes the parameters to this function in JSON Schema Object format. Reflects the Open API 3.03 Parameter Object. string Key: the name of the parameter. Parameter names are case sensitive. Schema Value: the Schema defining the type used for the parameter. For function with no parameters, this can be left unset. Parameter names must start with a letter or an underscore and must only contain chars a-z, A-Z, 0-9, or underscores with a maximum length of 64. Example with 1 required and 1 optional parameter: type: OBJECT properties: param1: type: STRING param2: type: INTEGER required: - param1"
        },
        "parametersJsonSchema": {
          "description": "Optional. Describes the parameters to the function in JSON Schema format. The schema must describe an object where the properties are the parameters to the function. For example: ``` { \"type\": \"object\", \"properties\": { \"name\": { \"type\": \"string\" }, \"age\": { \"type\": \"integer\" } }, \"additionalProperties\": false, \"required\": [\"name\", \"age\"], \"propertyOrdering\": [\"name\", \"age\"] } ``` This field is mutually exclusive with `parameters`.",
          "type": "any"
        },
        "response": {
          "$ref": "GoogleCloudAiplatformV1beta1Schema",
          "description": "Optional. Describes the output from this function in JSON Schema format. Reflects the Open API 3.03 Response Object. The Schema defines the type used for the response value of the function."
        },
        "responseJsonSchema": {
          "description": "Optional. Describes the output from this function in JSON Schema format. The value specified by the schema is the response value of the function. This field is mutually exclusive with `response`.",
          "type": "any"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1FunctionResponse": {
      "description": "The result output from a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function is used as context to the model. This should contain the result of a [FunctionCall] made based on model prediction.",
      "id": "GoogleCloudAiplatformV1beta1FunctionResponse",
      "properties": {
        "id": {
          "description": "Optional. The id of the function call this response is for. Populated by the client to match the corresponding function call `id`.",
          "type": "string"
        },
        "name": {
          "description": "Required. The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name].",
          "type": "string"
        },
        "parts": {
          "description": "Optional. Ordered `Parts` that constitute a function response. Parts may have different IANA MIME types.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1FunctionResponsePart"
          },
          "type": "array"
        },
        "response": {
          "additionalProperties": {
            "description": "Properties of the object.",
            "type": "any"
          },
          "description": "Required. The function response in JSON object format. Use \"output\" key to specify function output and \"error\" key to specify error details (if any). If \"output\" and \"error\" keys are not specified, then whole \"response\" is treated as function output.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1FunctionResponseBlob": {
      "description": "Raw media bytes for function response. Text should not be sent as raw bytes, use the 'text' field.",
      "id": "GoogleCloudAiplatformV1beta1FunctionResponseBlob",
      "properties": {
        "data": {
          "description": "Required. Raw bytes.",
          "format": "byte",
          "type": "string"
        },
        "displayName": {
          "description": "Optional. Display name of the blob. Used to provide a label or filename to distinguish blobs. This field is only returned in PromptMessage for prompt management. It is currently used in the Gemini GenerateContent calls only when server side tools (code_execution, google_search, and url_context) are enabled.",
          "type": "string"
        },
        "mimeType": {
          "description": "Required. The IANA standard MIME type of the source data.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1FunctionResponseFileData": {
      "description": "URI based data for function response.",
      "id": "GoogleCloudAiplatformV1beta1FunctionResponseFileData",
      "properties": {
        "displayName": {
          "description": "Optional. Display name of the file data. Used to provide a label or filename to distinguish file datas. This field is only returned in PromptMessage for prompt management. It is currently used in the Gemini GenerateContent calls only when server side tools (code_execution, google_search, and url_context) are enabled.",
          "type": "string"
        },
        "fileUri": {
          "description": "Required. URI.",
          "type": "string"
        },
        "mimeType": {
          "description": "Required. The IANA standard MIME type of the source data.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1FunctionResponsePart": {
      "description": "A datatype containing media that is part of a `FunctionResponse` message. A `FunctionResponsePart` consists of data which has an associated datatype. A `FunctionResponsePart` can only contain one of the accepted types in `FunctionResponsePart.data`. A `FunctionResponsePart` must have a fixed IANA MIME type identifying the type and subtype of the media if the `inline_data` field is filled with raw bytes.",
      "id": "GoogleCloudAiplatformV1beta1FunctionResponsePart",
      "properties": {
        "fileData": {
          "$ref": "GoogleCloudAiplatformV1beta1FunctionResponseFileData",
          "description": "URI based data."
        },
        "inlineData": {
          "$ref": "GoogleCloudAiplatformV1beta1FunctionResponseBlob",
          "description": "Inline media bytes."
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GenerateContentRequest": {
      "description": "Request message for [PredictionService.GenerateContent].",
      "id": "GoogleCloudAiplatformV1beta1GenerateContentRequest",
      "properties": {
        "cachedContent": {
          "description": "Optional. The name of the cached content used as context to serve the prediction. Note: only used in explicit caching, where users can have control over caching (e.g. what content to cache) and enjoy guaranteed cost savings. Format: `projects/{project}/locations/{location}/cachedContents/{cachedContent}`",
          "type": "string"
        },
        "contents": {
          "description": "Required. The content of the current conversation with the model. For single-turn queries, this is a single instance. For multi-turn queries, this is a repeated field that contains conversation history + latest request.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1Content"
          },
          "type": "array"
        },
        "generationConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1GenerationConfig",
          "description": "Optional. Generation config."
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional. The labels with user-defined metadata for the request. It is used for billing and reporting only. Label keys and values can be no longer than 63 characters (Unicode codepoints) and can only contain lowercase letters, numeric characters, underscores, and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter.",
          "type": "object"
        },
        "modelArmorConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1ModelArmorConfig",
          "description": "Optional. Settings for prompt and response sanitization using the Model Armor service. If supplied, safety_settings must not be supplied."
        },
        "safetySettings": {
          "description": "Optional. Per request settings for blocking unsafe content. Enforced on GenerateContentResponse.candidates.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1SafetySetting"
          },
          "type": "array"
        },
        "systemInstruction": {
          "$ref": "GoogleCloudAiplatformV1beta1Content",
          "description": "Optional. The user provided system instructions for the model. Note: only text should be used in parts and content in each part will be in a separate paragraph."
        },
        "toolConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1ToolConfig",
          "description": "Optional. Tool config. This config is shared for all tools provided in the request."
        },
        "tools": {
          "description": "Optional. A list of `Tools` the model may use to generate the next response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1Tool"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GenerateContentResponse": {
      "description": "Response message for [PredictionService.GenerateContent].",
      "id": "GoogleCloudAiplatformV1beta1GenerateContentResponse",
      "properties": {
        "candidates": {
          "description": "Output only. Generated candidates.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1Candidate"
          },
          "readOnly": true,
          "type": "array"
        },
        "createTime": {
          "description": "Output only. Timestamp when the request is made to the server.",
          "format": "google-datetime",
          "readOnly": true,
          "type": "string"
        },
        "modelVersion": {
          "description": "Output only. The model version used to generate the response.",
          "readOnly": true,
          "type": "string"
        },
        "promptFeedback": {
          "$ref": "GoogleCloudAiplatformV1beta1GenerateContentResponsePromptFeedback",
          "description": "Output only. Content filter results for a prompt sent in the request. Note: Sent only in the first stream chunk. Only happens when no candidates were generated due to content violations.",
          "readOnly": true
        },
        "responseId": {
          "description": "Output only. response_id is used to identify each response. It is the encoding of the event_id.",
          "readOnly": true,
          "type": "string"
        },
        "usageMetadata": {
          "$ref": "GoogleCloudAiplatformV1beta1GenerateContentResponseUsageMetadata",
          "description": "Usage metadata about the response(s)."
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GenerateContentResponsePromptFeedback": {
      "description": "Content filter results for a prompt sent in the request. Note: This is sent only in the first stream chunk and only if no candidates were generated due to content violations.",
      "id": "GoogleCloudAiplatformV1beta1GenerateContentResponsePromptFeedback",
      "properties": {
        "blockReason": {
          "description": "Output only. The reason why the prompt was blocked.",
          "enum": [
            "BLOCKED_REASON_UNSPECIFIED",
            "SAFETY",
            "OTHER",
            "BLOCKLIST",
            "PROHIBITED_CONTENT",
            "MODEL_ARMOR",
            "IMAGE_SAFETY",
            "JAILBREAK"
          ],
          "enumDescriptions": [
            "The blocked reason is unspecified.",
            "The prompt was blocked for safety reasons.",
            "The prompt was blocked for other reasons. For example, it may be due to the prompt's language, or because it contains other harmful content.",
            "The prompt was blocked because it contains a term from the terminology blocklist.",
            "The prompt was blocked because it contains prohibited content.",
            "The prompt was blocked by Model Armor.",
            "The prompt was blocked because it contains content that is unsafe for image generation.",
            "The prompt was blocked as a jailbreak attempt."
          ],
          "readOnly": true,
          "type": "string"
        },
        "blockReasonMessage": {
          "description": "Output only. A readable message that explains the reason why the prompt was blocked.",
          "readOnly": true,
          "type": "string"
        },
        "safetyRatings": {
          "description": "Output only. A list of safety ratings for the prompt. There is one rating per category.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1SafetyRating"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GenerateContentResponseUsageMetadata": {
      "description": "Usage metadata about the content generation request and response. This message provides a detailed breakdown of token usage and other relevant metrics.",
      "id": "GoogleCloudAiplatformV1beta1GenerateContentResponseUsageMetadata",
      "properties": {
        "cacheTokensDetails": {
          "description": "Output only. A detailed breakdown of the token count for each modality in the cached content.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1ModalityTokenCount"
          },
          "readOnly": true,
          "type": "array"
        },
        "cachedContentTokenCount": {
          "description": "Output only. The number of tokens in the cached content that was used for this request.",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "candidatesTokenCount": {
          "description": "The total number of tokens in the generated candidates.",
          "format": "int32",
          "type": "integer"
        },
        "candidatesTokensDetails": {
          "description": "Output only. A detailed breakdown of the token count for each modality in the generated candidates.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1ModalityTokenCount"
          },
          "readOnly": true,
          "type": "array"
        },
        "promptTokenCount": {
          "description": "The total number of tokens in the prompt. This includes any text, images, or other media provided in the request. When `cached_content` is set, this also includes the number of tokens in the cached content.",
          "format": "int32",
          "type": "integer"
        },
        "promptTokensDetails": {
          "description": "Output only. A detailed breakdown of the token count for each modality in the prompt.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1ModalityTokenCount"
          },
          "readOnly": true,
          "type": "array"
        },
        "thoughtsTokenCount": {
          "description": "Output only. The number of tokens that were part of the model's generated \"thoughts\" output, if applicable.",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "toolUsePromptTokenCount": {
          "description": "Output only. The number of tokens in the results from tool executions, which are provided back to the model as input, if applicable.",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "toolUsePromptTokensDetails": {
          "description": "Output only. A detailed breakdown by modality of the token counts from the results of tool executions, which are provided back to the model as input.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1ModalityTokenCount"
          },
          "readOnly": true,
          "type": "array"
        },
        "totalTokenCount": {
          "description": "The total number of tokens for the entire request. This is the sum of `prompt_token_count`, `candidates_token_count`, `tool_use_prompt_token_count`, and `thoughts_token_count`.",
          "format": "int32",
          "type": "integer"
        },
        "trafficType": {
          "description": "Output only. The traffic type for this request.",
          "enum": [
            "TRAFFIC_TYPE_UNSPECIFIED",
            "ON_DEMAND",
            "PROVISIONED_THROUGHPUT"
          ],
          "enumDescriptions": [
            "Unspecified request traffic type.",
            "The request was processed using Pay-As-You-Go quota.",
            "Type for Provisioned Throughput traffic."
          ],
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GenerationConfig": {
      "description": "Configuration for content generation. This message contains all the parameters that control how the model generates content. It allows you to influence the randomness, length, and structure of the output.",
      "id": "GoogleCloudAiplatformV1beta1GenerationConfig",
      "properties": {
        "audioTimestamp": {
          "description": "Optional. If enabled, audio timestamps will be included in the request to the model. This can be useful for synchronizing audio with other modalities in the response.",
          "type": "boolean"
        },
        "candidateCount": {
          "description": "Optional. The number of candidate responses to generate. A higher `candidate_count` can provide more options to choose from, but it also consumes more resources. This can be useful for generating a variety of responses and selecting the best one.",
          "format": "int32",
          "type": "integer"
        },
        "enableAffectiveDialog": {
          "description": "Optional. If enabled, the model will detect emotions and adapt its responses accordingly. For example, if the model detects that the user is frustrated, it may provide a more empathetic response.",
          "type": "boolean"
        },
        "frequencyPenalty": {
          "description": "Optional. Penalizes tokens based on their frequency in the generated text. A positive value helps to reduce the repetition of words and phrases. Valid values can range from [-2.0, 2.0].",
          "format": "float",
          "type": "number"
        },
        "imageConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1ImageConfig",
          "description": "Optional. Config for image generation features."
        },
        "logprobs": {
          "description": "Optional. The number of top log probabilities to return for each token. This can be used to see which other tokens were considered likely candidates for a given position. A higher value will return more options, but it will also increase the size of the response.",
          "format": "int32",
          "type": "integer"
        },
        "maxOutputTokens": {
          "description": "Optional. The maximum number of tokens to generate in the response. A token is approximately four characters. The default value varies by model. This parameter can be used to control the length of the generated text and prevent overly long responses.",
          "format": "int32",
          "type": "integer"
        },
        "mediaResolution": {
          "description": "Optional. The token resolution at which input media content is sampled. This is used to control the trade-off between the quality of the response and the number of tokens used to represent the media. A higher resolution allows the model to perceive more detail, which can lead to a more nuanced response, but it will also use more tokens. This does not affect the image dimensions sent to the model.",
          "enum": [
            "MEDIA_RESOLUTION_UNSPECIFIED",
            "MEDIA_RESOLUTION_LOW",
            "MEDIA_RESOLUTION_MEDIUM",
            "MEDIA_RESOLUTION_HIGH"
          ],
          "enumDescriptions": [
            "Media resolution has not been set.",
            "Media resolution set to low (64 tokens).",
            "Media resolution set to medium (256 tokens).",
            "Media resolution set to high (zoomed reframing with 256 tokens)."
          ],
          "type": "string"
        },
        "modelConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1GenerationConfigModelConfig",
          "deprecated": true,
          "description": "Optional. Config for model selection."
        },
        "presencePenalty": {
          "description": "Optional. Penalizes tokens that have already appeared in the generated text. A positive value encourages the model to generate more diverse and less repetitive text. Valid values can range from [-2.0, 2.0].",
          "format": "float",
          "type": "number"
        },
        "responseJsonSchema": {
          "description": "Optional. When this field is set, response_schema must be omitted and response_mime_type must be set to `application/json`.",
          "type": "any"
        },
        "responseLogprobs": {
          "description": "Optional. If set to true, the log probabilities of the output tokens are returned. Log probabilities are the logarithm of the probability of a token appearing in the output. A higher log probability means the token is more likely to be generated. This can be useful for analyzing the model's confidence in its own output and for debugging.",
          "type": "boolean"
        },
        "responseMimeType": {
          "description": "Optional. The IANA standard MIME type of the response. The model will generate output that conforms to this MIME type. Supported values include 'text/plain' (default) and 'application/json'. The model needs to be prompted to output the appropriate response type, otherwise the behavior is undefined. This is a preview feature.",
          "type": "string"
        },
        "responseModalities": {
          "description": "Optional. The modalities of the response. The model will generate a response that includes all the specified modalities. For example, if this is set to `[TEXT, IMAGE]`, the response will include both text and an image.",
          "items": {
            "enum": [
              "MODALITY_UNSPECIFIED",
              "TEXT",
              "IMAGE",
              "AUDIO"
            ],
            "enumDescriptions": [
              "Unspecified modality. Will be processed as text.",
              "Text modality.",
              "Image modality.",
              "Audio modality."
            ],
            "type": "string"
          },
          "type": "array"
        },
        "responseSchema": {
          "$ref": "GoogleCloudAiplatformV1beta1Schema",
          "description": "Optional. Lets you to specify a schema for the model's response, ensuring that the output conforms to a particular structure. This is useful for generating structured data such as JSON. The schema is a subset of the [OpenAPI 3.0 schema object](https://spec.openapis.org/oas/v3.0.3#schema) object. When this field is set, you must also set the `response_mime_type` to `application/json`."
        },
        "routingConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1GenerationConfigRoutingConfig",
          "description": "Optional. Routing configuration."
        },
        "seed": {
          "description": "Optional. A seed for the random number generator. By setting a seed, you can make the model's output mostly deterministic. For a given prompt and parameters (like temperature, top_p, etc.), the model will produce the same response every time. However, it's not a guaranteed absolute deterministic behavior. This is different from parameters like `temperature`, which control the *level* of randomness. `seed` ensures that the \"random\" choices the model makes are the same on every run, making it essential for testing and ensuring reproducible results.",
          "format": "int32",
          "type": "integer"
        },
        "speechConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1SpeechConfig",
          "description": "Optional. The speech generation config."
        },
        "stopSequences": {
          "description": "Optional. A list of character sequences that will stop the model from generating further tokens. If a stop sequence is generated, the output will end at that point. This is useful for controlling the length and structure of the output. For example, you can use [\"\\n\", \"###\"] to stop generation at a new line or a specific marker.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "temperature": {
          "description": "Optional. Controls the randomness of the output. A higher temperature results in more creative and diverse responses, while a lower temperature makes the output more predictable and focused. The valid range is (0.0, 2.0].",
          "format": "float",
          "type": "number"
        },
        "thinkingConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1GenerationConfigThinkingConfig",
          "description": "Optional. Configuration for thinking features. An error will be returned if this field is set for models that don't support thinking."
        },
        "topK": {
          "description": "Optional. Specifies the top-k sampling threshold. The model considers only the top k most probable tokens for the next token. This can be useful for generating more coherent and less random text. For example, a `top_k` of 40 means the model will choose the next word from the 40 most likely words.",
          "format": "float",
          "type": "number"
        },
        "topP": {
          "description": "Optional. Specifies the nucleus sampling threshold. The model considers only the smallest set of tokens whose cumulative probability is at least `top_p`. This helps generate more diverse and less repetitive responses. For example, a `top_p` of 0.9 means the model considers tokens until the cumulative probability of the tokens to select from reaches 0.9. It's recommended to adjust either temperature or `top_p`, but not both.",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GenerationConfigModelConfig": {
      "description": "Config for model selection.",
      "id": "GoogleCloudAiplatformV1beta1GenerationConfigModelConfig",
      "properties": {
        "featureSelectionPreference": {
          "description": "Required. Feature selection preference.",
          "enum": [
            "FEATURE_SELECTION_PREFERENCE_UNSPECIFIED",
            "PRIORITIZE_QUALITY",
            "BALANCED",
            "PRIORITIZE_COST"
          ],
          "enumDescriptions": [
            "Unspecified feature selection preference.",
            "Prefer higher quality over lower cost.",
            "Balanced feature selection preference.",
            "Prefer lower cost over higher quality."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GenerationConfigRoutingConfig": {
      "description": "The configuration for routing the request to a specific model. This can be used to control which model is used for the generation, either automatically or by specifying a model name.",
      "id": "GoogleCloudAiplatformV1beta1GenerationConfigRoutingConfig",
      "properties": {
        "autoMode": {
          "$ref": "GoogleCloudAiplatformV1beta1GenerationConfigRoutingConfigAutoRoutingMode",
          "description": "In this mode, the model is selected automatically based on the content of the request."
        },
        "manualMode": {
          "$ref": "GoogleCloudAiplatformV1beta1GenerationConfigRoutingConfigManualRoutingMode",
          "description": "In this mode, the model is specified manually."
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GenerationConfigRoutingConfigAutoRoutingMode": {
      "description": "The configuration for automated routing. When automated routing is specified, the routing will be determined by the pretrained routing model and customer provided model routing preference.",
      "id": "GoogleCloudAiplatformV1beta1GenerationConfigRoutingConfigAutoRoutingMode",
      "properties": {
        "modelRoutingPreference": {
          "description": "The model routing preference.",
          "enum": [
            "UNKNOWN",
            "PRIORITIZE_QUALITY",
            "BALANCED",
            "PRIORITIZE_COST"
          ],
          "enumDescriptions": [
            "Unspecified model routing preference.",
            "The model will be selected to prioritize the quality of the response.",
            "The model will be selected to balance quality and cost.",
            "The model will be selected to prioritize the cost of the request."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GenerationConfigRoutingConfigManualRoutingMode": {
      "description": "The configuration for manual routing. When manual routing is specified, the model will be selected based on the model name provided.",
      "id": "GoogleCloudAiplatformV1beta1GenerationConfigRoutingConfigManualRoutingMode",
      "properties": {
        "modelName": {
          "description": "The name of the model to use. Only public LLM models are accepted.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GenerationConfigThinkingConfig": {
      "description": "Configuration for the model's thinking features. \"Thinking\" is a process where the model breaks down a complex task into smaller, manageable steps. This allows the model to reason about the task, plan its approach, and execute the plan to generate a high-quality response.",
      "id": "GoogleCloudAiplatformV1beta1GenerationConfigThinkingConfig",
      "properties": {
        "includeThoughts": {
          "description": "Optional. If true, the model will include its thoughts in the response. \"Thoughts\" are the intermediate steps the model takes to arrive at the final response. They can provide insights into the model's reasoning process and help with debugging. If this is true, thoughts are returned only when available.",
          "type": "boolean"
        },
        "thinkingBudget": {
          "description": "Optional. The token budget for the model's thinking process. The model will make a best effort to stay within this budget. This can be used to control the trade-off between response quality and latency.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GoogleMaps": {
      "description": "Tool to retrieve public maps data for grounding, powered by Google.",
      "id": "GoogleCloudAiplatformV1beta1GoogleMaps",
      "properties": {
        "enableWidget": {
          "description": "Optional. If true, include the widget context token in the response.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GoogleSearchRetrieval": {
      "description": "Tool to retrieve public web data for grounding, powered by Google.",
      "id": "GoogleCloudAiplatformV1beta1GoogleSearchRetrieval",
      "properties": {
        "dynamicRetrievalConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1DynamicRetrievalConfig",
          "description": "Specifies the dynamic retrieval configuration for the given source."
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GroundingChunk": {
      "description": "A piece of evidence that supports a claim made by the model. This is used to show a citation for a claim made by the model. When grounding is enabled, the model returns a `GroundingChunk` that contains a reference to the source of the information.",
      "id": "GoogleCloudAiplatformV1beta1GroundingChunk",
      "properties": {
        "maps": {
          "$ref": "GoogleCloudAiplatformV1beta1GroundingChunkMaps",
          "description": "A grounding chunk from Google Maps. See the `Maps` message for details."
        },
        "retrievedContext": {
          "$ref": "GoogleCloudAiplatformV1beta1GroundingChunkRetrievedContext",
          "description": "A grounding chunk from a data source retrieved by a retrieval tool, such as Vertex AI Search. See the `RetrievedContext` message for details"
        },
        "web": {
          "$ref": "GoogleCloudAiplatformV1beta1GroundingChunkWeb",
          "description": "A grounding chunk from a web page, typically from Google Search. See the `Web` message for details."
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GroundingChunkMaps": {
      "description": "A `Maps` chunk is a piece of evidence that comes from Google Maps. It contains information about a place, such as its name, address, and reviews. This is used to provide the user with rich, location-based information.",
      "id": "GoogleCloudAiplatformV1beta1GroundingChunkMaps",
      "properties": {
        "placeAnswerSources": {
          "$ref": "GoogleCloudAiplatformV1beta1GroundingChunkMapsPlaceAnswerSources",
          "description": "The sources that were used to generate the place answer. This includes review snippets and photos that were used to generate the answer, as well as URIs to flag content."
        },
        "placeId": {
          "description": "This Place's resource name, in `places/{place_id}` format. This can be used to look up the place in the Google Maps API.",
          "type": "string"
        },
        "text": {
          "description": "The text of the place answer.",
          "type": "string"
        },
        "title": {
          "description": "The title of the place.",
          "type": "string"
        },
        "uri": {
          "description": "The URI of the place.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GroundingChunkMapsPlaceAnswerSources": {
      "description": "The sources that were used to generate the place answer. This includes review snippets and photos that were used to generate the answer, as well as URIs to flag content.",
      "id": "GoogleCloudAiplatformV1beta1GroundingChunkMapsPlaceAnswerSources",
      "properties": {
        "reviewSnippets": {
          "description": "Snippets of reviews that were used to generate the answer.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1GroundingChunkMapsPlaceAnswerSourcesReviewSnippet"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GroundingChunkMapsPlaceAnswerSourcesReviewSnippet": {
      "description": "A review snippet that is used to generate the answer.",
      "id": "GoogleCloudAiplatformV1beta1GroundingChunkMapsPlaceAnswerSourcesReviewSnippet",
      "properties": {
        "googleMapsUri": {
          "description": "A link to show the review on Google Maps.",
          "type": "string"
        },
        "reviewId": {
          "description": "The ID of the review that is being referenced.",
          "type": "string"
        },
        "title": {
          "description": "The title of the review.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GroundingChunkRetrievedContext": {
      "description": "Context retrieved from a data source to ground the model's response. This is used when a retrieval tool fetches information from a user-provided corpus or a public dataset.",
      "id": "GoogleCloudAiplatformV1beta1GroundingChunkRetrievedContext",
      "properties": {
        "documentName": {
          "description": "Output only. The full resource name of the referenced Vertex AI Search document. This is used to identify the specific document that was retrieved. The format is `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}`.",
          "readOnly": true,
          "type": "string"
        },
        "ragChunk": {
          "$ref": "GoogleCloudAiplatformV1beta1RagChunk",
          "description": "Additional context for a Retrieval-Augmented Generation (RAG) retrieval result. This is populated only when the RAG retrieval tool is used."
        },
        "text": {
          "description": "The content of the retrieved data source.",
          "type": "string"
        },
        "title": {
          "description": "The title of the retrieved data source.",
          "type": "string"
        },
        "uri": {
          "description": "The URI of the retrieved data source.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GroundingChunkWeb": {
      "description": "A `Web` chunk is a piece of evidence that comes from a web page. It contains the URI of the web page, the title of the page, and the domain of the page. This is used to provide the user with a link to the source of the information.",
      "id": "GoogleCloudAiplatformV1beta1GroundingChunkWeb",
      "properties": {
        "domain": {
          "description": "The domain of the web page that contains the evidence. This can be used to filter out low-quality sources.",
          "type": "string"
        },
        "title": {
          "description": "The title of the web page that contains the evidence.",
          "type": "string"
        },
        "uri": {
          "description": "The URI of the web page that contains the evidence.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GroundingMetadata": {
      "description": "Information about the sources that support the content of a response. When grounding is enabled, the model returns citations for claims in the response. This object contains the retrieved sources.",
      "id": "GoogleCloudAiplatformV1beta1GroundingMetadata",
      "properties": {
        "googleMapsWidgetContextToken": {
          "description": "Optional. Output only. A token that can be used to render a Google Maps widget with the contextual data. This field is populated only when the grounding source is Google Maps.",
          "readOnly": true,
          "type": "string"
        },
        "groundingChunks": {
          "description": "A list of supporting references retrieved from the grounding source. This field is populated when the grounding source is Google Search, Vertex AI Search, or Google Maps.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1GroundingChunk"
          },
          "type": "array"
        },
        "groundingSupports": {
          "description": "Optional. A list of grounding supports that connect the generated content to the grounding chunks. This field is populated when the grounding source is Google Search or Vertex AI Search.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1GroundingSupport"
          },
          "type": "array"
        },
        "retrievalMetadata": {
          "$ref": "GoogleCloudAiplatformV1beta1RetrievalMetadata",
          "description": "Optional. Output only. Metadata related to the retrieval grounding source.",
          "readOnly": true
        },
        "retrievalQueries": {
          "description": "Optional. The queries that were executed by the retrieval tools. This field is populated only when the grounding source is a retrieval tool, such as Vertex AI Search.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "searchEntryPoint": {
          "$ref": "GoogleCloudAiplatformV1beta1SearchEntryPoint",
          "description": "Optional. A web search entry point that can be used to display search results. This field is populated only when the grounding source is Google Search."
        },
        "sourceFlaggingUris": {
          "description": "Optional. Output only. A list of URIs that can be used to flag a place or review for inappropriate content. This field is populated only when the grounding source is Google Maps.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1GroundingMetadataSourceFlaggingUri"
          },
          "readOnly": true,
          "type": "array"
        },
        "webSearchQueries": {
          "description": "Optional. The web search queries that were used to generate the content. This field is populated only when the grounding source is Google Search.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GroundingMetadataSourceFlaggingUri": {
      "description": "A URI that can be used to flag a place or review for inappropriate content. This is populated only when the grounding source is Google Maps.",
      "id": "GoogleCloudAiplatformV1beta1GroundingMetadataSourceFlaggingUri",
      "properties": {
        "flagContentUri": {
          "description": "The URI that can be used to flag the content.",
          "type": "string"
        },
        "sourceId": {
          "description": "The ID of the place or review.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1GroundingSupport": {
      "description": "A collection of supporting references for a segment of the model's response.",
      "id": "GoogleCloudAiplatformV1beta1GroundingSupport",
      "properties": {
        "confidenceScores": {
          "description": "The confidence scores for the support references. This list is parallel to the `grounding_chunk_indices` list. A score is a value between 0.0 and 1.0, with a higher score indicating a higher confidence that the reference supports the claim. For Gemini 2.0 and before, this list has the same size as `grounding_chunk_indices`. For Gemini 2.5 and later, this list is empty and should be ignored.",
          "items": {
            "format": "float",
            "type": "number"
          },
          "type": "array"
        },
        "groundingChunkIndices": {
          "description": "A list of indices into the `grounding_chunks` field of the `GroundingMetadata` message. These indices specify which grounding chunks support the claim made in the content segment. For example, if this field has the values `[1, 3]`, it means that `grounding_chunks[1]` and `grounding_chunks[3]` are the sources for the claim in the content segment.",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "segment": {
          "$ref": "GoogleCloudAiplatformV1beta1Segment",
          "description": "The content segment that this support message applies to."
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1ImageConfig": {
      "description": "Configuration for image generation. This message allows you to control various aspects of image generation, such as the output format, aspect ratio, and whether the model can generate images of people.",
      "id": "GoogleCloudAiplatformV1beta1ImageConfig",
      "properties": {
        "aspectRatio": {
          "description": "Optional. The desired aspect ratio for the generated images. The following aspect ratios are supported: \"1:1\" \"2:3\", \"3:2\" \"3:4\", \"4:3\" \"4:5\", \"5:4\" \"9:16\", \"16:9\" \"21:9\"",
          "type": "string"
        },
        "imageOutputOptions": {
          "$ref": "GoogleCloudAiplatformV1beta1ImageConfigImageOutputOptions",
          "description": "Optional. The image output format for generated images."
        },
        "personGeneration": {
          "description": "Optional. Controls whether the model can generate people.",
          "enum": [
            "PERSON_GENERATION_UNSPECIFIED",
            "ALLOW_ALL",
            "ALLOW_ADULT",
            "ALLOW_NONE"
          ],
          "enumDescriptions": [
            "The default behavior is unspecified. The model will decide whether to generate images of people.",
            "Allows the model to generate images of people, including adults and children.",
            "Allows the model to generate images of adults, but not children.",
            "Prevents the model from generating images of people."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1ImageConfigImageOutputOptions": {
      "description": "The image output format for generated images.",
      "id": "GoogleCloudAiplatformV1beta1ImageConfigImageOutputOptions",
      "properties": {
        "compressionQuality": {
          "description": "Optional. The compression quality of the output image.",
          "format": "int32",
          "type": "integer"
        },
        "mimeType": {
          "description": "Optional. The image format that the output should be saved as.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1LogprobsResult": {
      "description": "The log probabilities of the tokens generated by the model. This is useful for understanding the model's confidence in its predictions and for debugging. For example, you can use log probabilities to identify when the model is making a less confident prediction or to explore alternative responses that the model considered. A low log probability can also indicate that the model is \"hallucinating\" or generating factually incorrect information.",
      "id": "GoogleCloudAiplatformV1beta1LogprobsResult",
      "properties": {
        "chosenCandidates": {
          "description": "A list of the chosen candidate tokens at each decoding step. The length of this list is equal to the total number of decoding steps. Note that the chosen candidate might not be in `top_candidates`.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1LogprobsResultCandidate"
          },
          "type": "array"
        },
        "topCandidates": {
          "description": "A list of the top candidate tokens at each decoding step. The length of this list is equal to the total number of decoding steps.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1LogprobsResultTopCandidates"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1LogprobsResultCandidate": {
      "description": "A single token and its associated log probability.",
      "id": "GoogleCloudAiplatformV1beta1LogprobsResultCandidate",
      "properties": {
        "logProbability": {
          "description": "The log probability of this token. A higher value indicates that the model was more confident in this token. The log probability can be used to assess the relative likelihood of different tokens and to identify when the model is uncertain.",
          "format": "float",
          "type": "number"
        },
        "token": {
          "description": "The token's string representation.",
          "type": "string"
        },
        "tokenId": {
          "description": "The token's numerical ID. While the `token` field provides the string representation of the token, the `token_id` is the numerical representation that the model uses internally. This can be useful for developers who want to build custom logic based on the model's vocabulary.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1LogprobsResultTopCandidates": {
      "description": "A list of the top candidate tokens and their log probabilities at each decoding step. This can be used to see what other tokens the model considered.",
      "id": "GoogleCloudAiplatformV1beta1LogprobsResultTopCandidates",
      "properties": {
        "candidates": {
          "description": "The list of candidate tokens, sorted by log probability in descending order.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1LogprobsResultCandidate"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1ModalityTokenCount": {
      "description": "Represents a breakdown of token usage by modality. This message is used in CountTokensResponse and GenerateContentResponse.UsageMetadata to provide a detailed view of how many tokens are used by each modality (e.g., text, image, video) in a request. This is particularly useful for multimodal models, allowing you to track and manage token consumption for billing and quota purposes.",
      "id": "GoogleCloudAiplatformV1beta1ModalityTokenCount",
      "properties": {
        "modality": {
          "description": "The modality that this token count applies to.",
          "enum": [
            "MODALITY_UNSPECIFIED",
            "TEXT",
            "IMAGE",
            "VIDEO",
            "AUDIO",
            "DOCUMENT"
          ],
          "enumDescriptions": [
            "When a modality is not specified, it is treated as `TEXT`.",
            "The `Part` contains plain text.",
            "The `Part` contains an image.",
            "The `Part` contains a video.",
            "The `Part` contains audio.",
            "The `Part` contains a document, such as a PDF."
          ],
          "type": "string"
        },
        "tokenCount": {
          "description": "The number of tokens counted for this modality.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1ModelArmorConfig": {
      "description": "Configuration for Model Armor. Model Armor is a Google Cloud service that provides safety and security filtering for prompts and responses. It helps protect your AI applications from risks such as harmful content, sensitive data leakage, and prompt injection attacks.",
      "id": "GoogleCloudAiplatformV1beta1ModelArmorConfig",
      "properties": {
        "promptTemplateName": {
          "description": "Optional. The resource name of the Model Armor template to use for prompt screening. A Model Armor template is a set of customized filters and thresholds that define how Model Armor screens content. If specified, Model Armor will use this template to check the user's prompt for safety and security risks before it is sent to the model. The name must be in the format `projects/{project}/locations/{location}/templates/{template}`.",
          "type": "string"
        },
        "responseTemplateName": {
          "description": "Optional. The resource name of the Model Armor template to use for response screening. A Model Armor template is a set of customized filters and thresholds that define how Model Armor screens content. If specified, Model Armor will use this template to check the model's response for safety and security risks before it is returned to the user. The name must be in the format `projects/{project}/locations/{location}/templates/{template}`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1MultiSpeakerVoiceConfig": {
      "description": "Configuration for a multi-speaker text-to-speech request.",
      "id": "GoogleCloudAiplatformV1beta1MultiSpeakerVoiceConfig",
      "properties": {
        "speakerVoiceConfigs": {
          "description": "Required. A list of configurations for the voices of the speakers. Exactly two speaker voice configurations must be provided.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1SpeakerVoiceConfig"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1Part": {
      "description": "A datatype containing media that is part of a multi-part Content message. A `Part` consists of data which has an associated datatype. A `Part` can only contain one of the accepted types in `Part.data`. For media types that are not text, `Part` must have a fixed IANA MIME type identifying the type and subtype of the media if `inline_data` or `file_data` field is filled with raw bytes.",
      "id": "GoogleCloudAiplatformV1beta1Part",
      "properties": {
        "codeExecutionResult": {
          "$ref": "GoogleCloudAiplatformV1beta1CodeExecutionResult",
          "description": "Optional. The result of executing the ExecutableCode."
        },
        "executableCode": {
          "$ref": "GoogleCloudAiplatformV1beta1ExecutableCode",
          "description": "Optional. Code generated by the model that is intended to be executed."
        },
        "fileData": {
          "$ref": "GoogleCloudAiplatformV1beta1FileData",
          "description": "Optional. The URI-based data of the part. This can be used to include files from Google Cloud Storage."
        },
        "functionCall": {
          "$ref": "GoogleCloudAiplatformV1beta1FunctionCall",
          "description": "Optional. A predicted function call returned from the model. This contains the name of the function to call and the arguments to pass to the function."
        },
        "functionResponse": {
          "$ref": "GoogleCloudAiplatformV1beta1FunctionResponse",
          "description": "Optional. The result of a function call. This is used to provide the model with the result of a function call that it predicted."
        },
        "inlineData": {
          "$ref": "GoogleCloudAiplatformV1beta1Blob",
          "description": "Optional. The inline data content of the part. This can be used to include images, audio, or video in a request."
        },
        "text": {
          "description": "Optional. The text content of the part.",
          "type": "string"
        },
        "thought": {
          "description": "Optional. Indicates whether the `part` represents the model's thought process or reasoning.",
          "type": "boolean"
        },
        "thoughtSignature": {
          "description": "Optional. An opaque signature for the thought so it can be reused in subsequent requests.",
          "format": "byte",
          "type": "string"
        },
        "videoMetadata": {
          "$ref": "GoogleCloudAiplatformV1beta1VideoMetadata",
          "description": "Optional. Video metadata. The metadata should only be specified while the video data is presented in inline_data or file_data."
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1PrebuiltVoiceConfig": {
      "description": "Configuration for a prebuilt voice.",
      "id": "GoogleCloudAiplatformV1beta1PrebuiltVoiceConfig",
      "properties": {
        "voiceName": {
          "description": "The name of the prebuilt voice to use.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1RagChunk": {
      "description": "A RagChunk includes the content of a chunk of a RagFile, and associated metadata.",
      "id": "GoogleCloudAiplatformV1beta1RagChunk",
      "properties": {
        "pageSpan": {
          "$ref": "GoogleCloudAiplatformV1beta1RagChunkPageSpan",
          "description": "If populated, represents where the chunk starts and ends in the document."
        },
        "text": {
          "description": "The content of the chunk.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1RagChunkPageSpan": {
      "description": "Represents where the chunk starts and ends in the document.",
      "id": "GoogleCloudAiplatformV1beta1RagChunkPageSpan",
      "properties": {
        "firstPage": {
          "description": "Page where chunk starts in the document. Inclusive. 1-indexed.",
          "format": "int32",
          "type": "integer"
        },
        "lastPage": {
          "description": "Page where chunk ends in the document. Inclusive. 1-indexed.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1RagRetrievalConfig": {
      "description": "Specifies the context retrieval config.",
      "id": "GoogleCloudAiplatformV1beta1RagRetrievalConfig",
      "properties": {
        "filter": {
          "$ref": "GoogleCloudAiplatformV1beta1RagRetrievalConfigFilter",
          "description": "Optional. Config for filters."
        },
        "hybridSearch": {
          "$ref": "GoogleCloudAiplatformV1beta1RagRetrievalConfigHybridSearch",
          "description": "Optional. Config for Hybrid Search."
        },
        "ranking": {
          "$ref": "GoogleCloudAiplatformV1beta1RagRetrievalConfigRanking",
          "description": "Optional. Config for ranking and reranking."
        },
        "topK": {
          "description": "Optional. The number of contexts to retrieve.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1RagRetrievalConfigFilter": {
      "description": "Config for filters.",
      "id": "GoogleCloudAiplatformV1beta1RagRetrievalConfigFilter",
      "properties": {
        "metadataFilter": {
          "description": "Optional. String for metadata filtering.",
          "type": "string"
        },
        "vectorDistanceThreshold": {
          "description": "Optional. Only returns contexts with vector distance smaller than the threshold.",
          "format": "double",
          "type": "number"
        },
        "vectorSimilarityThreshold": {
          "description": "Optional. Only returns contexts with vector similarity larger than the threshold.",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1RagRetrievalConfigHybridSearch": {
      "description": "Config for Hybrid Search.",
      "id": "GoogleCloudAiplatformV1beta1RagRetrievalConfigHybridSearch",
      "properties": {
        "alpha": {
          "description": "Optional. Alpha value controls the weight between dense and sparse vector search results. The range is [0, 1], while 0 means sparse vector search only and 1 means dense vector search only. The default value is 0.5 which balances sparse and dense vector search equally.",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1RagRetrievalConfigRanking": {
      "description": "Config for ranking and reranking.",
      "id": "GoogleCloudAiplatformV1beta1RagRetrievalConfigRanking",
      "properties": {
        "llmRanker": {
          "$ref": "GoogleCloudAiplatformV1beta1RagRetrievalConfigRankingLlmRanker",
          "description": "Optional. Config for LlmRanker."
        },
        "rankService": {
          "$ref": "GoogleCloudAiplatformV1beta1RagRetrievalConfigRankingRankService",
          "description": "Optional. Config for Rank Service."
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1RagRetrievalConfigRankingLlmRanker": {
      "description": "Config for LlmRanker.",
      "id": "GoogleCloudAiplatformV1beta1RagRetrievalConfigRankingLlmRanker",
      "properties": {
        "modelName": {
          "description": "Optional. The model name used for ranking. See [Supported models](https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/inference#supported-models).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1RagRetrievalConfigRankingRankService": {
      "description": "Config for Rank Service.",
      "id": "GoogleCloudAiplatformV1beta1RagRetrievalConfigRankingRankService",
      "properties": {
        "modelName": {
          "description": "Optional. The model name of the rank service. Format: `semantic-ranker-512@latest`",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1Retrieval": {
      "description": "Defines a retrieval tool that model can call to access external knowledge.",
      "id": "GoogleCloudAiplatformV1beta1Retrieval",
      "properties": {
        "disableAttribution": {
          "deprecated": true,
          "description": "Optional. Deprecated. This option is no longer supported.",
          "type": "boolean"
        },
        "externalApi": {
          "$ref": "GoogleCloudAiplatformV1beta1ExternalApi",
          "description": "Use data source powered by external API for grounding."
        },
        "vertexAiSearch": {
          "$ref": "GoogleCloudAiplatformV1beta1VertexAISearch",
          "description": "Set to use data source powered by Vertex AI Search."
        },
        "vertexRagStore": {
          "$ref": "GoogleCloudAiplatformV1beta1VertexRagStore",
          "description": "Set to use data source powered by Vertex RAG store. User data is uploaded via the VertexRagDataService."
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1RetrievalConfig": {
      "description": "Retrieval config.",
      "id": "GoogleCloudAiplatformV1beta1RetrievalConfig",
      "properties": {
        "languageCode": {
          "description": "The language code of the user.",
          "type": "string"
        },
        "latLng": {
          "$ref": "LatLng",
          "description": "The location of the user."
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1RetrievalMetadata": {
      "description": "Metadata related to the retrieval grounding source. This is part of the `GroundingMetadata` returned when grounding is enabled.",
      "id": "GoogleCloudAiplatformV1beta1RetrievalMetadata",
      "properties": {
        "googleSearchDynamicRetrievalScore": {
          "description": "Optional. A score indicating how likely it is that a Google Search query could help answer the prompt. The score is in the range of `[0, 1]`. A score of 1 means the model is confident that a search will be helpful, and 0 means it is not. This score is populated only when Google Search grounding and dynamic retrieval are enabled. The score is used to determine whether to trigger a search.",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1SafetyRating": {
      "description": "A safety rating for a piece of content. The safety rating contains the harm category and the harm probability level.",
      "id": "GoogleCloudAiplatformV1beta1SafetyRating",
      "properties": {
        "blocked": {
          "description": "Output only. Indicates whether the content was blocked because of this rating.",
          "readOnly": true,
          "type": "boolean"
        },
        "category": {
          "description": "Output only. The harm category of this rating.",
          "enum": [
            "HARM_CATEGORY_UNSPECIFIED",
            "HARM_CATEGORY_HATE_SPEECH",
            "HARM_CATEGORY_DANGEROUS_CONTENT",
            "HARM_CATEGORY_HARASSMENT",
            "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            "HARM_CATEGORY_CIVIC_INTEGRITY",
            "HARM_CATEGORY_IMAGE_HATE",
            "HARM_CATEGORY_IMAGE_DANGEROUS_CONTENT",
            "HARM_CATEGORY_IMAGE_HARASSMENT",
            "HARM_CATEGORY_IMAGE_SEXUALLY_EXPLICIT",
            "HARM_CATEGORY_JAILBREAK"
          ],
          "enumDeprecated": [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false
          ],
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Content that promotes violence or incites hatred against individuals or groups based on certain attributes.",
            "Content that promotes, facilitates, or enables dangerous activities.",
            "Abusive, threatening, or content intended to bully, torment, or ridicule.",
            "Content that contains sexually explicit material.",
            "Deprecated: Election filter is not longer supported. The harm category is civic integrity.",
            "Images that contain hate speech.",
            "Images that contain dangerous content.",
            "Images that contain harassment.",
            "Images that contain sexually explicit content.",
            "Prompts designed to bypass safety filters."
          ],
          "readOnly": true,
          "type": "string"
        },
        "overwrittenThreshold": {
          "description": "Output only. The overwritten threshold for the safety category of Gemini 2.0 image out. If minors are detected in the output image, the threshold of each safety category will be overwritten if user sets a lower threshold.",
          "enum": [
            "HARM_BLOCK_THRESHOLD_UNSPECIFIED",
            "BLOCK_LOW_AND_ABOVE",
            "BLOCK_MEDIUM_AND_ABOVE",
            "BLOCK_ONLY_HIGH",
            "BLOCK_NONE",
            "OFF"
          ],
          "enumDescriptions": [
            "The harm block threshold is unspecified.",
            "Block content with a low harm probability or higher.",
            "Block content with a medium harm probability or higher.",
            "Block content with a high harm probability.",
            "Do not block any content, regardless of its harm probability.",
            "Turn off the safety filter entirely."
          ],
          "readOnly": true,
          "type": "string"
        },
        "probability": {
          "description": "Output only. The probability of harm for this category.",
          "enum": [
            "HARM_PROBABILITY_UNSPECIFIED",
            "NEGLIGIBLE",
            "LOW",
            "MEDIUM",
            "HIGH"
          ],
          "enumDescriptions": [
            "The harm probability is unspecified.",
            "The harm probability is negligible.",
            "The harm probability is low.",
            "The harm probability is medium.",
            "The harm probability is high."
          ],
          "readOnly": true,
          "type": "string"
        },
        "probabilityScore": {
          "description": "Output only. The probability score of harm for this category.",
          "format": "float",
          "readOnly": true,
          "type": "number"
        },
        "severity": {
          "description": "Output only. The severity of harm for this category.",
          "enum": [
            "HARM_SEVERITY_UNSPECIFIED",
            "HARM_SEVERITY_NEGLIGIBLE",
            "HARM_SEVERITY_LOW",
            "HARM_SEVERITY_MEDIUM",
            "HARM_SEVERITY_HIGH"
          ],
          "enumDescriptions": [
            "The harm severity is unspecified.",
            "The harm severity is negligible.",
            "The harm severity is low.",
            "The harm severity is medium.",
            "The harm severity is high."
          ],
          "readOnly": true,
          "type": "string"
        },
        "severityScore": {
          "description": "Output only. The severity score of harm for this category.",
          "format": "float",
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1SafetySetting": {
      "description": "A safety setting that affects the safety-blocking behavior. A SafetySetting consists of a harm category and a threshold for that category.",
      "id": "GoogleCloudAiplatformV1beta1SafetySetting",
      "properties": {
        "category": {
          "description": "Required. The harm category to be blocked.",
          "enum": [
            "HARM_CATEGORY_UNSPECIFIED",
            "HARM_CATEGORY_HATE_SPEECH",
            "HARM_CATEGORY_DANGEROUS_CONTENT",
            "HARM_CATEGORY_HARASSMENT",
            "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            "HARM_CATEGORY_CIVIC_INTEGRITY",
            "HARM_CATEGORY_IMAGE_HATE",
            "HARM_CATEGORY_IMAGE_DANGEROUS_CONTENT",
            "HARM_CATEGORY_IMAGE_HARASSMENT",
            "HARM_CATEGORY_IMAGE_SEXUALLY_EXPLICIT",
            "HARM_CATEGORY_JAILBREAK"
          ],
          "enumDeprecated": [
            false,
            false,
            false,
            false,
            false,
            true,
            false,
            false,
            false,
            false,
            false
          ],
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Content that promotes violence or incites hatred against individuals or groups based on certain attributes.",
            "Content that promotes, facilitates, or enables dangerous activities.",
            "Abusive, threatening, or content intended to bully, torment, or ridicule.",
            "Content that contains sexually explicit material.",
            "Deprecated: Election filter is not longer supported. The harm category is civic integrity.",
            "Images that contain hate speech.",
            "Images that contain dangerous content.",
            "Images that contain harassment.",
            "Images that contain sexually explicit content.",
            "Prompts designed to bypass safety filters."
          ],
          "type": "string"
        },
        "method": {
          "description": "Optional. The method for blocking content. If not specified, the default behavior is to use the probability score.",
          "enum": [
            "HARM_BLOCK_METHOD_UNSPECIFIED",
            "SEVERITY",
            "PROBABILITY"
          ],
          "enumDescriptions": [
            "The harm block method is unspecified.",
            "The harm block method uses both probability and severity scores.",
            "The harm block method uses the probability score."
          ],
          "type": "string"
        },
        "threshold": {
          "description": "Required. The threshold for blocking content. If the harm probability exceeds this threshold, the content will be blocked.",
          "enum": [
            "HARM_BLOCK_THRESHOLD_UNSPECIFIED",
            "BLOCK_LOW_AND_ABOVE",
            "BLOCK_MEDIUM_AND_ABOVE",
            "BLOCK_ONLY_HIGH",
            "BLOCK_NONE",
            "OFF"
          ],
          "enumDescriptions": [
            "The harm block threshold is unspecified.",
            "Block content with a low harm probability or higher.",
            "Block content with a medium harm probability or higher.",
            "Block content with a high harm probability.",
            "Do not block any content, regardless of its harm probability.",
            "Turn off the safety filter entirely."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1Schema": {
      "description": "Schema is used to define the format of input/output data. Represents a select subset of an [OpenAPI 3.0 schema object](https://spec.openapis.org/oas/v3.0.3#schema-object). More fields may be added in the future as needed.",
      "id": "GoogleCloudAiplatformV1beta1Schema",
      "properties": {
        "additionalProperties": {
          "description": "Optional. Can either be a boolean or an object; controls the presence of additional properties.",
          "type": "any"
        },
        "anyOf": {
          "description": "Optional. The value should be validated against any (one or more) of the subschemas in the list.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1Schema"
          },
          "type": "array"
        },
        "default": {
          "description": "Optional. Default value of the data.",
          "type": "any"
        },
        "defs": {
          "additionalProperties": {
            "$ref": "GoogleCloudAiplatformV1beta1Schema"
          },
          "description": "Optional. A map of definitions for use by `ref` Only allowed at the root of the schema.",
          "type": "object"
        },
        "description": {
          "description": "Optional. The description of the data.",
          "type": "string"
        },
        "enum": {
          "description": "Optional. Possible values of the element of primitive type with enum format. Examples: 1. We can define direction as : {type:STRING, format:enum, enum:[\"EAST\", NORTH\", \"SOUTH\", \"WEST\"]} 2. We can define apartment number as : {type:INTEGER, format:enum, enum:[\"101\", \"201\", \"301\"]}",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "example": {
          "description": "Optional. Example of the object. Will only populated when the object is the root.",
          "type": "any"
        },
        "format": {
          "description": "Optional. The format of the data. Supported formats: for NUMBER type: \"float\", \"double\" for INTEGER type: \"int32\", \"int64\" for STRING type: \"email\", \"byte\", etc",
          "type": "string"
        },
        "items": {
          "$ref": "GoogleCloudAiplatformV1beta1Schema",
          "description": "Optional. SCHEMA FIELDS FOR TYPE ARRAY Schema of the elements of Type.ARRAY."
        },
        "maxItems": {
          "description": "Optional. Maximum number of the elements for Type.ARRAY.",
          "format": "int64",
          "type": "string"
        },
        "maxLength": {
          "description": "Optional. Maximum length of the Type.STRING",
          "format": "int64",
          "type": "string"
        },
        "maxProperties": {
          "description": "Optional. Maximum number of the properties for Type.OBJECT.",
          "format": "int64",
          "type": "string"
        },
        "maximum": {
          "description": "Optional. Maximum value of the Type.INTEGER and Type.NUMBER",
          "format": "double",
          "type": "number"
        },
        "minItems": {
          "description": "Optional. Minimum number of the elements for Type.ARRAY.",
          "format": "int64",
          "type": "string"
        },
        "minLength": {
          "description": "Optional. SCHEMA FIELDS FOR TYPE STRING Minimum length of the Type.STRING",
          "format": "int64",
          "type": "string"
        },
        "minProperties": {
          "description": "Optional. Minimum number of the properties for Type.OBJECT.",
          "format": "int64",
          "type": "string"
        },
        "minimum": {
          "description": "Optional. SCHEMA FIELDS FOR TYPE INTEGER and NUMBER Minimum value of the Type.INTEGER and Type.NUMBER",
          "format": "double",
          "type": "number"
        },
        "nullable": {
          "description": "Optional. Indicates if the value may be null.",
          "type": "boolean"
        },
        "pattern": {
          "description": "Optional. Pattern of the Type.STRING to restrict a string to a regular expression.",
          "type": "string"
        },
        "properties": {
          "additionalProperties": {
            "$ref": "GoogleCloudAiplatformV1beta1Schema"
          },
          "description": "Optional. SCHEMA FIELDS FOR TYPE OBJECT Properties of Type.OBJECT.",
          "type": "object"
        },
        "propertyOrdering": {
          "description": "Optional. The order of the properties. Not a standard field in open api spec. Only used to support the order of the properties.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ref": {
          "description": "Optional. Allows indirect references between schema nodes. The value should be a valid reference to a child of the root `defs`. For example, the following schema defines a reference to a schema node named \"Pet\": type: object properties: pet: ref: #/defs/Pet defs: Pet: type: object properties: name: type: string The value of the \"pet\" property is a reference to the schema node named \"Pet\". See details in https://json-schema.org/understanding-json-schema/structuring",
          "type": "string"
        },
        "required": {
          "description": "Optional. Required properties of Type.OBJECT.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "title": {
          "description": "Optional. The title of the Schema.",
          "type": "string"
        },
        "type": {
          "description": "Optional. The type of the data.",
          "enum": [
            "TYPE_UNSPECIFIED",
            "STRING",
            "NUMBER",
            "INTEGER",
            "BOOLEAN",
            "ARRAY",
            "OBJECT",
            "NULL"
          ],
          "enumDescriptions": [
            "Not specified, should not be used.",
            "OpenAPI string type",
            "OpenAPI number type",
            "OpenAPI integer type",
            "OpenAPI boolean type",
            "OpenAPI array type",
            "OpenAPI object type",
            "Null type"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1SearchEntryPoint": {
      "description": "An entry point for displaying Google Search results. A `SearchEntryPoint` is populated when the grounding source for a model's response is Google Search. It provides information that you can use to display the search results in your application.",
      "id": "GoogleCloudAiplatformV1beta1SearchEntryPoint",
      "properties": {
        "renderedContent": {
          "description": "Optional. An HTML snippet that can be embedded in a web page or an application's webview. This snippet displays a search result, including the title, URL, and a brief description of the search result.",
          "type": "string"
        },
        "sdkBlob": {
          "description": "Optional. A base64-encoded JSON object that contains a list of search queries and their corresponding search URLs. This information can be used to build a custom search UI.",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1Segment": {
      "description": "A segment of the content.",
      "id": "GoogleCloudAiplatformV1beta1Segment",
      "properties": {
        "endIndex": {
          "description": "Output only. The end index of the segment in the `Part`, measured in bytes. This marks the end of the segment and is exclusive, meaning the segment includes content up to, but not including, the byte at this index.",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "partIndex": {
          "description": "Output only. The index of the `Part` object that this segment belongs to. This is useful for associating the segment with a specific part of the content.",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "startIndex": {
          "description": "Output only. The start index of the segment in the `Part`, measured in bytes. This marks the beginning of the segment and is inclusive, meaning the byte at this index is the first byte of the segment.",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "text": {
          "description": "Output only. The text of the segment.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1SpeakerVoiceConfig": {
      "description": "Configuration for a single speaker in a multi-speaker setup.",
      "id": "GoogleCloudAiplatformV1beta1SpeakerVoiceConfig",
      "properties": {
        "speaker": {
          "description": "Required. The name of the speaker. This should be the same as the speaker name used in the prompt.",
          "type": "string"
        },
        "voiceConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1VoiceConfig",
          "description": "Required. The configuration for the voice of this speaker."
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1SpeechConfig": {
      "description": "Configuration for speech generation.",
      "id": "GoogleCloudAiplatformV1beta1SpeechConfig",
      "properties": {
        "languageCode": {
          "description": "Optional. The language code (ISO 639-1) for the speech synthesis.",
          "type": "string"
        },
        "multiSpeakerVoiceConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1MultiSpeakerVoiceConfig",
          "description": "The configuration for a multi-speaker text-to-speech request. This field is mutually exclusive with `voice_config`."
        },
        "voiceConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1VoiceConfig",
          "description": "The configuration for the voice to use."
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1Tool": {
      "description": "Tool details that the model may use to generate response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model. A Tool object should contain exactly one type of Tool (e.g FunctionDeclaration, Retrieval or GoogleSearchRetrieval).",
      "id": "GoogleCloudAiplatformV1beta1Tool",
      "properties": {
        "codeExecution": {
          "$ref": "GoogleCloudAiplatformV1beta1ToolCodeExecution",
          "description": "Optional. CodeExecution tool type. Enables the model to execute code as part of generation."
        },
        "computerUse": {
          "$ref": "GoogleCloudAiplatformV1beta1ToolComputerUse",
          "description": "Optional. Tool to support the model interacting directly with the computer. If enabled, it automatically populates computer-use specific Function Declarations."
        },
        "enterpriseWebSearch": {
          "$ref": "GoogleCloudAiplatformV1beta1EnterpriseWebSearch",
          "description": "Optional. Tool to support searching public web data, powered by Vertex AI Search and Sec4 compliance."
        },
        "functionDeclarations": {
          "description": "Optional. Function tool type. One or more function declarations to be passed to the model along with the current user query. Model may decide to call a subset of these functions by populating FunctionCall in the response. User should provide a FunctionResponse for each function call in the next turn. Based on the function responses, Model will generate the final response back to the user. Maximum 512 function declarations can be provided.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1FunctionDeclaration"
          },
          "type": "array"
        },
        "googleMaps": {
          "$ref": "GoogleCloudAiplatformV1beta1GoogleMaps",
          "description": "Optional. GoogleMaps tool type. Tool to support Google Maps in Model."
        },
        "googleSearch": {
          "$ref": "GoogleCloudAiplatformV1beta1ToolGoogleSearch",
          "description": "Optional. GoogleSearch tool type. Tool to support Google Search in Model. Powered by Google."
        },
        "googleSearchRetrieval": {
          "$ref": "GoogleCloudAiplatformV1beta1GoogleSearchRetrieval",
          "deprecated": true,
          "description": "Optional. Specialized retrieval tool that is powered by Google Search."
        },
        "retrieval": {
          "$ref": "GoogleCloudAiplatformV1beta1Retrieval",
          "description": "Optional. Retrieval tool type. System will always execute the provided retrieval tool(s) to get external knowledge to answer the prompt. Retrieval results are presented to the model for generation."
        },
        "urlContext": {
          "$ref": "GoogleCloudAiplatformV1beta1UrlContext",
          "description": "Optional. Tool to support URL context retrieval."
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1ToolCodeExecution": {
      "description": "Tool that executes code generated by the model, and automatically returns the result to the model. See also [ExecutableCode]and [CodeExecutionResult] which are input and output to this tool.",
      "id": "GoogleCloudAiplatformV1beta1ToolCodeExecution",
      "properties": {},
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1ToolComputerUse": {
      "description": "Tool to support computer use.",
      "id": "GoogleCloudAiplatformV1beta1ToolComputerUse",
      "properties": {
        "environment": {
          "description": "Required. The environment being operated.",
          "enum": [
            "ENVIRONMENT_UNSPECIFIED",
            "ENVIRONMENT_BROWSER"
          ],
          "enumDescriptions": [
            "Defaults to browser.",
            "Operates in a web browser."
          ],
          "type": "string"
        },
        "excludedPredefinedFunctions": {
          "description": "Optional. By default, [predefined functions](https://cloud.google.com/vertex-ai/generative-ai/docs/computer-use#supported-actions) are included in the final model call. Some of them can be explicitly excluded from being automatically included. This can serve two purposes: 1. Using a more restricted / different action space. 2. Improving the definitions / instructions of predefined functions.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1ToolConfig": {
      "description": "Tool config. This config is shared for all tools provided in the request.",
      "id": "GoogleCloudAiplatformV1beta1ToolConfig",
      "properties": {
        "functionCallingConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1FunctionCallingConfig",
          "description": "Optional. Function calling config."
        },
        "retrievalConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1RetrievalConfig",
          "description": "Optional. Retrieval config."
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1ToolGoogleSearch": {
      "description": "GoogleSearch tool type. Tool to support Google Search in Model. Powered by Google.",
      "id": "GoogleCloudAiplatformV1beta1ToolGoogleSearch",
      "properties": {
        "blockingConfidence": {
          "description": "Optional. Sites with confidence level chosen & above this value will be blocked from the search results.",
          "enum": [
            "PHISH_BLOCK_THRESHOLD_UNSPECIFIED",
            "BLOCK_LOW_AND_ABOVE",
            "BLOCK_MEDIUM_AND_ABOVE",
            "BLOCK_HIGH_AND_ABOVE",
            "BLOCK_HIGHER_AND_ABOVE",
            "BLOCK_VERY_HIGH_AND_ABOVE",
            "BLOCK_ONLY_EXTREMELY_HIGH"
          ],
          "enumDescriptions": [
            "Defaults to unspecified.",
            "Blocks Low and above confidence URL that is risky.",
            "Blocks Medium and above confidence URL that is risky.",
            "Blocks High and above confidence URL that is risky.",
            "Blocks Higher and above confidence URL that is risky.",
            "Blocks Very high and above confidence URL that is risky.",
            "Blocks Extremely high confidence URL that is risky."
          ],
          "type": "string"
        },
        "excludeDomains": {
          "description": "Optional. List of domains to be excluded from the search results. The default limit is 2000 domains. Example: [\"amazon.com\", \"facebook.com\"].",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1UrlContext": {
      "description": "Tool to support URL context.",
      "id": "GoogleCloudAiplatformV1beta1UrlContext",
      "properties": {},
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1UrlContextMetadata": {
      "description": "Metadata returned when the model uses the `url_context` tool to get information from a user-provided URL.",
      "id": "GoogleCloudAiplatformV1beta1UrlContextMetadata",
      "properties": {
        "urlMetadata": {
          "description": "Output only. A list of URL metadata, with one entry for each URL retrieved by the tool.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1UrlMetadata"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1UrlMetadata": {
      "description": "The metadata for a single URL retrieval.",
      "id": "GoogleCloudAiplatformV1beta1UrlMetadata",
      "properties": {
        "retrievedUrl": {
          "description": "The URL retrieved by the tool.",
          "type": "string"
        },
        "urlRetrievalStatus": {
          "description": "The status of the URL retrieval.",
          "enum": [
            "URL_RETRIEVAL_STATUS_UNSPECIFIED",
            "URL_RETRIEVAL_STATUS_SUCCESS",
            "URL_RETRIEVAL_STATUS_ERROR"
          ],
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The URL was retrieved successfully.",
            "The URL retrieval failed."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1VertexAISearch": {
      "description": "Retrieve from Vertex AI Search datastore or engine for grounding. datastore and engine are mutually exclusive. See https://cloud.google.com/products/agent-builder",
      "id": "GoogleCloudAiplatformV1beta1VertexAISearch",
      "properties": {
        "dataStoreSpecs": {
          "description": "Specifications that define the specific DataStores to be searched, along with configurations for those data stores. This is only considered for Engines with multiple data stores. It should only be set if engine is used.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1VertexAISearchDataStoreSpec"
          },
          "type": "array"
        },
        "datastore": {
          "description": "Optional. Fully-qualified Vertex AI Search data store resource ID. Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore}`",
          "type": "string"
        },
        "engine": {
          "description": "Optional. Fully-qualified Vertex AI Search engine resource ID. Format: `projects/{project}/locations/{location}/collections/{collection}/engines/{engine}`",
          "type": "string"
        },
        "filter": {
          "description": "Optional. Filter strings to be passed to the search API.",
          "type": "string"
        },
        "maxResults": {
          "description": "Optional. Number of search results to return per query. The default value is 10. The maximumm allowed value is 10.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1VertexAISearchDataStoreSpec": {
      "description": "Define data stores within engine to filter on in a search call and configurations for those data stores. For more information, see https://cloud.google.com/generative-ai-app-builder/docs/reference/rpc/google.cloud.discoveryengine.v1#datastorespec",
      "id": "GoogleCloudAiplatformV1beta1VertexAISearchDataStoreSpec",
      "properties": {
        "dataStore": {
          "description": "Full resource name of DataStore, such as Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{dataStore}`",
          "type": "string"
        },
        "filter": {
          "description": "Optional. Filter specification to filter documents in the data store specified by data_store field. For more information on filtering, see [Filtering](https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1VertexRagStore": {
      "description": "Retrieve from Vertex RAG Store for grounding.",
      "id": "GoogleCloudAiplatformV1beta1VertexRagStore",
      "properties": {
        "ragCorpora": {
          "deprecated": true,
          "description": "Optional. Deprecated. Please use rag_resources instead.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ragResources": {
          "description": "Optional. The representation of the rag source. It can be used to specify corpus only or ragfiles. Currently only support one corpus or multiple files from one corpus. In the future we may open up multiple corpora support.",
          "items": {
            "$ref": "GoogleCloudAiplatformV1beta1VertexRagStoreRagResource"
          },
          "type": "array"
        },
        "ragRetrievalConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1RagRetrievalConfig",
          "description": "Optional. The retrieval config for the Rag query."
        },
        "similarityTopK": {
          "deprecated": true,
          "description": "Optional. Number of top k results to return from the selected corpora.",
          "format": "int32",
          "type": "integer"
        },
        "storeContext": {
          "description": "Optional. Currently only supported for Gemini Multimodal Live API. In Gemini Multimodal Live API, if `store_context` bool is specified, Gemini will leverage it to automatically memorize the interactions between the client and Gemini, and retrieve context when needed to augment the response generation for users' ongoing and future interactions.",
          "type": "boolean"
        },
        "vectorDistanceThreshold": {
          "deprecated": true,
          "description": "Optional. Only return results with vector distance smaller than the threshold.",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1VertexRagStoreRagResource": {
      "description": "The definition of the Rag resource.",
      "id": "GoogleCloudAiplatformV1beta1VertexRagStoreRagResource",
      "properties": {
        "ragCorpus": {
          "description": "Optional. RagCorpora resource name. Format: `projects/{project}/locations/{location}/ragCorpora/{rag_corpus}`",
          "type": "string"
        },
        "ragFileIds": {
          "description": "Optional. rag_file_id. The files should be in the same rag_corpus set in rag_corpus field.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1VideoMetadata": {
      "description": "Provides metadata for a video, including the start and end offsets for clipping and the frame rate.",
      "id": "GoogleCloudAiplatformV1beta1VideoMetadata",
      "properties": {
        "endOffset": {
          "description": "Optional. The end offset of the video.",
          "format": "google-duration",
          "type": "string"
        },
        "fps": {
          "description": "Optional. The frame rate of the video sent to the model. If not specified, the default value is 1.0. The valid range is (0.0, 24.0].",
          "format": "double",
          "type": "number"
        },
        "startOffset": {
          "description": "Optional. The start offset of the video.",
          "format": "google-duration",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudAiplatformV1beta1VoiceConfig": {
      "description": "Configuration for a voice.",
      "id": "GoogleCloudAiplatformV1beta1VoiceConfig",
      "properties": {
        "prebuiltVoiceConfig": {
          "$ref": "GoogleCloudAiplatformV1beta1PrebuiltVoiceConfig",
          "description": "The configuration for a prebuilt voice."
        }
      },
      "type": "object"
    },
    "LatLng": {
      "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
      "id": "LatLng",
      "properties": {
        "latitude": {
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
          "format": "double",
          "type": "number"
        },
        "longitude": {
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "ModelOperationMetadata": {
      "description": "This is returned in the longrunning operations for create/update.",
      "id": "ModelOperationMetadata",
      "properties": {
        "basicOperationStatus": {
          "enum": [
            "BASIC_OPERATION_STATUS_UNSPECIFIED",
            "BASIC_OPERATION_STATUS_UPLOADING",
            "BASIC_OPERATION_STATUS_VERIFYING"
          ],
          "enumDescriptions": [
            "The status is unspecified",
            "The model file is being uploaded",
            "The model file is being verified"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the model we are creating/updating The name must have the form `projects/{project_id}/models/{model_id}`",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "servicePath": "",
  "title": "Firebase ML API",
  "version": "v2beta",
  "version_module": true
}