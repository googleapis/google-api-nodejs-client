{
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account."
        }
      }
    }
  },
  "basePath": "",
  "baseUrl": "https://gkehub.googleapis.com/",
  "batchPath": "batch",
  "canonicalName": "GKE Hub",
  "description": "",
  "discoveryVersion": "v1",
  "documentationLink": "https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster",
  "fullyEncodeReservedExpansion": true,
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "id": "gkehub:v1beta",
  "kind": "discovery#restDescription",
  "mtlsRootUrl": "https://gkehub.mtls.googleapis.com/",
  "name": "gkehub",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "parameters": {
    "$.xgafv": {
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "default": "json",
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "type": "string"
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "type": "boolean"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    }
  },
  "protocol": "rest",
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "methods": {
            "get": {
              "description": "Gets information about a location.",
              "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}",
              "httpMethod": "GET",
              "id": "gkehub.projects.locations.get",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "description": "Resource name for the location.",
                  "location": "path",
                  "pattern": "^projects/[^/]+/locations/[^/]+$",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "v1beta/{+name}",
              "response": {
                "$ref": "Location"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "list": {
              "description": "Lists information about the supported locations for this service.",
              "flatPath": "v1beta/projects/{projectsId}/locations",
              "httpMethod": "GET",
              "id": "gkehub.projects.locations.list",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "filter": {
                  "description": "A filter to narrow down results to a preferred subset. The filtering language accepts strings like `\"displayName=tokyo\"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).",
                  "location": "query",
                  "type": "string"
                },
                "name": {
                  "description": "The resource that owns the locations collection, if applicable.",
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "type": "string"
                },
                "pageSize": {
                  "description": "The maximum number of results to return. If not set, the service selects a default.",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "pageToken": {
                  "description": "A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.",
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "v1beta/{+name}/locations",
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            }
          },
          "resources": {
            "features": {
              "methods": {
                "create": {
                  "description": "Adds a new Feature.",
                  "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/features",
                  "httpMethod": "POST",
                  "id": "gkehub.projects.locations.features.create",
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "featureId": {
                      "description": "The ID of the feature to create.",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "description": "Required. The parent (project and location) where the Feature will be created. Specified in the format `projects/*/locations/*`.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "type": "string"
                    },
                    "requestId": {
                      "description": "A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "v1beta/{+parent}/features",
                  "request": {
                    "$ref": "Feature"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "delete": {
                  "description": "Removes a Feature.",
                  "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/features/{featuresId}",
                  "httpMethod": "DELETE",
                  "id": "gkehub.projects.locations.features.delete",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "force": {
                      "description": "If set to true, the delete will ignore any outstanding resources for this Feature (that is, `FeatureState.has_resources` is set to true). These resources will NOT be cleaned up or modified in any way.",
                      "location": "query",
                      "type": "boolean"
                    },
                    "name": {
                      "description": "Required. The Feature resource name in the format `projects/*/locations/*/features/*`.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/features/[^/]+$",
                      "required": true,
                      "type": "string"
                    },
                    "requestId": {
                      "description": "Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "v1beta/{+name}",
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "get": {
                  "description": "Gets details of a single Feature.",
                  "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/features/{featuresId}",
                  "httpMethod": "GET",
                  "id": "gkehub.projects.locations.features.get",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "Required. The Feature resource name in the format `projects/*/locations/*/features/*`",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/features/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1beta/{+name}",
                  "response": {
                    "$ref": "Feature"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "getIamPolicy": {
                  "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
                  "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/features/{featuresId}:getIamPolicy",
                  "httpMethod": "GET",
                  "id": "gkehub.projects.locations.features.getIamPolicy",
                  "parameterOrder": [
                    "resource"
                  ],
                  "parameters": {
                    "options.requestedPolicyVersion": {
                      "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/features/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1beta/{+resource}:getIamPolicy",
                  "response": {
                    "$ref": "Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "list": {
                  "description": "Lists Features in a given project and location.",
                  "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/features",
                  "httpMethod": "GET",
                  "id": "gkehub.projects.locations.features.list",
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "filter": {
                      "description": "Lists Features that match the filter expression, following the syntax outlined in https://google.aip.dev/160. Examples: - Feature with the name \"servicemesh\" in project \"foo-proj\": name = \"projects/foo-proj/locations/global/features/servicemesh\" - Features that have a label called `foo`: labels.foo:* - Features that have a label called `foo` whose value is `bar`: labels.foo = bar",
                      "location": "query",
                      "type": "string"
                    },
                    "orderBy": {
                      "description": "One or more fields to compare and use to sort the output. See https://google.aip.dev/132#ordering.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "When requesting a 'page' of resources, `page_size` specifies number of resources to return. If unspecified or set to 0, all resources will be returned.",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "pageToken": {
                      "description": "Token returned by previous call to `ListFeatures` which specifies the position in the list from where to continue listing the resources.",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "description": "Required. The parent (project and location) where the Features will be listed. Specified in the format `projects/*/locations/*`.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1beta/{+parent}/features",
                  "response": {
                    "$ref": "ListFeaturesResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "patch": {
                  "description": "Updates an existing Feature.",
                  "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/features/{featuresId}",
                  "httpMethod": "PATCH",
                  "id": "gkehub.projects.locations.features.patch",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "Required. The Feature resource name in the format `projects/*/locations/*/features/*`.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/features/[^/]+$",
                      "required": true,
                      "type": "string"
                    },
                    "requestId": {
                      "description": "A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).",
                      "location": "query",
                      "type": "string"
                    },
                    "updateMask": {
                      "description": "Mask of fields to update.",
                      "format": "google-fieldmask",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "v1beta/{+name}",
                  "request": {
                    "$ref": "Feature"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "setIamPolicy": {
                  "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
                  "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/features/{featuresId}:setIamPolicy",
                  "httpMethod": "POST",
                  "id": "gkehub.projects.locations.features.setIamPolicy",
                  "parameterOrder": [
                    "resource"
                  ],
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/features/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1beta/{+resource}:setIamPolicy",
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "response": {
                    "$ref": "Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "testIamPermissions": {
                  "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
                  "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/features/{featuresId}:testIamPermissions",
                  "httpMethod": "POST",
                  "id": "gkehub.projects.locations.features.testIamPermissions",
                  "parameterOrder": [
                    "resource"
                  ],
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/features/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1beta/{+resource}:testIamPermissions",
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              }
            },
            "memberships": {
              "methods": {
                "getIamPolicy": {
                  "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
                  "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/memberships/{membershipsId}:getIamPolicy",
                  "httpMethod": "GET",
                  "id": "gkehub.projects.locations.memberships.getIamPolicy",
                  "parameterOrder": [
                    "resource"
                  ],
                  "parameters": {
                    "options.requestedPolicyVersion": {
                      "description": "Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/memberships/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1beta/{+resource}:getIamPolicy",
                  "response": {
                    "$ref": "Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "setIamPolicy": {
                  "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
                  "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/memberships/{membershipsId}:setIamPolicy",
                  "httpMethod": "POST",
                  "id": "gkehub.projects.locations.memberships.setIamPolicy",
                  "parameterOrder": [
                    "resource"
                  ],
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/memberships/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1beta/{+resource}:setIamPolicy",
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "response": {
                    "$ref": "Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "testIamPermissions": {
                  "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
                  "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/memberships/{membershipsId}:testIamPermissions",
                  "httpMethod": "POST",
                  "id": "gkehub.projects.locations.memberships.testIamPermissions",
                  "parameterOrder": [
                    "resource"
                  ],
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/memberships/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1beta/{+resource}:testIamPermissions",
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              }
            },
            "operations": {
              "methods": {
                "cancel": {
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "httpMethod": "POST",
                  "id": "gkehub.projects.locations.operations.cancel",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be cancelled.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1beta/{+name}:cancel",
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "delete": {
                  "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
                  "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "httpMethod": "DELETE",
                  "id": "gkehub.projects.locations.operations.delete",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be deleted.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1beta/{+name}",
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "get": {
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "httpMethod": "GET",
                  "id": "gkehub.projects.locations.operations.get",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1beta/{+name}",
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "list": {
                  "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
                  "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/operations",
                  "httpMethod": "GET",
                  "id": "gkehub.projects.locations.operations.list",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "filter": {
                      "description": "The standard list filter.",
                      "location": "query",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the operation's parent resource.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The standard list page size.",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "pageToken": {
                      "description": "The standard list page token.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "v1beta/{+name}/operations",
                  "response": {
                    "$ref": "ListOperationsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "revision": "20220923",
  "rootUrl": "https://gkehub.googleapis.com/",
  "schemas": {
    "AnthosObservabilityFeatureSpec": {
      "description": "**Anthos Observability**: Spec",
      "id": "AnthosObservabilityFeatureSpec",
      "properties": {
        "defaultMembershipSpec": {
          "$ref": "AnthosObservabilityMembershipSpec",
          "description": "Default membership spec for unconfigured memberships"
        }
      },
      "type": "object"
    },
    "AnthosObservabilityMembershipSpec": {
      "description": "**Anthosobservability**: Per-Membership Feature spec.",
      "id": "AnthosObservabilityMembershipSpec",
      "properties": {
        "doNotOptimizeMetrics": {
          "description": "Use full of metrics rather than optimized metrics. See https://cloud.google.com/anthos/clusters/docs/on-prem/1.8/concepts/logging-and-monitoring#optimized_metrics_default_metrics",
          "type": "boolean"
        },
        "enableStackdriverOnApplications": {
          "description": "Enable collecting and reporting metrics and logs from user apps.",
          "type": "boolean"
        },
        "version": {
          "description": "the version of stackdriver operator used by this feature",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AnthosVMMembershipSpec": {
      "description": "AnthosVMMembershipSpec contains the AnthosVM feature configuration for a membership/cluster.",
      "id": "AnthosVMMembershipSpec",
      "properties": {
        "subfeaturesSpec": {
          "description": "List of configurations of the Anthos For VM subfeatures that are to be enabled",
          "items": {
            "$ref": "AnthosVMSubFeatureSpec"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AnthosVMMembershipState": {
      "description": "AnthosVMFeatureState contains the state of the AnthosVM feature. It represents the actual state in the cluster, while the AnthosVMMembershipSpec represents the desired state.",
      "id": "AnthosVMMembershipState",
      "properties": {
        "localControllerState": {
          "$ref": "LocalControllerState",
          "description": "State of the local PE-controller inside the cluster"
        },
        "subfeatureState": {
          "description": "List of AnthosVM subfeature states",
          "items": {
            "$ref": "AnthosVMSubFeatureState"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AnthosVMSubFeatureSpec": {
      "description": "AnthosVMSubFeatureSpec contains the subfeature configuration for a membership/cluster.",
      "id": "AnthosVMSubFeatureSpec",
      "properties": {
        "enabled": {
          "description": "Indicates whether the subfeature should be enabled on the cluster or not. If set to true, the subfeature's control plane and resources will be installed in the cluster. If set to false, the oneof spec if present will be ignored and nothing will be installed in the cluster.",
          "type": "boolean"
        },
        "migrateSpec": {
          "$ref": "MigrateSpec",
          "description": "MigrateSpec repsents the configuration for Migrate subfeature."
        },
        "serviceMeshSpec": {
          "$ref": "ServiceMeshSpec",
          "description": "ServiceMeshSpec repsents the configuration for Service Mesh subfeature."
        }
      },
      "type": "object"
    },
    "AnthosVMSubFeatureState": {
      "description": "AnthosVMSubFeatureState contains the state of the AnthosVM subfeatures.",
      "id": "AnthosVMSubFeatureState",
      "properties": {
        "description": {
          "description": "Description represents human readable description of the subfeature state. If the deployment failed, this should also contain the reason for the failure.",
          "type": "string"
        },
        "installationState": {
          "description": "InstallationState represents the state of installation of the subfeature in the cluster.",
          "enum": [
            "INSTALLATION_STATE_UNSPECIFIED",
            "INSTALLATION_STATE_NOT_INSTALLED",
            "INSTALLATION_STATE_INSTALLED",
            "INSTALLATION_STATE_FAILED"
          ],
          "enumDescriptions": [
            "state of installation is unknown",
            "component is not installed",
            "component is successfully installed",
            "installation failed"
          ],
          "type": "string"
        },
        "migrateState": {
          "$ref": "MigrateState",
          "description": "MigrateState represents the state of the Migrate subfeature."
        },
        "serviceMeshState": {
          "$ref": "ServiceMeshState",
          "description": "ServiceMeshState represents the state of the Service Mesh subfeature."
        }
      },
      "type": "object"
    },
    "AppDevExperienceFeatureSpec": {
      "description": "Spec for App Dev Experience Feature.",
      "id": "AppDevExperienceFeatureSpec",
      "properties": {},
      "type": "object"
    },
    "AppDevExperienceFeatureState": {
      "description": "State for App Dev Exp Feature.",
      "id": "AppDevExperienceFeatureState",
      "properties": {
        "networkingInstallSucceeded": {
          "$ref": "Status",
          "description": "Status of subcomponent that detects configured Service Mesh resources."
        }
      },
      "type": "object"
    },
    "AuditConfig": {
      "description": "Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \"audit_configs\": [ { \"service\": \"allServices\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" }, { \"log_type\": \"ADMIN_READ\" } ] }, { \"service\": \"sampleservice.googleapis.com\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\" }, { \"log_type\": \"DATA_WRITE\", \"exempted_members\": [ \"user:aliya@example.com\" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.",
      "id": "AuditConfig",
      "properties": {
        "auditLogConfigs": {
          "description": "The configuration for logging of each type of permission.",
          "items": {
            "$ref": "AuditLogConfig"
          },
          "type": "array"
        },
        "service": {
          "description": "Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AuditLogConfig": {
      "description": "Provides the configuration for logging a type of permissions. Example: { \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.",
      "id": "AuditLogConfig",
      "properties": {
        "exemptedMembers": {
          "description": "Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "logType": {
          "description": "The log type that this config enables.",
          "enum": [
            "LOG_TYPE_UNSPECIFIED",
            "ADMIN_READ",
            "DATA_WRITE",
            "DATA_READ"
          ],
          "enumDescriptions": [
            "Default case. Should never be this.",
            "Admin reads. Example: CloudIAM getIamPolicy",
            "Data writes. Example: CloudSQL Users create",
            "Data reads. Example: CloudSQL Users list"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Binding": {
      "description": "Associates `members`, or principals, with a `role`.",
      "id": "Binding",
      "properties": {
        "condition": {
          "$ref": "Expr",
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        },
        "members": {
          "description": "Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "role": {
          "description": "Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CancelOperationRequest": {
      "description": "The request message for Operations.CancelOperation.",
      "id": "CancelOperationRequest",
      "properties": {},
      "type": "object"
    },
    "CommonFeatureSpec": {
      "description": "CommonFeatureSpec contains Hub-wide configuration information",
      "id": "CommonFeatureSpec",
      "properties": {
        "anthosobservability": {
          "$ref": "AnthosObservabilityFeatureSpec",
          "description": "Anthos Observability spec"
        },
        "appdevexperience": {
          "$ref": "AppDevExperienceFeatureSpec",
          "description": "Appdevexperience specific spec."
        },
        "multiclusteringress": {
          "$ref": "MultiClusterIngressFeatureSpec",
          "description": "Multicluster Ingress-specific spec."
        }
      },
      "type": "object"
    },
    "CommonFeatureState": {
      "description": "CommonFeatureState contains Hub-wide Feature status information.",
      "id": "CommonFeatureState",
      "properties": {
        "appdevexperience": {
          "$ref": "AppDevExperienceFeatureState",
          "description": "Appdevexperience specific state."
        },
        "state": {
          "$ref": "FeatureState",
          "description": "Output only. The \"running state\" of the Feature in this Hub.",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "ConfigManagementBinauthzConfig": {
      "description": "Configuration for Binauthz",
      "id": "ConfigManagementBinauthzConfig",
      "properties": {
        "enabled": {
          "description": "Whether binauthz is enabled in this cluster.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigManagementBinauthzState": {
      "description": "State for Binauthz",
      "id": "ConfigManagementBinauthzState",
      "properties": {
        "version": {
          "$ref": "ConfigManagementBinauthzVersion",
          "description": "The version of binauthz that is installed."
        },
        "webhook": {
          "description": "The state of the binauthz webhook.",
          "enum": [
            "DEPLOYMENT_STATE_UNSPECIFIED",
            "NOT_INSTALLED",
            "INSTALLED",
            "ERROR"
          ],
          "enumDescriptions": [
            "Deployment's state cannot be determined",
            "Deployment is not installed",
            "Deployment is installed",
            "Deployment was attempted to be installed, but has errors"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigManagementBinauthzVersion": {
      "description": "The version of binauthz.",
      "id": "ConfigManagementBinauthzVersion",
      "properties": {
        "webhookVersion": {
          "description": "The version of the binauthz webhook.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigManagementConfigSync": {
      "description": "Configuration for Config Sync",
      "id": "ConfigManagementConfigSync",
      "properties": {
        "allowVerticalScale": {
          "description": "Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling.",
          "type": "boolean"
        },
        "enabled": {
          "description": "Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of git field.",
          "type": "boolean"
        },
        "git": {
          "$ref": "ConfigManagementGitConfig",
          "description": "Git repo configuration for the cluster."
        },
        "oci": {
          "$ref": "ConfigManagementOciConfig",
          "description": "OCI repo configuration for the cluster"
        },
        "preventDrift": {
          "description": "Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.",
          "type": "boolean"
        },
        "sourceFormat": {
          "description": "Specifies whether the Config Sync Repo is in \"hierarchical\" or \"unstructured\" mode.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigManagementConfigSyncDeploymentState": {
      "description": "The state of ConfigSync's deployment on a cluster",
      "id": "ConfigManagementConfigSyncDeploymentState",
      "properties": {
        "admissionWebhook": {
          "description": "Deployment state of admission-webhook",
          "enum": [
            "DEPLOYMENT_STATE_UNSPECIFIED",
            "NOT_INSTALLED",
            "INSTALLED",
            "ERROR"
          ],
          "enumDescriptions": [
            "Deployment's state cannot be determined",
            "Deployment is not installed",
            "Deployment is installed",
            "Deployment was attempted to be installed, but has errors"
          ],
          "type": "string"
        },
        "gitSync": {
          "description": "Deployment state of the git-sync pod",
          "enum": [
            "DEPLOYMENT_STATE_UNSPECIFIED",
            "NOT_INSTALLED",
            "INSTALLED",
            "ERROR"
          ],
          "enumDescriptions": [
            "Deployment's state cannot be determined",
            "Deployment is not installed",
            "Deployment is installed",
            "Deployment was attempted to be installed, but has errors"
          ],
          "type": "string"
        },
        "importer": {
          "description": "Deployment state of the importer pod",
          "enum": [
            "DEPLOYMENT_STATE_UNSPECIFIED",
            "NOT_INSTALLED",
            "INSTALLED",
            "ERROR"
          ],
          "enumDescriptions": [
            "Deployment's state cannot be determined",
            "Deployment is not installed",
            "Deployment is installed",
            "Deployment was attempted to be installed, but has errors"
          ],
          "type": "string"
        },
        "monitor": {
          "description": "Deployment state of the monitor pod",
          "enum": [
            "DEPLOYMENT_STATE_UNSPECIFIED",
            "NOT_INSTALLED",
            "INSTALLED",
            "ERROR"
          ],
          "enumDescriptions": [
            "Deployment's state cannot be determined",
            "Deployment is not installed",
            "Deployment is installed",
            "Deployment was attempted to be installed, but has errors"
          ],
          "type": "string"
        },
        "reconcilerManager": {
          "description": "Deployment state of reconciler-manager pod",
          "enum": [
            "DEPLOYMENT_STATE_UNSPECIFIED",
            "NOT_INSTALLED",
            "INSTALLED",
            "ERROR"
          ],
          "enumDescriptions": [
            "Deployment's state cannot be determined",
            "Deployment is not installed",
            "Deployment is installed",
            "Deployment was attempted to be installed, but has errors"
          ],
          "type": "string"
        },
        "rootReconciler": {
          "description": "Deployment state of root-reconciler",
          "enum": [
            "DEPLOYMENT_STATE_UNSPECIFIED",
            "NOT_INSTALLED",
            "INSTALLED",
            "ERROR"
          ],
          "enumDescriptions": [
            "Deployment's state cannot be determined",
            "Deployment is not installed",
            "Deployment is installed",
            "Deployment was attempted to be installed, but has errors"
          ],
          "type": "string"
        },
        "syncer": {
          "description": "Deployment state of the syncer pod",
          "enum": [
            "DEPLOYMENT_STATE_UNSPECIFIED",
            "NOT_INSTALLED",
            "INSTALLED",
            "ERROR"
          ],
          "enumDescriptions": [
            "Deployment's state cannot be determined",
            "Deployment is not installed",
            "Deployment is installed",
            "Deployment was attempted to be installed, but has errors"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigManagementConfigSyncState": {
      "description": "State information for ConfigSync",
      "id": "ConfigManagementConfigSyncState",
      "properties": {
        "deploymentState": {
          "$ref": "ConfigManagementConfigSyncDeploymentState",
          "description": "Information about the deployment of ConfigSync, including the version of the various Pods deployed"
        },
        "syncState": {
          "$ref": "ConfigManagementSyncState",
          "description": "The state of ConfigSync's process to sync configs to a cluster"
        },
        "version": {
          "$ref": "ConfigManagementConfigSyncVersion",
          "description": "The version of ConfigSync deployed"
        }
      },
      "type": "object"
    },
    "ConfigManagementConfigSyncVersion": {
      "description": "Specific versioning information pertaining to ConfigSync's Pods",
      "id": "ConfigManagementConfigSyncVersion",
      "properties": {
        "admissionWebhook": {
          "description": "Version of the deployed admission_webhook pod",
          "type": "string"
        },
        "gitSync": {
          "description": "Version of the deployed git-sync pod",
          "type": "string"
        },
        "importer": {
          "description": "Version of the deployed importer pod",
          "type": "string"
        },
        "monitor": {
          "description": "Version of the deployed monitor pod",
          "type": "string"
        },
        "reconcilerManager": {
          "description": "Version of the deployed reconciler-manager pod",
          "type": "string"
        },
        "rootReconciler": {
          "description": "Version of the deployed reconciler container in root-reconciler pod",
          "type": "string"
        },
        "syncer": {
          "description": "Version of the deployed syncer pod",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigManagementErrorResource": {
      "description": "Model for a config file in the git repo with an associated Sync error",
      "id": "ConfigManagementErrorResource",
      "properties": {
        "resourceGvk": {
          "$ref": "ConfigManagementGroupVersionKind",
          "description": "Group/version/kind of the resource that is causing an error"
        },
        "resourceName": {
          "description": "Metadata name of the resource that is causing an error",
          "type": "string"
        },
        "resourceNamespace": {
          "description": "Namespace of the resource that is causing an error",
          "type": "string"
        },
        "sourcePath": {
          "description": "Path in the git repo of the erroneous config",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigManagementGatekeeperDeploymentState": {
      "description": "State of Policy Controller installation.",
      "id": "ConfigManagementGatekeeperDeploymentState",
      "properties": {
        "gatekeeperAudit": {
          "description": "Status of gatekeeper-audit deployment.",
          "enum": [
            "DEPLOYMENT_STATE_UNSPECIFIED",
            "NOT_INSTALLED",
            "INSTALLED",
            "ERROR"
          ],
          "enumDescriptions": [
            "Deployment's state cannot be determined",
            "Deployment is not installed",
            "Deployment is installed",
            "Deployment was attempted to be installed, but has errors"
          ],
          "type": "string"
        },
        "gatekeeperControllerManagerState": {
          "description": "Status of gatekeeper-controller-manager pod.",
          "enum": [
            "DEPLOYMENT_STATE_UNSPECIFIED",
            "NOT_INSTALLED",
            "INSTALLED",
            "ERROR"
          ],
          "enumDescriptions": [
            "Deployment's state cannot be determined",
            "Deployment is not installed",
            "Deployment is installed",
            "Deployment was attempted to be installed, but has errors"
          ],
          "type": "string"
        },
        "gatekeeperMutation": {
          "description": "Status of the pod serving the mutation webhook.",
          "enum": [
            "DEPLOYMENT_STATE_UNSPECIFIED",
            "NOT_INSTALLED",
            "INSTALLED",
            "ERROR"
          ],
          "enumDescriptions": [
            "Deployment's state cannot be determined",
            "Deployment is not installed",
            "Deployment is installed",
            "Deployment was attempted to be installed, but has errors"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigManagementGitConfig": {
      "description": "Git repo configuration for a single cluster.",
      "id": "ConfigManagementGitConfig",
      "properties": {
        "gcpServiceAccountEmail": {
          "description": "The GCP Service Account Email used for auth when secret_type is gcpServiceAccount.",
          "type": "string"
        },
        "httpsProxy": {
          "description": "URL for the HTTPS proxy to be used when communicating with the Git repo.",
          "type": "string"
        },
        "policyDir": {
          "description": "The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.",
          "type": "string"
        },
        "secretType": {
          "description": "Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive. Required.",
          "type": "string"
        },
        "syncBranch": {
          "description": "The branch of the repository to sync from. Default: master.",
          "type": "string"
        },
        "syncRepo": {
          "description": "The URL of the Git repository to use as the source of truth.",
          "type": "string"
        },
        "syncRev": {
          "description": "Git revision (tag or hash) to check out. Default HEAD.",
          "type": "string"
        },
        "syncWaitSecs": {
          "description": "Period in seconds between consecutive syncs. Default: 15.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigManagementGroupVersionKind": {
      "description": "A Kubernetes object's GVK",
      "id": "ConfigManagementGroupVersionKind",
      "properties": {
        "group": {
          "description": "Kubernetes Group",
          "type": "string"
        },
        "kind": {
          "description": "Kubernetes Kind",
          "type": "string"
        },
        "version": {
          "description": "Kubernetes Version",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigManagementHierarchyControllerConfig": {
      "description": "Configuration for Hierarchy Controller",
      "id": "ConfigManagementHierarchyControllerConfig",
      "properties": {
        "enableHierarchicalResourceQuota": {
          "description": "Whether hierarchical resource quota is enabled in this cluster.",
          "type": "boolean"
        },
        "enablePodTreeLabels": {
          "description": "Whether pod tree labels are enabled in this cluster.",
          "type": "boolean"
        },
        "enabled": {
          "description": "Whether Hierarchy Controller is enabled in this cluster.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigManagementHierarchyControllerDeploymentState": {
      "description": "Deployment state for Hierarchy Controller",
      "id": "ConfigManagementHierarchyControllerDeploymentState",
      "properties": {
        "extension": {
          "description": "The deployment state for Hierarchy Controller extension (e.g. v0.7.0-hc.1)",
          "enum": [
            "DEPLOYMENT_STATE_UNSPECIFIED",
            "NOT_INSTALLED",
            "INSTALLED",
            "ERROR"
          ],
          "enumDescriptions": [
            "Deployment's state cannot be determined",
            "Deployment is not installed",
            "Deployment is installed",
            "Deployment was attempted to be installed, but has errors"
          ],
          "type": "string"
        },
        "hnc": {
          "description": "The deployment state for open source HNC (e.g. v0.7.0-hc.0)",
          "enum": [
            "DEPLOYMENT_STATE_UNSPECIFIED",
            "NOT_INSTALLED",
            "INSTALLED",
            "ERROR"
          ],
          "enumDescriptions": [
            "Deployment's state cannot be determined",
            "Deployment is not installed",
            "Deployment is installed",
            "Deployment was attempted to be installed, but has errors"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigManagementHierarchyControllerState": {
      "description": "State for Hierarchy Controller",
      "id": "ConfigManagementHierarchyControllerState",
      "properties": {
        "state": {
          "$ref": "ConfigManagementHierarchyControllerDeploymentState",
          "description": "The deployment state for Hierarchy Controller"
        },
        "version": {
          "$ref": "ConfigManagementHierarchyControllerVersion",
          "description": "The version for Hierarchy Controller"
        }
      },
      "type": "object"
    },
    "ConfigManagementHierarchyControllerVersion": {
      "description": "Version for Hierarchy Controller",
      "id": "ConfigManagementHierarchyControllerVersion",
      "properties": {
        "extension": {
          "description": "Version for Hierarchy Controller extension",
          "type": "string"
        },
        "hnc": {
          "description": "Version for open source HNC",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigManagementInstallError": {
      "description": "Errors pertaining to the installation of ACM",
      "id": "ConfigManagementInstallError",
      "properties": {
        "errorMessage": {
          "description": "A string representing the user facing error message",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigManagementMembershipSpec": {
      "description": "**Anthos Config Management**: Configuration for a single cluster. Intended to parallel the ConfigManagement CR.",
      "id": "ConfigManagementMembershipSpec",
      "properties": {
        "binauthz": {
          "$ref": "ConfigManagementBinauthzConfig",
          "description": "Binauthz conifguration for the cluster."
        },
        "configSync": {
          "$ref": "ConfigManagementConfigSync",
          "description": "Config Sync configuration for the cluster."
        },
        "hierarchyController": {
          "$ref": "ConfigManagementHierarchyControllerConfig",
          "description": "Hierarchy Controller configuration for the cluster."
        },
        "policyController": {
          "$ref": "ConfigManagementPolicyController",
          "description": "Policy Controller configuration for the cluster."
        },
        "version": {
          "description": "Version of ACM installed.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigManagementMembershipState": {
      "description": "**Anthos Config Management**: State for a single cluster.",
      "id": "ConfigManagementMembershipState",
      "properties": {
        "binauthzState": {
          "$ref": "ConfigManagementBinauthzState",
          "description": "Binauthz status"
        },
        "clusterName": {
          "description": "The user-defined name for the cluster used by ClusterSelectors to group clusters together. This should match Membership's membership_name, unless the user installed ACM on the cluster manually prior to enabling the ACM hub feature. Unique within a Anthos Config Management installation.",
          "type": "string"
        },
        "configSyncState": {
          "$ref": "ConfigManagementConfigSyncState",
          "description": "Current sync status"
        },
        "hierarchyControllerState": {
          "$ref": "ConfigManagementHierarchyControllerState",
          "description": "Hierarchy Controller status"
        },
        "membershipSpec": {
          "$ref": "ConfigManagementMembershipSpec",
          "description": "Membership configuration in the cluster. This represents the actual state in the cluster, while the MembershipSpec in the FeatureSpec represents the intended state"
        },
        "operatorState": {
          "$ref": "ConfigManagementOperatorState",
          "description": "Current install status of ACM's Operator"
        },
        "policyControllerState": {
          "$ref": "ConfigManagementPolicyControllerState",
          "description": "PolicyController status"
        }
      },
      "type": "object"
    },
    "ConfigManagementOciConfig": {
      "description": "OCI repo configuration for a single cluster",
      "id": "ConfigManagementOciConfig",
      "properties": {
        "gcpServiceAccountEmail": {
          "description": "The GCP Service Account Email used for auth when secret_type is gcpServiceAccount.",
          "type": "string"
        },
        "policyDir": {
          "description": "The absolute path of the directory that contains the local resources. Default: the root directory of the image.",
          "type": "string"
        },
        "secretType": {
          "description": "Type of secret configured for access to the Git repo.",
          "type": "string"
        },
        "syncRepo": {
          "description": "The OCI image repository URL for the package to sync from. e.g. `LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME`.",
          "type": "string"
        },
        "syncWaitSecs": {
          "description": "Period in seconds between consecutive syncs. Default: 15.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigManagementOperatorState": {
      "description": "State information for an ACM's Operator",
      "id": "ConfigManagementOperatorState",
      "properties": {
        "deploymentState": {
          "description": "The state of the Operator's deployment",
          "enum": [
            "DEPLOYMENT_STATE_UNSPECIFIED",
            "NOT_INSTALLED",
            "INSTALLED",
            "ERROR"
          ],
          "enumDescriptions": [
            "Deployment's state cannot be determined",
            "Deployment is not installed",
            "Deployment is installed",
            "Deployment was attempted to be installed, but has errors"
          ],
          "type": "string"
        },
        "errors": {
          "description": "Install errors.",
          "items": {
            "$ref": "ConfigManagementInstallError"
          },
          "type": "array"
        },
        "version": {
          "description": "The semenatic version number of the operator",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigManagementPolicyController": {
      "description": "Configuration for Policy Controller",
      "id": "ConfigManagementPolicyController",
      "properties": {
        "auditIntervalSeconds": {
          "description": "Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.",
          "format": "int64",
          "type": "string"
        },
        "enabled": {
          "description": "Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.",
          "type": "boolean"
        },
        "exemptableNamespaces": {
          "description": "The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "logDeniesEnabled": {
          "description": "Logs all denies and dry run failures.",
          "type": "boolean"
        },
        "monitoring": {
          "$ref": "ConfigManagementPolicyControllerMonitoring",
          "description": "Monitoring specifies the configuration of monitoring."
        },
        "mutationEnabled": {
          "description": "Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.",
          "type": "boolean"
        },
        "referentialRulesEnabled": {
          "description": "Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.",
          "type": "boolean"
        },
        "templateLibraryInstalled": {
          "description": "Installs the default template library along with Policy Controller.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ConfigManagementPolicyControllerMonitoring": {
      "description": "PolicyControllerMonitoring specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: [\"cloudmonitoring\", \"prometheus\"]",
      "id": "ConfigManagementPolicyControllerMonitoring",
      "properties": {
        "backends": {
          "description": "Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.",
          "items": {
            "enum": [
              "MONITORING_BACKEND_UNSPECIFIED",
              "PROMETHEUS",
              "CLOUD_MONITORING"
            ],
            "enumDescriptions": [
              "Backend cannot be determined",
              "Prometheus backend for monitoring",
              "Stackdriver/Cloud Monitoring backend for monitoring"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ConfigManagementPolicyControllerState": {
      "description": "State for PolicyControllerState.",
      "id": "ConfigManagementPolicyControllerState",
      "properties": {
        "deploymentState": {
          "$ref": "ConfigManagementGatekeeperDeploymentState",
          "description": "The state about the policy controller installation."
        },
        "version": {
          "$ref": "ConfigManagementPolicyControllerVersion",
          "description": "The version of Gatekeeper Policy Controller deployed."
        }
      },
      "type": "object"
    },
    "ConfigManagementPolicyControllerVersion": {
      "description": "The build version of Gatekeeper Policy Controller is using.",
      "id": "ConfigManagementPolicyControllerVersion",
      "properties": {
        "version": {
          "description": "The gatekeeper image tag that is composed of ACM version, git tag, build number.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigManagementSyncError": {
      "description": "An ACM created error representing a problem syncing configurations",
      "id": "ConfigManagementSyncError",
      "properties": {
        "code": {
          "description": "An ACM defined error code",
          "type": "string"
        },
        "errorMessage": {
          "description": "A description of the error",
          "type": "string"
        },
        "errorResources": {
          "description": "A list of config(s) associated with the error, if any",
          "items": {
            "$ref": "ConfigManagementErrorResource"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ConfigManagementSyncState": {
      "description": "State indicating an ACM's progress syncing configurations to a cluster",
      "id": "ConfigManagementSyncState",
      "properties": {
        "code": {
          "description": "Sync status code",
          "enum": [
            "SYNC_CODE_UNSPECIFIED",
            "SYNCED",
            "PENDING",
            "ERROR",
            "NOT_CONFIGURED",
            "NOT_INSTALLED",
            "UNAUTHORIZED",
            "UNREACHABLE"
          ],
          "enumDescriptions": [
            "ACM cannot determine a sync code",
            "ACM successfully synced the git Repo with the cluster",
            "ACM is in the progress of syncing a new change",
            "Indicates an error configuring ACM, and user action is required",
            "ACM has been installed (operator manifest deployed), but not configured.",
            "ACM has not been installed (no operator pod found)",
            "Error authorizing with the cluster",
            "Cluster could not be reached"
          ],
          "type": "string"
        },
        "errors": {
          "description": "A list of errors resulting from problematic configs. This list will be truncated after 100 errors, although it is unlikely for that many errors to simultaneously exist.",
          "items": {
            "$ref": "ConfigManagementSyncError"
          },
          "type": "array"
        },
        "importToken": {
          "description": "Token indicating the state of the importer.",
          "type": "string"
        },
        "lastSync": {
          "description": "Deprecated: use last_sync_time instead. Timestamp of when ACM last successfully synced the repo The time format is specified in https://golang.org/pkg/time/#Time.String",
          "type": "string"
        },
        "lastSyncTime": {
          "description": "Timestamp type of when ACM last successfully synced the repo",
          "format": "google-datetime",
          "type": "string"
        },
        "sourceToken": {
          "description": "Token indicating the state of the repo.",
          "type": "string"
        },
        "syncToken": {
          "description": "Token indicating the state of the syncer.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
      "id": "Empty",
      "properties": {},
      "type": "object"
    },
    "Expr": {
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "id": "Expr",
      "properties": {
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "expression": {
          "description": "Textual representation of an expression in Common Expression Language syntax.",
          "type": "string"
        },
        "location": {
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
          "type": "string"
        },
        "title": {
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Feature": {
      "description": "Feature represents the settings and status of any Hub Feature.",
      "id": "Feature",
      "properties": {
        "createTime": {
          "description": "Output only. When the Feature resource was created.",
          "format": "google-datetime",
          "readOnly": true,
          "type": "string"
        },
        "deleteTime": {
          "description": "Output only. When the Feature resource was deleted.",
          "format": "google-datetime",
          "readOnly": true,
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "GCP labels for this Feature.",
          "type": "object"
        },
        "membershipSpecs": {
          "additionalProperties": {
            "$ref": "MembershipFeatureSpec"
          },
          "description": "Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Membership is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.",
          "type": "object"
        },
        "membershipStates": {
          "additionalProperties": {
            "$ref": "MembershipFeatureState"
          },
          "description": "Output only. Membership-specific Feature status. If this Feature does report any per-Membership status, this field may be unused. The keys indicate which Membership the state is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.",
          "readOnly": true,
          "type": "object"
        },
        "name": {
          "description": "Output only. The full, unique name of this Feature resource in the format `projects/*/locations/*/features/*`.",
          "readOnly": true,
          "type": "string"
        },
        "resourceState": {
          "$ref": "FeatureResourceState",
          "description": "Output only. State of the Feature resource itself.",
          "readOnly": true
        },
        "spec": {
          "$ref": "CommonFeatureSpec",
          "description": "Optional. Hub-wide Feature configuration. If this Feature does not support any Hub-wide configuration, this field may be unused."
        },
        "state": {
          "$ref": "CommonFeatureState",
          "description": "Output only. The Hub-wide Feature state.",
          "readOnly": true
        },
        "updateTime": {
          "description": "Output only. When the Feature resource was last updated.",
          "format": "google-datetime",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "FeatureResourceState": {
      "description": "FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the \"running state\" of the Feature in the Hub and across Memberships.",
      "id": "FeatureResourceState",
      "properties": {
        "state": {
          "description": "The current state of the Feature resource in the Hub API.",
          "enum": [
            "STATE_UNSPECIFIED",
            "ENABLING",
            "ACTIVE",
            "DISABLING",
            "UPDATING",
            "SERVICE_UPDATING"
          ],
          "enumDescriptions": [
            "State is unknown or not set.",
            "The Feature is being enabled, and the Feature resource is being created. Once complete, the corresponding Feature will be enabled in this Hub.",
            "The Feature is enabled in this Hub, and the Feature resource is fully available.",
            "The Feature is being disabled in this Hub, and the Feature resource is being deleted.",
            "The Feature resource is being updated.",
            "The Feature resource is being updated by the Hub Service."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "FeatureState": {
      "description": "FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context.",
      "id": "FeatureState",
      "properties": {
        "code": {
          "description": "The high-level, machine-readable status of this Feature.",
          "enum": [
            "CODE_UNSPECIFIED",
            "OK",
            "WARNING",
            "ERROR"
          ],
          "enumDescriptions": [
            "Unknown or not set.",
            "The Feature is operating normally.",
            "The Feature has encountered an issue, and is operating in a degraded state. The Feature may need intervention to return to normal operation. See the description and any associated Feature-specific details for more information.",
            "The Feature is not operating or is in a severely degraded state. The Feature may need intervention to return to normal operation. See the description and any associated Feature-specific details for more information."
          ],
          "type": "string"
        },
        "description": {
          "description": "A human-readable description of the current status.",
          "type": "string"
        },
        "updateTime": {
          "description": "The time this status and any related Feature-specific details were updated.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleRpcStatus": {
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "GoogleRpcStatus",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "type": "array"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentityServiceAuthMethod": {
      "description": "Configuration of an auth method for a member/cluster. Only one authentication method (e.g., OIDC and LDAP) can be set per AuthMethod.",
      "id": "IdentityServiceAuthMethod",
      "properties": {
        "googleConfig": {
          "$ref": "IdentityServiceGoogleConfig",
          "description": "GoogleConfig specific configuration"
        },
        "name": {
          "description": "Identifier for auth config.",
          "type": "string"
        },
        "oidcConfig": {
          "$ref": "IdentityServiceOidcConfig",
          "description": "OIDC specific configuration."
        },
        "proxy": {
          "description": "Proxy server address to use for auth method.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentityServiceGoogleConfig": {
      "description": "Configuration for the Google Plugin Auth flow.",
      "id": "IdentityServiceGoogleConfig",
      "properties": {
        "disable": {
          "description": "Disable automatic configuration of Google Plugin on supported platforms.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "IdentityServiceMembershipSpec": {
      "description": "**Anthos Identity Service**: Configuration for a single Membership.",
      "id": "IdentityServiceMembershipSpec",
      "properties": {
        "authMethods": {
          "description": "A member may support multiple auth methods.",
          "items": {
            "$ref": "IdentityServiceAuthMethod"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "IdentityServiceMembershipState": {
      "description": "**Anthos Identity Service**: State for a single Membership.",
      "id": "IdentityServiceMembershipState",
      "properties": {
        "failureReason": {
          "description": "The reason of the failure.",
          "type": "string"
        },
        "installedVersion": {
          "description": "Installed AIS version. This is the AIS version installed on this member. The values makes sense iff state is OK.",
          "type": "string"
        },
        "memberConfig": {
          "$ref": "IdentityServiceMembershipSpec",
          "description": "Last reconciled membership configuration"
        },
        "state": {
          "description": "Deployment state on this member",
          "enum": [
            "DEPLOYMENT_STATE_UNSPECIFIED",
            "OK",
            "ERROR"
          ],
          "enumDescriptions": [
            "Unspecified state",
            "deployment succeeds",
            "Failure with error."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdentityServiceOidcConfig": {
      "description": "Configuration for OIDC Auth flow.",
      "id": "IdentityServiceOidcConfig",
      "properties": {
        "certificateAuthorityData": {
          "description": "PEM-encoded CA for OIDC provider.",
          "type": "string"
        },
        "clientId": {
          "description": "ID for OIDC client application.",
          "type": "string"
        },
        "clientSecret": {
          "description": "Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.",
          "type": "string"
        },
        "deployCloudConsoleProxy": {
          "description": "Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.",
          "type": "boolean"
        },
        "enableAccessToken": {
          "description": "Enable access token.",
          "type": "boolean"
        },
        "encryptedClientSecret": {
          "description": "Output only. Encrypted OIDC Client secret",
          "format": "byte",
          "readOnly": true,
          "type": "string"
        },
        "extraParams": {
          "description": "Comma-separated list of key-value pairs.",
          "type": "string"
        },
        "groupPrefix": {
          "description": "Prefix to prepend to group name.",
          "type": "string"
        },
        "groupsClaim": {
          "description": "Claim in OIDC ID token that holds group information.",
          "type": "string"
        },
        "issuerUri": {
          "description": "URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.",
          "type": "string"
        },
        "kubectlRedirectUri": {
          "description": "Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.",
          "type": "string"
        },
        "scopes": {
          "description": "Comma-separated list of identifiers.",
          "type": "string"
        },
        "userClaim": {
          "description": "Claim in OIDC ID token that holds username.",
          "type": "string"
        },
        "userPrefix": {
          "description": "Prefix to prepend to user name.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListFeaturesResponse": {
      "description": "Response message for the `GkeHub.ListFeatures` method.",
      "id": "ListFeaturesResponse",
      "properties": {
        "nextPageToken": {
          "description": "A token to request the next page of resources from the `ListFeatures` method. The value of an empty string means that there are no more resources to return.",
          "type": "string"
        },
        "resources": {
          "description": "The list of matching Features",
          "items": {
            "$ref": "Feature"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ListLocationsResponse": {
      "description": "The response message for Locations.ListLocations.",
      "id": "ListLocationsResponse",
      "properties": {
        "locations": {
          "description": "A list of locations that matches the specified filter in the request.",
          "items": {
            "$ref": "Location"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListOperationsResponse": {
      "description": "The response message for Operations.ListOperations.",
      "id": "ListOperationsResponse",
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "items": {
            "$ref": "Operation"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "LocalControllerState": {
      "description": "LocalControllerState contains the state of the local controller deployed in the cluster.",
      "id": "LocalControllerState",
      "properties": {
        "description": {
          "description": "Description represents the human readable description of the current state of the local PE controller",
          "type": "string"
        },
        "installationState": {
          "description": "InstallationState represents the state of deployment of the local PE controller in the cluster.",
          "enum": [
            "INSTALLATION_STATE_UNSPECIFIED",
            "INSTALLATION_STATE_NOT_INSTALLED",
            "INSTALLATION_STATE_INSTALLED",
            "INSTALLATION_STATE_FAILED"
          ],
          "enumDescriptions": [
            "state of installation is unknown",
            "component is not installed",
            "component is successfully installed",
            "installation failed"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Location": {
      "description": "A resource that represents Google Cloud Platform location.",
      "id": "Location",
      "properties": {
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
          "type": "object"
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata. For example the available capacity at the given location.",
          "type": "object"
        },
        "name": {
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MembershipFeatureSpec": {
      "description": "MembershipFeatureSpec contains configuration information for a single Membership.",
      "id": "MembershipFeatureSpec",
      "properties": {
        "anthosobservability": {
          "$ref": "AnthosObservabilityMembershipSpec",
          "description": "Anthos Observability-specific spec"
        },
        "anthosvm": {
          "$ref": "AnthosVMMembershipSpec",
          "description": "AnthosVM spec."
        },
        "cloudbuild": {
          "$ref": "MembershipSpec",
          "description": "Cloud Build-specific spec"
        },
        "configmanagement": {
          "$ref": "ConfigManagementMembershipSpec",
          "description": "Config Management-specific spec."
        },
        "identityservice": {
          "$ref": "IdentityServiceMembershipSpec",
          "description": "Identity Service-specific spec."
        },
        "mesh": {
          "$ref": "ServiceMeshMembershipSpec",
          "description": "Anthos Service Mesh-specific spec"
        },
        "policycontroller": {
          "$ref": "PolicyControllerMembershipSpec",
          "description": "Policy Controller spec."
        }
      },
      "type": "object"
    },
    "MembershipFeatureState": {
      "description": "MembershipFeatureState contains Feature status information for a single Membership.",
      "id": "MembershipFeatureState",
      "properties": {
        "anthosvm": {
          "$ref": "AnthosVMMembershipState",
          "description": "AnthosVM state."
        },
        "appdevexperience": {
          "$ref": "AppDevExperienceFeatureState",
          "description": "Appdevexperience specific state."
        },
        "configmanagement": {
          "$ref": "ConfigManagementMembershipState",
          "description": "Config Management-specific state."
        },
        "identityservice": {
          "$ref": "IdentityServiceMembershipState",
          "description": "Identity Service-specific state."
        },
        "metering": {
          "$ref": "MeteringMembershipState",
          "description": "Metering-specific state."
        },
        "policycontroller": {
          "$ref": "PolicyControllerMembershipState",
          "description": "Policycontroller-specific state."
        },
        "servicemesh": {
          "$ref": "ServiceMeshMembershipState",
          "description": "Service Mesh-specific state."
        },
        "state": {
          "$ref": "FeatureState",
          "description": "The high-level state of this Feature for a single membership."
        }
      },
      "type": "object"
    },
    "MembershipSpec": {
      "description": "**Cloud Build**: Configurations for each Cloud Build enabled cluster.",
      "id": "MembershipSpec",
      "properties": {
        "securityPolicy": {
          "description": "Whether it is allowed to run the privileged builds on the cluster or not.",
          "enum": [
            "SECURITY_POLICY_UNSPECIFIED",
            "NON_PRIVILEGED",
            "PRIVILEGED"
          ],
          "enumDescriptions": [
            "Unspecified policy",
            "Privileged build pods are disallowed",
            "Privileged build pods are allowed"
          ],
          "type": "string"
        },
        "version": {
          "description": "Version of the cloud build software on the cluster.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MeteringMembershipState": {
      "description": "**Metering**: Per-Membership Feature State.",
      "id": "MeteringMembershipState",
      "properties": {
        "lastMeasurementTime": {
          "description": "The time stamp of the most recent measurement of the number of vCPUs in the cluster.",
          "format": "google-datetime",
          "type": "string"
        },
        "preciseLastMeasuredClusterVcpuCapacity": {
          "description": "The vCPUs capacity in the cluster according to the most recent measurement (1/1000 precision).",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object"
    },
    "MigrateSpec": {
      "description": "MigrateSpec contains the migrate subfeature configuration.",
      "id": "MigrateSpec",
      "properties": {},
      "type": "object"
    },
    "MigrateState": {
      "description": "MigrateState contains the state of Migrate subfeature",
      "id": "MigrateState",
      "properties": {},
      "type": "object"
    },
    "MultiClusterIngressFeatureSpec": {
      "description": "**Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.",
      "id": "MultiClusterIngressFeatureSpec",
      "properties": {
        "billing": {
          "description": "Deprecated: This field will be ignored and should not be set. Customer's billing structure.",
          "enum": [
            "BILLING_UNSPECIFIED",
            "PAY_AS_YOU_GO",
            "ANTHOS_LICENSE"
          ],
          "enumDescriptions": [
            "Unknown",
            "User pays a fee per-endpoint.",
            "User is paying for Anthos as a whole."
          ],
          "type": "string"
        },
        "configMembership": {
          "description": "Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Operation": {
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "id": "Operation",
      "properties": {
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "error": {
          "$ref": "GoogleRpcStatus",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object"
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "OperationMetadata": {
      "description": "Represents the metadata of the long-running operation.",
      "id": "OperationMetadata",
      "properties": {
        "apiVersion": {
          "description": "Output only. API version used to start the operation.",
          "readOnly": true,
          "type": "string"
        },
        "cancelRequested": {
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "readOnly": true,
          "type": "boolean"
        },
        "createTime": {
          "description": "Output only. The time the operation was created.",
          "format": "google-datetime",
          "readOnly": true,
          "type": "string"
        },
        "endTime": {
          "description": "Output only. The time the operation finished running.",
          "format": "google-datetime",
          "readOnly": true,
          "type": "string"
        },
        "statusDetail": {
          "description": "Output only. Human-readable status of the operation, if any.",
          "readOnly": true,
          "type": "string"
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "readOnly": true,
          "type": "string"
        },
        "verb": {
          "description": "Output only. Name of the verb executed by the operation.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "Policy": {
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "id": "Policy",
      "properties": {
        "auditConfigs": {
          "description": "Specifies cloud audit logging configuration for this policy.",
          "items": {
            "$ref": "AuditConfig"
          },
          "type": "array"
        },
        "bindings": {
          "description": "Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.",
          "items": {
            "$ref": "Binding"
          },
          "type": "array"
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "format": "byte",
          "type": "string"
        },
        "version": {
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PolicyControllerHubConfig": {
      "description": "Configuration for Policy Controller",
      "id": "PolicyControllerHubConfig",
      "properties": {
        "auditIntervalSeconds": {
          "description": "Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.",
          "format": "int64",
          "type": "string"
        },
        "exemptableNamespaces": {
          "description": "The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "installSpec": {
          "description": "The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.",
          "enum": [
            "INSTALL_SPEC_UNSPECIFIED",
            "INSTALL_SPEC_NOT_INSTALLED",
            "INSTALL_SPEC_ENABLED",
            "INSTALL_SPEC_SUSPENDED"
          ],
          "enumDescriptions": [
            "Spec is unknown.",
            "Request to uninstall Policy Controller.",
            "Request to install and enable Policy Controller.",
            "Request to suspend Policy Controller i.e. its webhooks. If Policy Controller is not installed, it will be installed but suspended."
          ],
          "type": "string"
        },
        "logDeniesEnabled": {
          "description": "Logs all denies and dry run failures.",
          "type": "boolean"
        },
        "monitoring": {
          "$ref": "PolicyControllerMonitoringConfig",
          "description": "Monitoring specifies the configuration of monitoring."
        },
        "mutationEnabled": {
          "description": "Enables the ability to mutate resources using Policy Controller.",
          "type": "boolean"
        },
        "referentialRulesEnabled": {
          "description": "Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.",
          "type": "boolean"
        },
        "templateLibraryConfig": {
          "$ref": "PolicyControllerTemplateLibraryConfig",
          "description": "Configures the library templates to install along with Policy Controller."
        }
      },
      "type": "object"
    },
    "PolicyControllerMembershipSpec": {
      "description": "**Policy Controller**: Configuration for a single cluster. Intended to parallel the PolicyController CR.",
      "id": "PolicyControllerMembershipSpec",
      "properties": {
        "policyControllerHubConfig": {
          "$ref": "PolicyControllerHubConfig",
          "description": "Policy Controller configuration for the cluster."
        },
        "version": {
          "description": "Version of Policy Controller installed.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PolicyControllerMembershipState": {
      "description": "**Policy Controller**: State for a single cluster.",
      "id": "PolicyControllerMembershipState",
      "properties": {
        "clusterName": {
          "description": "The user-defined name for the cluster used by ClusterSelectors to group clusters together. This should match Membership's membership_name, unless the user installed PC on the cluster manually prior to enabling the PC hub feature. Unique within a Policy Controller installation.",
          "type": "string"
        },
        "componentStates": {
          "additionalProperties": {
            "$ref": "PolicyControllerOnClusterState"
          },
          "description": "Currently these include (also serving as map keys): 1. \"admission\" 2. \"audit\" 3. \"mutation\" 4. \"constraint template library\"",
          "type": "object"
        },
        "state": {
          "description": "The overall Policy Controller lifecycle state observed by the Hub Feature controller.",
          "enum": [
            "LIFECYCLE_STATE_UNSPECIFIED",
            "NOT_INSTALLED",
            "INSTALLING",
            "ACTIVE",
            "UPDATING",
            "DECOMISSIONING",
            "CLUSTER_ERROR",
            "HUB_ERROR",
            "SUSPENDED"
          ],
          "enumDescriptions": [
            "The lifecycle state is unspecified.",
            "The PC does not exist on the given cluster, and no k8s resources of any type that are associated with the PC should exist there. The cluster does not possess a membership with the PCH.",
            "The PCH possesses a Membership, however the PC is not fully installed on the cluster. In this state the hub can be expected to be taking actions to install the PC on the cluster.",
            "The PC is fully installed on the cluster and in an operational mode. In this state PCH will be reconciling state with the PC, and the PC will be performing it's operational tasks per that software. Entering a READY state requires that the hub has confirmed the PC is installed and its pods are operational with the version of the PC the PCH expects.",
            "The PC is fully installed, but in the process of changing the configuration (including changing the version of PC either up and down, or modifying the manifests of PC) of the resources running on the cluster. The PCH has a Membership, is aware of the version the cluster should be running in, but has not confirmed for itself that the PC is running with that version.",
            "The PC may have resources on the cluster, but the PCH wishes to remove the Membership. The Membership still exists.",
            "The PC is not operational, and the PCH is unable to act to make it operational. Entering a CLUSTER_ERROR state happens automatically when the PCH determines that a PC installed on the cluster is non-operative or that the cluster does not meet requirements set for the PCH to administer the cluster but has nevertheless been given an instruction to do so (such as 'install').",
            "In this state, the PC may still be operational, and only the PCH is unable to act. The hub should not issue instructions to change the PC state, or otherwise interfere with the on-cluster resources. Entering a HUB_ERROR state happens automatically when the PCH determines the hub is in an unhealthy state and it wishes to 'take hands off' to avoid corrupting the PC or other data.",
            "Policy Controller (PC) is installed but suspended. This means that the policies are not enforced, but violations are still recorded (through audit)."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "PolicyControllerMonitoringConfig": {
      "description": "MonitoringConfig specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: [\"cloudmonitoring\", \"prometheus\"]",
      "id": "PolicyControllerMonitoringConfig",
      "properties": {
        "backends": {
          "description": "Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.",
          "items": {
            "enum": [
              "MONITORING_BACKEND_UNSPECIFIED",
              "PROMETHEUS",
              "CLOUD_MONITORING"
            ],
            "enumDescriptions": [
              "Backend cannot be determined",
              "Prometheus backend for monitoring",
              "Stackdriver/Cloud Monitoring backend for monitoring"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PolicyControllerOnClusterState": {
      "description": "OnClusterState represents the state of a sub-component of Policy Controller.",
      "id": "PolicyControllerOnClusterState",
      "properties": {
        "details": {
          "description": "Surface potential errors or information logs.",
          "type": "string"
        },
        "state": {
          "description": "The lifecycle state of this component.",
          "enum": [
            "LIFECYCLE_STATE_UNSPECIFIED",
            "NOT_INSTALLED",
            "INSTALLING",
            "ACTIVE",
            "UPDATING",
            "DECOMISSIONING",
            "CLUSTER_ERROR",
            "HUB_ERROR",
            "SUSPENDED"
          ],
          "enumDescriptions": [
            "The lifecycle state is unspecified.",
            "The PC does not exist on the given cluster, and no k8s resources of any type that are associated with the PC should exist there. The cluster does not possess a membership with the PCH.",
            "The PCH possesses a Membership, however the PC is not fully installed on the cluster. In this state the hub can be expected to be taking actions to install the PC on the cluster.",
            "The PC is fully installed on the cluster and in an operational mode. In this state PCH will be reconciling state with the PC, and the PC will be performing it's operational tasks per that software. Entering a READY state requires that the hub has confirmed the PC is installed and its pods are operational with the version of the PC the PCH expects.",
            "The PC is fully installed, but in the process of changing the configuration (including changing the version of PC either up and down, or modifying the manifests of PC) of the resources running on the cluster. The PCH has a Membership, is aware of the version the cluster should be running in, but has not confirmed for itself that the PC is running with that version.",
            "The PC may have resources on the cluster, but the PCH wishes to remove the Membership. The Membership still exists.",
            "The PC is not operational, and the PCH is unable to act to make it operational. Entering a CLUSTER_ERROR state happens automatically when the PCH determines that a PC installed on the cluster is non-operative or that the cluster does not meet requirements set for the PCH to administer the cluster but has nevertheless been given an instruction to do so (such as 'install').",
            "In this state, the PC may still be operational, and only the PCH is unable to act. The hub should not issue instructions to change the PC state, or otherwise interfere with the on-cluster resources. Entering a HUB_ERROR state happens automatically when the PCH determines the hub is in an unhealthy state and it wishes to 'take hands off' to avoid corrupting the PC or other data.",
            "Policy Controller (PC) is installed but suspended. This means that the policies are not enforced, but violations are still recorded (through audit)."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "PolicyControllerTemplateLibraryConfig": {
      "description": "The config specifying which default library templates to install.",
      "id": "PolicyControllerTemplateLibraryConfig",
      "properties": {
        "included": {
          "description": "Whether the standard template library should be installed or not.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServiceMeshControlPlaneManagement": {
      "description": "Status of control plane management.",
      "id": "ServiceMeshControlPlaneManagement",
      "properties": {
        "details": {
          "description": "Explanation of state.",
          "items": {
            "$ref": "ServiceMeshStatusDetails"
          },
          "type": "array"
        },
        "state": {
          "description": "LifecycleState of control plane management.",
          "enum": [
            "LIFECYCLE_STATE_UNSPECIFIED",
            "DISABLED",
            "FAILED_PRECONDITION",
            "PROVISIONING",
            "ACTIVE",
            "STALLED",
            "NEEDS_ATTENTION",
            "DEGRADED"
          ],
          "enumDescriptions": [
            "Unspecified",
            "DISABLED means that the component is not enabled.",
            "FAILED_PRECONDITION means that provisioning cannot proceed because of some characteristic of the member cluster.",
            "PROVISIONING means that provisioning is in progress.",
            "ACTIVE means that the component is ready for use.",
            "STALLED means that provisioning could not be done.",
            "NEEDS_ATTENTION means that the component is ready, but some user intervention is required. (For example that the user should migrate workloads to a new control plane revision.)",
            "DEGRADED means that the component is ready, but operating in a degraded state."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServiceMeshDataPlaneManagement": {
      "description": "Status of data plane management. Only reported per-member.",
      "id": "ServiceMeshDataPlaneManagement",
      "properties": {
        "details": {
          "description": "Explanation of the status.",
          "items": {
            "$ref": "ServiceMeshStatusDetails"
          },
          "type": "array"
        },
        "state": {
          "description": "Lifecycle status of data plane management.",
          "enum": [
            "LIFECYCLE_STATE_UNSPECIFIED",
            "DISABLED",
            "FAILED_PRECONDITION",
            "PROVISIONING",
            "ACTIVE",
            "STALLED",
            "NEEDS_ATTENTION",
            "DEGRADED"
          ],
          "enumDescriptions": [
            "Unspecified",
            "DISABLED means that the component is not enabled.",
            "FAILED_PRECONDITION means that provisioning cannot proceed because of some characteristic of the member cluster.",
            "PROVISIONING means that provisioning is in progress.",
            "ACTIVE means that the component is ready for use.",
            "STALLED means that provisioning could not be done.",
            "NEEDS_ATTENTION means that the component is ready, but some user intervention is required. (For example that the user should migrate workloads to a new control plane revision.)",
            "DEGRADED means that the component is ready, but operating in a degraded state."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServiceMeshMembershipSpec": {
      "description": "**Service Mesh**: Spec for a single Membership for the servicemesh feature",
      "id": "ServiceMeshMembershipSpec",
      "properties": {
        "controlPlane": {
          "description": "Enables automatic control plane management.",
          "enum": [
            "CONTROL_PLANE_MANAGEMENT_UNSPECIFIED",
            "AUTOMATIC",
            "MANUAL"
          ],
          "enumDescriptions": [
            "Unspecified",
            "Google should provision a control plane revision and make it available in the cluster. Google will enroll this revision in a release channel and keep it up to date. The control plane revision may be a managed service, or a managed install.",
            "User will manually configure the control plane (e.g. via CLI, or via the ControlPlaneRevision KRM API)"
          ],
          "type": "string"
        },
        "management": {
          "description": "Enables automatic Service Mesh management.",
          "enum": [
            "MANAGEMENT_UNSPECIFIED",
            "MANAGEMENT_AUTOMATIC",
            "MANAGEMENT_MANUAL"
          ],
          "enumDescriptions": [
            "Unspecified",
            "Google should manage my Service Mesh for the cluster.",
            "User will manually configure their service mesh components."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServiceMeshMembershipState": {
      "description": "**Service Mesh**: State for a single Membership, as analyzed by the Service Mesh Hub Controller.",
      "id": "ServiceMeshMembershipState",
      "properties": {
        "controlPlaneManagement": {
          "$ref": "ServiceMeshControlPlaneManagement",
          "description": "Output only. Status of control plane management",
          "readOnly": true
        },
        "dataPlaneManagement": {
          "$ref": "ServiceMeshDataPlaneManagement",
          "description": "Output only. Status of data plane management.",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "ServiceMeshSpec": {
      "description": "ServiceMeshSpec contains the serviceMesh subfeature configuration.",
      "id": "ServiceMeshSpec",
      "properties": {},
      "type": "object"
    },
    "ServiceMeshState": {
      "description": "ServiceMeshState contains the state of Service Mesh subfeature",
      "id": "ServiceMeshState",
      "properties": {},
      "type": "object"
    },
    "ServiceMeshStatusDetails": {
      "description": "Structured and human-readable details for a status.",
      "id": "ServiceMeshStatusDetails",
      "properties": {
        "code": {
          "description": "A machine-readable code that further describes a broad status.",
          "type": "string"
        },
        "details": {
          "description": "Human-readable explanation of code.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SetIamPolicyRequest": {
      "description": "Request message for `SetIamPolicy` method.",
      "id": "SetIamPolicyRequest",
      "properties": {
        "policy": {
          "$ref": "Policy",
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them."
        },
        "updateMask": {
          "description": "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: \"bindings, etag\"`",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Status": {
      "description": "Status specifies state for the subcomponent.",
      "id": "Status",
      "properties": {
        "code": {
          "description": "Code specifies AppDevExperienceFeature's subcomponent ready state.",
          "enum": [
            "CODE_UNSPECIFIED",
            "OK",
            "FAILED",
            "UNKNOWN"
          ],
          "enumDescriptions": [
            "Not set.",
            "AppDevExperienceFeature's specified subcomponent is ready.",
            "AppDevExperienceFeature's specified subcomponent ready state is false. This means AppDevExperienceFeature has encountered an issue that blocks all, or a portion, of its normal operation. See the `description` for more details.",
            "AppDevExperienceFeature's specified subcomponent has a pending or unknown state."
          ],
          "type": "string"
        },
        "description": {
          "description": "Description is populated if Code is Failed, explaining why it has failed.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TestIamPermissionsRequest": {
      "description": "Request message for `TestIamPermissions` method.",
      "id": "TestIamPermissionsRequest",
      "properties": {
        "permissions": {
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TestIamPermissionsResponse": {
      "description": "Response message for `TestIamPermissions` method.",
      "id": "TestIamPermissionsResponse",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    }
  },
  "servicePath": "",
  "title": "GKE Hub API",
  "version": "v1beta",
  "version_module": true
}