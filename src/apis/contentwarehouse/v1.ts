// Copyright 2020 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-empty-interface */
/* eslint-disable @typescript-eslint/no-namespace */
/* eslint-disable no-irregular-whitespace */

import {
  OAuth2Client,
  JWT,
  Compute,
  UserRefreshClient,
  BaseExternalAccountClient,
  GaxiosPromise,
  GoogleConfigurable,
  createAPIRequest,
  MethodOptions,
  StreamMethodOptions,
  GlobalOptions,
  GoogleAuth,
  BodyResponseCallback,
  APIRequestContext,
} from 'googleapis-common';
import {Readable} from 'stream';

export namespace contentwarehouse_v1 {
  export interface Options extends GlobalOptions {
    version: 'v1';
  }

  interface StandardParameters {
    /**
     * Auth client or API Key for the request
     */
    auth?:
      | string
      | OAuth2Client
      | JWT
      | Compute
      | UserRefreshClient
      | BaseExternalAccountClient
      | GoogleAuth;

    /**
     * V1 error format.
     */
    '$.xgafv'?: string;
    /**
     * OAuth access token.
     */
    access_token?: string;
    /**
     * Data format for response.
     */
    alt?: string;
    /**
     * JSONP
     */
    callback?: string;
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Legacy upload protocol for media (e.g. "media", "multipart").
     */
    uploadType?: string;
    /**
     * Upload protocol for media (e.g. "raw", "multipart").
     */
    upload_protocol?: string;
  }

  /**
   * Document AI Warehouse API
   *
   *
   *
   * @example
   * ```js
   * const {google} = require('googleapis');
   * const contentwarehouse = google.contentwarehouse('v1');
   * ```
   */
  export class Contentwarehouse {
    context: APIRequestContext;
    projects: Resource$Projects;

    constructor(options: GlobalOptions, google?: GoogleConfigurable) {
      this.context = {
        _options: options || {},
        google,
      };

      this.projects = new Resource$Projects(this.context);
    }
  }

  export interface Schema$AbuseiamAbuseType {
    id?: string | null;
    /**
     * Optional client specific subtype of abuse that is too specific to belong in the above enumeration. For example, some client may want to differentiate nudity from graphic sex, but both are PORNOGRAPHY.
     */
    subtype?: string | null;
  }
  export interface Schema$AbuseiamAgeRestriction {
    /**
     * This restriction applies if the user is between [min_age_years, age_years) years old.
     */
    ageYears?: number | null;
    minAgeYears?: number | null;
  }
  export interface Schema$AbuseiamAndRestriction {
    /**
     * This restriction applies if all of the children apply.
     */
    child?: Schema$AbuseiamUserRestriction[];
  }
  /**
   * A client is be a Google product, or subproduct that provides content for AbuseIAm to classify.
   */
  export interface Schema$AbuseiamClient {
    id?: string | null;
    /**
     * The name of the subservice within a client. This subservice can be used to affect the flow of decision script, or selection of backend classifiers. For example, StreetView may want to specify a panel is insufficiently blurred (maybe there is a lisense plate or public sex, etc), which requires manual review then the subservice might be "blurring".
     */
    subservice?: string | null;
  }
  /**
   * Extra information regarding evaluations received through cluster review.
   */
  export interface Schema$AbuseiamClusterEvaluationContext {
    /**
     * The family of the cluster where the case received the evaluation.
     */
    clusterFamily?: string | null;
    /**
     * The AbuseIAm rowkey of the cluster where the case received an evaluation.
     */
    clusterRowkey?: string | null;
    /**
     * The gaia id of a mail box that ops can send inquiries to for appeals. Used only by user clusters to fill a required gatekeeper param. See gaia_disableserver.DisableSpec.escalate_to field.
     */
    gaiaIdToEscalate?: string | null;
  }
  export interface Schema$AbuseiamConstantRestriction {
    /**
     * A constant of type TRUE always applies, and of type FALSE never applies.
     */
    type?: string | null;
  }
  /**
   * Pair of Verdicts used for ProjectR age/geo gating. See http://go/projectr for more information.
   */
  export interface Schema$AbuseiamContentRestriction {
    /**
     * Takedowns specified by admins via AbuseIAm
     */
    adminVerdict?: Schema$AbuseiamVerdict[];
    /**
     * User-specified takedowns
     */
    userVerdict?: Schema$AbuseiamVerdict[];
  }
  /**
   * Backends return Evaluations to AbuseIAm. One of the things Evaluations are used for is to explain Verdicts.
   */
  export interface Schema$AbuseiamEvaluation {
    abuseType?: Schema$AbuseiamAbuseType;
    /**
     * Who creates this Evaluation. This field is required.
     */
    backend?: string | null;
    /**
     * Extra information regarding the cluster review context where the case received the evaluation.
     */
    clusterEvaluationContext?: Schema$AbuseiamClusterEvaluationContext;
    /**
     * Backends can choose to put some debug info in addition to abuse_type, score, and status.
     */
    comment?: string | null;
    /**
     * A set of repeated features to allow adapters to return semi structured data. Please, prefer using feature instead of the old misc_data field since it supports richer and more structured data to be passed back.
     */
    feature?: Schema$AbuseiamFeature[];
    /**
     * Information about the manual review, for manual review evaluations. Do NOT expect this field to be set if `backend != MANUAL_REVIEW`.
     */
    manualReviewInfo?: Schema$AbuseiamManualReviewEvaluationInfo;
    /**
     * This field is used to store miscellaneous information that Backend might provide. If you find youself here considering to use this field, please prefer using the repeated feature field below instead. It supports a richer structure for passing complex data back from the backend.
     */
    miscData?: Schema$AbuseiamNameValuePair[];
    /**
     * When the evaluation was processed by the decision script.
     */
    processedMicros?: string | null;
    /**
     * Time in milliseconds when the Backend processed this Evaluation.
     */
    processTimeMillisecs?: string | null;
    /**
     * The list of regions where the evaluation applies.
     */
    region?: Schema$AbuseiamRegion[];
    score?: number | null;
    status?: string | null;
    target?: Schema$AbuseiamTarget;
    /**
     * When the Evaluation was generated.
     */
    timestampMicros?: string | null;
    /**
     * A boolean expression tree used to define the restrictions where the verdict applies. Please use java/com/google/ccc/abuse/abuseiam/client/TakedownManager.java to evaluate this proto.
     */
    userRestriction?: Schema$AbuseiamUserRestriction;
    /**
     * Version of Backend. For rules, this string is the only way to differentiate between them.
     */
    version?: string | null;
    /**
     * Information about the video review, for video review evaluations. Do NOT expect this field to be set if `backend != VIDEO_REVIEW`.
     */
    videoReviewData?: Schema$AbuseiamVideoReviewData;
  }
  export interface Schema$AbuseiamFeature {
    /**
     * Exactly one of the following should be filled in.
     */
    booleanValue?: boolean | null;
    doubleValue?: number | null;
    /**
     * Useful for applications that need to know how many times a specific feature occurs
     */
    featureCount?: string | null;
    /**
     * Useful for timestamps, or for numerical features where it is helpful for decision scripts to have exact values.
     */
    int64Value?: string | null;
    /**
     * integer value field is deprecated and shall only be used for passing the following features hardcoded in spamiam::SpamIAmMessage: spamiam::OrkutSenderId spamiam::OrkutPostnumReports spamiam::BloggerNumComments spamiam::BloggerNumCommentsByOthers Another hard-coded spamiam feature is spamiam::BlogName, which can be specified via string value.
     */
    integerValue?: number | null;
    name?: string | null;
    stringValue?: string[] | null;
    /**
     * This field should only be used to store a sequence of timestamps associated with the feature.
     */
    timestampSequence?: string[] | null;
  }
  /**
   * A node representing a table of regions and restrictions that apply to those regions. This table understands region inclusion and knows to apply the most specific rule, for example, a rule for France would override a rule for the EU for a user in France.
   */
  export interface Schema$AbuseiamGeoRestriction {
    locale?: Schema$AbuseiamGeoRestrictionLocale[];
  }
  export interface Schema$AbuseiamGeoRestrictionLocale {
    /**
     * The location where the restriction applies. Defaults to the "The world". See go/iii.
     */
    location?: string | null;
    /**
     * The UserRestriction that applies to this location. If not specified evaluates to true.
     */
    restriction?: Schema$AbuseiamUserRestriction;
  }
  /**
   * Information about various hashes that can be computed on a message ex: simhash, attachment hash, etc
   */
  export interface Schema$AbuseiamHash {
    /**
     * 64 bit hash in the hex form.
     */
    hash?: string | null;
    type?: string | null;
  }
  export interface Schema$AbuseiamManualReviewerInfo {
    credential?: string[] | null;
    username?: string | null;
  }
  /**
   * Relevant information for manual review evaluations.
   */
  export interface Schema$AbuseiamManualReviewEvaluationInfo {
    /**
     * Reviewer performing the manual review.
     */
    reviewer?: Schema$AbuseiamManualReviewerInfo;
    /**
     * Tool used to perform the manual review.
     */
    tool?: Schema$AbuseiamManualReviewTool;
  }
  export interface Schema$AbuseiamManualReviewTool {
    experimentId?: string | null;
    name?: string | null;
  }
  export interface Schema$AbuseiamNameValuePair {
    name?: string | null;
    nonUtf8Value?: string | null;
    value?: string | null;
  }
  export interface Schema$AbuseiamNotRestriction {
    /**
     * This restriction applies if the child does not apply. Only one is allowed. "repeated" is used to avoid breaking Sawzall (See b/6758277).
     */
    child?: Schema$AbuseiamUserRestriction[];
  }
  export interface Schema$AbuseiamOrRestriction {
    /**
     * This restriction applies if any of the children apply.
     */
    child?: Schema$AbuseiamUserRestriction[];
  }
  export interface Schema$AbuseiamRegion {
    /**
     * This is a CLDR Region Code: http://wiki/Main/IIIHowTo#using_region It is used to denote the region affected by a verdict.
     */
    region?: string | null;
  }
  /**
   * A SpecialRestriction is a standardized UserRestriction which lives in a table maintained via CDD.
   */
  export interface Schema$AbuseiamSpecialRestriction {
    type?: string | null;
  }
  export interface Schema$AbuseiamTarget {
    id?: string | null;
    type?: string | null;
  }
  /**
   * A structure used to configure a notification to a user.
   */
  export interface Schema$AbuseiamUserNotification {
    channel?: string | null;
  }
  /**
   * Describes restrictions on where the verdict applies. Please use {@code TakedownManager\} to evaluate this proto.
   */
  export interface Schema$AbuseiamUserRestriction {
    ageRestriction?: Schema$AbuseiamAgeRestriction;
    /**
     * Operators
     */
    andRestriction?: Schema$AbuseiamAndRestriction;
    /**
     * Constant
     */
    constantRestriction?: Schema$AbuseiamConstantRestriction;
    /**
     * Leaf Nodes
     */
    geoRestriction?: Schema$AbuseiamGeoRestriction;
    notRestriction?: Schema$AbuseiamNotRestriction;
    orRestriction?: Schema$AbuseiamOrRestriction;
    specialRestriction?: Schema$AbuseiamSpecialRestriction;
  }
  /**
   * Verdict against a target. AbuseIAm generates a verdict based on evaluations. AbuseIAm can send such verdicts to clients for enforcement.
   */
  export interface Schema$AbuseiamVerdict {
    /**
     * Target client of the verdict. It can be used to differentiate verdicts from multiple clients when such verdicts are processed in one common place.
     */
    client?: Schema$AbuseiamClient;
    /**
     * Additional info regarding the verdict.
     */
    comment?: string | null;
    decision?: string | null;
    /**
     * Time duration (in minutes) of the verdict.
     */
    durationMins?: number | null;
    /**
     * Evaluations relevant to this verdict. Every Verdict should contain at least one Evaluation.
     */
    evaluation?: Schema$AbuseiamEvaluation[];
    /**
     * Details of all the hashes that can be computed on a message, such as simhash and attachment hash
     */
    hashes?: Schema$AbuseiamHash[];
    /**
     * Is this verdict issued by legal?
     */
    isLegalIssued?: boolean | null;
    /**
     * This field is used to pass relevant / necessary scores to our clients. For eg: ASBE propogates these scores to moonshine.
     */
    miscScores?: Schema$AbuseiamNameValuePair[];
    /**
     * A short description of the reason why the verdict decision is made.
     */
    reasonCode?: string | null;
    /**
     * The regions in which this verdict should be enforced. Absence of this field indicates that the verdict is applicable everywhere.
     */
    region?: Schema$AbuseiamRegion[];
    /**
     * Restrictions on where this verdict applies. If any restriction is met, the verdict is applied there. If no restrictions are present, the verdict is considered global.
     */
    restriction?: Schema$AbuseiamVerdictRestriction[];
    /**
     * Category of the strike if this is a strike verdict.
     */
    strikeCategory?: string | null;
    target?: Schema$AbuseiamTarget;
    /**
     * The timestamp of the target. E.g., the time when the target was updated.
     */
    targetTimestampMicros?: string | null;
    /**
     * When the verdict is generated
     */
    timestampMicros?: string | null;
    /**
     * Extra notification(s) to be delivered to target user or message owner about the verdict.
     */
    userNotification?: Schema$AbuseiamUserNotification[];
    /**
     * version of decision script
     */
    version?: string | null;
  }
  /**
   * Describes restrictions on where the verdict applies.
   */
  export interface Schema$AbuseiamVerdictRestriction {
    /**
     * For a restriction to apply, all contexts must be satisfied. For example, if context[0] is COUNTRY/'GERMANY' and context[1] is DESTINATION_STREAM/'gplus:SQUARE:knitting_discussion', then the verdict applies only when the 'knitting discussion' square is viewed from inside Germany. Please note that this is present for legacy reasons and users of this field would be migrated to use the user_restriction field defined below.
     */
    context?: Schema$AbuseiamVerdictRestrictionContext[];
    /**
     * A boolean expression tree used to define the restrictions where the verdict applies. Please use java/com/google/ccc/abuse/abuseiam/client/TakedownManager.java to evaluate this proto.
     */
    userRestriction?: Schema$AbuseiamUserRestriction;
  }
  /**
   * Describes a dimension of a context where a verdict applies.
   */
  export interface Schema$AbuseiamVerdictRestrictionContext {
    /**
     * String identifying the context.
     */
    id?: string | null;
    type?: string | null;
  }
  /**
   * Information about a video review.
   */
  export interface Schema$AbuseiamVideoReviewData {
    /**
     * Serialized repeated youtube_admin.adminmatch.csai.ReferenceFragment
     */
    referenceFragment?: string[] | null;
    /**
     * Information about the video reviewer.
     */
    reviewer?: Schema$AbuseiamVideoReviewer;
    /**
     * The Viper id of the video.
     */
    videoId?: string | null;
  }
  /**
   * Information about video reviewers.
   */
  export interface Schema$AbuseiamVideoReviewer {
    type?: string | null;
    /**
     * The username of the person doing the video review.
     */
    username?: string | null;
  }
  /**
   * The serialized form of a SORI id. NOTE that this proto is stored in V4/O4 index and that new fields should not be added without getting an agreement from the serving team as well.
   */
  export interface Schema$AdsShoppingReportingOffersSerializedSoriId {
    highId?: string | null;
    lowId1?: string | null;
    lowId2?: string | null;
  }
  export interface Schema$Anchors {
    anchor?: Schema$AnchorsAnchor[];
    /**
     * The total # of local homepage anchors dropped in AnchorAccumulator.
     */
    homepageAnchorsDropped?: string | null;
    /**
     * The index tier from which the anchors were extracted. Note that this is only valid in the anchor record written by linkextractor. The value can be one of the enum values defined in segindexer/types.h.
     */
    indexTier?: number | null;
    /**
     * The total # of local non-homepage anchors dropped in AnchorAccumulator.
     */
    localAnchorsDropped?: string | null;
    /**
     * The total # of non-local anchors dropped in AnchorAccumulator.
     */
    nonlocalAnchorsDropped?: string | null;
    redundantanchorinfo?: Schema$AnchorsRedundantAnchorInfo[];
    /**
     * The *_anchors_dropped fields below are not populated by Alexandria, which uses cdoc.anchor_stats instead. The total # of redundant anchors dropped in linkextractor.
     */
    redundantAnchorsDropped?: string | null;
    /**
     * The total # of supplemental anchors dropped in AnchorAccumulator. ## DEPRECATED.
     */
    supplementalAnchorsDropped?: string | null;
    /**
     * may be implicit
     */
    targetDocid?: string | null;
    /**
     * HOST_LEVEL site chunking.
     */
    targetSite?: string | null;
    /**
     * This is produced during link extraction but not written out in the linklogs in order to save space.
     */
    targetUrl?: string | null;
  }
  export interface Schema$AnchorsAnchor {
    bucket?: number | null;
    /**
     * CATfish tags attached to a link. These are similar to link tags, except the values are created on the fly within Cookbook. See: http://sites/cookbook/exporting/indexing
     */
    catfishTags?: number[] | null;
    /**
     * If the anchor contained images, these image urls are stored here in compressed form.
     */
    compressedImageUrls?: string[] | null;
    /**
     * The anchor's original target url, compressed. Available only in Alexandria docjoins when the anchor is forwarded.
     */
    compressedOriginalTargetUrl?: string | null;
    context?: number | null;
    /**
     * This is a hash of terms near the anchor. (This is a second-generation hash replacing the value stored in the 'context' field.)
     */
    context2?: number | null;
    /**
     * used for history - the first and last time we have seen this anchor. creation_date also used for Freshdocs Twitter indexing, a retweet is an anchor of the original tweet. This field records the time when a retweet is created.
     */
    creationDate?: number | null;
    deleted?: boolean | null;
    deletionDate?: number | null;
    /**
     * DEPRECATED
     */
    demotionreason?: number | null;
    /**
     * Encoded data containing information about newsiness of anchor. Populated only if anchor is classified as coming from a newsy, high quality site. Encoded data for anchor sources are being stored in googledata/quality/freshness/news_anchors/encoded_news_anchors_data.txt Scores are being computed with quality/freshness/news_anchors/ routines.
     */
    encodedNewsAnchorData?: number | null;
    /**
     * If true, the anchor is for experimental purposes and should not be used in serving.
     */
    experimental?: boolean | null;
    /**
     * true iff exp domain
     */
    expired?: boolean | null;
    /**
     * # days past Dec 31, 1994, 23:00:00 UTC (Unix time @788914800) that this link was first seen. Should never occupy more than 15 bits. NOTE: this is NOT the same as creation_date; firstseen_date is filled during link extraction
     */
    firstseenDate?: number | null;
    /**
     * true if we think 'firstseen_date' is an accurate estimate of when the link was actually added to the source page. false if it may have existed for some time before we saw it.
     */
    firstseenNearCreation?: boolean | null;
    fontsize?: number | null;
    /**
     * How the anchor is forwarded to the canonical, available only for forwarded anchors (i.e., the field is set). The forwarding types are defined in URLForwardingUtil (segindexer/segment-indexer-util.h). Always use URLForwardingUtil to access this field and use URLForwardingUtil::GetAnchorForwardingReason to get the explanation how the anchor is forwarded to the canonical. NOTE: Use with caution as it is only set for docjoins generated using the urlmap from repository/updater.
     */
    forwardingTypes?: number | null;
    /**
     * The URL fragment for this anchor (the foo in http://www.google.com#foo)
     */
    fragment?: string | null;
    /**
     * The full context. These are not written out in the linklogs.
     */
    fullLeftContext?: string[] | null;
    fullRightContext?: string[] | null;
    /**
     * The bit ~roughly~ indicates whether an anchor's source and target pages are on the same domain. Note: this plays no role in determining whether an anchor is onsite, ondomain, or offdomain in mustang (i.e., the bit above).
     */
    isLocal?: boolean | null;
    /**
     * Used for history and freshness tracking - the timestamp this anchor is updated in indexing.
     */
    lastUpdateTimestamp?: number | null;
    /**
     * Additional information related to the anchor, such as additional anchor text or scores.
     */
    linkAdditionalInfo?: Schema$Proto2BridgeMessageSet;
    /**
     * Contains info on link type, source page, etc.
     */
    linkTags?: number[] | null;
    /**
     * For ranking purposes, the quality of an anchor is measured by its "locality" and "bucket". See quality/anchors/definitions.h for more information.
     */
    locality?: number | null;
    /**
     * This is the offset for the first term in the anchor - it can be used as a unique ID for the anchor within the document and compared against all per-tag data. This is measured in bytes from the start of the document. We write this out to the linklogs to recover the original order of links after source/target forwarding. This is necessary for computing the global related data.
     */
    offset?: number | null;
    /**
     * The docid of the anchor's original target. This field is available if and only if the anchor is forwarded.
     */
    originalTargetDocid?: string | null;
    /**
     * Original text, including capitalization and punctuation. Runs of whitespace are collapsed into a single space.
     */
    origText?: string | null;
    /**
     * Weight to be stored in linkmaps for pageranker
     */
    pagerankWeight?: number | null;
    /**
     * The number of additional links from the same source page to the same target domain. Not populated if is_local is true.
     */
    parallelLinks?: number | null;
    /**
     * DEPRECATED. It used to be set if firstseen_date is not set. It's to indicate that the anchor is possibly old, but we don't have enough information to tell until the linkage map is updated. TODO(hxu) rename it to possibly_old_firstseen_date_DEPRECATED after clean up other dependencies.
     */
    possiblyOldFirstseenDate?: boolean | null;
    /**
     * TEMPORARY
     */
    setiPagerankWeight?: number | null;
    source?: Schema$AnchorsAnchorSource;
    /**
     *  is to record the quality of the anchor's source page and is correlated with but not identical to the index tier of the source page. In the docjoins built by the indexing pipeline (Alexandria), - Anchors marked TYPE_HIGH_QUALITY are from base documents. - Anchors marked TYPE_MEDIUM_QUALITY are from documents of medium quality (roughly but not exactly supplemental tier documents). - Anchors marked TYPE_LOW_QUALITY are from documents of low quality (roughly but not exactly blackhole documents). Note that the source_type can also be used as an importance indicator of an anchor (a lower source_type value indicates a more important anchor), so it is important to enforce that TYPE_HIGH_QUALITY < TYPE_MEDIUM_QUALITY < TYPE_LOW_QUALITY To add a new source type in future, please maintain the proper relationship among the types as well. TYPE_FRESHDOCS, only available in freshdocs indexing, is a special case and is considered the same type as TYPE_HIGH_QUALITY for the purpose of anchor importance in duplicate anchor removal.
     */
    sourceType?: number | null;
    /**
     * A given target URL may be found in different encodings in different documents. We store the URL encoding with each source anchor so that we can count them later to find the encoding most likely to be expected by the Web site. Around 0.7% of target URLs are expected to require a non-default value here. The default value 0 is referenced in C++ as webutil::kDefaultUrlEncoding. See also webutil/urlencoding.
     */
    targetUrlEncoding?: number | null;
    /**
     * Space-delimited anchor words. Text that needs segmentation (like CJK or Thai) is unsegmented, since we set FLAGS_segment_during_lexing to false in mr-linkextractor.cc .
     */
    text?: string | null;
    /**
     * This field is DEPRECATED and no longer filled. For source page crawl timestamp, use Source.crawl_timestamp. Next tag id should be 62.
     */
    timestamp?: string | null;
    /**
     * DEPRECATED: Now in link_tags
     */
    type?: number | null;
    /**
     * weights are 0-127
     */
    weight?: number | null;
  }
  /**
   * attributes of the source document for the link
   */
  export interface Schema$AnchorsAnchorSource {
    /**
     * Additional information related to the source, such as news hub info.
     */
    additionalInfo?: Schema$Proto2BridgeMessageSet;
    /**
     * anchor++ cluster id
     */
    cluster?: number | null;
    /**
     * compressed source url
     */
    compressedUrl?: string | null;
    /**
     * Source page crawl timestamp.
     */
    crawlTimestamp?: string | null;
    /**
     * The docid field used to be "required", but it is now "optional" because it is not present when anchors are stored in webtable. When anchors are stored as part of docjoin files in the segment indexer, however, docid should be considered required.
     */
    docid?: string | null;
    /**
     * necessary for anything?
     */
    doclength?: number | null;
    /**
     * Information about if the source page is a home page. It can be one of the enum values defined in PerDocData::HomePageInfo (NOT_HOMEPAGE, NOT_TRUSTED, PARTIALLY_TRUSTED, and FULLY_TRUSTED).
     */
    homePageInfo?: number | null;
    /**
     * uint16 scale
     */
    indyrank?: number | null;
    /**
     * DEPRECATED, use packed_ipaddress
     */
    ipaddr?: number | null;
    /**
     * default -\> English
     */
    language?: number | null;
    /**
     * 0 -\> no hash
     */
    linkhash?: string | null;
    /**
     * Countries to which the source page is local/most relevant; stored as III identifiers for country/region codes (see http://go/iii).
     */
    localCountryCodes?: number[] | null;
    /**
     * This NSR value has range [0,1000] and is the original value [0.0,1.0] multiplied by 1000 rounded to an integer.
     */
    nsr?: number | null;
    outdegree?: number | null;
    /**
     * approx num of pointed-to sites
     */
    outsites?: number | null;
    /**
     * string in IPAddress::ToPackedString() format.
     */
    packedIpaddress?: string | null;
    /**
     * uint16 scale
     */
    pagerank?: number | null;
    /**
     * unit16 scale
     */
    pagerankNs?: number | null;
    /**
     * Page tags are described by enum PageTag in PerDocData. Page tags are used in anchors to identify properties of the linking page. These are DEPRECATED: in the future, use link_tags instead. DEPRECATED
     */
    pageTags?: number[] | null;
    /**
     * DEPRECATED
     */
    seglanguage?: number | null;
    site?: string | null;
    /**
     * uint16 scale
     */
    spamrank?: number | null;
    /**
     * deprecated, to be removed after October 20. 0-127 scale
     */
    spamscore1?: number | null;
    /**
     * 0-127 scale
     */
    spamscore2?: number | null;
    /**
     * Webtable key of source
     */
    webtableKey?: string | null;
  }
  /**
   * NOTE: in docjoins, the following anchor sampling information is only ## available in the first record of a document (under the same docid). The total number of redundant anchors dropped per (domain, text) in linkextractor. If we receive a large number of anchors from a particular domain, then we'll throw out all but a sampling of them from that domain. The data is sorted by the (domain,text) pairs. This field is not populated by Alexandria, which uses cdoc.anchor_stats instead.
   */
  export interface Schema$AnchorsRedundantAnchorInfo {
    anchorsDropped?: string | null;
    domain?: string | null;
    text?: string | null;
  }
  /**
   * Represents a GSuite customer ID. Obfuscated with CustomerIdObfuscator.
   */
  export interface Schema$AppsDynamiteCustomerId {
    customerId?: string | null;
  }
  /**
   * Contains info about the entity that something is, or is owned by.
   */
  export interface Schema$AppsDynamiteSharedOrganizationInfo {
    consumerInfo?: Schema$AppsDynamiteSharedOrganizationInfoConsumerInfo;
    customerInfo?: Schema$AppsDynamiteSharedOrganizationInfoCustomerInfo;
  }
  /**
   * Intentionally empty. Used to disambiguate consumer and customer use cases in oneof below.
   */
  export interface Schema$AppsDynamiteSharedOrganizationInfoConsumerInfo {}
  export interface Schema$AppsDynamiteSharedOrganizationInfoCustomerInfo {
    customerId?: Schema$AppsDynamiteCustomerId;
  }
  /**
   * Contains info on membership count for member types: HUMAN_USER, APP_USER & ROSTER_MEMBER different states: INVITED, JOINED
   */
  export interface Schema$AppsDynamiteSharedSegmentedMembershipCount {
    /**
     * count of members with given type and state
     */
    membershipCount?: number | null;
    membershipState?: string | null;
    memberType?: string | null;
  }
  export interface Schema$AppsDynamiteSharedSegmentedMembershipCounts {
    value?: Schema$AppsDynamiteSharedSegmentedMembershipCount[];
  }
  /**
   * A DestinationStream is a /namespace/id[0]/id[1]/.../id[n] that represents a collection of Activities. Example destinations: -The Profile Stream on http://plus.google.com/+JohnDoe/posts -A Square Stream on http://plus.google.com/squares/123 -A "comment Stream" (Fountain) on http://www.youtube.com/watch?id=123 It's possible for a single Activity to show in each of these destinations - and it might behave/look slightly differently for each one. Destinations can have their own business logic associated with them at both write-time and read-time server-side (these are documented below). Each DestinationStream is indexed and can be retrieved using the GetDestinationStreamRequest. For the repeated ID space indexing happens at all levels, e.g. if you have: /square/123/abc /square/123/efd /square/456 You can fetch /square/123/abc directly or /square/123 (which includes all Activities in both /square/123/abc and /square/123/efd), or even /square which retrieves all Activities in the Square namespace (visible for that user). On the storage layer, we represent DestinationStream as Channel (http://cs/#google3/social/common/channel/channel.proto), since the storage does not have the concept of a Stream. Both terms are used interchangeably within the service layer, but client of Social Infrastructure should use the term DestinationStream. Next ID: 3
   */
  export interface Schema$AppsPeopleActivityBackendDestinationStream {
    /**
     * The hierarchy of IDs. Each individual ID is "flat" and the repeated list defines the hierarchy. Namespaces define the "validity" of this hierachy (depth, naming convention, etc) and the server will reject invalid IDs.
     */
    id?: string[] | null;
    namespace?: string | null;
  }
  /**
   * Stores the number of different kind of user engagement actions. Abuse Report is also consider an engagement. Currently we only have abuse report engagements but in future we might add other types of engagements as well.
   */
  export interface Schema$AppsPeopleActivityStreamqualityDistillerEngagements {
    /**
     * Corresponds on "This account might be compromised or hacked" reporting action.
     */
    reportCompromised?: string | null;
    /**
     * Corresponds on "Harassment or bullying" reporting action.
     */
    reportHarassment?: string | null;
    /**
     * Corresponds on "Hate speach or graphic violence" reporting action.
     */
    reportHate?: string | null;
    /**
     * Corresponds on "Pornography or sexually explicit material" reporting action.
     */
    reportPorn?: string | null;
    /**
     * Corresponds on "Unwanted commercial content or spam" reporting action.
     */
    reportSpam?: string | null;
    /**
     * Number of times this activity was served out of asbe/stanza.
     */
    serveCount?: string | null;
    /**
     * Timestamp in seconds for which time this record is valid.
     */
    timeSec?: string | null;
    /**
     * Corresponds on Distiller comment thumbs down action.
     */
    ytThumbsDown?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiAbout {
    contentType?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * Sanitized HTML value that is only populated when the SANITIZE_ABOUT_HTML extension is requested.
     */
    safeHtmlValue?: Schema$WebutilHtmlTypesSafeHtmlProto;
    value?: string | null;
  }
  /**
   * Extension data for use in AboutMe.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedData {
    nameDisplayOptions?: Schema$AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataNameDisplayOptions;
    photosCompareData?: Schema$AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareData;
    profileEditability?: Schema$AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileEditability;
    profileNameModificationHistory?: Schema$AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileNameModificationHistory;
  }
  /**
   * See NameDisplayOptions in //depot/google3/focus/backend/proto/backend.proto. See also go/nickname-mess.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataNameDisplayOptions {
    nicknameOption?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareData {
    diffData?: Schema$AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataDiffData;
    highResUrl?: string | null;
    /**
     * True if photo diff is greater than 0.01 on any color band, or if the user has a low res photo but no high res photo. This field is primarily for use in About Me and for other uses it's recommended to use the DiffData values directly instead. The cutoff is based on a heuristic determined in go/comparing-profile-photos
     */
    inconsistentPhoto?: boolean | null;
    /**
     * Only present if the photo diff is greater than 0.01 on any color band.
     */
    lowResData?: string | null;
    lowResUrl?: string | null;
    monogramUrl?: string | null;
    /**
     * True if the low-res photo has a private ACL set.
     */
    privateLowResAcl?: boolean | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataPhotosCompareDataDiffData {
    blueDiff?: number | null;
    greenDiff?: number | null;
    redDiff?: number | null;
  }
  /**
   * See UserEditedLockedMask in //depot/google3/focus/backend/proto/backend.proto.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileEditability {
    /**
     * Read-only set of zero or more field paths that are locked for update on this person, such as "person.name", "person.email", etc. The set of fields is only populated for the requester's profile. Fields in the set cannot be edited, added, or deleted from the profile. Attempting to update any of these fields will result in an exception.
     */
    lockedField?: string[] | null;
  }
  /**
   * See ABUSE_NAME_LAST_MODIFIED in //depot/google3/focus/backend/proto/backend.proto which maps to //depot/google3/focus/proto/profileattribute.proto
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedDataProfileNameModificationHistory {
    /**
     * The number of name changes remaining at RPC request time. This can be more than name_changes_remaining, if user hasn't changed name for some time and accrued quota since last change.
     */
    computedNameChangesRemaining?: number | null;
    /**
     * The number of nickname changes remaining at RPC request time. This can be more than nickname_changes_remaining, if user hasn't changed nickname for some time and accrued quota since last change.
     */
    computedNicknameChangesRemaining?: number | null;
    /**
     * The number of name changes remaining at the time the name was last modified.
     */
    nameChangesRemaining?: number | null;
    /**
     * The last time the profile name was modified in milliseconds UTC.
     */
    nameLastModified?: string | null;
    /**
     * The number of nickname changes remaining at the time the nickname was last modified.
     */
    nicknameChangesRemaining?: number | null;
    /**
     * The last time the profile nickname was modified in milliseconds UTC.
     */
    nicknameLastModified?: string | null;
    quotaEnforcementStatus?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiAccountEmail {
    email?: string | null;
  }
  /**
   * Additional information about a container. TO BE DELETED: replaced by DeviceContactInfo.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiAdditionalContainerInfo {
    /**
     * When the container is a DEVICE_CONTACT, this list provides account information from the raw contact which is the source of this field.
     */
    rawDeviceContactInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfo[];
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiAddress {
    country?: string | null;
    countryCode?: string | null;
    /**
     * FeatureId associated with the address. The format is the same as that used for ids in PLACE containers in SourceIdentity.
     */
    encodedPlaceId?: string | null;
    extendedAddress?: string | null;
    formatted?: string | null;
    /**
     * The `type` translated and formatted in the request locale. See go/people-api-howto/localization for details on how to usage.
     */
    formattedType?: string | null;
    locality?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    poBox?: string | null;
    pointSpec?: Schema$AppsPeopleOzExternalMergedpeopleapiPointSpec;
    postalCode?: string | null;
    region?: string | null;
    streetAddress?: string | null;
    /**
     * The type of the address. The type can be free form or one of these predefined values: * `home` * `work` * `other`
     */
    type?: string | null;
  }
  /**
   * Similar to social.graph.storage.Affinity, but pared down to what the clients of the People API are interested in.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiAffinity {
    /**
     * Contains extra ranking information returned by DAS.
     */
    affinityMetadata?: Schema$SocialGraphWireProtoPeopleapiAffinityMetadata;
    affinityType?: string | null;
    /**
     * The ID of the container
     */
    containerId?: string | null;
    /**
     * The type of container to which this affinity applies
     */
    containerType?: string | null;
    /**
     * Used to log events for this affinity value, for disco diagnostic-purposes. See go/disco-diagnostics.
     */
    loggingId?: string | null;
    /**
     * Affinity value. Frequently represented as an inverse ranking, sometimes with additional data encoded. If data_formats.affinity_formats.score_format is set to RAW_SCORE then the value will be the score returned by DAS.
     */
    value?: number | null;
  }
  /**
   * Please read go/people-api-howto:age on how to get age data. Message for the `Person.age_range_repeated` field. Replaces the existing `Person.age_range` field.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiAgeRangeType {
    /**
     * Please read go/people-api-howto:age on how to get age data. Age of the user. The field is set based on profile storage fields such as account birthday. If the source fields are not present, `age_in_years` will be left unset.
     */
    ageInYears?: number | null;
    /**
     * Deprecated. Use go/supervised-accounts#capabilities-for-child-accounts instead. Denotes whether the user is under the region based Age of Consent. The user's region is based on ClientUserInfo.GlobalTos.AgreedLocation The age is inferred from Birthday field or CertifiedBornBefore field. The region based AoC is specified at go/aoc.
     */
    ageOfConsentStatus?: string | null;
    /**
     * Deprecated. Please read go/people-api-howto:age on how to get age data. Age range is populated based on `account_birthday` and `certified_born_before`, which may not be set for dasher users.
     */
    ageRange?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
  }
  /**
   * Store all app unique info that are needed for app action fulfillment.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiAppUniqueInfo {
    /**
     * Store the app unique id endpoint. This will be passed over to app to fulfill the action. For example, app_unique_id for Whatsapp will be "11234567890@s.whatsapp.net"
     */
    appUniqueId?: string | null;
    /**
     * Where this contact info was retrieved from. Note: only added for Assistant usage, and will not be populated by PAPI. This is due to the coupling between Assistant Proto, and PAPI proto. (//depot/google3/quality/qrewrite/servlets/proto/focus_name.proto)
     */
    contactInfoSource?: string | null;
    /**
     * Store third party endpoint that is displayed to users. For example, display_app_unique_id for Whatsapp will be "Message +11234567890".
     */
    displayAppUniqueId?: string | null;
    /**
     * Store third party endpoint label. For example, "HOME", "WORK"
     */
    label?: string | null;
    /**
     * Store mimetype of this endpoint. We will use this as the differentiator for Assistant to know whether to use the RawContact for messaging, call or video call. For example, send message mimetype for whatsapp: "vnd.android.cursor.item/vnd.com.whatsapp.profile" voice call mimetype for whatsapp: "vnd.android.cursor.item/vnd.com.whatsapp.voip.call"
     */
    mimetype?: string | null;
  }
  /**
   * The best suggested name to use for the Person from the available source fields, which may include FileAs, Name, Org, Email, IM, Phone, ... Rough source container priority order is Contact, then Profile, then Place.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiBestDisplayName {
    /**
     * The container the suggested name was sourced from
     */
    containerType?: string | null;
    /**
     * The display name. This name is intended to be the best name to display for this Person. It may be built from a variety of fields, even if those fields are not explicitly requested in the request mask. Generally, the display name is formatted in 'first last' format. If the name appears to be a CJK name (as determined by a heuristic), the 'last first' format will be used. There may be other cases that the 'last first' format is used which are not documented here. See the code at: http://google3/java/com/google/focus/backend/client/DisplayNameFormatter.java?l=659&rcl=351360938
     */
    displayName?: string | null;
    /**
     * The display name, always in 'last first' format. This field does not depend on the format of `display_name` and will always be in 'last first' format.
     */
    displayNameLastFirst?: string | null;
  }
  /**
   * IMPORTANT NOTES: - Requesting person.birthday requires membership in the purpose limited data ACL group sgbe-ac-d-birthday-(read|mutate). Contact people-api-eng@ for assistance with initial setup. - The birthday field should not be used to calculate the requester's age! To determine the requester's age, use person.age_range_repeated. - For more details about age see go/peopleapi-howto/age Birthday value may not be present: - Consumer users generally required to have account birthday set (required at account creation), though some users created via legacy flows may not have birthday present. - Dasher users generally don't require birthday, but could optionally have it set by users. - Any other types of accounts (e.g. robot, service) do not have birthdays. - Account Birthday field may be present but without birthday value set for grace period birthday (provisional new birthday). For users that do have birthday data: - "Profile Birthday" (person.birthday.metadata.container is PROFILE) may not have a year set if user "hides" the year. - "Account Birthday" (see api-specific notes below) will only be returned for the requester's own profile. - People API (go/peopleapi): * Account birthday is only supported in GetPeople for PeopleAPI. * If account birthday is needed, use a request mask with: `include_field { paths: "person.birthday" \}` `include_container: ACCOUNT` - People API++ (go/peopleapi++): * Account birthday is supported for most apis in PeopleAPI++. * If account birthday is needed, use a request mask with: `include_field { paths: "person.account_birthday" \}` `include_container: PROFILE` (note: it will also need `include_container: DOMAIN_PROFILE` because they must be requested together: go/people-api-masks#profile-domain_profile) - See go/papi-vs-papi++#birthday for more details.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiBirthday {
    /**
     * Only supported for PROFILE/DOMAIN_PROFILE/ACCOUNT container.
     */
    ageDisableGracePeriod?: Schema$AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriod;
    /**
     * Whether the user has opted in to display their birthday via photo decorations. Only supported for PROFILE/DOMAIN_PROFILE container.
     */
    birthdayDecoration?: Schema$SocialGraphApiProtoBirthdayDecoration;
    /**
     * Only supported for PROFILE/DOMAIN_PROFILE/ACCOUNT container.
     */
    birthdayResolution?: string | null;
    /**
     * Birthdays are more accurately represented as a calendar day that does not depend on a timestamp representation at all. When given a timestamp, there are lots of opportunities to make mistakes, so a CalendarDay proto is replacing timestamps. Currently this is always returned by PeopleApi on reads that include birthday fields. New clients should write using calendar_day. Clients that were already writing via date_ms are allowlisted such that writes use that field. Old callers should migrate to writing BOTH date_ms and calendar_day values. If those are consistent, they may be removed from the 'legacy_timestamp_event_write_behavior_enabled' capability.
     */
    calendarDay?: Schema$GoogleTypeDate;
    /**
     * Birthdays are currently represented as timestamp values, although the interpretation of these timestamp values is a calendar date. Clients are recommended to read the calendar_day field, which is easier to work with than date_ms. New clients writing to PeopleApi must set calendar_day instead of date_ms. There are a few important details about how this value should be mapped to a calendar date that should be consistent among all clients. 1. Epoch - The epoch or calendar date equivalent to 0 ms is chosen to be 1970-01-01 UTC. 2. Timezone - All of the conversions to calendars should occur in the UTC timezone. We don't typically think of someones birthday changing when they travel, so clients should not use local times. 3. Calendar - The calendar used for the dates should be a Gregorian proleptic calendar. Proleptic means that the rules of the Gregorian calendar are retrofitted to before its adoption. It is easy to get this wrong, particularly with the java GregorianCalendar class, which by default is a mixed Gregorian/Julian calendar. Joda Time makes this easy, but if it's not an option, look into GregorianCalendar.setGregorianChange(). 4. Omitted years - Clients have chosen to represent birthdays or events without years as timestamps within the year zero. When the computed date has a year of 0, it means the client did not specify a year. Note that a year 0 does not exist in a chronology like the familiar Anno Domini (A.D. and B.C.); clients must agree on year numbering. 5. Year Numbering - The chronology used to map dates to the calendar should use Astronomical Year Numbering so that the year 0 is defined and dates before it have a negative year. If libraries only provide Anno Domini, then the year of 1 BC corresponds to year zero and an omitted user provided year. Other BC values are presumed rare, but clients should still not ignore the era and interpret the year as an A.D. value, especially if writing values back to PeopleApi.
     */
    dateMs?: string | null;
    /**
     * date_ms_as_number contains the same data as date_ms, but has a different type in generated javascript bindings. Non javascript clients can ignore it.
     */
    dateMsAsNumber?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * People Prompts settings for contact birthday data. Only supported for CONTACT container.
     */
    prompt?: Schema$SocialGraphApiProtoPrompt;
    /**
     * Actual value entered. Allows unstructured values.
     */
    value?: string | null;
  }
  /**
   * Whether this field is set or not determines whether an account is in the grace period. While in the grace period, the user is unable to change their birthday on their own, and will be age-disabled if they don't act in a limited amount of time. Applies only to ServiceData Birthday. Users enter the grace period if they choose a birthday below the Age of Consent (go/aoc). After the grace period ends, the account will be age disabled. See go/age-disable-grace-period-dd.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriod {
    /**
     * Provisional birthday <AoC the user provided, which made them enter the grace period. The main birthday fields were not altered yet while in the grace period.
     */
    calendarDay?: Schema$GoogleTypeDate;
    /**
     * Timestamp which signifies the end of the grace period for this account.
     */
    gracePeriodEnd?: string | null;
    /**
     * Timestamp which signifies the start of the grace period for this account.
     */
    gracePeriodStart?: string | null;
    gracePeriodType?: string | null;
    manualGracePeriodInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodManualGracePeriodInfo;
  }
  /**
   * Information provided within MutateDataRequest when setting a user into AgeDisableGracePeriod manually. When the grace period expires, this info will be forwarded to Gaia when disabling the user. cs//symbol:InitiateAgeDisableGracePeriodArguments
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiBirthdayAgeDisableGracePeriodManualGracePeriodInfo {
    /**
     * The Gaia ID of an email that ops can send inquiries to for appeals.
     */
    escalateTo?: string | null;
    /**
     * The Gaia ID of a Googler who initiated this disable.
     */
    executedBy?: string | null;
    /**
     * When setting a user into age grace period manually, the requester can additionally supply a short human-readable reason of why the account is put into manual grace period. The description will be forwarded to Gaia when we disable the account when the grace period expires.
     */
    reason?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiBraggingRights {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    value?: string | null;
  }
  /**
   * A url to the person's calendar. As of 03/2018 is not supported for user Profile.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiCalendar {
    /**
     * The `type` translated and formatted in the request locale. See go/people-api-howto/localization for details on how to usage.
     */
    formattedType?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * The type of the calendar URL. The type can be free form or one of these predefined values: * `home` * `freeBusy` * `work`
     */
    type?: string | null;
    url?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedData {
    /**
     * Indicates which data source was used to populate the caller ID result
     */
    callerIdSource?: Schema$AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataCallerIdSource;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedDataCallerIdSource {
    sourceType?: string | null;
  }
  /**
   * Information related to domain administrator (or authority) certification of a users age.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiCertifiedBornBefore {
    /**
     * Indicates that the user was born at or before this time.
     */
    bornBefore?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiChannelData {
    /**
     * Unique ID that corresponds to a Youtube channel.
     */
    channelId?: string | null;
    /**
     * Number of comments for a given Youtube channel.
     */
    commentCount?: string | null;
    /**
     * Description of the channel.
     */
    description?: string | null;
    playlistCount?: string | null;
    /**
     * A FIFE URL pointing to the channel's profile image (go/avatar-fife-urls) with default fife url options. Also refer to go/people-api-concepts:photos for People API's FIFE best practices. The image could be up to a couple of days stale, though it is much fresher in practice. If a fresh image is required, contact the YouTubeAccountProfileService. The URL itself expires ~30 days after generation.
     */
    profilePictureUrl?: string | null;
    /**
     * URL of user's Youtube channel profile.
     */
    profileUrl?: string | null;
    /**
     * Number of subscribers for a given Youtube channel.
     */
    subscriberCount?: string | null;
    /**
     * Title of the YouTube channel
     */
    title?: string | null;
    /**
     * Whether or not the channel's profile has a title/avatar that is canonical in YouTube. Used to determine if the product profile card should be part of the core persona or have their own persona.
     */
    usesYoutubeNames?: boolean | null;
    /**
     * Number of videos uploaded in a given Youtube channel.
     */
    videoCount?: string | null;
  }
  /**
   * A circle membership that the person has. A circle membership is created by adding a person to a circle by person-id or by email.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiCircleMembership {
    /**
     * The circle that the person belongs to.
     */
    circleId?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
  }
  /**
   * Arbitrary client data that is populated based on the client
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiClientData {
    key?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    namespace?: string | null;
    value?: string | null;
  }
  /**
   * Email for Google product communication with the user. This is only allowed in ServiceData. It is purely synthesized and read-only, and contains at most one field. It proxies from RawCommunicationEmail and only includes the primary field if exists. Otherwise if RawCommunicationEmail does not have primary, this includes a field synthesized from valid Gaia primary account email. Otherwise if Gaia primary account email is invalid, this field is empty. See go/comm-email-use for more details.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiCommunicationEmail {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    value?: string | null;
  }
  /**
   * Contact-level people-prompts settings and contact-level connection reminders. Part of go/people-prompts.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiConnectionReminder {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * Contact-level "reminder to connect" prompts for this contact.
     */
    prompt?: Schema$SocialGraphApiProtoPrompt[];
  }
  /**
   * Contact creation timestamps and related metadata. See go/contact-edit-history. This message is a pure wrapper of the shared ContactCreactionContext message so that it can be a top-level person field. No other fields should be added to the message.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiContactCreateContextInfo {
    contactCreateContext?: Schema$SocialGraphApiProtoContactCreateContext;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
  }
  /**
   * Contact edit timestamps and related metadata. See go/contact-edit-history. This message is a pure wrapper of the shared ContactCreactionContext message so that it can be a top-level person field. No other fields should be added to the message.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiContactEditContextInfo {
    contactEditContext?: Schema$SocialGraphApiProtoContactEditContext;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
  }
  /**
   * A membership that the person has. The person can be a member of multiple circles and multiple contact-groups. A circle membership is created by adding a person to a circle by person-id or by email. A contact-group membership is created by adding a contact to a contact-group.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiContactGroupMembership {
    /**
     * The contact-group that the person belong to. The id can be either a hex-formatted id or a camel-cased SystemContactGroup predefined group name. The id will be predefined group name iff the system_contact_group_id has a value.
     */
    contactGroupId?: string | null;
    /**
     * Information related to delegated group that this contact belongs to.
     */
    delegatedGroupInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiDelegatedGroupInfo;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * This field will be populated when the membership is in a system-reserved contact-group.
     */
    systemContactGroupId?: string | null;
  }
  /**
   * Contact level People Prompt settings. This message is a pure wrapper of the shared ContactPromptSettings message so that it can be a top-level person field. No other fields should be added to the message.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiContactPromptSettingsInfo {
    contactPromptSettings?: Schema$SocialGraphApiProtoContactPromptSettings;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
  }
  /**
   * Contact state and related metadata. See go/fbs-contacts-trash. This message is a pure wrapper of the shared ContactState message so that it can be a top-level person field. No other fields should be added to the message.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiContactStateInfo {
    contactState?: Schema$SocialGraphApiProtoContactState;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
  }
  /**
   * CoverPhoto is the long banner photo (also called full bleed photo) at the top of G+ profile page.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiCoverPhoto {
    imageHeight?: number | null;
    imageId?: string | null;
    imageUrl?: string | null;
    imageWidth?: number | null;
    isAnimated?: boolean | null;
    isDefault?: boolean | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
  }
  /**
   * Contains customer data for profile owner proxied from D3.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiCustomerInfo {
    /**
     * DEPRECATED. Use obfuscated_customer_id instead. If result has a GSuite Customer ID, this field will continue to be populated with -1 to indicate the presence of a value for backwards compatibility with clients in the wild. See b/144596193.
     */
    customerId?: string | null;
    /**
     * Customer organization name for dasher user.
     */
    customerName?: string | null;
    /**
     * Obfuscated FlexOrgs customer ID for Dasher user. See cs/symbol:CustomerIdObfuscator.
     */
    obfuscatedCustomerId?: string | null;
  }
  /**
   * Custom fields associated with a person, from the custom schema defined on the domain. See go/custompeopleapi and go/customfocus. NOTE: these are only updatable via Cloud Directory (go/cd).
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiCustomSchemaField {
    fieldDisplayName?: string | null;
    fieldId?: string | null;
    fieldType?: string | null;
    /**
     * The `type` translated and formatted in the request locale. See go/people-api-howto/localization for details on how to usage.
     */
    formattedType?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    multiValued?: boolean | null;
    schemaDisplayName?: string | null;
    schemaId?: string | null;
    /**
     * The type of the custom schema field. The type can be free form or one of these predefined values: * `home` * `other` * `work`
     */
    type?: string | null;
    /**
     * String representation of the value, based on FieldType
     */
    value?: string | null;
  }
  /**
   * Container information for deduping. When two fields have the same value and only differ by field.metadata a service implementation can choose to avoid duplicating the fields and instead set field.metadata.other_deduped_containers This type can include information on the dedupe type (for example, strict value match vs. lenient value match)
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiDedupedContainerInfo {
    /**
     * See SourceIdentity.container_type
     */
    containerType?: string | null;
    /**
     * See SourceIdentity.id
     */
    id?: string | null;
  }
  /**
   * Information related to delegated group that this contact belongs to.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiDelegatedGroupInfo {
    /**
     * Required. The additional id specifically for a delegated group.
     */
    delegatedGroupId?: Schema$SocialGraphApiProtoDelegatedGroupId;
  }
  /**
   * Extra metadata for an aggregated or raw device contact.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadata {
    /**
     * Attributes for this device contact.
     */
    attributes?: string[] | null;
    /**
     * Usage info for this device contact.
     */
    usageInfo?: Schema$SocialGraphApiProtoUsageInfo[];
  }
  /**
   * Unique id for an aggregated device contact.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiDeviceContactId {
    /**
     * Aggregated device contact id on the source device.
     */
    contactId?: string | null;
    /**
     * Source device id (go/client-instance-id) of this device contact.
     */
    deviceId?: string | null;
  }
  /**
   * Device contact information.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiDeviceContactInfo {
    /**
     * Metadata for this device contact.
     */
    deviceContactMetadata?: Schema$AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadata;
    /**
     * Output only. True if any of the contact's phone, email or address fields can be used on devices other than the one it originated from. Note that there can be other fields, typically name, and metadata such as some of the raw_contact_infos that can be used on other devices. Assigned by the server.
     */
    hasCrossDeviceData?: boolean | null;
    /**
     * Id of the device contact.
     */
    id?: Schema$AppsPeopleOzExternalMergedpeopleapiDeviceContactId;
    /**
     * Last time a device contact was updated on device.
     */
    lastClientUpdateTime?: string | null;
    /**
     * An opaque value used by the device to look up this contact if its row id changed as a result of a sync or aggregation. See: https://developer.android.com/reference/android/provider/ContactsContract.ContactsColumns.html#LOOKUP_KEY
     */
    lookupKey?: string | null;
    /**
     * Info about the raw device contacts that make up this device contact.
     */
    rawContactInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfo[];
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfo {
    /**
     * The container ID of the entity this field creates a join to. See `SourceIdentity.id`.
     */
    containerId?: string | null;
    /**
     * The type of container that this edge points to. See `SourceIdentity.container_type`.
     */
    containerType?: string | null;
    /**
     * Data that is added to the proto by peopleapi read extensions.
     */
    extendedData?: Schema$AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoExtensionData;
    /**
     * True indicates this edge links this source to a container represented by this person object. Note: Except for certain legacy clients, EdgeKeyInfo is only created for for edges to an entity in this person and this will always be true.
     */
    materialized?: boolean | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfoExtensionData {
    /**
     * The GDataCompatibilityExtension will (temporarily) return mobile_owner_id for profile containers.
     */
    gdataCompatibilityExtensionId?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiEmail {
    certificate?: Schema$AppsPeopleOzExternalMergedpeopleapiEmailCertificate[];
    classification?: string | null;
    /**
     * To read or update, use the CONTACT_GROUP_PREFERENCE mask field.
     */
    contactGroupPreference?: Schema$AppsPeopleOzExternalMergedpeopleapiEmailContactGroupPreference[];
    displayName?: string | null;
    extendedData?: Schema$AppsPeopleOzExternalMergedpeopleapiEmailExtendedData;
    /**
     * The `type` translated and formatted in the request locale. See go/people-api-howto/localization for details on how to usage.
     */
    formattedType?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    signupEmailMetadata?: Schema$AppsPeopleOzExternalMergedpeopleapiEmailSignupEmailMetadata;
    /**
     * The type of the email address. The type can be free form or one of these predefined values: * `home` * `work` * `other`
     */
    type?: string | null;
    value?: string | null;
  }
  /**
   * Represents a S/MIME certificate config for use with Gmail. See //caribou/smime/proto/certificate_status.proto. There can be zero or more certificates associated with an email address, be it profile email or contact email.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiEmailCertificate {
    /**
     * The name of this certificate configuration. Examples could be "High security level" or "For domain emails only".
     */
    configurationName?: string | null;
    /**
     * It is conceivable that certificates could be ACLed. We also need to indicate which certificate is the default. The PersonFieldMetadata can accomplish both of these.
     */
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    status?: Schema$AppsPeopleOzExternalMergedpeopleapiEmailCertificateCertificateStatus;
  }
  /**
   * Minimal S/MIME certificate status i.e. two fields per email address.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiEmailCertificateCertificateStatus {
    /**
     * The certificate expiration timestamp in seconds.
     */
    notAfterSec?: string | null;
    /**
     * Current status of the email's certificate chain.
     */
    statusCode?: string | null;
  }
  /**
   * Preferred email addresses for contact groups.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiEmailContactGroupPreference {
    contactGroupId?: string | null;
    /**
     * If the Preference was implicitly set by PeopleApi/Contacts Service. A preference with this bit will not be saved to storage. See go/contact-group-email-preference-papi-problem for more info.
     */
    isSynthetic?: boolean | null;
    type?: string | null;
  }
  /**
   * Extension data for a person email.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiEmailExtendedData {
    /**
     * For use with the CUSTOMER_INFO_ADDITIONAL_DATA extension. This includes information on whether the given email is internal to or external to the requesting user's domain.
     */
    internalExternal?: Schema$PeoplestackFlexorgsProtoInternalExternal;
    /**
     * For ListPeoplebyKnownId to indicate an email is sythesized from a lookup email.
     */
    isPlaceholder?: boolean | null;
    /**
     * For use with the TLS extension. Whether the SMTP server that handles delivery for this email address supports TLS encryption.
     */
    smtpServerSupportsTls?: boolean | null;
    /**
     * For use with the Gmail Homograph Warning extension. Whether the email contains mixed character sets that could be used to decieve users. This field is populated by the GMAIL_SECURITY_DATA extension.
     */
    usesConfusingCharacters?: boolean | null;
  }
  /**
   * Additional metadata for a signup email. This will only be set if the email's classification is SIGNUP_EMAIL.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiEmailSignupEmailMetadata {
    /**
     * This is considered to be the primary signup email. At most 1 signup email will have this set.
     */
    primary?: boolean | null;
  }
  /**
   * Emergency info for Person. See go/emergency-trusted-contacts-papi.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiEmergencyInfo {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * Opaque id from Pomeroy (go/pomeroy). Non-empty pomeroy_id means that this contact has the potential to become trusted contact or it's already trusted contact. Trust is eventually gaia<-\>gaia link, but when the trust link is initiated gaia might not be known. Until gaia is discovered, pomeroy_id is used to identify the contact uniquely. If trust_level is missing or set to TRUST_LEVEL_UNSPECIFIED pomeroy_id must be empty.
     */
    pomeroyId?: string | null;
    trustLevel?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiEvent {
    /**
     * Event are more accurately represented as a calendar day that does not depend on a timestamp representation at all. When given a timestamp, there are lots of opportunities to make mistakes, so a CalendarDay proto is replacing timestamps. PeopleApi will return these values on reads, and unless the client is a legacy caller in the legacy_timestamp_event_write_behavior_enabled capability allowlist, this value is what is used for Person writes.
     */
    calendarDay?: Schema$GoogleTypeDate;
    /**
     * The `type` translated and formatted in the request locale. See go/people-api-howto/localization for details on how to usage.
     */
    formattedType?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * People Prompts settings for contact event data.
     */
    prompt?: Schema$SocialGraphApiProtoPrompt;
    /**
     * Clients are recommended to read the calendar_day field instead of timestamp_millis. When writing events, new clients must set calendar_day instead of timestamp_millis. Events are currently represented as timestamp values, although the interpretation of these timestamp values is a calendar date. There are a few important details about how this value should be mapped to a calendar date that should be consistent among all clients. For detailed information, see Birthday.date_ms.
     */
    timestampMillis?: string | null;
    /**
     * The type of the event. The type can be free form or one of these predefined values: * `anniversary` * `other`
     */
    type?: string | null;
  }
  /**
   * External identifier associated with the person.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiExternalId {
    /**
     * The `type` translated and formatted in the request locale. See go/people-api-howto/localization for details on how to usage.
     */
    formattedType?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * The type of the external ID. The type can be free form or one of these predefined values: * `account` * `customer` * `loginId` * `network` * `organization`
     */
    type?: string | null;
    value?: string | null;
  }
  /**
   * The field ACL. Currently only populated on profile fields for the profile owner. A Person field ACL; see http://go/peopleapi-acl
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiFieldAcl {
    /**
     * A custom type of field ACL entry. The set of all ACL entries includes those listed in acl_entry as well as predefined_acl_entry.
     */
    aclEntry?: Schema$AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntry[];
    /**
     * Set of users that will be authorized to view the field by this field ACL. If the ACL is public, this will only contain ALL_USERS. This field is synthesized, read-only, and currently only used for profile photos. It's populated under "person.photo.metadata.field_acl" for the current photo ACL and "person.photo.metadata.acl_choices" for available photo ACL choices. Note: The set of authorized viewers for a given FieldAcl may depend on the user's account type and domain configuration. For example, a PRIVATE_READ FieldAcl could have any of the following authorized viewers: Consumer user: [IDENTITY_ACL_ESTABLISHED] Dasher user without domain contact sharing: [IDENTITY_ACL_ESTABLISHED] Unicorn user: [SAME_UNICORN_FAMILY] Hafez user: []
     */
    authorizedViewers?: string[] | null;
    /**
     * A common type of field ACL entry. A predefined ACL entry is a shortcut for a commonly occurring case of role and scope. For example, PUBLIC_READ is the same as an AclEntry with role = READER and scope.all_users = true. The set of all ACL entries includes those listed in acl_entry as well as predefined_acl_entry.
     */
    predefinedAclEntry?: string[] | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntry {
    role?: string | null;
    scope?: Schema$AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScope;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScope {
    /**
     * Indicates that the field is accessible to all users including unauthenticated users. For some fields this means "to everyone except blocked users".
     */
    allUsers?: boolean | null;
    /**
     * This is a "synthetic" field. In reality domains are treated as gaia- groups. This field will be 'true' when the field is ACLed to the gaia-group of the requester's domain.
     */
    domainUsers?: boolean | null;
    membership?: Schema$AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAcl;
    /**
     * Indicates that the field is accessible to a person.
     */
    person?: Schema$AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopePersonAcl;
  }
  /**
   * Used when the field is accessible to a membership that the person has.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAcl {
    circle?: Schema$AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclCircleAcl;
    contactGroup?: Schema$AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclContactGroupAcl;
  }
  /**
   * Used when a field is accessible to a circle.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclCircleAcl {
    circleId?: string | null;
    circleSet?: string | null;
    /**
     * Equivalent to Circle.display_name for the circle_id. Included when FieldAclOption.FULL_ACL_WITH_DETAILS is requested. This field is read-only and ignored on update.
     */
    displayName?: string | null;
  }
  /**
   * Used when a field is accessible to a legacy contact group. Contact groups are discouraged and may be deprecated soon. ContactGroupAcls are read-only. If they are included as part of an ACL on an Update, an exception is thrown.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopeMembershipAclContactGroupAcl {
    /**
     * A contact group ID. This is either a user-defined contact group hex ID, or it is the string name of the enum constant in Group.PredefinedId in FBS backend.proto for predefined groups. Common values for the predefined name include, but are not limited to: all, myContacts, starred, chatBuddies, friends, family, coworkers, and blocked.
     */
    contactGroupId?: string | null;
    /**
     * The localized display name for the predefined group, if known; or, the display name for the user-defined contact group. Included when FieldAclOption.FULL_ACL_WITH_DETAILS is requested.
     */
    displayName?: string | null;
  }
  /**
   * Used when a field is accessible to a person. NOTE: ACLs to a circle or to a non-self person are no longer supported, so this can only be applied to the requester self.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiFieldAclAclEntryScopePersonAcl {
    /**
     * DEPRECATED. This is not different than reading from person.name for a self-read; ACLs to a circle or to a non-self person are no longer supported. Equivalent to Name.display_name for the person_id profile. Included when the profile Name is ACLed to the requester and FieldAclOption.FULL_ACL_WITH_DETAILS is requested. This field is read-only and ignored on update.
     */
    displayName?: string | null;
    personId?: string | null;
    /**
     * DEPRECATED. This is not different than reading from person.photo for a self-read; ACLs to a circle or to a non-self person are no longer supported. Equivalent to Photo.url for the person_id profile. Included when the profile Photo is ACLed to the requester and FieldAclOption.FULL_ACL_WITH_DETAILS is requested. This field is read-only and ignored on update.
     */
    photoUrl?: string | null;
  }
  /**
   * Emergency information for Person field, such as Phone or Email. See go/emergency-trusted-contacts-papi.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiFieldEmergencyInfo {
    emergencyLevel?: string | null;
  }
  /**
   * The FileAs field in Contacts is used to override the DisplayName of a Contact for that User.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiFileAs {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    value?: string | null;
  }
  /**
   * Gender in PeopleApi has some odd semantics about writing and reading that are not obvious from the proto definition. First, the `type` string, when read, always maps to the constrained domain of "male", "female", and "other", aside from a pathological case that PeopleApi would like to fix. There are two typical patterns: 1. `type` is either "male" or "female" and `custom_type` and `address_me_as` are exactly as specified by an update to PeopleApi, although they are most often absent for "male" and "female" writes. 2. `type` is "other" and `custom_type` is set to a freeform string from the request. `address_me_as` is equal to whatever was provided at write time. When writing, the free-form string for `custom_type` can come from either `custom_type` if the field is present on the request, or if `custom_type` is absent, the string value of `type` will be copied into it. Any value in `type` will be coerced to "other" and the free-form value will be copied into `custom_type`, even if `type` is exactly "other". Prefer to explicitly set `custom_type` and set type to "other" instead of setting type to a free-form value. There are weird edge cases when the value is "unknown". Consider the behavior for `type` == "unknown" unspecified. Clients reading the gender should use the value from `formatted_type` if `type` is "male" or "female". If `type` is "other", `formatted_type` will be "Other" (or some translation) and clients should read `custom_type` for more specificity.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiGender {
    /**
     * Preferred pronoun choice. It's unclear whether this value is constrained to a finite domain by UIs. `address_me_as` may be populated regardless of whether `type` is "male", "female", or "other", although most writers only set it if `type` is "other".
     */
    addressMeAs?: string | null;
    /**
     * A free-form string indicating what the user entered as their gender. `custom_type` may exist even if the type is "male" or "female", although most writers do not set it unless `type` is "other".
     */
    customType?: string | null;
    /**
     * The `type` translated and formatted in the request locale. See go/people-api-howto/localization for details on how to usage.
     */
    formattedType?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * The gender. "male", "female", or "other". If "other", typically, additional fields will have additional information.
     */
    type?: string | null;
  }
  /**
   * Extension data for use in GPay Product Profile. go/gpay-product-profile-1-pager Contact: profiles-eng-fe@google.com
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiGPayExtendedData {
    /**
     * Failure type if there is an error when fetching product profile data.
     */
    failure?: Schema$AppsPeopleOzExternalMergedpeopleapiProductProfileFailure;
    /**
     * A number in international format including the country code that is made user readable by including formatting such as spaces. Example: "+41 44 668 1800" DEPRECATED: A user's phone number should be masked and not in an international format
     */
    internationalNumber?: string | null;
    /**
     * The masked string of a user's phone number The number will be obfucsated with * except the last 4 digits. Refer to: //java/com/google/nbu/paisa/common/PhoneNumberMasker.java
     */
    maskedNumber?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiGplusExtendedData {
    contentRestriction?: string | null;
    /**
     * Equivalent to having the DASHER_POLICY bit in the REGISTERED state.
     */
    isEnterpriseUser?: boolean | null;
  }
  /**
   * Extension data for use in Hangouts.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiHangoutsExtendedData {
    hadPastHangoutState?: string | null;
    /**
     * Populated for all contacts. Only set if had_past_hangout_state == HAD_PAST_HANGOUT. INVITATION_NEEDED is not a valid value because there already is a past hangout, which means either the invitation is still pending or it’s been accepted.
     */
    invitationStatus?: string | null;
    /**
     * True if this is a Hangouts bot.
     */
    isBot?: boolean | null;
    isDismissed?: boolean | null;
    isFavorite?: boolean | null;
    isPinned?: boolean | null;
    userType?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiIdentityInfo {
    /**
     * Original lookup token from the request that resulted in this person or one of its containers.
     */
    originalLookupToken?: string[] | null;
    /**
     * Any former IDs this person may have had, in the case that their ID may have changed. Populated only for sync requests. Examples of such changes include adding an edge to a contact that links to a profile. The ID will change from being contact-oriented to being profile-oriented. To be used to clear out old versions of a person.
     */
    previousPersonId?: string[] | null;
    /**
     * A list of sources contributing to the merged person, including profiles (with gaia-id), contacts and synthetic-contacts.
     */
    sourceIds?: Schema$AppsPeopleOzExternalMergedpeopleapiSourceIdentity[];
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiIm {
    /**
     * The `protocol` translated and formatted in the request locale. See go/people-api-howto/localization for details on how to usage.
     */
    formattedProtocol?: string | null;
    /**
     * The `type` translated and formatted in the request locale. See go/people-api-howto/localization for details on how to usage.
     */
    formattedType?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * The protocol of the IM. The protocol can be free form or one of these predefined values: * `aim` * `msn` * `yahoo` * `skype` * `qq` * `googleTalk` * `icq` * `jabber` * `netMeeting`
     */
    protocol?: string | null;
    /**
     * The type of the IM. The type can be free form or one of these predefined values: * `home` * `work` * `other`
     */
    type?: string | null;
    value?: string | null;
  }
  /**
   * How and where to send notifications to this person in other apps, and why the requester can do so. See go/reachability for more info. "How" and "where" identify the recipient in a P2P Bridge (glossary/p2p bridge), and "why" may be helpful in a UI to disambiguate which of several ways may be used to contact the recipient. How: Via a Google profile or a reachable-only phone number that the requester has access to. Specified in the target "type" and "value". Where: Apps in which the profile/phone number owner may receive notifications. Specified in the repeated "app". Why: Which fields in, e.g., a contact associated with this person make the notification target info visible to the requester. Specified in the repeated originating_field param. Example: Alice has a contact Bob, with: Email 0 = bob@gmail.com Phone 0 = +12223334444 Phone 1 = +15556667777 Email 0 and Phone 0 let Alice see Bob's public profile (obfuscated gaia ID = 123). Public profiles are visible by email by default, and Bob has explicitly made it visible via Phone 0. Bob says people can send notifications to his public profile in YouTube. Phone 2 is associated with another Google profile that Bob owns, but he doesn't want others to see it. He is okay with people sending notifications to him in Who's Down if they have this phone number, however. There will be separate InAppNotificationTargets: one for Bob's public Google profile, and one for the second phone number, which is in his private profile. IANT #1 - targeting Bob's public profile (visible via Email 0 and Phone 0): app = [YOUTUBE] type = OBFUSCATED_GAIA_ID value = 123 originating_field: [ { field_type = EMAIL, field_index = 0 \} // For Email 0 { field_type = PHONE, field_index = 0 \} // For Phone 0 ] IANT #2 - targeting Bob's private profile phone number Phone 1: app = [WHOS_DOWN] type = PHONE value = +15556667777 originating_field: [ { field_type = PHONE, field_index = 1 \} // For Phone 1 ]
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiInAppNotificationTarget {
    app?: string[] | null;
    clientData?: Schema$AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetClientData[];
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * There may be more than one field from which this IANT originates, as in the case of Bob's public profile.
     */
    originatingField?: Schema$AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetOriginatingField[];
    type?: string | null;
    /**
     * The value of the target, used for delivery. E.g., the obfuscated gaia ID for a visible profile.
     */
    value?: string | null;
  }
  /**
   * Client-specific data pertaining to app reachability. No PII data or user content should be stored in this blob.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetClientData {
    /**
     * The app to which this client data applies.
     */
    app?: string | null;
    byteValue?: string | null;
  }
  /**
   * Info for identifying the specific field in this person that lets the requester send them notifications. These are typically fields added to a contact (e.g., email). There will not always be in originating field, typically in the case that whatever permits the requester to see this target info is not something that can be used on its own for contacting this person.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiInAppNotificationTargetOriginatingField {
    /**
     * The index of the relevant field in the merged person
     */
    fieldIndex?: number | null;
    fieldType?: string | null;
    /**
     * The value of the origin field
     */
    value?: string | null;
  }
  /**
   * This is deprecated in PEOPLE_API/SHARPEN, and should only be used for PROFILES. Clients should use InAppNotificationTarget field instead. Which apps the person has indicated they are reachable at for the requester. See go/d13y and com.google.focus.proto.InAppReachability.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiInAppReachability {
    appType?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    reachabilityKey?: Schema$AppsPeopleOzExternalMergedpeopleapiInAppReachabilityReachabilityKey;
    status?: string | null;
  }
  /**
   * Information pertaining to how this reachable state was established.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiInAppReachabilityReachabilityKey {
    keyType?: string | null;
    /**
     * The value of the key by which the user said they may be reachable. E.g., the phone number.
     */
    keyValue?: string | null;
  }
  /**
   * Defines interactions that are allowed or disallowed with this person.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiInteractionSettings {
    allowed?: boolean | null;
    interaction?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiInterest {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    value?: string | null;
  }
  /**
   * The value can either by a language code conforming to the IETF BCP 47 specification or a custom freeform value. By default the returned value is proxied from FBS Profile.Language. If `include_account_locale` is set on the `MergePersonSourceOptions` the language from go/uls is preferred and returned as primary along with a secondary language from FBS.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiLanguage {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    value?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiLatLng {
    lat?: number | null;
    lng?: number | null;
  }
  /**
   * Fields used in legacy applications. Useful for joining legacy and new data streams. Most applications should not care about these fields.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiLegacyFields {
    /**
     * Mobile obfuscated gaia id. This is the same gaia id in metadata.owner_id, but obfuscated with the legacy mobile obfuscator.
     */
    mobileOwnerId?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiLimitedProfileSettingsField {
    limitedProfileSettings?: Schema$SocialGraphApiProtoLimitedProfileSettings;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiLocation {
    buildingId?: string | null;
    /**
     * The building_name field is only filled if the DESK_LOCATION_ADDITIONAL_DATA extension is active.
     */
    buildingName?: string | null;
    current?: boolean | null;
    /**
     * Most specific textual description of individual desk location.
     */
    deskCode?: string | null;
    floorName?: string | null;
    floorSection?: string | null;
    /**
     * Indicates the time this location was added or last edited.
     */
    lastUpdateTime?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * Value indicates the origin of this location information.
     */
    source?: string | null;
    /**
     * Describes the type of location. For e.g. Grew_up, Desk. Corresponds to FBS backend.proto Location.StandardTag
     */
    type?: string | null;
    value?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiManagementUpchain {
    /**
     * List of managers in the chain. If user has manager email "abc@google.com" and manager's manager has email "xyz@google.com" then the list will be: [0]: { email: "abc@google.com" \} [1]: { email: "xyz@google.com" \}
     */
    indirectManager?: Schema$AppsPeopleOzExternalMergedpeopleapiManagementUpchainIndirectManager[];
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    status?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiManagementUpchainIndirectManager {
    email?: string | null;
    personId?: string | null;
  }
  /**
   * Extension data for use in Maps Product Profile.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiMapsExtendedData {
    /**
     * Failure type if there is an error when fetching product profile data.
     */
    failure?: Schema$AppsPeopleOzExternalMergedpeopleapiProductProfileFailure;
    /**
     * Number of people the user is following.
     */
    followeeCount?: string | null;
    /**
     * Number of people who are following the user.
     */
    followerCount?: number | null;
    /**
     * Sum of creators contributions i.e. reviews, rating, questions, etc.
     */
    numContributions?: string | null;
    /**
     * The user's profile photo that might have a badge rendered at the corner if the user is eligible for a badge.
     */
    profilePhotoUrl?: string | null;
    /**
     * A user's bio, or tagline.
     */
    tagline?: string | null;
    /**
     * A topic that creator has expertise in. This will be in the format: emoji associated with the topic, display name of the topic, topic score
     */
    topicExpertise?: string[] | null;
    /**
     * A user's caption displayed under the user name on their profile page i.e. 'Local Guide Level 8'
     */
    userCaption?: string | null;
  }
  /**
   * Maps Profile Data. See go/product-profiles-backend-api.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiMapsProfile {
    fieldRestriction?: Schema$AppsPeopleOzExternalMergedpeopleapiMapsProfileFieldRestriction[];
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    tagline?: string | null;
    /**
     * A link to the profile owner's website to be displayed in profile.
     */
    websiteLink?: Schema$AppsPeopleOzExternalMergedpeopleapiMapsProfileUrlLink;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiMapsProfileFieldRestriction {
    /**
     * Opaque data associated with this restriction e.g. abuse status.
     */
    clientData?: string | null;
    type?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiMapsProfileUrlLink {
    /**
     * Anchor text to be displayed as clickable link. If not present, the URL should be displayed directly.
     */
    anchorText?: string | null;
    /**
     * The URL to be linked to.
     */
    url?: string | null;
  }
  /**
   * Represents the matching information for a field when there is a query.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiMatchInfo {
    /**
     * The list of matches ordered by most relevant matching for autocomplete coming first.
     */
    match?: Schema$AppsPeopleOzExternalMergedpeopleapiMatchInfoLookupTokenMatch[];
    /**
     * The query token we are matching against.
     */
    query?: string | null;
  }
  /**
   * All the substring that were matched for the given query against the current field. Represents a substring of another string.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiMatchInfoLookupTokenMatch {
    /**
     * Index right after the last character that matches the query. length = end-start, we have substring = [start, end).
     */
    endIndex?: number | null;
    /**
     * Index of the first unicode character that matches the query.
     */
    startIndex?: number | null;
  }
  /**
   * A membership that the person has. The person can be a member of multiple circles and multiple contact-groups. A circle membership is created by adding a person to a circle by person-id or by email. A contact-group membership is created by adding a contact to a contact-group.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiMembership {
    /**
     * A circle that the person belongs to.
     */
    circleId?: string | null;
    /**
     * A contact-group that the person belong to. The id can be either a hex-formatted id or a camel-cased SystemContactGroup predefined group name. The id will be predefined group name iff the system_contact_group_id has a value.
     */
    contactGroupId?: string | null;
    /**
     * The metadata field can be used to determine which container generated the membership. For example, when the membership has a contact_group_id, the metadata.container will be CONTACT and the container_id will be the contact Id.
     */
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * The membership has a contact_group_id, this field will be populated when the membership is in a system-reserved contact-group.
     */
    systemContactGroupId?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiMission {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    value?: string | null;
  }
  /**
   * See go/people-api-howto:names for an overview of name usage in PeopleAPI. The `unstructured_name` field contains a free form name value. The `given_name`, `middle_name`, `family_name`, etc, fields contain the structured name. For CONTACT mutates, (i.e. when Name.metadata.container is CONTACT), it is recommended for clients to set either the `unstructured_name` or the set of structured name fields, not both. * When only the `unstructured_name` is set, it is parsed to produce a best-guess set of structured name values for the `given_name`, `family_name`, etc. * When only the structured name fields are set, the various values are combined to produce an `unstructured_name`. * When both are set, the `unstructured_name` is saved as-is and the structured name fields are saved as-is. This may be confusing as they might not "match". For PROFILE mutates, (i.e. when Name.metadata.container is PROFILE), it is _required_ for clients to use the structured name fields as the unstructured field value is ignored on write. The unstructured name fields are generated for convenience on read. For DEVICE_CONTACTS, see b/156020778.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiName {
    /**
     * Read-only. A name synthesized based on `unstructured_name` and the structured name fields. Example: "John Smith" If a language code is passed in the side channel using http://cs/symbol:framework.rpc.DeprecatedPropagatedLanguageCode.value or http://cs/symbol:google.rpc.context.OriginContext.accept_language and the name does not have `honorific_prefix`, `middle_name`, or `honorific_suffix` set, the language code will be used to format `display_name`. If `include_account_locale` is set on the `MergePersonSourceOptions` and a language code is not passed in the side channel. The language code from go/uls will be used as the language code for formatting `display_name`.
     */
    displayName?: string | null;
    /**
     * Read-only. A name synthesized based on `unstructured_name` and the structured name fields with the last name first. Example: "Smith, John"
     */
    displayNameLastFirst?: string | null;
    /**
     * Read-only. The source of the display name.
     */
    displayNameSource?: Schema$SocialGraphApiProtoDisplayNameSource;
    familyName?: string | null;
    /**
     * DEPRECATED(b/70571931). Use `unstructured_name` instead.
     */
    formattedName?: string | null;
    givenName?: string | null;
    honorificPrefix?: string | null;
    honorificSuffix?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    middleName?: string | null;
    /**
     * This field is stored in contact annotations and merged at read-time. It is available with CONTACT_ANNOTATION container type at read time.
     */
    pronunciations?: Schema$SocialGraphApiProtoPronunciations;
    /**
     * Read-only. A possibly shorter version of the user's name. - The purpose of this field is to address the needs of UIs where a full display name might be too large to fit. Instead of relying on `first_name`, which might not be present, `short_display_name` is preferred. - This is only available for PROFILE and DOMAIN_PROFILE container types. - About the actual content in this field: will be the first name when it's visible to the requester, or the same as `display_name`, otherwise. A sample scenario where the first name may not be visible is when the limited profile is returned. For more info, see: http://shortn/_9iV7TJ33la
     */
    shortDisplayName?: string | null;
    /**
     * The free form name value. For contact mutates it is recommended for clients to set either the `unstructured_name` or the set of structured name fields, not both.
     */
    unstructuredName?: string | null;
    yomiFamilyName?: string | null;
    yomiFullName?: string | null;
    yomiGivenName?: string | null;
    yomiHonorificPrefix?: string | null;
    yomiHonorificSuffix?: string | null;
    yomiMiddleName?: string | null;
  }
  /**
   * Pronunciation audio metadata info. See go/name-pronunciation-backend. The metadata itself tracks the state of a user's name pronunciation audio.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiNamePronunciationAudioMetadataInfo {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * Actual metadata proto, shared with FBS backends.
     */
    namePronunciationAudioMetadata?: Schema$SocialGraphApiProtoNamePronunciationAudioMetadata;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiNickname {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    type?: string | null;
    value?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiOccupation {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    value?: string | null;
  }
  /**
   * The periods that this place is open during the week. The periods are in chronological order, starting with today in the place-local timezone. An empty (but not absent) value indicates a place that is never open, e.g. because it is closed temporarily for renovations.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiOpeningHours {
    /**
     * Is this place open right now? Always present unless we lack time-of-day or timezone data for these opening hours.
     */
    openNow?: boolean | null;
    periods?: Schema$AppsPeopleOzExternalMergedpeopleapiOpeningHoursPeriod[];
    /**
     * Localized strings describing the opening hours of this place, one string for each day of the week. Will be empty if the hours are unknown or could not be converted to localized text. Example: "Sun: 18:00-06:00"
     */
    weekdayTexts?: string[] | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiOpeningHoursEndpoint {
    /**
     * A day of the week, as an integer in the range 0-6. 0 is Sunday, 1 is Monday, etc.
     */
    day?: number | null;
    /**
     * A time in 24-hour "hhmm" format (i.e. range is 0000 to 2359).
     */
    time?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiOpeningHoursPeriod {
    close?: Schema$AppsPeopleOzExternalMergedpeopleapiOpeningHoursEndpoint;
    open?: Schema$AppsPeopleOzExternalMergedpeopleapiOpeningHoursEndpoint;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiOrganization {
    assignment?: Schema$AppsPeopleOzExternalMergedpeopleapiOrganizationAssignment[];
    certification?: string | null;
    costCenter?: string | null;
    current?: boolean | null;
    department?: string | null;
    description?: string | null;
    domain?: string | null;
    /**
     * Start and End Dates are better represented as calendar entities. The intention is to replace timestamps. Not set if no value exists. Clients can choose whether to use has* semantics or default value semantics. For writes, the default proto and an absent message are equivalent. Legacy callers in the legacy_timestamp_event_write_behavior_enabled capability allowlist should write to PeopleApi via end_ms and migrate to setting both so they can be removed from the whitelist.
     */
    endCalendarDay?: Schema$GoogleTypeDate;
    /**
     * Clients are encouraged to read the end_calendar_day instead. PeopleApi writes will still use end_ms for legacy callers that are in the legacy_timestamp_event_write_behavior_enabled capability allowlist. New writers must use the calendar_day fields.
     */
    endMs?: string | null;
    endMsAsNumber?: string | null;
    /**
     * The `string_type` translated and formatted in the request locale. See go/people-api-howto/localization for details on how to usage.
     */
    formattedStringType?: string | null;
    fteMilliPercent?: number | null;
    importance?: number | null;
    location?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    name?: string | null;
    project?: Schema$AppsPeopleOzExternalMergedpeopleapiOrganizationProject[];
    /**
     * Start and End Dates are better represented as calendar entities. The intention is to replace timestamps. Not set if no value exists. Clients can choose whether to use has* semantics or default value semantics. For writes, the default proto and an absent message are equivalent. Legacy callers in the legacy_timestamp_event_write_behavior_enabled capability allowlist should write to PeopleApi via start_ms and migrate to setting both so they can be removed from the allowlist.
     */
    startCalendarDay?: Schema$GoogleTypeDate;
    /**
     * Clients are encouraged to read the start_calendar_day instead. PeopleApi writes will still use start_ms for legacy callers that are in the legacy_timestamp_event_write_behavior_enabled capability allowlist. New writers must use the calendar_day fields.
     */
    startMs?: string | null;
    startMsAsNumber?: string | null;
    /**
     * The type of the organization. The type can be free form or one of these predefined values: * `work` * `school`
     */
    stringType?: string | null;
    symbol?: string | null;
    title?: string | null;
    type?: string | null;
    yomiName?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiOrganizationAssignment {
    name?: string | null;
    url?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiOrganizationProject {
    description?: string | null;
    name?: string | null;
    role?: string | null;
    /**
     * Mapped from StandardProjectTag / CustomProjectTag
     */
    type?: string | null;
    url?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiOtherKeyword {
    /**
     * The `type` translated and formatted in the request locale. See go/people-api-howto/localization for details on how to usage.
     */
    formattedType?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    source?: string | null;
    /**
     * The type of the event. The type depends on the `OtherKeyword.source`. `OUTLOOK` source fields must be one of: * `billing_information` * `directory_server` * `keyword` * `mileage` * `sensitivity` * `user` * `subject` All other fields are treated as a `CUSTOM` source field. The value can be free form or one of these predefined values: * `home` * `other` * `work`
     */
    type?: string | null;
    value?: string | null;
  }
  /**
   * Merged-person combines multiple sources of data like contacts and profiles. See go/people-api and go/understanding-merged-person NOTE: Why are all the fields repeated? See go/people-api-concepts#repeated
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPerson {
    about?: Schema$AppsPeopleOzExternalMergedpeopleapiAbout[];
    address?: Schema$AppsPeopleOzExternalMergedpeopleapiAddress[];
    /**
     * Deprecated. If age is needed use `person.age_range_repeated` instead. Please see go/people-api-howto:age on how to correctly get age data.
     */
    ageRange?: string | null;
    /**
     * Data on the person's age range, adult status, and age of consent. NOTE: Please read go/people-api-howto:age on how to correctly get age data.
     */
    ageRangeRepeated?: Schema$AppsPeopleOzExternalMergedpeopleapiAgeRangeType[];
    birthday?: Schema$AppsPeopleOzExternalMergedpeopleapiBirthday[];
    /**
     * Used only by contacts, no data will be returned for profiles.
     */
    braggingRights?: Schema$AppsPeopleOzExternalMergedpeopleapiBraggingRights[];
    /**
     * b/145671020: Deprecated for Profiles, but not for Contacts.
     */
    calendar?: Schema$AppsPeopleOzExternalMergedpeopleapiCalendar[];
    certifiedBornBefore?: Schema$AppsPeopleOzExternalMergedpeopleapiCertifiedBornBefore[];
    /**
     * Circles that this person is a member of.
     */
    circleMembership?: Schema$AppsPeopleOzExternalMergedpeopleapiCircleMembership[];
    clientData?: Schema$AppsPeopleOzExternalMergedpeopleapiClientData[];
    communicationEmail?: Schema$AppsPeopleOzExternalMergedpeopleapiCommunicationEmail[];
    /**
     * Reminder to connect with a Contact (part of go/people-prompts). Also contains contact-level prompts settings. Each Contact can have a single `connection_reminder` (but can have multiple Prompts inside of it). Field is repeated per PeopleAPI data model go/people-api-concepts#repeated. Only supported for CONTACT container.
     */
    connectionReminder?: Schema$AppsPeopleOzExternalMergedpeopleapiConnectionReminder[];
    contactCreateContextInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiContactCreateContextInfo[];
    contactEditContextInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiContactEditContextInfo[];
    /**
     * Contact groups that this person is a member of.
     */
    contactGroupMembership?: Schema$AppsPeopleOzExternalMergedpeopleapiContactGroupMembership[];
    contactPromptSettingsInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiContactPromptSettingsInfo[];
    /**
     * Contact state and related metadata. See go/fbs-contacts-trash. If this field was requested but is not set on the Person then the contact is in the DEFAULT contact state. This field is read-only, and should not be set on a mutate (e.g. UpdatePerson) call. Clients must call the explicit APIs (e.g. UntrashPerson) to change contact state.
     */
    contactStateInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiContactStateInfo[];
    /**
     * DEPRECATED. Now always returns a default cover photo. See go/sunset-cover-photo.
     */
    coverPhoto?: Schema$AppsPeopleOzExternalMergedpeopleapiCoverPhoto[];
    customSchemaField?: Schema$AppsPeopleOzExternalMergedpeopleapiCustomSchemaField[];
    email?: Schema$AppsPeopleOzExternalMergedpeopleapiEmail[];
    /**
     * Emergency information. See go/emergency-trusted-contacts-papi.
     */
    emergencyInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiEmergencyInfo[];
    /**
     * Event is currently in use by contacts.
     */
    event?: Schema$AppsPeopleOzExternalMergedpeopleapiEvent[];
    /**
     * Data added by extensions that are not specific to a particular field.
     */
    extendedData?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonExtendedData;
    externalId?: Schema$AppsPeopleOzExternalMergedpeopleapiExternalId[];
    fileAs?: Schema$AppsPeopleOzExternalMergedpeopleapiFileAs[];
    /**
     * A fingerprint that can be used to reliably determine if a resource has changed. Externally it is used as part of the etag.
     */
    fingerprint?: string | null;
    gender?: Schema$AppsPeopleOzExternalMergedpeopleapiGender[];
    im?: Schema$AppsPeopleOzExternalMergedpeopleapiIm[];
    /**
     * Ways to send in-app notifications to this person. See go/reachability. This field is read-only and ignored for mutates.
     */
    inAppNotificationTarget?: Schema$AppsPeopleOzExternalMergedpeopleapiInAppNotificationTarget[];
    /**
     * Used only by profile service, deprecated for PeopleAPI and Sharpen. If you aren't sure, contact people-api-users@ and profile-service-eng@.
     */
    inAppReachability?: Schema$AppsPeopleOzExternalMergedpeopleapiInAppReachability[];
    /**
     * DEPRECATED. This field isn't populated in people.list.
     */
    interactionSettings?: Schema$AppsPeopleOzExternalMergedpeopleapiInteractionSettings[];
    interest?: Schema$AppsPeopleOzExternalMergedpeopleapiInterest[];
    language?: Schema$AppsPeopleOzExternalMergedpeopleapiLanguage[];
    /**
     * DEPRECATED. This field was only for backwards compatibility with legacy GData callers, and should not be used by new clients. Legacy fields used for mobile clients.
     */
    legacyFields?: Schema$AppsPeopleOzExternalMergedpeopleapiLegacyFields;
    /**
     * Settings for the limited profile. See go/limited-profiles-api.
     */
    limitedProfileSettings?: Schema$AppsPeopleOzExternalMergedpeopleapiLimitedProfileSettingsField[];
    /**
     * Other person resources linked indirectly by an edge. The full person or just the IDs may be populated depending on request parameters. We consider linked people distinct people, but they share information. Example: A contact with two outgoing edges. The two edges are considered separate, but linked people.
     */
    linkedPerson?: Schema$AppsPeopleOzExternalMergedpeopleapiPerson[];
    location?: Schema$AppsPeopleOzExternalMergedpeopleapiLocation[];
    managementUpchain?: Schema$AppsPeopleOzExternalMergedpeopleapiManagementUpchain[];
    /**
     * MapsProfile, see go/product-profiles-backend-api
     */
    mapsProfile?: Schema$AppsPeopleOzExternalMergedpeopleapiMapsProfile[];
    /**
     * DEPRECATED. Please use `circle_membership` or `contact_group_membership` instead. Contact-groups and circles that this person is a member of.
     */
    membership?: Schema$AppsPeopleOzExternalMergedpeopleapiMembership[];
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonMetadata;
    mission?: Schema$AppsPeopleOzExternalMergedpeopleapiMission[];
    /**
     * See go/people-api-howto:names for details about names in PeopleAPI.
     */
    name?: Schema$AppsPeopleOzExternalMergedpeopleapiName[];
    /**
     * Metadata info for a user's name pronunciation audio. See go/name-pronunication-backend.
     */
    namePronunciationAudioMetadataInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiNamePronunciationAudioMetadataInfo[];
    nickname?: Schema$AppsPeopleOzExternalMergedpeopleapiNickname[];
    occupation?: Schema$AppsPeopleOzExternalMergedpeopleapiOccupation[];
    organization?: Schema$AppsPeopleOzExternalMergedpeopleapiOrganization[];
    /**
     * Legacy arbitrary key value fields
     */
    otherKeyword?: Schema$AppsPeopleOzExternalMergedpeopleapiOtherKeyword[];
    /**
     * DEPRECATED. This feature was stubbed, but never implemented. This field will not be populated with any results.
     */
    peopleInCommon?: Schema$AppsPeopleOzExternalMergedpeopleapiPerson[];
    /**
     * In order to request this field, the client must set desired PersonAttributeKey in the dedicated RequestMask field `person_attribute`. Unlike other person fields, this field cannot be requested in the `include_field` field mask.
     */
    personAttribute?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonAttribute[];
    /**
     * The ID of the person. This is determined by the backend, is unstable, and may not be the same as a user_id. Internally referred as 'personKey' to distinguish from the common PersonId pojo. See go/people-api-concepts#person-id
     */
    personId?: string | null;
    phone?: Schema$AppsPeopleOzExternalMergedpeopleapiPhone[];
    /**
     * See go/people-api-concepts/photos for usage details
     */
    photo?: Schema$AppsPeopleOzExternalMergedpeopleapiPhoto[];
    /**
     * Data specific to places. Data which also applies to contacts and profiles such as name, phone, photo, etc. are returned in the corresponding Person fields.
     */
    placeDetails?: Schema$AppsPeopleOzExternalMergedpeopleapiPlaceDetails[];
    /**
     * DEPRECATED. Info about plus pages in the person.
     */
    plusPageInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiPlusPageInfo[];
    posixAccount?: Schema$AppsPeopleOzExternalMergedpeopleapiPosixAccount[];
    /**
     * DEPRECATED. (go/people-api-concepts#repeated): Use person.profile_url_repeated instead. Access to this field is restricted to a set of legacy clients. This is a Google+-only field. See go/fbs-g+-deprecation. NOTE: `Person.profile_url` is only populated for profile-centric person.
     */
    profileUrl?: string | null;
    /**
     * This is a Google+-only field. See go/fbs-g+-deprecation.
     */
    profileUrlRepeated?: Schema$AppsPeopleOzExternalMergedpeopleapiProfileUrl[];
    /**
     * Pronouns are not supported for consumer profiles. See go/pronouns-in-people-system-prd for more details.
     */
    pronoun?: Schema$AppsPeopleOzExternalMergedpeopleapiPronoun[];
    /**
     * Information about the profiles that are a part of this Person. This is only applicable to PROFILE and DOMAIN_PROFILE containers.
     */
    readOnlyProfileInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfo[];
    /**
     * See go/relation-vs-relationship for relation vs relationship explanation.
     */
    relation?: Schema$AppsPeopleOzExternalMergedpeopleapiRelation[];
    /**
     * DEPRECATED. No data is returned for this field anymore.
     */
    relationshipInterest?: Schema$AppsPeopleOzExternalMergedpeopleapiRelationshipInterest[];
    /**
     * DEPRECATED. No data is returned for this field anymore.
     */
    relationshipStatus?: Schema$AppsPeopleOzExternalMergedpeopleapiRelationshipStatus[];
    rightOfPublicityState?: Schema$AppsPeopleOzExternalMergedpeopleapiRightOfPublicityState[];
    /**
     * Data specific to rosters (such as Google Groups and Chat Rooms). Data which also applies to contacts and profiles such as name, email, and photo, etc are returned in the corresponding Person fields.
     */
    rosterDetails?: Schema$AppsPeopleOzExternalMergedpeopleapiRosterDetails[];
    /**
     * Profile for Janata and Search. go/janata-profile-in-sgbe
     */
    searchProfile?: Schema$AppsPeopleOzExternalMergedpeopleapiSearchProfile[];
    /**
     * SipAddress is currently in use by contacts.
     */
    sipAddress?: Schema$AppsPeopleOzExternalMergedpeopleapiSipAddress[];
    skills?: Schema$AppsPeopleOzExternalMergedpeopleapiSkills[];
    /**
     * NOTE: this is used by go/starlight, but not actually used or returned in PeopleAPI. See b/27281119 for context. Please reach out to people-api-eng@ if you have questions.
     */
    socialConnection?: Schema$AppsPeopleOzExternalMergedpeopleapiSocialConnection[];
    sortKeys?: Schema$AppsPeopleOzExternalMergedpeopleapiSortKeys;
    sshPublicKey?: Schema$AppsPeopleOzExternalMergedpeopleapiSshPublicKey[];
    /**
     * Only supported for PLACE container results, no data will be returned for profiles.
     */
    tagline?: Schema$AppsPeopleOzExternalMergedpeopleapiTagline[];
    /**
     * DEPRECATED. *UNSUPPORTED*. This field is never populated.
     */
    teamsExtendedData?: Schema$AppsPeopleOzExternalMergedpeopleapiTeamsExtendedData;
    /**
     * UserDefined is currently in use by contacts.
     */
    userDefined?: Schema$AppsPeopleOzExternalMergedpeopleapiUserDefined[];
    /**
     * Add annotation_id and metadata (product_source) for visible to guests contacts go/visible-to-guests.
     */
    visibleToGuests?: Schema$AppsPeopleOzExternalMergedpeopleapiVisibleToGuests[];
    website?: Schema$AppsPeopleOzExternalMergedpeopleapiWebsite[];
  }
  /**
   * Client-specific binary blob stored with Person data. This differs from ClientData, which stores structured, key-value pairs.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPersonAttribute {
    attributeKey?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    value?: string | null;
  }
  /**
   * Extension data for the whole person entity.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPersonExtendedData {
    /**
     * For use by AboutMe and SmartProfile clients.
     */
    aboutMeExtendedData?: Schema$AppsPeopleOzExternalMergedpeopleapiAboutMeExtendedData;
    /**
     * For use with Apps Waldo Availability Data extension
     */
    appsWaldoExtendedData?: Schema$SocialGraphWireProtoPeopleapiExtensionAppsWaldoExtendedData;
    /**
     * For use with caller ID extension
     */
    callerIdExtendedData?: Schema$AppsPeopleOzExternalMergedpeopleapiCallerIdExtendedData;
    /**
     * For use with Contacts extension.
     */
    contactsExtendedData?: Schema$AppsPeopleOzExternalMergedpeopleapiWebContactsExtendedData;
    /**
     * Hosted domain this person is a member of. The domain_name is also returned as part of the person's ReadOnlyProfileInfo, so requesting it via this extension is no longer necessary.
     */
    domainName?: string[] | null;
    /**
     * For use with Dynamite extension.
     */
    dynamiteExtendedData?: Schema$SocialGraphWireProtoPeopleapiExtensionDynamiteExtendedData;
    /**
     * For use with Google Pay extension.
     */
    gpayExtendedData?: Schema$AppsPeopleOzExternalMergedpeopleapiGPayExtendedData;
    /**
     * For use with Google+ extension.
     */
    gplusExtendedData?: Schema$AppsPeopleOzExternalMergedpeopleapiGplusExtendedData;
    /**
     * For use with Hangouts extension.
     */
    hangoutsExtendedData?: Schema$AppsPeopleOzExternalMergedpeopleapiHangoutsExtendedData;
    /**
     * For use with gmail extensions and lookup by email. If true, no person was actually found using the specified email address, but we want to return TLS info about the email address regardless.
     */
    isPlaceholder?: boolean | null;
    /**
     * For use with Maps extension.
     */
    mapsExtendedData?: Schema$AppsPeopleOzExternalMergedpeopleapiMapsExtendedData;
    /**
     * For use with Paisa extension
     */
    paisaExtendedData?: Schema$SocialGraphWireProtoPeopleapiExtensionPaisaExtendedData;
    /**
     * DEPRECATED: Use people_stack_person_extended_data instead. For use with PeopleStack extension.
     */
    peopleStackExtendedData?: Schema$SocialGraphWireProtoPeopleapiExtensionPeopleStackExtendedData;
    /**
     * For use with PeopleStack extension.
     */
    peopleStackPersonExtendedData?: Schema$SocialGraphWireProtoPeopleapiExtensionPeopleStackPersonExtendedData;
    /**
     * For use with Play Games Product Profile extension. See go/jam-games-profile. The play games profile will be returned only for profile-centric requests.
     */
    playGamesExtendedData?: Schema$AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedData;
    /**
     * For use with the TLS extension and lookup by email. If true, no person was actually found using the specified email address, but we want to return TLS info about the email address regardless. DEPRECATED: Use is_placeholder instead.
     */
    tlsIsPlaceholder?: boolean | null;
    /**
     * For use with Youtube extension.
     */
    youtubeExtendedData?: Schema$AppsPeopleOzExternalMergedpeopleapiYoutubeExtendedData;
  }
  /**
   * Metadata for a single Person field. See go/understanding-merged-person
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata {
    /**
     * When the container is PROFILE/DOMAIN_PROFILE and the profile owner is the requester, this read-only, synthesized field indicates which ACLs the user is allowed to set on the profile field. This is distinct from field_acl, which is the field's currently set ACL. field_acl will always be a valid ACL choice, except for the case of default synthesized profile fields like monogram profile photos. For those, field_acl does not represent a user-set field ACL, so it may or may not be a valid choice. In all cases, default_acl_choice will always be a valid choice. This is currently only populated on the photo field when the "person.photo.metadata.acl_choices" mask is set.
     */
    aclChoices?: Schema$AppsPeopleOzExternalMergedpeopleapiFieldAcl[];
    /**
     * Additional information about the container of this field.
     */
    additionalContainerInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiAdditionalContainerInfo;
    /**
     * For field-level affinity scores. The affinity between the requester and this particular field in the Person (e.g., frequency of calling a particular phone number).
     */
    affinity?: Schema$AppsPeopleOzExternalMergedpeopleapiAffinity[];
    /**
     * Each field can have different visibility settings Only returned when explicitly requested.
     */
    contactVisibility?: string[] | null;
    /**
     * DEPRECATED. Use container_type instead. Having the Container be an enum at the PFM message level causes circular dependency when other types try to refer to it. It breaks javascript build targets.
     */
    container?: string | null;
    /**
     * DEPRECATED. Use encoded_container_id instead. The numeric id of the data source. The id is only unique within a single container type. This is only set when the id of the container is numeric, e.g. contact id.
     */
    containerId?: string | null;
    /**
     * Indicates if this field is the primary field for the container and container_id.
     */
    containerPrimary?: boolean | null;
    /**
     * The source for the data in the field.
     */
    containerType?: string | null;
    /**
     * True if this field can be used on other devices than the one it originated from. Assigned by the server. Currently only used for device contacts.
     */
    crossDeviceAllowed?: boolean | null;
    /**
     * When the container is PROFILE/DOMAIN_PROFILE and the profile owner is the requester, this read-only, synthesized field contains the default ACL choice. This can be used to select a preferred choice from acl_choices. Generally, default_acl_choice should only be preferred for default synthesized profile fields like monogram profile photos. Otherwise, the existing field_acl should be preferred. This is currently only populated on the photo field when the "person.photo.metadata.acl_choices" mask is set.
     */
    defaultAclChoice?: Schema$AppsPeopleOzExternalMergedpeopleapiFieldAcl;
    /**
     * DEPRECATED. Use container_id. Not populated or used at all.
     */
    deprecatedContactContainerId?: string | null;
    /**
     * Field is an edge key for this person. Modifying it breaks the link between data sources. This is equivalent to edge_key_info having at least one entry with materialized = true.
     */
    edgeKey?: boolean | null;
    /**
     * Edges that this field creates. This includes all edges and not necessarily just the edge relevant to the joined entities.
     */
    edgeKeyInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiEdgeKeyInfo[];
    /**
     * The encoded id of the data source. The id is only unique within a single container type. This field correlates to person.metadata.identity_info.source_id.id. This field may not be populated in some special cases, where the id is not visible to the querying user. e.g. ListAutocompletions with full phone number query.
     */
    encodedContainerId?: string | null;
    /**
     * When the container is PROFILE and the profile owner is the requester, this field indicates how the profile field is accessible.
     */
    fieldAcl?: Schema$AppsPeopleOzExternalMergedpeopleapiFieldAcl;
    /**
     * Indicates the time that the field was added or last edited. Currently this is populated for: (1) person.birthday with ContainerType PROFILE, DOMAIN_PROFILE or ACCOUNT. (2) person.name, person.address, person.relation, person.email and person.phone with ContainerType CONTACT_ANNOTATION;
     */
    lastUpdateTime?: string | null;
    /**
     * The matching informations if there was a query against this field.
     */
    matchingInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiMatchInfo[];
    /**
     * When deduping fields by value, list of containers of the fields that where deduped.
     */
    otherDedupedContainers?: Schema$AppsPeopleOzExternalMergedpeopleapiDedupedContainerInfo[];
    /**
     * If true, indicates this field is the Person's primary field eg. Contact, and (Profile) Person could have different Name fields, and the Name represented by the Person is primary. For selecting a primary field from RepeatedFields within a Person, use container_primary.
     */
    primary?: boolean | null;
    /**
     * The product(s) that generated the data in this field. Empty is equivalent to DEFAULT. ST_USER_METADATA
     */
    productMetadata?: Schema$AppsPeopleOzExternalMergedpeopleapiProductMetadata[];
    /**
     * Indicates whether this is a verified field. It is synthesized from verification and is read-only. If there is at least one verification with status PASSED, the field is considered verified. Currently this is applicable to address, email, name, and phone for PROFILE and DOMAIN_PROFILE. Use .metadata.verified in the request mask.
     */
    verified?: boolean | null;
    /**
     * Currently, only people.get may set this value
     */
    visibility?: string | null;
    /**
     * Whether the field is writeable to the requester.
     */
    writeable?: boolean | null;
  }
  /**
   * A person list with total number specified.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPersonListWithTotalNumber {
    people?: Schema$AppsPeopleOzExternalMergedpeopleapiPerson[];
    /**
     * The total number of people, which is aways no less than the size of the above list.
     */
    totalNumber?: number | null;
  }
  /**
   * Metadata for the entire Person resource.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPersonMetadata {
    /**
     * Affinities associated with the person, with respect to the requester.
     */
    affinity?: Schema$AppsPeopleOzExternalMergedpeopleapiAffinity[];
    /**
     * Populated when the data for the MergedPerson comes from a 3rd party provider or data source. Clients must display these attributions to the user if they are present. NOTE: This field is only relevant when requesting the following containers: - PLACE (data read from Maps)
     */
    attribution?: string[] | null;
    /**
     * The best name to use for this person for user-facing display. See go/people-api-howto:names for details about how this field is computed. In many cases this will simply be Person.name[0]. However, Person.name returns only explicit Name fields, but other fields maybe usable as a name (for example: nicknames, file_as, ...). `best_display_name` will be calculated from all fields in storage which are usable as a name, even fields which are not explicitly requested in the MergedPerson result. See go/javagoog/apps/tacotown/socialgraph/entity/PersonNameFormatter.java
     */
    bestDisplayName?: Schema$AppsPeopleOzExternalMergedpeopleapiBestDisplayName;
    /**
     * DEPRECATED. Indicates whether the profile owner has blocked this person. Please use `person.read_only_profile_info.block_type` instead.
     */
    blockType?: string[] | null;
    /**
     * DEPRECATED. The circles the person belongs to.
     */
    circleId?: string[] | null;
    /**
     * DEPRECATED. Please use `person.contact_group_memberships` instead. The contact groups the person belongs to.
     */
    contactGroupId?: string[] | null;
    /**
     * The IDs of all contacts contributing to this person.
     */
    contactId?: string[] | null;
    /**
     * DEPRECATED. Customized masking of the response similar to the legacy People2RequestMask People2Params request message. NOTE: This param is inherently client-specific, limited to specific legacy clients, and not open to new usage. NOTE: Effects may be applied to a subset of people in the response.
     */
    customResponseMaskingType?: string | null;
    /**
     * For sync requests (i.e., changed since the provided sync_token), indicates the resource is a tombstone for a Person resource that has been entirely deleted.
     */
    deleted?: boolean | null;
    /**
     * DEPRECATED. Please use `person.read_only_profile_info.block_type` instead.
     */
    deprecatedBlocked?: boolean | null;
    /**
     * DEPRECATED. This field is no longer populated or read.
     */
    deprecatedMembershipCircleId?: string[] | null;
    /**
     * DEPRECATED. This field is no longer populated or read.
     */
    deprecatedMembershipContactGroupId?: string[] | null;
    /**
     * Info about the aggregated device contacts. When the person contains RAW_DEVICE_CONTACT containers, each DeviceContactInfo represents a single aggregate device contact made up of one or more raw device contacts.
     */
    deviceContactInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiDeviceContactInfo[];
    /**
     * Detailed metadata about the lookup IDs and data sources included in a MergedPerson result.
     */
    identityInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiIdentityInfo;
    /**
     * DEPRECATED. Indicates whether this person is blocking the profile owner. Please use `person.read_only_profile_info.incoming_block_type` instead.
     */
    incomingBlockType?: string[] | null;
    /**
     * DEPRECATED. Indicates whether this person is in the same domain as the viewer. For proxying trust between two users based on organization membership, see: - go/flex-orgs-platform - go/flex-orgs-compliance-handbook (especially http://shortn/_ChwfAY36Ys)
     */
    inViewerDomain?: boolean | null;
    /**
     * DEPRECATED. The last update timestamps for the constituent components of this person are available in `identity_info.source_ids`. The time of the most recent change to this person, in !!!NANOS!!! (due to a bug). May be a change to any of the underlying parts of the person (profile, contact, etc.). Not guaranteed to be the timestamp of the most recent change, due to limitations in the backend. This field is not fully deprecated for backend container-specific storage services like ProfileService which lack identity_info. The use is still discouraged in such systems and they should prefer to use the `last_update_time` field of this message instead.
     */
    lastUpdateTimeMicros?: string | null;
    /**
     * The person model that is used to construct this person.
     */
    model?: string | null;
    /**
     * DEPRECATED.
     */
    objectType?: string | null;
    /**
     * DEPRECATED. Please use `person.read_only_profile_info.owner_id` instead.
     */
    ownerId?: string | null;
    /**
     * DEPRECATED. See `person.read_only_profile_info.owner_user_type` instead.
     */
    ownerUserType?: string[] | null;
    /**
     * DEPRECATED. Please use `Person.plus_page_info` instead.
     */
    plusPageType?: string | null;
    /**
     * DEPRECATED. This field is no longer populated or read.
     */
    previousPersonId?: string[] | null;
    /**
     * DEPRECATED. Stats/counters pertaining to followers and incoming edges. Please use `person.read_only_profile_info.profile_owner_stats` instead.
     */
    profileOwnerStats?: Schema$AppsPeopleOzExternalMergedpeopleapiProfileOwnerStats;
    /**
     * Contact people-directory-dev-team@ if you want to use this field.
     */
    scoringInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfo;
    /**
     * DEPRECATED. This field is no longer populated or read.
     */
    userVisibleStats?: Schema$AppsPeopleOzExternalMergedpeopleapiUserVisibleStats;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfo {
    /**
     * Only populated on a SearchDirectoryPeople call, when results are scored. Contact people-directory-dev-team@ if you want to use this field.
     */
    rawMatchQualityScore?: number | null;
    /**
     * Only populated on a SearchDirectoryPeople call that sends a request with StFieldSpecExpressions. - Used for linking indexed terms with query terms for go/better-name-matching - Name should be alphanumeric or underscores - Value should be an st expression following the syntax at go/stsyntax Contact people-directory-dev-team@ if you want to use this field.
     */
    stExpressionResults?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoStExpressionResult[];
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPersonMetadataScoringInfoStExpressionResult {
    name?: string | null;
    value?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPhone {
    /**
     * Canonicalized form that follows ITU-T E.164 international public telecommunication numbering plan.
     */
    canonicalizedForm?: string | null;
    /**
     * Emergency information. See go/emergency-trusted-contacts-papi.
     */
    emergencyInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiFieldEmergencyInfo;
    /**
     * Read-only. Field requested by specifying `HANGOUTS_PHONE_DATA` in `extension_set.extension_names`.
     */
    extendedData?: Schema$AppsPeopleOzExternalMergedpeopleapiPhoneExtendedData;
    /**
     * The `type` translated and formatted in the request locale. See go/people-api-howto/localization for details on how to usage.
     */
    formattedType?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * The type of the phone number. The type can be free form or one of these predefined values: * `home` * `work` * `mobile` * `homeFax` * `workFax` * `otherFax` * `pager` * `workMobile` * `workPager` * `main` * `googleVoice` * `other`
     */
    type?: string | null;
    uri?: string | null;
    value?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPhoneExtendedData {
    /**
     * For use with Hangouts extension.
     */
    structuredPhone?: Schema$AppsPeopleOzExternalMergedpeopleapiStructuredPhone;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPhoto {
    /**
     * Read-only. Use UpdatePersonPhoto to change photo decorations. If this photo is decorated, this field contains information about its decorations. For now, this will contain at most one entry.
     */
    decoration?: Schema$SocialGraphApiProtoDecorationOverlay[];
    /**
     * URL of an emoji avatar as an image. See go/emoji-cdn. PeopleAPI will return the SVG format so that it can be scaled client side and so that the images will not be animated. All clients that use this field must also have fall-back handling for using the `Photo.url` field if this is empty. When we have FIFE-compatible emoji-image URLs we will drop this field and return the Photo.url instead. Clients that have their own go/emoji-rendering integration may prefer to render the emoji-avatar from `Photo.glyph` field using their rendering system so that the emoji version/style match the rest of the application. For further background, see go/chatroom-avatar-as-roster-metadata. This field will only be populated if all of: - The PersonFieldMetadata `container_type` for the Photo is NAMED_CHAT_ROOM - The chat room has an emoji type avatar image set
     */
    emojiAvatarUrl?: string | null;
    /**
     * Unicode emoji representation of the chat room emoji avatar. This can be used by clients that use go/emoji-rendering directly so that they can present this with the same version/style as the rest of their application. This value may also be useful to clients as alt-text for the image. This field will only be populated if all of: - The PersonFieldMetadata `container_type` for the Photo is NAMED_CHAT_ROOM - The chat room has an emoji type avatar image set
     */
    glyph?: string | null;
    /**
     * A set of HTML data provider attributions that must be shown with the result. Supported for PLACES photos only. See: go/understanding-places-api-attribution-requirements
     */
    htmlAttribution?: string[] | null;
    /**
     * True when the photo is synthetic or generated (i.e. a monogram or default photo), false when the person has a custom photo.
     */
    isDefault?: boolean | null;
    /**
     * Indicates if the photo is a monogram avatar. Combined with is_default, the type of photo can be determined by: is_default=true, is_monogram=true: Default monogram avatar. is_default=true, is_monogram=false: Default silhouette avatar. is_default=false: Custom photo. is_monogram is irrelevant in this case.
     */
    isMonogram?: boolean | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * When is_monogram=true, this is the background color of the monogram photo as a hex RGB formatted string "RRGGBB".
     */
    monogramBackground?: string | null;
    /**
     * Read-only. A reference to the original, undecorated profile photo in storage. This field is not stored. It is populated by a live read to /SocialGraphImageService.GetActiveProfilePhoto. This field is only returned when "person.photo.original_photo" is specified in the request mask.
     */
    originalPhoto?: Schema$SocialGraphApiProtoImageReference;
    /**
     * For writes only. Indicates photo content for person photo-field update. Currently only used for profile-photo updates (not contact photos yet).
     */
    photoId?: Schema$AppsPeopleOzExternalMergedpeopleapiPhotoPhotoStorageId;
    /**
     * Most clients don't need to worry about this field and should just use the `url` to fetch the photo. See go/phototoken-migration-plan for some more context about this field. If you think you want to use this please talk with people-api-eng@ first.
     */
    photoToken?: string | null;
    /**
     * See go/people-api-concepts/photos for info on the different representations of URLs.
     */
    url?: string | null;
    /**
     * A URL for a UI to view the photo in its original context. For example, for a place photo, this is the url of a Google Maps page displaying the photo. Supported for place photos only.
     */
    viewerUrl?: string | null;
  }
  /**
   * Info necessary for looking up a photo in storage.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPhotoPhotoStorageId {
    /**
     * For writes only, pass the media key that represents the image in photos backend. Note, this is not populated on reads.
     */
    mediaKey?: string | null;
  }
  /**
   * Metadata specific to places.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPlaceDetails {
    /**
     * A URL hosted by Google providing more information about this place This is the URL returned by Places API in the Place.Url.google field
     */
    googleUrl?: string | null;
    latLng?: Schema$AppsPeopleOzExternalMergedpeopleapiLatLng;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    openingHours?: Schema$AppsPeopleOzExternalMergedpeopleapiOpeningHours;
    /**
     * The name of the primary type. Examples of primary type are: "art_school", "clothing_wholesaler", etc. All primary types can be found at http://shortn/_veqh6UwWdc
     */
    primaryTypeName?: string | null;
  }
  /**
   * Extension data for use in Play Games Product Profile. See go/jam-games-profile.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedData {
    /**
     * User's top achievements that are sorted for example by rarity.
     */
    achievements?: Schema$AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataAchievement[];
    /**
     * The avatar image to display for the user.
     */
    avatarImageUrl?: string | null;
    /**
     * Failure type if there is an error when fetching product profile data.
     */
    failure?: Schema$AppsPeopleOzExternalMergedpeopleapiProductProfileFailure;
    /**
     * The gamer tag set by the user. Not set if the user hasn't set a gamer tag yet.
     */
    gamerTag?: string | null;
    /**
     * User's level.
     */
    playerLevel?: number | null;
    /**
     * Specifies the visibility of the player's profile.
     */
    profileVisibility?: string | null;
    /**
     * Total number of friends.
     */
    totalFriendsCount?: string | null;
    /**
     * How many achievements this player has unlocked.
     */
    totalUnlockedAchievements?: string | null;
  }
  /**
   * Details of an achievement that the user has unlocked.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPlayGamesExtendedDataAchievement {
    /**
     * The name of the achievement.
     */
    achievementName?: string | null;
    /**
     * The achievement icon url shown to the user if it is unlocked.
     */
    achievementUnlockedIconUrl?: string | null;
    /**
     * Rarity of unlocking this achievement (3% of players unlocked would be 3)
     */
    rarityPercentage?: number | null;
  }
  /**
   * Information about a plus page and the entity it represents.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPlusPageInfo {
    /**
     * Int64 ID of packaging-service entry; if set, the plus page is associated with a third-party application.
     */
    applicationId?: string | null;
    entityType?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
  }
  /**
   * Map marker location for an address.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPointSpec {
    bounds?: Schema$GeostoreRectProto;
    point?: Schema$GeostorePointProto;
    pointSource?: string | null;
  }
  /**
   * Custom field that represents POSIX account information. Description of the field family: go/fbs-posix. If account has non-empty Username or Uid we will enforce global uniqueness of (AccountNamespace, CustomerKey, SystemId, Uid) and (AccountNamespace, CustomerKey, SystemId, Username) tuples to ensure there are no duplicates.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPosixAccount {
    /**
     * The user visible value is used to distinguish identical posix account fields with different customer key values.
     */
    accountId?: string | null;
    /**
     * Value indicates the uniqueness namespace that applies to the POSIX information. The value is included in all POSIX account uniqueness indices. The indexing prevents two accounts within the same customer from having the same username. Namespacing allows Windows and Linux users to share the same username.
     */
    accountNamespace?: string | null;
    /**
     * Value indicates whether the POSIX information is associated with a non-human entity and the validation logic to apply during PosixAccount mutation.
     */
    accountType?: string | null;
    /**
     * The customer associated with the POSIX identity. If the user is already associated with a G Suite Customer, this field has the same value as http://google3/ccc/hosted/policies/settings/dthree_customer_info.proto
     */
    customerKey?: string | null;
    /**
     * The value is automatically set to a SHA-256 fingerprint of the POSIX account. A fingerprint should uniquely identify a POSIX account entry.
     */
    fingerprint?: string | null;
    /**
     * The GECOS (user information) entry for this account.
     */
    gecos?: string | null;
    /**
     * The default group ID.
     */
    gid?: string | null;
    /**
     * The path to the home directory for this account.
     */
    homeDirectory?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * Value indicates whether to use Linux or Windows specific validation logic during PosixAccount mutation.
     */
    operatingSystemType?: string | null;
    /**
     * The path to the login shell for this account.
     */
    shell?: string | null;
    /**
     * System identifier for which account Username or Uid apply to. If not specified on mutate by a caller it will default to empty value if either Username or Uid are being set. SystemId does require to have a value (even an empty one) because it is included into null-filtered Spanner index used to enforce uniqueness on Username and Uid fields.
     */
    systemId?: string | null;
    /**
     * The user ID.
     */
    uid?: string | null;
    /**
     * The username of the account.
     */
    username?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiProductMetadata {
    productSource?: string | null;
  }
  /**
   * Product profiles failure type: the status of the rpc to fetch the product profile.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiProductProfileFailure {
    failureType?: string | null;
  }
  /**
   * Stats pertaining to incoming edges and views, visible to the requester (with acls applied). Related to, but not equal to, com.google.focus.proto.Storage.UserVisibleStats.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiProfileOwnerStats {
    /**
     * Replacement for deprecated follower_count. Comes from the EdgeSummary.
     */
    incomingAnyCircleCount?: string | null;
    /**
     * Deprecated. This field is no longer populated by the server.
     */
    viewCount?: string | null;
  }
  /**
   * This is a Google+-only field (and thus does not exist for consumer users). See go/fbs-g+-deprecation.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiProfileUrl {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    url?: string | null;
  }
  /**
   * Message to represent a user's set of preferred pronouns, see go/pronouns-backend.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiPronoun {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    pronounData?: Schema$SocialGraphApiProtoPronounData;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiRawDeviceContactAnalyticalInfo {
    /**
     * The data set within the account that this raw contact belongs to.
     */
    dataSet?: string | null;
    /**
     * The CP2 dirty field which indicates the sync state of the raw contact: https://developer.android.com/reference/android/provider/ContactsContract.SyncColumns#DIRTY True if the row is changed but not synced
     */
    dirty?: boolean | null;
    /**
     * Whether the source ID exists for non-Google contacts. Won't set for Google contacts.
     */
    sourceIdExist?: boolean | null;
    /**
     * The Sync Info of a raw contact.
     */
    syncInfo?: Schema$SocialGraphApiProtoSyncInfo;
  }
  /**
   * Raw device contact information.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiRawDeviceContactInfo {
    /**
     * Account name of raw contact, e.g. "google@gmail.com".
     */
    accountName?: string | null;
    /**
     * Account type of raw contact, e.g. "com.google" or "com.linkedin.android".
     */
    accountType?: string | null;
    /**
     * The detailed app-specific endpoint data available for the given RawDeviceContactInfo instance. This proto should be used to obtain the list of actions and mimetypes supported by the third-party app. Design: go/3p-contact-upload
     */
    appContactData?: Schema$SocialGraphApiAppContactData[];
    /**
     * The app-specific endpoint data needed for app action fulfillment. Usage of this field should be avoided on the server-side, and should use the more detailed |full_app_info| field.
     */
    appInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiAppUniqueInfo;
    /**
     * If true, this raw contact can be used on other devices than the one it originated from. Assigned by the server.
     */
    crossDeviceAllowed?: boolean | null;
    /**
     * Extra metadata for this raw contact.
     */
    deviceContactMetadata?: Schema$AppsPeopleOzExternalMergedpeopleapiDeviceContactExtraMetadata;
    /**
     * The focus contact id for Google contacts.
     */
    googleContactId?: string | null;
    /**
     * The base64 serialized social.graph.peopleapi.proto.internal.RawDeviceContactId. This id should be used to correlate to field.metadata.encoded_container_id when the field.metadata.container_type is RAW_DEVICE_CONTACT The id also correlates to person.metadata.identity_info.source_id.id.
     */
    id?: string | null;
    /**
     * The type of photo from the device (if any).
     */
    photoType?: string | null;
    /**
     * The id of the raw contact on the device.
     */
    rawContactId?: string | null;
    /**
     * Only to be used by Romanesco team specifically for analytics.
     */
    rawDeviceContactAnalyticalInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiRawDeviceContactAnalyticalInfo;
  }
  /**
   * Metadata information about a profile. This message replaces legacy profile-specific singleton fields from the PersonMetadata proto (singleton top level Person fields are not compatible with non-profile-centric person results, which may include multiple profile containers).
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfo {
    /**
     * The account email linked to the profile, if any exists and is visible to the requester.
     */
    accountEmail?: Schema$AppsPeopleOzExternalMergedpeopleapiAccountEmail;
    /**
     * Indicates whether the profile owner has blocked this person.
     */
    blockType?: string[] | null;
    /**
     * CustomerInfo for dasher user. The reader has to explicitly request this in the field_mask as 'read_only_profile_info.customer_info'
     */
    customerInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiCustomerInfo;
    /**
     * DEPRECATED. Use the `ReadOnlyProfileInfo.customer_info` field instead (b/138120418). Only populated if in_viewer_domain is true.
     */
    domainInfo?: Schema$AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoDomainInfo;
    /**
     * Indicates whether this person is blocking the profile owner.
     */
    incomingBlockType?: string[] | null;
    /**
     * DEPRECATED. Proxying trust between users in a domain should use go/flex-orgs-platform. For more info see: http://doc/18i0-C7vWcz2UuXYBsmulnriVCK3_EuMPpRlPa2OmMHw#heading=h.dobotdwx25kg Indicates whether the profile owner is in the same domain as the viewer.
     */
    inViewerDomain?: boolean | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * DEPRECATED.
     */
    objectType?: string | null;
    /**
     * The Focus-obfuscated Gaia ID of the profile owner (go/obfuscated-ids).
     */
    ownerId?: string | null;
    ownerUserType?: string[] | null;
    /**
     * DEPRECATED. Please use `person.plus_page_info` instead.
     */
    plusPageType?: string | null;
    /**
     * Stats/counters pertaining to followers and incoming edges.
     */
    profileOwnerStats?: Schema$AppsPeopleOzExternalMergedpeopleapiProfileOwnerStats;
    /**
     * Returned only when explicitly requested in the request mask as read_only_profile_info.unjoined_email_certificates. Equivalent to fetching the Emails & the Email Certificates with the acls ignored.
     */
    unjoinedEmailCertificates?: Schema$AppsPeopleOzExternalMergedpeopleapiEmail[];
  }
  /**
   * DEPRECATED.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiReadOnlyProfileInfoDomainInfo {
    /**
     * DEPRECATED. Organization badge for the domain this person is a member of. The badge is the primary hosted domain.
     */
    domainBadge?: string[] | null;
    /**
     * DEPRECATED. Hosted domain this person is a member of. Formerly only available via PersonExtendedData.
     */
    domainName?: string[] | null;
  }
  /**
   * Relation stores the related person between the contact or profile and a third person. See go/relation-vs-relationship for relation vs relationship explanation. This field currently includes RelationshipToMe data in fields value and canonical_value for ContainerType CONTACT_ANNOTATION. This will be moved to RelationshipToMe in b/221081499.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiRelation {
    /**
     * Canonicalized `value` of the relation from this person to the user. This is currently used for data from contact annotations. Possible canonical values are based from http://google3/googledata/quality/aliases/relationship_en.config.
     */
    canonicalValue?: string | null;
    /**
     * The `type` translated and formatted in the request locale. See go/people-api-howto/localization for details on how to usage.
     */
    formattedType?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * The person whose email matches the Relation.value field, if it is a valid email address. This field is read-only and ignored on update.
     */
    relationDetails?: Schema$AppsPeopleOzExternalMergedpeopleapiRelationRelationDetails;
    /**
     * The relation type. The type can be free form or one of these predefined values: * `spouse` * `child` * `mother` * `father` * `parent` * `brother` * `sister` * `friend` * `relative` * `domesticPartner` * `manager` * `assistant` * `referredBy` * `partner`
     */
    type?: string | null;
    /**
     * The person this relation applies to. Custom value provided by the user.
     */
    value?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiRelationRelationDetails {
    /**
     * Equivalent to Name.display_name for the person_id profile.
     */
    displayName?: string | null;
    /**
     * Equivalent to Organization.title for the primary organization of the person_id profile.
     */
    jobTitle?: string | null;
    personId?: string | null;
    /**
     * Equivalent to Photo.url for the person_id profile.
     */
    photoUrl?: string | null;
  }
  /**
   * Deprecated in b/122464133. No data returned for this field.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiRelationshipInterest {
    /**
     * The `type` translated and formatted in the request locale. See go/people-api-howto/localization for details on how to usage.
     */
    formattedType?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * These fields may give away the sexual orientation of the user.
     */
    type?: string | null;
  }
  /**
   * Deprecated in b/122464133. No data returned for this field.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiRelationshipStatus {
    /**
     * The `type` translated and formatted in the request locale. See go/people-api-howto/localization for details on how to usage.
     */
    formattedType?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    type?: string | null;
  }
  /**
   * User preference for shared endorsements. See go/se-devguide and go/sharedendorsements for details, including guidance on which contexts are which.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiRightOfPublicityState {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    state?: string | null;
  }
  /**
   * Information specific to rosters like Google Groups and Chatrooms.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiRosterDetails {
    /**
     * Abridged / sample subset of member details of the roster. NOTE: This field is only returned if the request's field mask includes "person.roster_details.abridged_roster_memberships". http://cs/symbol:google.apps.cloudidentity.groups.internal.GroupSummary.abridged_memberships
     */
    abridgedRosterMemberships?: Schema$AppsPeopleOzExternalMergedpeopleapiRosterMember[];
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * Indicates the number of members and sub-rosters of the roster. Corresponds to http://cs/symbol:google.apps.cloudidentity.groups.internal.Group.direct_member_count_per_type
     */
    rosterMemberCount?: Schema$AppsPeopleOzExternalMergedpeopleapiRosterMemberCount;
  }
  /**
   * Represents details of a member of a roster. Used in RosterDetails. Corresponds to http://cs/symbol:google.apps.cloudidentity.groups.internal.Membership
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiRosterMember {
    /**
     * Type of the member.
     */
    memberType?: string | null;
    /**
     * Focus-Obfuscated Gaia Id of the member.
     */
    personId?: string | null;
  }
  /**
   * Represents the summary of member counts of a roster. Used in RosterDetails. Corresponds to http://cs/symbol:google.apps.cloudidentity.groups.internal.Group.DirectMemberCountPerType
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiRosterMemberCount {
    /**
     * Indicates the number of direct sub-rosters of the roster. This comes from http://cs/symbol:google.apps.cloudidentity.groups.internal.Group.DirectMemberCountPerType.group_count
     */
    directGroupCount?: string | null;
    /**
     * Indicates the number of direct, non-roster members of the roster. This comes from http://cs/symbol:google.apps.cloudidentity.groups.internal.Group.DirectMemberCountPerType.user_count
     */
    directUserCount?: string | null;
  }
  /**
   * Profile for Janata and Search. go/janata-profile-in-sgbe
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiSearchProfile {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    searchProfileData?: Schema$SocialGraphApiProtoSearchProfileData;
  }
  /**
   * As of 03/2018 is not supported for user Profile.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiSipAddress {
    /**
     * The `type` translated and formatted in the request locale. See go/people-api-howto/localization for details on how to usage.
     */
    formattedType?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * The type of the SIP address. The type can be free form or or one of these predefined values: * `home` * `work` * `mobile` * `other`
     */
    type?: string | null;
    value?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiSkills {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    value?: string | null;
  }
  /**
   * The social connection of this person to the viewer. NOTE: this is used by go/starlight, but not actually used or returned in PeopleAPI. See b/27281119 for context.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiSocialConnection {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    type?: string[] | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiSortKeys {
    affinity?: Schema$AppsPeopleOzExternalMergedpeopleapiAffinity[];
    /**
     * Deprecated. This field is only populated with 0.000 for legacy reasons. Clients should not use this field.
     */
    interactionRank?: string | null;
    lastName?: string | null;
    lastNameRaw?: string | null;
    name?: string | null;
    /**
     * Raw name strings that were used to generate the name and last_name sort keys fields above. Contacts+ need them to generate section headers for list view (b/30642866).
     */
    nameRaw?: string | null;
  }
  /**
   * Id of a single source from the merged person.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiSourceIdentity {
    /**
     * The type of source. To be deprecated infavor of container_type
     */
    container?: string | null;
    /**
     * The type of the source.
     */
    containerType?: string | null;
    /**
     * In sync responses, indicates whether the identity source has been deleted. Not applicable to GOOGLE_GROUP.
     */
    deleted?: boolean | null;
    /**
     * The encoded id of the data source. This field correlates to PersonFieldMetadata.encoded_container_id. The possible values of this `id` field are as follows based on the value of the `container_type` field: CONTACT: Hex-encoded contact id. PROFILE: DOMAIN_PROFILE: GOOGLE_GROUP: NAMED_CHAT_ROOM: Focus-obfuscated Gaia ID. DOMAIN_CONTACT: Synthetic-contact id representing the domain shared contact. PLACE: Encoded PlaceId (go/javagoog/maps/api/places/util/PlaceIdEncoder.java) RAW_DEVICE_CONTACT: Pair of device_id and raw_contact_id, encoded as base64 serialized social.graph.peopleapi.proto.internal.RawDeviceContactId proto. CONTACT_ANNOTATION: Pair of annotation_id and event_timestamp, encoded as base64 serialized social.graph.peopleapi.proto.internal.ContactAnnotationId proto. -- DEPRECATED container types -- If the container is CIRCLE, then the id is going to be the synthetic- contact id representing the email-only circle member or gaia circle member for which the requester does not have a contact for.
     */
    id?: string | null;
    /**
     * Last update timestamp of this source. NOTE: Only populated for CONTACT container type in Java PeopleAPI. Populated for CONTACT, PROFILE, DOMAIN_PROFILE in Sharpen implementation. NOTE: Not populated for GOOGLE_GROUP.
     */
    lastUpdated?: string | null;
    /**
     * **DEPRECATED** Please use `last_updated` field instead. Last update timestamp of this source in microseconds. NOTE: Only populated for CONTACT container type.
     */
    lastUpdatedMicros?: string | null;
    /**
     * NOTE: Not populated for GOOGLE_GROUP.
     */
    sourceEtag?: string | null;
  }
  /**
   * Custom field that represents SSH public keys associated with the user. We can treat the field as a map from a string fingerprint to the SSH public key information.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiSshPublicKey {
    expirationTime?: string | null;
    /**
     * The value is automatically set to a SHA-256 fingerprint of an SSH public key. A fingerprint should uniquely identify an SSH public key.
     */
    fingerprint?: string | null;
    key?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
  }
  /**
   * This message mirrors the ContactPhoneNumber message in ccc/grand_central/common/types.proto. For various reasons, we cannot take on a direct dependency. See other proto file for most recent documentation.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiStructuredPhone {
    /**
     * The phone formatted type. See docs from mirrored proto: http://google3/ccc/grand_central/common/types.proto?l=128&rcl=241000760
     */
    formattedType?: string | null;
    phoneNumber?: Schema$AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumber;
    shortCode?: Schema$AppsPeopleOzExternalMergedpeopleapiStructuredPhoneShortCode;
    /**
     * The type of phone. See docs from mirrored proto: http://google3/ccc/grand_central/common/types.proto?l=125&rcl=241000760
     */
    type?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumber {
    e164?: string | null;
    i18nData?: Schema$AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberI18nData;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiStructuredPhonePhoneNumberI18nData {
    countryCode?: number | null;
    internationalNumber?: string | null;
    isValid?: boolean | null;
    nationalNumber?: string | null;
    regionCode?: string | null;
    validationResult?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiStructuredPhoneShortCode {
    /**
     * The phone code. See docs from mirrored proto: http://google3/ccc/grand_central/common/types.proto?l=70&rcl=241000760
     */
    code?: string | null;
    countryCode?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiTagline {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    value?: string | null;
  }
  /**
   * *UNSUPPORTED*. This message is never populated and is no longer used.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiTeamsExtendedData {
    admins?: Schema$AppsPeopleOzExternalMergedpeopleapiPerson[];
    adminTo?: Schema$AppsPeopleOzExternalMergedpeopleapiPerson[];
    dottedLineManagers?: Schema$AppsPeopleOzExternalMergedpeopleapiPerson[];
    dottedLineReports?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonListWithTotalNumber;
    failures?: string[] | null;
    managementChain?: Schema$AppsPeopleOzExternalMergedpeopleapiPerson[];
    reports?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonListWithTotalNumber;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiUserDefined {
    key?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    value?: string | null;
  }
  /**
   * DEPRECATED in favor of ProfileStats. Stats pertaining to incoming edges and views, visible to the requester (with acls applied). Related to, but not equal to, com.google.focus.proto.Storage.UserVisibleStats.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiUserVisibleStats {
    /**
     * Replacement for deprecated follower_count. Comes from the EdgeSummary.
     */
    incomingAnyCircleCount?: string | null;
    viewCount?: string | null;
  }
  /**
   * Store metadata information like annotation-id and product source for visible to guests contacts go/visible-to-guests.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiVisibleToGuests {
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiWebContactsExtendedData {
    /**
     * Used by Contacts client-side to indicate whether a person is not completed.
     */
    isIncomplete?: boolean | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiWebsite {
    /**
     * The `type` translated and formatted in the request locale. See go/people-api-howto/localization for details on how to usage.
     */
    formattedType?: string | null;
    metadata?: Schema$AppsPeopleOzExternalMergedpeopleapiPersonFieldMetadata;
    /**
     * Currently in Oz: "Links": Links with no rel. "Other profiles": Links with rel=ME. "Contributor to": Links with rel=CONTRIBUTOR_TO or PAST_CONTRIBUTOR_TO.
     */
    rel?: Schema$AppsPeopleOzExternalMergedpeopleapiWebsiteRelationshipInfo[];
    /**
     * The type of the website. The type can be free form or one of these predefined values: * `home` * `work` * `blog` * `profile` * `homePage` * `ftp` * `reservations` * `appInstallPage`: website for a Currents application. * `other`
     */
    type?: string | null;
    value?: string | null;
  }
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiWebsiteRelationshipInfo {
    type?: string | null;
  }
  /**
   * Extension data for use in Youtube Product Profile.
   */
  export interface Schema$AppsPeopleOzExternalMergedpeopleapiYoutubeExtendedData {
    /**
     * Information about a channel created by the user. A user can create multiple Youtube channels.
     */
    channelData?: Schema$AppsPeopleOzExternalMergedpeopleapiChannelData[];
    /**
     * Failure type if there is an error when fetching product profile data.
     */
    failure?: Schema$AppsPeopleOzExternalMergedpeopleapiProductProfileFailure;
  }
  /**
   * The features supported by the ActionV2 protocol. Note that after we move on to ConversationProto for all surfaces we can remove this message.
   */
  export interface Schema$AssistantApiActionV2SupportedFeatures {
    /**
     * This flag is used to work around a bug in AGSA 6.8 that got away. The bug prevents users from accessing their shopping list if the URL of the shopping list is not a keep.google.com URL. This will happen when switch the backend that stores the shopping list from Keep to a backend maintained by the Google Shopping Express team.
     */
    expressUrlInSettingsResponseSupported?: boolean | null;
    /**
     * Whether client supports reconnect client input in action v2 payload. This capability is needed to determine if client supports parsing client input payload from actionv2 proto for workflow purposes. See go/personal-workflow. OWNER:nyzstar,vvvemuri.
     */
    reconnectClientInputSupported?: boolean | null;
    /**
     * Whether or not the surface supports a simple UnsupportedAction instead of a ModalState punt card for rendering. For ActionV2 punt cards, the ModalState extension on the ResourceSet is the canonical way of building punt cards. However, while most all devices support the ActionV2 protocol, not all devices handle the ModalState rendering as part of the ActionV2. For these devices, we want to build a modified ActionV2 for punt cards which omits this ModalState. At present, this is only Android Wear and should not be used for other devices if they support ModalState or Conversation protocol.
     */
    simpleActionV2PuntSupported?: boolean | null;
    /**
     * A list of all the action types supported by the client. These should be the string representation of majel.ActionTypes within "quality/majel/api/proto/action_v2.proto".
     */
    supportedActionType?: string[] | null;
    /**
     * Checks if screenshots can be taken on the client. This field is set on the client from AGSA 7.2 onwards.
     */
    takeScreenshotSupported?: boolean | null;
    /**
     * If IMMERSIVE_ACTIONS UiType is supported by the client.
     */
    voiceDelightImmersiveUiSupported?: boolean | null;
    /**
     * If Voice Delight Stickers are supported by the client. In order to support Voice Delight stickers, the client should know how to extract sticker_url from VoiceDelightSystemInteractionSegment.
     */
    voiceDelightStickersSupported?: boolean | null;
    /**
     * If Voice Delight Suggestion Chips are supported by the client. In order to support Voice Delight Suggestion Chips, the client should know how to extract suggestions form VoiceDelightSystemInteraction.ResourceSet.
     */
    voiceDelightSuggestionsSupported?: boolean | null;
  }
  /**
   * Capabilities related to Android intent support. These capabilities can apply to any device on the Android platform. Provides the list of Android package names that support a given Android intent.
   */
  export interface Schema$AssistantApiAndroidIntentCapabilities {
    androidIntentCapability?: Schema$AssistantApiAndroidIntentCapabilitiesAndroidIntentCapability[];
  }
  export interface Schema$AssistantApiAndroidIntentCapabilitiesAndroidIntentCapability {
    /**
     * The Action name of the Android Intent in standard notation (https://developer.android.com/reference/android/content/Intent#getAction()).
     */
    intentActionName?: string | null;
    /**
     * The Android provider packages that support the intent, e.g. "com.google.android.deskclock".
     */
    packageNames?: string[] | null;
  }
  /**
   * Used to describe app capabilities of the device installed apps reported to the server.
   */
  export interface Schema$AssistantApiAppCapabilities {
    /**
     * Indicates whether the provider is compatible for media fulfillment on this surface. For example, Amazon Music isn't compatible with the driving mode.
     */
    allowlistedForMediaFulfillment?: boolean | null;
    /**
     * Currently unused. Will be used in the future when integrating with incremental app capabilities.
     */
    appIntegrationsSettings?: Schema$AssistantApiAppIntegrationsSettings;
    /**
     * This system app is disabled in settings.
     */
    disabledSystemApp?: boolean | null;
    /**
     * The installed app of the provider.
     */
    provider?: Schema$AssistantApiCoreTypesProvider;
    /**
     * This provider has integrated its cloud backend with Google, and Google can route the user queries to the provider's cloud.
     */
    routableToProviderCloud?: boolean | null;
    /**
     * This provider has an app that supports on-device search through the provider's own inventory.
     */
    searchableOnDevice?: boolean | null;
    /**
     * This provider has integrated its content with Google, and Google has enabled to serve its content as a server-side solution.
     */
    searchableOnServer?: boolean | null;
    /**
     * This provider has an app that supports starting new media playback when there is no screen (e.g. by integrating with the Bisto SDK).
     */
    supportsScreenlessInitiation?: boolean | null;
    /**
     * This provider is an app which should be used for query annotations. This is useful for apps which may not be already indexed by Google or are client specific.
     */
    whitelistedForAnnotation?: boolean | null;
  }
  /**
   * Used to describe the incremental change of app capabilities of the device installed apps reported to the server.
   */
  export interface Schema$AssistantApiAppCapabilitiesDelta {
    /**
     * Currently unused. Will be used in the future when integrating with incremental app capabilities.
     */
    appIntegrationsSettings?: Schema$AssistantApiAppIntegrationsSettings;
    /**
     * The installed app of the provider.
     */
    providerDelta?: Schema$AssistantApiCoreTypesProviderDelta;
  }
  export interface Schema$AssistantApiAppControlSupport {
    enabled?: string | null;
    /**
     * If true, disable send message AppControl/SD flow. This is needed to suppress the feature for specific device. If we decide to turn down this feature for all devices, then this field will become obsolete and should be removed. See context in b/275727627.
     */
    sendMessageSuppressed?: boolean | null;
  }
  /**
   * Contains the app privacy bits used for App Integrations implicit request. (go/app-privacy-settings-for-implicit-requests)
   */
  export interface Schema$AssistantApiAppIntegrationsSettings {
    /**
     * Whether to enable Assistant to handle request with predicted apps.
     */
    handleRequestsWithPredictedApps?: string | null;
  }
  export interface Schema$AssistantApiAssistantContinuedPresenceSupport {
    /**
     * Indicates in what cases assistant continued presence can be shown as a plate. This field is white-listed as being PII-free. Please do not add PII here.
     */
    plateSupport?: string | null;
  }
  /**
   * These capabilities represent the audio input features associated with the device. This includes what kind of audio input the device can handle, and what the privacy circumstances of that input are.
   */
  export interface Schema$AssistantApiAudioInput {
    environment?: string | null;
    quality?: string | null;
  }
  /**
   * These capabilities represent the audio output features associated with the device. This includes what kind of audio output the device can handle, and what the privacy circumstances of that output are.
   */
  export interface Schema$AssistantApiAudioOutput {
    alwaysOnSpeaker?: string | null;
    environment?: string | null;
    mediaTtsMixable?: string | null;
    quality?: string | null;
    volumeProperties?: Schema$AssistantApiVolumeProperties;
  }
  /**
   * Bluetooth capabilities related to usage of a feature.
   */
  export interface Schema$AssistantApiBluetoothCapabilities {
    /**
     * If this surface needs to bluetooth pair a phone before using a feature.
     */
    isBluetoothConnectedProfileRequired?: boolean | null;
  }
  /**
   * CallCapabilities supported by a surface. See go/call-capabilities. Next ID: 7
   */
  export interface Schema$AssistantApiCallCapabilities {
    /**
     * The supported call formats on the surface.
     */
    callFormats?: string[] | null;
    /**
     * The supported call mediums on the surface.
     */
    callMediums?: string[] | null;
    /**
     * The call options this surface can provide. For example, SPEAKERPHONE is available on Android OPA while iOPA doesn't support it yet.
     */
    callOptions?: string[] | null;
    /**
     * If true, APP_ID queries initiated by this device should fall back to execution on the tethered device if it's available and if the primary device cannot perform the action (e.g. due to the app not being installed).
     */
    fallbackToTetheredDeviceAppCapabilities?: boolean | null;
    /**
     * Should only be checked if nonempty.
     */
    supportedRecipientTypes?: string[] | null;
    supportsDuoEmailEndpoint?: boolean | null;
  }
  /**
   * These capabilities represent the camera features associated with the device.
   */
  export interface Schema$AssistantApiCameraCapabilities {
    /**
     * Whether the device supports Face Match.
     */
    faceMatchCapable?: boolean | null;
    /**
     * Whether the device has a camera.
     */
    hasCamera?: boolean | null;
  }
  /**
   * These capabilities present the capability of the device running camera receiver apps.
   */
  export interface Schema$AssistantApiCameraReceiverCapabilities {
    /**
     * Whether the device has limited camera stream capability. If true, check supported_camera_receivers for detailed supported cameras.
     */
    hasLimitedCameraStreamCapability?: boolean | null;
    /**
     * The camera receiver cast apps the device supports. Only used if has_limited_camera_stream_capability is true.
     */
    supportedCameraReceivers?: Schema$AssistantApiCoreTypesCastAppInfo[];
  }
  /**
   * Information about the readiness of Home app features on the device. As of January 2023, this is only populated by Assistant on Android.
   */
  export interface Schema$AssistantApiCapabilitiesHomeAppCapabilities {
    /**
     * The app's installation and setup state. This is most pertinent for Tangor, where lock screen Smart Home queries are fulfilled by a Home app activity that may be blocked if this value is not `SETUP_STATE_COMPLETE`.
     */
    setupState?: string | null;
  }
  /**
   * Capabilities that are associated with Assistants on auto surfaces. This is different from other capabilities such as CarSettingsCapabilities, CloudCarCapabilities since they are specific to settings and 3P cloud information. All the auto/car Assistant specific capabilities should live here.
   */
  export interface Schema$AssistantApiCarAssistantCapabilities {
    /**
     * Indicates whether the current Assistant should provide a multi Assistant specific punt when there are multiple Auto specific Google Assistants (Android Auto Projected (AAP) and Android Auto Embedded (AAE)) in the same GAS enabled car. This will be used by both AAP and AAE. Design doc: go/doubledash++
     */
    shouldPuntMultiAssistantMode?: boolean | null;
  }
  /**
   * Capabilities that are associated with Assistant Settings on auto surfaces.
   */
  export interface Schema$AssistantApiCarSettingsCapabilities {
    /**
     * If true, it indicates that the auto surface client should receive a warmer welcome TTS for signed-out users. For signed-in user, we will rely on server side metadata. go/aaae:preview-lang
     */
    playWarmerWelcome?: boolean | null;
    /**
     * If true, it indicates that the client can be used to add cars after account linking with the OEM.
     */
    supportsAddingCars?: boolean | null;
  }
  export interface Schema$AssistantApiCastAssistantSettingLinkingResult {
    /**
     * Cast linking status for ATV surfaces. This is derived from error messages returned from Cast Orchestration Server and will be used for data profiling only(go/katniss-settings-dashboard).
     */
    castLinkingStatus?: string | null;
    /**
     * The error msg returned from COS, truncated in case it's too large.
     */
    truncatedErrorMsg?: string | null;
  }
  /**
   * These capabilities represent capabilities that have to do with casting that pertain to this device. Next ID: 9
   */
  export interface Schema$AssistantApiCastCapabilities {
    /**
     * Whether the device has limited camera stream capability and if yes, which receivers are supported.
     */
    cameraReceiverCapabilities?: Schema$AssistantApiCameraReceiverCapabilities;
    /**
     * The supported protocols for camera streaming. The value is used as string in go/smarthome-internal-api#camera-stream, so using a string for this field instead of an enum. Supported protocols: (align the definition in go/smarthome-camerastream-trait) - "hls": HTTP Live Streaming - "dash": Dynamic Adaptive Streaming over HTTP - "smooth_stream": Smooth Streaming - "progressive_mp4": Progressive MP4 (will likely only be used for Clips) - "webrtc": WebRTC (currently, only H.264 is supported) - "nexustalk": Internal-only protocol used for Nest
     */
    cameraStreamSupportedProtocols?: string[] | null;
    /**
     * True if we can cast things to this device.
     */
    canReceiveCast?: boolean | null;
    /**
     * Optional for primarily cast devices (e.g., Chirp, Chromecast). For devices that are NOT primarily cast devices, but having a cast receiver as secondary functionality, this field SHOULD store the cast-device-id to be used to send remote casting commands to the device. Example: Android TV, which supports both Android-native actions as well as remote casting using its built-in cast receiver. Android TV device id contains a DUSI id, which is not a cast-device-id. When executing a cast command on the Android TV, this field is used to route the cast command (through CloudCastService) to the cast receiver on the device.
     */
    deviceId?: Schema$AssistantApiCoreTypesDeviceId;
    /**
     * Whether this device supports dynamic groups or not. It implies if a Stream Control operation (transfer, expansion, and contraction) could be applied on this device since Stream Control is implemented as part of dynamic groups (ie, adding/removing devices from playback)
     */
    dynamicGroupsSupported?: boolean | null;
    groupType?: string | null;
    /**
     * Whether UI overlay applications are supported on this device. It's used by Chromecast only.
     */
    overlayApplicationsSupported?: boolean | null;
    /**
     * Whether the device supports playing games through Yeti. This is set by the cast device when the device is updated: Chromecast updates -\> Chromecast registers its capabilities with CCS -\> CCS passes the capabilities to the AssistantSettingsService -\> AssistantSettingsService stores the device's capabilities. go/yeti-gaming-supported-cast-capability
     */
    yetiGamingSupported?: boolean | null;
  }
  /**
   * The properties of the client op device.MODIFY_SETTING. This proto is stored in the SupportedClientOp proto.
   */
  export interface Schema$AssistantApiClientOpPropertiesDeviceModifySettingClientOpProperty {
    /**
     * Additional specific setting capabilities. This boolean is used to indicate whether we want to skip the Android and GSA version check in CheckSettingSchemaAndMaybeGetUris() from assistant/vertical/device/fulfillment/utils/setting_utils.h. Consider setting this field to true if your device is neither Android or GSA (especially when the UserAgent string of your device's TaskRequest will not contain a valid/up-to-date Android/GSA version).
     */
    skipAndroidAndGsaVersionCheck?: boolean | null;
    /**
     * Uses DeviceSetting enum which corresponds to setting_id. This indicates which specific settings are supported by client. An empty list implies all settings are supported.
     */
    supportedSettings?: string[] | null;
    /**
     * Additional specific setting capabilities. This boolean is used to indicate if do not disturb with duration is supported through device.MODIFY_SETTING clientop on a client or not.
     */
    supportsDoNotDisturbWithDuration?: boolean | null;
    /**
     * Additional specific setting capabilities. This boolean is used to indicate if new unmute logic is enabled on a client or not.
     */
    supportsMuteUnmute?: boolean | null;
  }
  /**
   * The properties of the provider.OPEN ClientOp. This proto is stored in the SupportedClientOp proto with the key provider.OPEN.
   */
  export interface Schema$AssistantApiClientOpPropertiesProviderOpenClientOpProperty {
    /**
     * Whether conversation is kept alive after opening the app. See go/keep-opa-conversation-alive for details.
     */
    keepsConversationAliveAfterOpeningApp?: boolean | null;
  }
  /**
   * Used to describe clock capabilities of the device (for example, capabilities related to maximum number of supported alarms and timers that can be created on the device). Fields may be populated by clients or be backfilled by SAL (in case of Timon, for example).
   */
  export interface Schema$AssistantApiClockCapabilities {
    /**
     * Maximum number of alarms that can be created on the client.
     */
    maxSupportedAlarms?: number | null;
    /**
     * Maximum extended timer duration supported by the client. The extended timer duration is the total start-to-finish duration after an AddTimeToTimer operation. E.g. if a user sets a timer for 30 minutes, and later adds 10 minutes, the extended duration is 40 minutes.
     */
    maxSupportedExtendedTimerDuration?: Schema$AssistantApiDuration;
    /**
     * Maximum duration of timers that can be created on the client.
     */
    maxSupportedTimerDuration?: Schema$AssistantApiDuration;
    /**
     * Maximum number of timers that can be created on the client.
     */
    maxSupportedTimers?: number | null;
    /**
     * The preferred provider to use for stopwatch related functionality.
     */
    preferredStopwatchProvider?: Schema$AssistantApiCoreTypesProvider;
    /**
     * Whether the client restricts alarms to ring within the next 24 hours.
     */
    restrictAlarmsToNext24h?: boolean | null;
  }
  /**
   * UI capabilities for the surfaces rendering Comms features. See go/rohan-comms-fluid-actions-customization.
   */
  export interface Schema$AssistantApiCommunicationUiCapabilities {
    fluidActionsUiType?: string | null;
  }
  export interface Schema$AssistantApiContactLookupCapabilities {
    /**
     * If true, contact.LOOKUP should be routed to the tethered device (if present) if the tethered device supports contact.LOOKUP and the primary device does not.
     */
    fallbackToTetheredDevice?: boolean | null;
  }
  /**
   * The android app information of the provider. Like, Spotify. Next ID: 17 LINT.IfChange
   */
  export interface Schema$AssistantApiCoreTypesAndroidAppInfo {
    accountType?: string | null;
    activityInfo?: Schema$AssistantApiCoreTypesAndroidAppInfoActivityInfo;
    /**
     * Intent associated with the app. We include intents here as different versions of the same app may support different intents. In those cases, the package_name is not enough to identify the app and we should use the combination of package_name and android_intent. This field might contain sensitive data, if represents ClientOp with encapsulated PII such as user query.
     */
    androidIntent?: string | null;
    /**
     * Store the app unique id endpoint. This will be passed over to app to fulfill the action.
     */
    appUniqueId?: string | null;
    /**
     * The android app version. Deprecated because https://developer.android.com/reference/android/content/pm/PackageInfo.html#getLongVersionCode
     */
    appVersion?: number | null;
    /**
     * data_mimetype and account_type are the what AGSA uses to filter which contacts support this Android app in ContactProvider.
     */
    dataMimetype?: string | null;
    /**
     * If true, client should broadcast the intent instead of open the intent.
     */
    isBroadcastIntent?: boolean | null;
    /**
     * App is the default app for it's core functionality. For example, it will be true for Android messages if it is the default app to send and receive SMS on the phone.
     */
    isDefault?: boolean | null;
    /**
     * The localized app name.
     */
    localizedAppName?: string | null;
    /**
     * The long android app version.
     */
    longVersionCode?: string | null;
    /**
     * Store mimetype of this endpoint. We will use this as the differentiator for Assistant to know whether to use the RawContact for messaging, call or video call. For example, send message mimetype for whatsapp: "vnd.android.cursor.item/vnd.com.whatsapp.profile" voice call mimetype for whatsapp: "vnd.android.cursor.item/vnd.com.whatsapp.voip.call"
     */
    mimetype?: string | null;
    /**
     * The android app package of the provider, like "com.spotify.music".
     */
    packageName?: string | null;
    /**
     * The OemProviderType is specific for OEM system Android apps. For example, in Auto Embedded, the OEM will have a system Radio/Media app. The system app’s capabilities/core functionalities are captured here. For physical media sources, the OEM may decide to implement one media app (thus, one package name) that handles multiple physical media sources. For these cases, each physical media source will be sent as different providers even though the package name is the same.
     */
    providerType?: string | null;
    /**
     * Id of the app's Android shortcut to be launched by Assistant. The client is expected to use the Android LauncherApps API to execute this shortcut which in turn will open the app. For example, Whatsapp may create an Android shortcut for a frequently messaged contact with an id "contact_123". This field will contain that id and the client can execute it to open up the chat with that particular contact. If this field is set, the package_name field must also be set since both will be used by the LauncherApps API for execution. If this field is set, the intent related fields will be ignored and not used as a fallback. Design: go/shortcut-id-in-provider-open-clientop This field should only be set for devices with Android API level \>= 25 (since that is the version from which the LauncherApps startShortcut API is available)
     */
    shortcutId?: string | null;
    /**
     * The fully qualified target class name of the provider, like "com.example.myapp.GetOrderService".
     */
    targetClass?: string | null;
    /**
     * The android app version name, like "4.1.091.05.40d", "11.2.7.21.alpha". Android Docs: https://developer.android.com/reference/android/content/pm/PackageInfo#versionName
     */
    versionName?: string | null;
  }
  /**
   * General information about activities in the app.
   */
  export interface Schema$AssistantApiCoreTypesAndroidAppInfoActivityInfo {
    /**
     * Activities that are currently active and tagged as ACTION_MAIN and CATEGORY_LAUNCHER. Includes the activity corresponding to android_intent if it falls under CATEGORY_LAUNCHER.
     */
    activeLaunchableActivities?: Schema$AssistantApiCoreTypesAndroidAppInfoActivityInfoActivity[];
  }
  /**
   * Information about an individual activity.
   */
  export interface Schema$AssistantApiCoreTypesAndroidAppInfoActivityInfoActivity {
    /**
     * The localized user visible activity name.
     */
    localizedActivityName?: string | null;
    /**
     * Short class name for activity, following https://developer.android.com/reference/android/content/ComponentName#getShortClassName()
     */
    shortClassName?: string | null;
  }
  /**
   * The change of AndroidAppInfo, e.g. app installation or deletion for incremental delta app info upload.
   */
  export interface Schema$AssistantApiCoreTypesAndroidAppInfoDelta {
    /**
     * The android app information of the provider. Like, Spotify.
     */
    androidAppInfo?: Schema$AssistantApiCoreTypesAndroidAppInfo;
    /**
     * The client-side timestamp in millis when the app is last updated, installed or deleted.
     */
    lastUpdateTimestamp?: string | null;
    /**
     * App is installed or deleted.
     */
    updateType?: string | null;
  }
  /**
   * This proto contains the information of a calendar event, including title, start time, end time, etc. IMPORTANT: The definition of CalendarEvent proto is being moved to //assistant/api/core_types/governed/calendar_event_type.proto. All existing references will be updated to point to the new location. If you are adding a reference, use the new one instead. LINT.IfChange(CalendarEvent) NEXT_ID: 26
   */
  export interface Schema$AssistantApiCoreTypesCalendarEvent {
    /**
     * Attendees invited to the event, usually includes also the organizer.
     */
    attendees?: Schema$AssistantApiCoreTypesCalendarEventAttendee[];
    /**
     * The background color of the event, in RGB format.
     */
    backgroundColor?: number | null;
    /**
     * Optional calendar containing the event.
     */
    calendarId?: string | null;
    /**
     * The person who created this event.
     */
    creator?: Schema$AssistantApiCoreTypesCalendarEventAttendee;
    /**
     * Optional description of the event (plain text).
     */
    description?: string | null;
    /**
     * The end time of the event. Start and end time must either both be date or both be datetime. End is exclusive, ie. the first day / first second when the event is over.
     */
    end?: Schema$AssistantApiDateTime;
    /**
     * Optional event id provided by assistant server. Needs to be unique, at least on a per-user and calendar level, ideally globally unique. If none is given, the server will assign an id.
     */
    eventId?: string | null;
    /**
     * The flair name, calculated according to the event title (go/as-cal-flair). With the flair name, background images can be got from gstatic (go/scs): https://ssl.gstatic.com/tmly/f8944938hffheth4ew890ht4i8/flairs/
     */
    flairName?: string | null;
    /**
     * The foreground color of the event, in RGB format.
     */
    foregroundColor?: number | null;
    /**
     * Whether the guests can invite other guests.
     */
    guestsCanInviteOthers?: boolean | null;
    /**
     * Whether the guests can modify the event.
     */
    guestsCanModify?: boolean | null;
    /**
     * Whether the guests of the event can be seen. If false, the user is reported as the only attendee to the event, even though there may be more attendees.
     */
    guestsCanSeeGuests?: boolean | null;
    /**
     * Optional id of the Habit (Calendar Goal) this event is linked to
     */
    habitId?: string | null;
    /**
     * Optional status for this habit event instance.
     */
    habitStatus?: string | null;
    /**
     * Absolute link to this event in the Calendar web UI.
     */
    htmlLink?: string | null;
    /**
     * Optional location of the event (plain text).
     */
    location?: string | null;
    meetingContacts?: Schema$AssistantApiCoreTypesCalendarEventMeetingContact[];
    /**
     * The organizer of this event.
     */
    organizer?: Schema$AssistantApiCoreTypesCalendarEventAttendee;
    /**
     * Whether not all attendees are included in the attendee list. This is set when the attendees list has been truncated (e.g., when the number of attendees is beyond the maxAttendees limitation).
     */
    otherAttendeesExcluded?: boolean | null;
    /**
     * The user's response (the owner of this copy of the event) to this event.
     */
    participationResponse?: string | null;
    /**
     * If this is an instance of a recurring event, recurring_event_id identifies the recurring series as a whole.
     */
    recurringEventId?: string | null;
    /**
     * Meeting rooms associated to this event.
     */
    rooms?: Schema$AssistantApiCoreTypesCalendarEventRoom[];
    /**
     * The start time of the event. This event is an all-day event if start has no time_of_day.
     */
    start?: Schema$AssistantApiDateTime;
    /**
     * The title of the event.
     */
    summary?: string | null;
    /**
     * Optional visibility of the event.
     */
    visibility?: string | null;
  }
  /**
   * Next id: 8
   */
  export interface Schema$AssistantApiCoreTypesCalendarEventAttendee {
    /**
     * Display name, present only if available.
     */
    displayName?: string | null;
    /**
     * Email address of the attendee (calendar), for regular events. For +Events, this field is not populated, instead "id" is used.
     */
    email?: string | null;
    /**
     * Given (first) name, present only if available. This is used for generating meeting titles as given name is preferred over display (full) name (ie: "Jeff : Sundar" is better than "Jeff Dean : Sundar Pichai").
     */
    givenName?: string | null;
    /**
     * Profile ID of the principal, for +Events. For regular events, this field is not populated, instead "email" is used.
     */
    id?: string | null;
    /**
     * Is this the organizer?
     */
    organizer?: boolean | null;
    /**
     * Attendees response status.
     */
    responseStatus?: string | null;
    /**
     * Is this the owner of this copy of the event?
     */
    self?: boolean | null;
  }
  /**
   * Next id: 10
   */
  export interface Schema$AssistantApiCoreTypesCalendarEventMeetingContact {
    /**
     * ID that corresponds to in ConferenceData.conference_id in calendar.common.ConferenceData proto. For Meet, this is the identifier used to join a meeting via URL.
     */
    conferenceId?: string | null;
    dialInNumberClasses?: string[] | null;
    /**
     * Default meeting phone number, for example: "tel:+1-475-777-1840"
     */
    phoneNumberUri?: string | null;
    /**
     * A PIN that the participant will need to input after dialing in the conference.
     */
    pinNumber?: string | null;
    /**
     * Provider info for the meeting.
     */
    provider?: Schema$AssistantApiCoreTypesProvider;
    /**
     * The region code for the default meeting phone number
     */
    regionCode?: string | null;
    source?: string | null;
    /**
     * The universal meeting PIN number for phone numbers in all available countries
     */
    universalPinNumber?: string | null;
    /**
     * URL that can be used to join the meeting.
     */
    url?: string | null;
  }
  /**
   * A room that is available for a potential meeting or has been booked for a scheduled meeting. Next id: 4
   */
  export interface Schema$AssistantApiCoreTypesCalendarEventRoom {
    /**
     * Room email that identifies the room and is used to book it.
     */
    email?: string | null;
    /**
     * Additional room details. Read-only, populated on request.
     */
    locationDetails?: Schema$AssistantApiCoreTypesCalendarEventRoomRoomLocationDetails;
    /**
     * Room name (ex: "MTV-PR55-5-A-Shadow 5K0 (13) GVC (No external guests)").
     */
    name?: string | null;
  }
  /**
   * Room location details. Read-only, populated on request. Next id: 8
   */
  export interface Schema$AssistantApiCoreTypesCalendarEventRoomRoomLocationDetails {
    /**
     * Building where the room is (ex: "PR55").
     */
    building?: string | null;
    /**
     * City where the room is (ex: "MTV").
     */
    city?: string | null;
    /**
     * Floor where the room is (ex: "5").
     */
    floor?: string | null;
    /**
     * The latitude in degrees.
     */
    latitude?: number | null;
    /**
     * The longitude in degrees.
     */
    longitude?: number | null;
    /**
     * Section in the floor (ex: "A").
     */
    section?: string | null;
    /**
     * Room name (ex: "Shadow 5K0").
     */
    simpleName?: string | null;
  }
  /**
   * This empty type allows us to publish sensitive calendar events to go/attentional-entities, while maintaining BUILD visibility protection for their contents. The BUILD-visibility-protected extension to this message is defined at http://google3/assistant/verticals/calendar/proto/multi_account_calendar_event.proto IMPORTANT: The definition of CalendarEventWrapper proto is being moved to //assistant/api/core_types/governed/calendar_event_type.proto. All existing references will be updated to point to the new location. If you are adding a reference, use the new one instead.
   */
  export interface Schema$AssistantApiCoreTypesCalendarEventWrapper {}
  /**
   * The cast app information of the provider.
   */
  export interface Schema$AssistantApiCoreTypesCastAppInfo {
    /**
     * The cast app id. |cast_app_id| is the ID of the cast app used on the current device and |content_app_id| is the ID of the app that provides the actual content. For example, in a group playback, on a follower device, the |cast_app_id| is the follower cast app ID and the |content_app_id| is the leader cast app ID.
     */
    castAppId?: string | null;
    /**
     * The id of the cast app that provides the content in a group. The field will always be filled. In the case of a group playback and the current device is a follower, the |cast_app_id| has the ID of the follower app, and |content_app_id| has ID of the actual content app. In all other cases, |content_app_id| and |cast_app_id| will be the same.
     */
    contentAppId?: string | null;
  }
  /**
   * The ChromeOS app information of the provider. Next ID: 3
   */
  export interface Schema$AssistantApiCoreTypesChromeOsAppInfo {
    /**
     * The localized app name.
     */
    localizedAppName?: string | null;
    /**
     * Unique package name that identifies a ChromeOS app of the provider.
     */
    packageName?: string | null;
  }
  /**
   * The third party provider information.
   */
  export interface Schema$AssistantApiCoreTypesCloudProviderInfo {
    agentStyle?: Schema$AssistantApiCoreTypesCloudProviderInfoAgentStyle;
    /**
     * URL to a directory page about the third party agent in Assistant HQ. This is a universal (https) URL that may be handled natively by clients to show HQ or launch to the HQ directory web page.
     */
    directoryUrl?: string | null;
    /**
     * The logo url for the third party provider.
     */
    logoUrl?: string | null;
    /**
     * The user visible name of the cloud provider, which may be used for example in the chat header during a conversation with the third party.
     */
    name?: string | null;
  }
  /**
   * The style customizations for the 3p agent.
   */
  export interface Schema$AssistantApiCoreTypesCloudProviderInfoAgentStyle {
    /**
     * The background color of the agent. Used if no background image is specified for the given display orientation, or if the provided background image does not fit.
     */
    backgroundColor?: Schema$AssistantApiCoreTypesGovernedColor;
    headerTheme?: string | null;
    /**
     * URL for the background image of the agent on landscape display.
     */
    landscapeBackgroundImageUrl?: string | null;
    /**
     * URL for the image containing the 3p logo. This can include logomark and logotype, or logotype only. If present, this can be used in place of the square logo contained in the top level logo_url field in CloudProviderInfo. See go/cards-logo-customization for details on applying this logo.
     */
    logoUrl?: string | null;
    /**
     * The color of the mask to apply to the background. See go/aog-cards-background-mask for details on applying this mask.
     */
    maskColor?: Schema$AssistantApiCoreTypesGovernedColor;
    /**
     * URL for the background image of the agent on portrait display.
     */
    portraitBackgroundImageUrl?: string | null;
    /**
     * The primary color of the agent. Used by the client to style the header and suggestion chips.
     */
    primaryColor?: Schema$AssistantApiCoreTypesGovernedColor;
  }
  /**
   * The identification information for third party devices that integrates with the assistant. All of these fields will be populated by the third party when the query is sent from the third party device. Next Id: 5
   */
  export interface Schema$AssistantApiCoreTypesDeviceConfig {
    /**
     * Pantheon Project ID that uniquely identifies the consumer project ID. Required
     */
    agentId?: string | null;
    /**
     * Unique identifier for the device. Example: DBCDW098234. Required
     */
    deviceId?: string | null;
  }
  /**
   * LINT.IfChange(DeviceId) Specifies identifier of a device AKA surface. Note there may be multiple device ids for the same physical device E.g. Allo app and Assistant app on Nexus. Note: DeviceId usage is complicated. Please do not depend on it for surface specific logic. Please use google3/assistant/api/capabilities.proto instead. IMPORTANT: When checking for equality between two `DeviceId`s, you should always use an `isSameDevice{As\}` function to check for equality, as deep equality between `DeviceId`'s is not guaranteed. * C++: http://google3/assistant/assistant_server/util/device_id_util.cc;l=23;rcl=421295740 * Dart: http://google3/assistant/context/util/lib/device_id.dart;l=26;rcl=442126145 * Java: http://google3/java/com/google/assistant/assistantserver/utils/DeviceIdHelper.java;l=9;rcl=390378522 See http://go/deviceid-equality for more details. Next ID: 14
   */
  export interface Schema$AssistantApiCoreTypesDeviceId {
    /**
     * The client_instance_id on devices with GSA. See 'client_instance_field' in go/androidids.
     */
    agsaClientInstanceId?: string | null;
    /**
     * Allo Id. Corresponds to the GBotRequest.Sender.sender. NOTE(dychen): This may change to standard android/ios physical device ids in order to enable shared data (e.g. installed app on physical device shared between Allo and Opa apps on Nexus).
     */
    alloDeviceId?: string | null;
    /**
     * A unique device ID for Assistant devices as proposed by go/ocelot-team to solve the device id fragmentation problem. The value of this id is the HomeGraph id of the device. See go/ocelot-track-0-registry-design. New surfaces should use the canonical_device_id instead of using other ids, and the registration should utilize the DeviceDataLayer (go/ddl-v0). Please contact the assistant-state-management@ team for guidance. Note: We didn't reuse |home_graph_device_id| because in Assistant code base |home_graph_device_id| is common to associate it with 3P devices. See go/project-yellowstone for more context.
     */
    canonicalDeviceId?: string | null;
    /**
     * If set, indicates that the device is a cast device, and contains the UUID of the cast device. Corresponds to the device_id field of the CastDevice proto.
     */
    castDeviceId?: string | null;
    /**
     * DUSI (go/dusi) is used as the identifier here. This identifier is unique to the user and device. This will help identify which device or application the user's request originated from. This is not to be confused with the client_instance_id that android devices provide. This is currently used by surfaces that use the assistant-legacy-nexus and assistant-legacy-clockwork pipelines. DUSI is created and set in S3. This field is only filled for GAIA requests.
     */
    clientInstanceId?: string | null;
    /**
     * A device ID produced by a connected dock, which is registered in HomeGraph.
     */
    connectedDockId?: string | null;
    /**
     * The unique DeviceConfig to the specific third party device. It is also used by Android Auto Embedded first party device. See go/opa-ids.
     */
    deviceConfig?: Schema$AssistantApiCoreTypesDeviceConfig;
    /**
     * DEPRECATED. assistant.api.core_types.governed.SurfaceIdentity.surface_type field should be used instead. The device's surface type. This is the string version of surface_type. The server should use the SurfaceType value derived from this string. If the device_type isn't supported within the SurfaceType enum, it will be set as UNKNOWN. Developers should use the enum in ServerParams instead of this string. WARNING: Clients are not actually setting this field. This field will be removed once references to it within the code base have been removed.
     */
    deviceType?: string | null;
    /**
     * The unique device ID for HomeGraph devices. This is the HomeGraph ID, created when the device is registered into HomeGraph. It is immutable for the same device unless it is completely deleted and recreated. See go/home-graph for details.
     */
    homeGraphDeviceId?: string | null;
    /**
     * The unique ID for libassistant based devices. See go/libassistant-id for details.
     */
    libassistantDeviceId?: string | null;
    /**
     * If set, indicates that the device is participating the multi-hotword arbitration and the id is an UUID to distinguish it from other devices. It should also be consistent between requests from a single device within a session (or short duration).
     */
    multiHotwordArbitrationDeviceId?: string | null;
    /**
     * The unique device ID for the Assistant App on iOS. See go/opa-ios-design for details.
     */
    opaIosDeviceId?: string | null;
    /**
     * The unique ID of a Quartz device. See go/quartz-design-doc for more details. Quartz ID is a hash of (android_id + gaia).
     */
    quartzDeviceId?: string | null;
  }
  /**
   * IMPORTANT: The definition of DeviceUserIdentity is being moved to //assistant/api/core_types/governed/device_user_identity.proto. All existing references will be updated to point to the new location. If you are adding a reference, use the new DeviceUserIdentity instead of this one. // LINT.IfChange
   */
  export interface Schema$AssistantApiCoreTypesDeviceUserIdentity {
    /**
     * The identifier of the device.
     */
    deviceId?: Schema$AssistantApiCoreTypesDeviceId;
    /**
     * The identifier of the user.
     */
    gaiaId?: string | null;
  }
  /**
   * Represents a color in the RGBA color space. This message mirrors google.type.Color.
   */
  export interface Schema$AssistantApiCoreTypesGovernedColor {
    /**
     * The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. If omitted, this color object is to be rendered as a solid color (as if the alpha value had been explicitly given with a value of 1.0).
     */
    alpha?: number | null;
    /**
     * The amount of blue in the color as a value in the interval [0, 1].
     */
    blue?: number | null;
    /**
     * The amount of green in the color as a value in the interval [0, 1].
     */
    green?: number | null;
    /**
     * The amount of red in the color as a value in the interval [0, 1].
     */
    red?: number | null;
  }
  /**
   * The identification information for third party devices that integrates with the assistant. All of these fields will be populated by the third party when the query is sent from the third party device. Next Id: 5
   */
  export interface Schema$AssistantApiCoreTypesGovernedDeviceConfig {
    /**
     * Pantheon Project ID that uniquely identifies the consumer project ID. Required
     */
    agentId?: string | null;
    /**
     * Unique identifier for the device. Example: DBCDW098234. Required
     */
    deviceId?: string | null;
  }
  /**
   * LINT.IfChange Specifies identifier of a device AKA surface. Note there may be multiple device ids for the same physical device E.g. Allo app and Assistant app on Nexus. Note: DeviceId usage is complicated. Please do not depend on it for surface specific logic. Please use google3/assistant/api/capabilities.proto instead. IMPORTANT: When checking for equality between two `DeviceId`s, you should always use an `isSameDevice{As\}` function to check for equality, as deep equality between `DeviceId`'s is not guaranteed. * C++: http://google3/assistant/assistant_server/util/device_id_util.cc;l=23;rcl=421295740 * Dart: http://google3/assistant/context/util/lib/device_id.dart;l=26;rcl=442126145 * Java: http://google3/java/com/google/assistant/assistantserver/utils/DeviceIdHelper.java;l=9;rcl=390378522 See http://go/deviceid-equality for more details. Next ID: 14
   */
  export interface Schema$AssistantApiCoreTypesGovernedDeviceId {
    /**
     * The client_instance_id on devices with GSA. See 'client_instance_field' in go/androidids.
     */
    agsaClientInstanceId?: string | null;
    /**
     * Allo Id. Corresponds to the GBotRequest.Sender.sender. NOTE(dychen): This may change to standard android/ios physical device ids in order to enable shared data (e.g. installed app on physical device shared between Allo and Opa apps on Nexus).
     */
    alloDeviceId?: string | null;
    /**
     * A unique device ID for Assistant devices as proposed by go/ocelot-team to solve the device id fragmentation problem. The value of this id is the HomeGraph id of the device. See go/ocelot-track-0-registry-design. New surfaces should use the canonical_device_id instead of using other ids, and the registration should utilize the DeviceDataLayer (go/ddl-v0). Please contact the assistant-state-management@ team for guidance. Note: We didn't reuse |home_graph_device_id| because in Assistant code base |home_graph_device_id| is common to associate it with 3P devices. See go/project-yellowstone for more context.
     */
    canonicalDeviceId?: string | null;
    /**
     * If set, indicates that the device is a cast device, and contains the UUID of the cast device. Corresponds to the device_id field of the CastDevice proto.
     */
    castDeviceId?: string | null;
    /**
     * DUSI (go/dusi) is used as the identifier here. This identifier is unique to the user and device. This will help identify which device or application the user's request originated from. This is not to be confused with the client_instance_id that android devices provide. This is currently used by surfaces that use the assistant-legacy-nexus and assistant-legacy-clockwork pipelines. DUSI is created and set in S3. This field is only filled for GAIA requests.
     */
    clientInstanceId?: string | null;
    /**
     * A device ID produced by a connected dock, which is registered in HomeGraph.
     */
    connectedDockId?: string | null;
    /**
     * The unique DeviceConfig to the specific third party device. It is also used by Android Auto Embedded first party device. See go/opa-ids.
     */
    deviceConfig?: Schema$AssistantApiCoreTypesGovernedDeviceConfig;
    /**
     * DEPRECATED. assistant.api.core_types.governed.SurfaceIdentity.surface_type field should be used instead. The device's surface type. This is the string version of surface_type. The server should use the SurfaceType value derived from this string. If the device_type isn't supported within the SurfaceType enum, it will be set as UNKNOWN. Developers should use the enum in ServerParams instead of this string. WARNING: Clients are not actually setting this field. This field will be removed once references to it within the code base have been removed.
     */
    deviceType?: string | null;
    /**
     * The unique device ID for HomeGraph devices. This is the HomeGraph ID, created when the device is registered into HomeGraph. It is immutable for the same device unless it is completely deleted and recreated. See go/home-graph for details.
     */
    homeGraphDeviceId?: string | null;
    /**
     * The unique ID for libassistant based devices. See go/libassistant-id for details.
     */
    libassistantDeviceId?: string | null;
    /**
     * If set, indicates that the device is participating the multi-hotword arbitration and the id is an UUID to distinguish it from other devices. It should also be consistent between requests from a single device within a session (or short duration).
     */
    multiHotwordArbitrationDeviceId?: string | null;
    /**
     * The unique device ID for the Assistant App on iOS. See go/opa-ios-design for details.
     */
    opaIosDeviceId?: string | null;
    /**
     * The unique ID of a Quartz device. See go/quartz-design-doc for more details. Quartz ID is a hash of (android_id + gaia).
     */
    quartzDeviceId?: string | null;
  }
  /**
   * Task metadata information describing the ringtone. Next id: 11
   */
  export interface Schema$AssistantApiCoreTypesGovernedRingtoneTaskMetadata {
    /**
     * The category related with the ringtone. It's used to generate ringtone related with the category if the entity_mid is not be populated. E.g. for instrument, the ringtone may be piano sound.
     */
    category?: string | null;
    characterAlarmMetadata?: Schema$AssistantApiCoreTypesGovernedRingtoneTaskMetadataCharacterAlarmMetadata;
    characterTag?: string | null;
    /**
     * The freebase mid of the entity related to the ringtone. It will be used to generate the ringtone for the alarm or timer (with support for i18n). For instance, for the "cat" mid, the related ringtone will be a cat sound in some language, and for the "Beyonce" mid, the ringtone will be, e.g., a playlist of Beyonce's best hits.
     */
    entityMid?: string | null;
    funtimeMetadata?: Schema$AssistantApiCoreTypesGovernedRingtoneTaskMetadataFuntimeMetadata;
    genMlAlarmMetadata?: Schema$AssistantApiCoreTypesGovernedRingtoneTaskMetadataGenMlAlarmMetadata;
    /**
     * Gentle wake information for this alarm.
     */
    gentleWakeInfo?: Schema$AssistantApiCoreTypesGovernedRingtoneTaskMetadataGentleWakeInfo;
    onDeviceAlarmMetadata?: Schema$AssistantApiCoreTypesGovernedRingtoneTaskMetadataOnDeviceAlarmMetadata;
    /**
     * Will be deprecated. Use OnDeviceAlarmMetadata.
     */
    onDeviceAlarmSound?: string | null;
    routineAlarmMetadata?: Schema$AssistantApiCoreTypesGovernedRingtoneTaskMetadataRoutineAlarmMetadata;
  }
  export interface Schema$AssistantApiCoreTypesGovernedRingtoneTaskMetadataCharacterAlarmMetadata {
    /**
     * For character alarm, the media resources are provided through AOG apps. During alarm trigger phase, aog apps with the specified agent_ids are used to get the media resources. Multiple "AoG agents" can satisfy a character_tag. So the user will select the agents they want at alarm creation time. The chosen agents will be recorded so that the resources only from those agents will be used at trigger time. The number of selected agent_ids will not exceed 3. See go/character-alarm-aog.
     */
    agentIds?: string[] | null;
    /**
     * The Character Alarm tag. Tags are needed to identify the theme of the alarm. For example, if the tag is 'astronaut', astronaut based audio is played during alarm ring. Note : We have made it repeated so that the user can choose multiple character alarm themes at one go. At present, the user is allowed to choose only one theme during alarm creation.
     */
    characterTags?: string[] | null;
    /**
     * Icons urls corresponding to a character. Note : We have made it repeated so that we can show different images when the alarm rings. At present, we only support only one image.
     */
    iconUrls?: string[] | null;
  }
  /**
   * Used to make timers and alarms more delightful. See go/funtime-engdesign for more details.
   */
  export interface Schema$AssistantApiCoreTypesGovernedRingtoneTaskMetadataFuntimeMetadata {
    /**
     * For FunTime alarms and timers, the media resources are provided through AOG apps during their ringtone. Multiple AoG agents can satisfy a label. So a random agent will be chosen from those that are supplied. See go/funtime-engdesign.
     */
    agentIds?: string[] | null;
    /**
     * These bytes may represent the blob of the Rive animation that we pass to the Opal App. We will deprecate this field if we figure out a solution to load the animation from the web.
     */
    animationBlob?: string | null;
    /**
     * Url for Rive animation that is brought up on ring. Rive is a lightweight animation library that is compatible with Flutter on Opal. See https://rive.app/.
     */
    animationUrl?: string | null;
    /**
     * The url used to load the image that is at the center of the timer during timer countdown visuals.
     */
    timerHeroUrl?: string | null;
    /**
     * This is used to call S3 to realize the TTS. Is in the form of bytes because of a circular dependency issue in libassistant protos. It is a serialized proto of type speech.s3.TtsServiceRequest.
     */
    ttsServiceRequestBytes?: string | null;
  }
  /**
   * Metadata for machine learning generated audio samples. This will be similar to character alarms, Category will be set MEDIA but this metadata field will be used to identify the ringtone type on surface. (go/magenta-alarm-ringtones).
   */
  export interface Schema$AssistantApiCoreTypesGovernedRingtoneTaskMetadataGenMlAlarmMetadata {
    isEnabled?: boolean | null;
    /**
     * Label for the generated ringtone.
     */
    ringtoneLabel?: string | null;
  }
  /**
   * Gentle wake actions like slowly brightening the room/device screen leading up to the alarm firing (go/cube-gentle-wake-up).
   */
  export interface Schema$AssistantApiCoreTypesGovernedRingtoneTaskMetadataGentleWakeInfo {
    /**
     * Specifies how long the effect lasts. Allowed for effect to last after the alarm has started ringing. If unset or negative or 0, effect is assumed to last until alarm trigger time.
     */
    effectDurationMs?: string | null;
    /**
     * Indicates if gentle wake action is to be performed before this alarm fires. This is enabled only if the device supports sunrise alarm capability. http://cs/symbol:assistant.api.SunriseFeaturesSupport
     */
    isEnabled?: boolean | null;
    /**
     * Specifies how long before the alarm fire time, the wakeup effect will start. ALWAYS POSITIVE.
     */
    startTimedeltaMs?: string | null;
  }
  /**
   * This describes the alarm sound resource enum and the alarm sound label for the on device alarm sound. On-device ringtones are product specific, hence Opal/UI layer will be responsible for populating this metadata at creation/edit. The enum map will be used to convert to an internal resource id used by libassistant for accessing the asset which are not exposed to UI.
   */
  export interface Schema$AssistantApiCoreTypesGovernedRingtoneTaskMetadataOnDeviceAlarmMetadata {
    /**
     * Opal/UI layer will set this bit based on the user selection.
     */
    onDeviceAlarmSound?: string | null;
    /**
     * A string label to identify the alarm sound name. Opal/UI layer will set this as per product definition. This will be used to display the name of the selected ringtone.
     */
    onDeviceAlarmSoundLabel?: string | null;
    /**
     * This is used to call S3 to realize the TTS. Is in the form of bytes because of a circular dependency issue in libassistant protos. It is a serialized proto of type speech.s3.TtsServiceRequest. This request will contain an ssml with the url to the ringtone files hosted on gstatic.
     */
    ttsServiceRequestBytes?: string | null;
  }
  export interface Schema$AssistantApiCoreTypesGovernedRingtoneTaskMetadataRoutineAlarmMetadata {
    /**
     * The unique id for each routine. When the alrm is dismissed, it will trigger the routine of the routine alarm's creator if feasible.
     */
    routineId?: string | null;
  }
  /**
   * The set of information that helps the server identify the surface. This replaces the User-Agent string within the Assistant Server. Note: The SurfaceIdentity proto should only be used to derive the capabilities of a surface. It should not be accessed outside of the CapabilityBuilder or CapabilityChecker. NEXT ID: 6 LINT.IfChange
   */
  export interface Schema$AssistantApiCoreTypesGovernedSurfaceIdentity {
    /**
     * The identifier of the device.
     */
    deviceId?: Schema$AssistantApiCoreTypesDeviceId;
    /**
     * DEPRECATED: The legacy device's surface type enum. NOTE: Prefer using the ontological `surface_type` field above. If you need to access the legacy surface type, please file a bug and add it in your code to migrate to ontological surface type.
     */
    legacySurfaceType?: string | null;
    /**
     * The device's surface type. The types are defined at google3/assistant/api/core_types/surfaces.gcl.
     */
    surfaceType?: string | null;
    /**
     * The version of the surface/client. This is different from the Conversation protocol version.
     */
    surfaceVersion?: Schema$AssistantApiCoreTypesGovernedSurfaceVersion;
  }
  /**
   * The version of the surface/client. New surfaces are encouraged to only use the “major” field to keep track of version number. The “minor” field may be used for surfaces that rely on both the “major” and “minor” fields to define their version.
   */
  export interface Schema$AssistantApiCoreTypesGovernedSurfaceVersion {
    major?: number | null;
    minor?: number | null;
  }
  /**
   * The Home app information of the provider. Next ID: 3
   */
  export interface Schema$AssistantApiCoreTypesHomeAppInfo {
    /**
     * The localized app name.
     */
    localizedAppName?: string | null;
    /**
     * Unique package name that identifies a Home app of the provider.
     */
    packageName?: string | null;
  }
  /**
   * An image represents the data about an image or a photo. IMPORTANT: The definition of the Image message is being moved to //assistant/api/core_types/governed/image_type.proto. All existing references will be updated to point to the new location. If you are adding a reference, use the new Image message instead of this one. LINT.IfChange NextId: 13
   */
  export interface Schema$AssistantApiCoreTypesImage {
    /**
     * A text description of the image to be used for accessibility, e.g. screen readers.
     */
    accessibilityText?: string | null;
    /**
     * App identifier. This field is specific to mobile surfaces and stands for app package name for Android surface, and app bundle identifier for iOS. In case identifier is specified but invalid, some default icon will be used, e.g. PackageManager.getDefaultActivityIcon() for Android. If you want to show image for AGSA versions which don't support this field, you can specify source_url as backup.
     */
    appIconIdentifier?: string | null;
    /**
     * This is the image that is displayed as the badge on the main image.
     */
    badgeImage?: Schema$AssistantApiCoreTypesImage;
    /**
     * Content of the image in bytes.
     */
    content?: string | null;
    height?: number | null;
    /**
     * Indicate the data source where the image is fetched.
     */
    imageSource?: string | null;
    /**
     * Content of image in form of JSON representation.
     */
    jsonContent?: string | null;
    /**
     * Text used to generate a letter drawable (a letter icon with color). It will be the default icon if the source_url is empty or cannot be rendered.
     */
    letterDrawableText?: string | null;
    /**
     * Url of the image provider, which is the website containing the image. For example, https://www.agentx.com.
     */
    providerUrl?: string | null;
    /**
     * The source url of the image. For example, https://www.agentx.com/logo.png
     */
    sourceUrl?: string | null;
    /**
     * Type of the source url.
     */
    sourceUrlType?: string | null;
    /**
     * The width and height of the image in pixels.
     */
    width?: number | null;
  }
  /**
   * Info for targeting a feature provided directly by the Assistant surface itself. i.e Could be pointing to AGSA audio player for AUDIO_PLAYER on AGSA.
   */
  export interface Schema$AssistantApiCoreTypesInternalProviderInfo {
    /**
     * Specifying which type of internal provider.
     */
    type?: string | null;
  }
  /**
   * The iOS app information of the provider. Next ID: 4
   */
  export interface Schema$AssistantApiCoreTypesIosAppInfo {
    /**
     * Bundle identifier that identifies an iOS app of the provider.
     */
    bundleIdentifier?: string | null;
    /**
     * The localized app name.
     */
    localizedAppName?: string | null;
    /**
     * A URL to open the provider's app.
     */
    openAppUrl?: string | null;
  }
  /**
   * The KaiOS app information of the provider. Next ID: 4
   */
  export interface Schema$AssistantApiCoreTypesKaiOsAppInfo {
    /**
     * The localized app name.
     */
    localizedAppName?: string | null;
    /**
     * A URL to open the provider's app.
     */
    openAppUrl?: string | null;
    /**
     * Unique package name that identifies a KaiOS app of the provider.
     */
    packageName?: string | null;
  }
  /**
   * Geographic coordinate information for location.
   */
  export interface Schema$AssistantApiCoreTypesLocationCoordinates {
    /**
     * The accuracy of the coordinates in meters.
     */
    accuracyMeters?: number | null;
    /**
     * Latitude degrees.
     */
    latDegrees?: number | null;
    /**
     * Longitude degrees.
     */
    lngDegrees?: number | null;
  }
  /**
   * LINT.IfChange(ungoverned_message_notification) This proto captures the contents of a messaging app notification that is typically part of a conversation thread. Next Id: 20
   */
  export interface Schema$AssistantApiCoreTypesMessageNotification {
    /**
     * App name of the message notification, e.g. Hangouts.
     */
    appName?: string | null;
    /**
     * The key used to group this notification into a cluster.
     */
    bundleId?: string | null;
    /**
     * Uri for the attachment (image, audio, video etc.).
     */
    dataUri?: string | null;
    /**
     * The group key of a proactive notification. Details in assistant.api.client_op.NotificationArgs.grouping_key.
     */
    groupingKey?: string | null;
    /**
     * Name of the group associated with the message notification. This field is set iff this is a group message.
     */
    groupName?: string | null;
    /**
     * Index of the message notification.
     */
    index?: number | null;
    /**
     * Boolean indicating if the mark_as_read action is available for this message.
     */
    markAsReadActionAvailable?: boolean | null;
    /**
     * Length of the message/notification content in characters. Note: We can't send the full content because of privacy restriction, preventing sending client content to our backends. Concatenated message_length of all notification_entries.
     */
    messageLength?: number | null;
    messageRecipientType?: string | null;
    /**
     * Mime type of the data_uri. e.g. 'audio/wav', 'video/mp4', 'image/png'.
     */
    mimeType?: string | null;
    notificationEntries?: Schema$AssistantApiCoreTypesMessageNotificationNotificationEntry[];
    /**
     * On-device cache key for notification icon.
     */
    notificationIconKey?: string | null;
    /**
     * String key of the notification. It is the key from original StatusBarNotification received from Android OS. It is used to identify the original notification to send a reply.
     */
    notificationKey?: string | null;
    /**
     * The opaque_token of a proactive notification. Details in assistant.api.client_op.NotificationArgs.opaque_token.
     */
    opaqueToken?: string | null;
    /**
     * App pkg of the message notification, e.g. "com.google.android.talk".
     */
    packageName?: string | null;
    /**
     * Timestamp of the last notification's post time.
     */
    postTime?: string | null;
    /**
     * Boolean indicating if the reply action is available for this message.
     */
    replyActionAvailable?: boolean | null;
    sender?: Schema$AssistantApiCoreTypesMessageNotificationPerson;
    /**
     * Sender's name of the message notification, e.g. Elsa. Last sender name in case of a group conversation.
     */
    senderName?: string | null;
  }
  /**
   * Structure of each notification in the MessageNotification Bundle. Attribute sender_name could be different in case of group messages. Next Id: 8
   */
  export interface Schema$AssistantApiCoreTypesMessageNotificationNotificationEntry {
    /**
     * Count of characters in the message body in the notification.
     */
    charCount?: number | null;
    /**
     * Uri for the attachment (image, audio, video etc.).
     */
    dataUri?: string | null;
    /**
     * Note that this is not present in production traffic. Content of the message body in the notification.
     */
    messageBody?: string | null;
    /**
     * Mime type of the data_uri. e.g. 'audio/wav', 'video/mp4', 'image/png'.
     */
    mimeType?: string | null;
    /**
     * Timestamp of the notification's post time.
     */
    postTime?: string | null;
    /**
     * Sender of the message notification.
     */
    sender?: Schema$AssistantApiCoreTypesMessageNotificationPerson;
    /**
     * Count of words in the message body in the notification.
     */
    wordCount?: number | null;
  }
  /**
   * Mirrors part of https://developer.android.com/reference/android/app/Person Next Id: 4
   */
  export interface Schema$AssistantApiCoreTypesMessageNotificationPerson {
    isImportant?: boolean | null;
    key?: string | null;
    name?: string | null;
  }
  /**
   * Provider. Like, Spotify or iHeartRadio. Next ID: 13
   */
  export interface Schema$AssistantApiCoreTypesProvider {
    /**
     * The android app information of the provider.
     */
    androidAppInfo?: Schema$AssistantApiCoreTypesAndroidAppInfo;
    /**
     * The cast app information of the provider.
     */
    castAppInfo?: Schema$AssistantApiCoreTypesCastAppInfo;
    /**
     * The ChromeOS app information of the provider.
     */
    chromeosAppInfo?: Schema$AssistantApiCoreTypesChromeOsAppInfo;
    /**
     * The third party provider information.
     */
    cloudProviderInfo?: Schema$AssistantApiCoreTypesCloudProviderInfo;
    /**
     * A URL to fallback to if app can not be opened.
     */
    fallbackUrl?: string | null;
    homeAppInfo?: Schema$AssistantApiCoreTypesHomeAppInfo;
    /**
     * Public URL pointing to an icon image for the provider. e.g. https://lh3.googleusercontent.com/UrY7BAZ-XfXGpfkeWg0zCCeo-7ras4DCoRalC_WXXWTK9q5b0Iw7B0YQMsVxZaNB7DM
     */
    iconImageUrl?: string | null;
    /**
     * The internal assistant provider information.
     */
    internalProviderInfo?: Schema$AssistantApiCoreTypesInternalProviderInfo;
    /**
     * The iOS app information of the provider.
     */
    iosAppInfo?: Schema$AssistantApiCoreTypesIosAppInfo;
    /**
     * The KaiOS app information of the provider.
     */
    kaiosAppInfo?: Schema$AssistantApiCoreTypesKaiOsAppInfo;
    /**
     * The sip information of the provider.
     */
    sipProviderInfo?: Schema$AssistantApiCoreTypesSipProviderInfo;
    /**
     * The web provider information.
     */
    webProviderInfo?: Schema$AssistantApiCoreTypesWebProviderInfo;
  }
  /**
   * ProviderDelta. The incremental change, e.g. installation or deletion for Spotify or iHeartRadio. Currently it is for Android only. A few considerations for edge cases: - If the app being deleted is not found from Footprints, it is ignored. - For Footprint upload through Geller, the gPRC response is available for client to retry in the next upload if the upload fails. - For Assistant Request, there is no upload status similar to the current AppCapabilities. Next ID: 4
   */
  export interface Schema$AssistantApiCoreTypesProviderDelta {
    /**
     * The android app information of the provider.
     */
    androidAppInfoDelta?: Schema$AssistantApiCoreTypesAndroidAppInfoDelta;
    /**
     * A URL to fallback to if app can not be opened.
     */
    fallbackUrl?: string | null;
    /**
     * Public URL pointing to an icon image for the provider. e.g. https://lh3.googleusercontent.com/UrY7BAZ-XfXGpfkeWg0zCCeo-7ras4DCoRalC_WXXWTK9q5b0Iw7B0YQMsVxZaNB7DM
     */
    iconImageUrl?: string | null;
  }
  /**
   * Session Initiation Protocol (SIP) information for providers that use SIP to initiate multimedia communication sessions, like Google Voice and Fi. https://en.wikipedia.org/wiki/Session_Initiation_Protocol
   */
  export interface Schema$AssistantApiCoreTypesSipProviderInfo {
    /**
     * The providers id (MID) which is the primary identifier for a call provider within the Assistant. A MID, or machine identifier, is a unique identifier issued by Knowledge Graph for all entities contained in it's graph.
     */
    providerId?: string | null;
    /**
     * Calling realm to be use for each call. i.e. For anonymous, this would be set to anonymous.chirp.google.com
     */
    realm?: string | null;
    /**
     * If true, client should use the Birdsong TaCL API for this call. Uses the VoiceCallManager API by default. For more details: go/birdsong-migration-google-home
     */
    useBirdsongTacl?: boolean | null;
  }
  /**
   * The set of information that helps the server identify the surface. This replaces the User-Agent string within the Assistant Server. Note: The SurfaceIdentity proto should only be used to derive the capabilities of a surface. It should not be accessed outside of the CapabilityBuilder or CapabilityChecker. NEXT ID: 5 IMPORTANT: The definitions of the SurfaceIdentity and SurfaceVersion protos are being moved to //assistant/api/core_types/governed/surface_identity.proto All existing references will be updated to point to the new location. If you are adding a reference, use the new SurfaceIdentity and SurfaceVersion protos instead of the protos defined here. LINT.IfChange
   */
  export interface Schema$AssistantApiCoreTypesSurfaceIdentity {
    /**
     * The identifier of the device.
     */
    deviceId?: Schema$AssistantApiCoreTypesDeviceId;
    /**
     * The device's surface type. The types are defined at google3/assistant/api/core_types/surfaces.gcl. For more details, refer to go/ontologicalize-surface-type.
     */
    surfaceType?: string | null;
    /**
     * DEPRECATED. assistant.api.core_types.governed.SurfaceIdentity.surface_type field should be used instead. The device's surface type. This is the string version of the assistant.api.core_types.SurfaceType enum. The server should not use this field, rather it should use the SurfaceType value derived from this string.
     */
    surfaceTypeString?: string | null;
    /**
     * The version of the surface/client. This is different from the Conversation protocol version.
     */
    surfaceVersion?: Schema$AssistantApiCoreTypesSurfaceVersion;
  }
  /**
   * Specifies the types of device surfaces. LINT.IfChange When adding new surface types make sure that My Activity (https://myactivity.google.com/product/assistant) will correctly render by adding your enum to http://cs/symbol:GetAssistSurfaceName%20f:%5C.cc$ If your type doesn't fit in to any of the existing surfaces messages, add a new message in http://google3/personalization/footprints/boq/uservisible/events/intl/smh_frontend_messages.h.
   */
  export interface Schema$AssistantApiCoreTypesSurfaceType {
    type?: string | null;
  }
  /**
   * The version of the surface/client. New surfaces are encouraged to only use the “major” field to keep track of version number. The “minor” field may be used for surfaces that rely on both the “major” and “minor” fields to define their version.
   */
  export interface Schema$AssistantApiCoreTypesSurfaceVersion {
    major?: number | null;
    minor?: number | null;
  }
  /**
   * The web information of the provider. Next ID: 5
   */
  export interface Schema$AssistantApiCoreTypesWebProviderInfo {
    /**
     * Serialized storage (context) persisted and retrieved for the app and home.
     */
    homeStorage?: string | null;
    /**
     * The localized app name.
     */
    localizedAppName?: string | null;
    /**
     * A URL to open the provider's app.
     */
    openAppUrl?: string | null;
    /**
     * Info about 3P Custom NLU used in this web provider. TODO(b/321644453) remove when QRewrite is able to call SERoot.
     */
    thirdPartyCustomNluInfo?: Schema$AssistantApiCoreTypesWebProviderInfoThirdPartyCustomNluInfo;
  }
  export interface Schema$AssistantApiCoreTypesWebProviderInfoThirdPartyCustomNluInfo {
    /**
     * The locale of this agent version, represented by BCP-47 language strings, such as "en", "en-US", "fr", "fr-CA", "sr-Latn", "zh-Hans-CN", etc.
     */
    locale?: string | null;
    /**
     * Unique internal identifier of 3P Custom NLU agent. UUID.
     */
    nluAgentId?: string | null;
    /**
     * Identifies the 3P Custom NLU agent version.
     */
    nluAgentVersion?: string | null;
  }
  export interface Schema$AssistantApiCrossDeviceExecutionCapability {
    /**
     * Whether the device has torus/usonia capabililities enabled or not.
     */
    localConnectivityEnabled?: boolean | null;
    /**
     * Whether the device supports cast media originated from a remote device to be executed through local execution and can upload results asynchronously. Needs to be checked before sending remote media initiation through local channel since it needs an async result upload path.
     */
    remoteCastMediaEnabled?: boolean | null;
  }
  /**
   * A Gregorian calendar date. IMPORTANT: The definition of Date proto is being moved to //assistant/api/core_types/governed/datetime_type.proto. All existing references will be updated to point to the new location. If you are adding a reference, use the new one instead.
   */
  export interface Schema$AssistantApiDate {
    /**
     * The day, in 1...31.
     */
    day?: number | null;
    /**
     * The month, in 1...12.
     */
    month?: number | null;
    /**
     * The year, e.g. 2016.
     */
    year?: number | null;
  }
  /**
   * A date-time specification, combining a date and civil time (relative to a given timezone). IMPORTANT: The definition of DateTime proto is being moved to //assistant/api/core_types/governed/datetime_type.proto. All existing references will be updated to point to the new location. If you are adding a reference, use the new one instead.
   */
  export interface Schema$AssistantApiDateTime {
    /**
     * A Gregorian calendar date.
     */
    date?: Schema$AssistantApiDate;
    /**
     * A civil time relative to a timezone.
     */
    timeOfDay?: Schema$AssistantApiTimeOfDay;
    /**
     * A time zone in IANA format.
     */
    timeZone?: Schema$AssistantApiTimeZone;
  }
  /**
   * This message describes roughly what a surface is capable of doing and metadata around those capabilities. These capabilities are determined based on: - device hardware - software - status (e.g. volume level, battery percentage) These capabilities refer to the surface and not the physical device. The list of supported surfaces can be found in the assistant.api.core_types.SurfaceType enum. A surface's capabilities can differ from the device's. An example would be ANDROID_ALLO running on Pixel. Allo does not support AudioInput while the Pixel does. In this case, audio_input will be set to false for Assistant Allo requests while it might be set to true for OPA_NEXUS requests. Next ID: 36
   */
  export interface Schema$AssistantApiDeviceCapabilities {
    /**
     * Capabilites related to Android intent support.
     */
    androidIntentCapabilities?: Schema$AssistantApiAndroidIntentCapabilities;
    /**
     * Capabilities if surface supports Google Assistant.
     */
    assistantCapability?: string | null;
    /**
     * These capabilities are scoped to the ability to gather audio. It includes information like the type of audio that can be gathered (e.g. public, private).
     */
    audioInput?: Schema$AssistantApiAudioInput;
    /**
     * These capabilities are scoped to the ability to play audio. It includes information like the type of audio that can be played (e.g. public, private).
     */
    audioOutput?: Schema$AssistantApiAudioOutput;
    /**
     * Bluetooth capabilities related to usage of a feature.
     */
    bluetoothCapabilities?: Schema$AssistantApiBluetoothCapabilities;
    /**
     * The call capabilities of this device. go/call-capabilities
     */
    callCapabilities?: Schema$AssistantApiCallCapabilities;
    /**
     * These capabilities are scoped to the camera abilities of this device.
     */
    camera?: Schema$AssistantApiCameraCapabilities;
    /**
     * UX restrictions for Auto.
     */
    carUxRestrictions?: string[] | null;
    /**
     * These capabilities are scoped to the cast abilities of this device.
     */
    cast?: Schema$AssistantApiCastCapabilities;
    communicationUiCapabilities?: Schema$AssistantApiCommunicationUiCapabilities;
    contactLookupCapabilities?: Schema$AssistantApiContactLookupCapabilities;
    /**
     * This is the same device id that is specified in the conversation protocol and should be unique to each device/user/model combination. For example, if a request is coming from a watch through AGSA the watch and AGSA should have different device_ids. Note: this field should only be used to determine which device the capabilities belong to and not to access the id of the device. Instead DeviceProperties should be used and accessed through ParamsAccessor.
     */
    deviceId?: Schema$AssistantApiCoreTypesDeviceId;
    /**
     * Capabilities related to Android tablet UX experience.
     */
    deviceUxMode?: string | null;
    /**
     * Indicates that the device has connection to cellular network that allows it to make voice calls. This is distinct from device just being capable of voice telephony, because the device can be capable yet miss the suitable SIM card (for example, it could miss SIM card altogether, or have data-only SIM card).
     */
    hasVoiceTelephony?: boolean | null;
    /**
     * Indicates if the client supports Javascript Whatsnext (go/jwn). Also contains the Jwn libraries present on the client along with their versions.
     */
    jwnCapabilities?: Schema$AssistantApiJwnCapabilities;
    /**
     * Capabilities related to Lens Perception, i.e. image understanding. See go/lens-perception-sdk.
     */
    lensPerceptionCapabilities?: Schema$AssistantApiLensPerceptionCapabilities;
    /**
     * These capabilities are scoped to the location abilities of this device.
     */
    location?: Schema$AssistantApiLocationCapabilities;
    /**
     * Data which is produced for logging and debugging. Servers MUST NOT use this for any other purposes, such as branching on it.
     */
    loggingOnlyData?: Schema$AssistantApiLoggingOnlyData;
    messageCapabilities?: Schema$AssistantApiMessageCapabilities;
    /**
     * These capabilities are scoped to abilities of the device to move around.
     */
    movement?: Schema$AssistantApiMovementCapabilities;
    /**
     * DEPRECATED: Use SystemNotificationRestrictions instead. Specifies whether the surface is able to display notifications. This field is superficially similar to ProactiveNotificationOutput, but unlike that field which tracks a per-user preference on the OPA side, this field captures whether the surface is capable of displaying notifications.
     */
    notificationCapabilities?: string | null;
    /**
     * Settings, that reflect whether a specific notification type is allowed for current device, e.g. if the user opted out from notification category or category group. This settings are server-side stored and evaluated unlike SystemNotificationRestrictions field.
     */
    notificationOutputRestrictions?: Schema$AssistantApiNotificationOutputRestrictions;
    /**
     * These are user configured restrictions indicating what the device is allowed to output from the privacy point of view.
     */
    outputRestrictions?: Schema$AssistantApiOutputRestrictions;
    /**
     * Capability to support Pop on lockscreen.
     */
    popOnLockscreenCapability?: string | null;
    /**
     * Indicates if the client has safety related restriction.
     */
    safetyRestrictions?: string | null;
    /**
     * These capabilities are scoped to the ability to see and interact with the Assistant through a screen. If the device has no screen it should send an empty ScreenCapabilities. Sending no ScreenCapabilities will cause this to be overridden with the surface default.
     */
    screen?: Schema$AssistantApiScreenCapabilities;
    /**
     * Capabilities related to SODA (Speech On-Device API).
     */
    sodaCapabilities?: Schema$AssistantApiSodaCapabilities;
    /**
     * These capabilities are scoped to the software available on the device as well as the set of supported Assistant features.
     */
    software?: Schema$AssistantApiSoftwareCapabilities;
    /**
     * DEPRECATED Capabilities related to speech detection on devices.
     */
    speechCapabilities?: Schema$AssistantApiSpeechCapabilities;
    /**
     * Locales supported by assistant settings for speaking and display. This is independent from device language that is defined in device setting. New locales are added based on rollout, whitelist and app version releases because older versions does not have model support. Currently supported locale list differs by surface type.
     */
    supportedLocale?: string[] | null;
    /**
     * The set of information that helps the server identify the surface.
     */
    surfaceIdentity?: Schema$AssistantApiCoreTypesSurfaceIdentity;
    /**
     * DEPRECATED. surface_identity field below already contains this information. The device's surface type. This is the string version of the assistant.api.core_types.SurfaceType enum. The server should not use this field, rather it should use the SurfaceType value derived from this string.
     */
    surfaceTypeString?: string | null;
    /**
     * Restrictions related to system-level notifications. This field is superficially similar to ProactiveNotificationOutput, but unlike that field which tracks a per-user preference on the OPA side, this field captures system level notifications restrictions. This field is not stored and is merged to capabilities from conversation params. It exists mostly for logging purposes of android channel state and global app-level notification opt out.
     */
    systemNotificationRestrictions?: Schema$AssistantApiSystemNotificationRestrictions;
    /**
     * Capabilities related to third party integration.
     */
    thirdPartyCapabilities?: Schema$AssistantApiThirdPartyCapabilities;
  }
  /**
   * A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like "day" or "month". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.
   */
  export interface Schema$AssistantApiDuration {
    /**
     * Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.
     */
    nanos?: number | null;
    /**
     * Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive.
     */
    seconds?: string | null;
  }
  export interface Schema$AssistantApiFeatureSpecificActionSupport {
    /**
     * Whether client supports clarification suggestion chip to be displayed see |assistant.suggestions.ClarificationData|
     */
    clarificationDataSupported?: boolean | null;
  }
  export interface Schema$AssistantApiFitnessFeatureSupport {
    /**
     * A list of fitness activity types supported by this client.
     */
    supportedActivities?: string[] | null;
  }
  export interface Schema$AssistantApiFluidActionsSupport {
    /**
     * Specifies the params proto that Fluid Actions uses to sync state with server.
     */
    stateSyncMethod?: string | null;
  }
  /**
   * Capabilities of Google assistant conversation service(GACS) devices. These capabilites including supported GACS actions and response size limitations.
   */
  export interface Schema$AssistantApiGacsCapabilities {
    /**
     * DeviceId of the accessory device (eg. watch) Commonly the go/dusi (eg. client_instance_id) is provided.
     */
    deviceId?: Schema$AssistantApiCoreTypesDeviceId;
    /**
     * Configuration sent by device.
     */
    responseConfig?: Schema$GoogleAssistantAccessoryV1ResponseConfig;
    /**
     * DEPRECATED: Format of TTS audio requested by the device.
     */
    ttsEncoding?: string | null;
  }
  /**
   * Capabilities related to GCM.
   */
  export interface Schema$AssistantApiGcmCapabilities {
    /**
     * GCM registration id for the device. Used to pass messages to the device.
     */
    gcmRegistrationId?: string | null;
    /**
     * Assistant supports GCM on the device. ClientOps can be sent to it over GCM and will be executed.
     */
    supportsAssistantGcm?: boolean | null;
    /**
     * If it is set to true, then it indicates to server that device is capable of receiving a GCM payload with serialized client input. The client input will be sent back to Assistant Server over conversation protocol.
     */
    supportsClientInputOverGcm?: boolean | null;
  }
  /**
   * The gesture capabilities related to Selina. Next ID: 4
   */
  export interface Schema$AssistantApiGestureCapabilities {
    /**
     * Whether Gesture is supported. When false, override the value for tap and omniswipe.
     */
    gestureSensing?: boolean | null;
    /**
     * Whether omniswipe is supported
     */
    omniswipeGestureCapable?: boolean | null;
    /**
     * Whether tap is supported
     */
    tapGestureCapable?: boolean | null;
  }
  /**
   * Access settings for guests.
   */
  export interface Schema$AssistantApiGuestAccessOutput {
    guestAccessOnYoutube?: string | null;
  }
  export interface Schema$AssistantApiImmersiveCanvasSupport {
    /**
     * Whether the client supports confirmation messages in Immersive Canvas actions.
     */
    confirmationMessageSupported?: boolean | null;
    /**
     * Whether the client support canvas pause signal. If true, the Assistant Server will send a signal when canvas transitioning to pause mode.
     */
    pauseSignalSupported?: boolean | null;
  }
  /**
   * These capabilities are used to determine the jwn libraries and their versions that are present on the client.
   */
  export interface Schema$AssistantApiJwnCapabilities {
    /**
     * The name and version of the jwn libraries currently stored on the client. These are the same that the server communicated when the library was first sent down.
     */
    librariesVersionMap?: {[key: string]: string} | null;
    /**
     * Compression algorithms supported on the client. Server can choose one of these to compress WhatsNext Javascript programs and libraries.
     */
    supportedCompressionMode?: string[] | null;
    /**
     * Whether the client supports running jwn code.
     */
    supportsJwn?: boolean | null;
  }
  /**
   * Capabilities related to Lens Perception, i.e. image understanding. See go/loa-lens-device-capabilities. Next ID: 6
   */
  export interface Schema$AssistantApiLensPerceptionCapabilities {
    /**
     * Whether the device supports Lens Perception.
     */
    hasLensPerception?: boolean | null;
    /**
     * Indicates whether Lens supports Lens Direct Intent (go/lensdirectintent).
     */
    isLensDirectIntentAvailable?: boolean | null;
    /**
     * Indicates whether Lens supports Live view-finder experience.
     */
    isLensLiveViewfinderAvailable?: boolean | null;
    /**
     * Indicates whether Lens supports Post-capture experience with an image payload.
     */
    isLensPostCaptureAvailable?: boolean | null;
    /**
     * Contains the capabilities that Lens can support.
     */
    lensCapabilities?: Schema$AssistantApiLensPerceptionCapabilitiesLensCapabilities;
  }
  /**
   * The set of capabilities that Lens can support. This is the Assistant proto representation of Lens capabilities defined at j/c/g/android/apps/gsa/search/shared/service/proto/lens_service_event.proto Next ID: 7
   */
  export interface Schema$AssistantApiLensPerceptionCapabilitiesLensCapabilities {
    /**
     * The presence of this message means that Dining is supported.
     */
    dining?: Schema$AssistantApiLensPerceptionCapabilitiesLensCapabilitiesDining;
    /**
     * The presence of this message means that Education is supported.
     */
    education?: Schema$AssistantApiLensPerceptionCapabilitiesLensCapabilitiesEducation;
    /**
     * The presence of this message means that Outdoor is supported.
     */
    outdoor?: Schema$AssistantApiLensPerceptionCapabilitiesLensCapabilitiesOutdoor;
    /**
     * The presence of this message means that Shopping is supported.
     */
    shopping?: Schema$AssistantApiLensPerceptionCapabilitiesLensCapabilitiesShopping;
    /**
     * The presence of this message means that intenting directly into the text filter is supported.
     */
    text?: Schema$AssistantApiLensPerceptionCapabilitiesLensCapabilitiesText;
    /**
     * The presence of this message means that Translation is supported.
     */
    translate?: Schema$AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTranslate;
  }
  /**
   * Dining recognition capability. For example popular dishes on a given restaurant menu image.
   */
  export interface Schema$AssistantApiLensPerceptionCapabilitiesLensCapabilitiesDining {}
  /**
   * Education recognition capability.
   */
  export interface Schema$AssistantApiLensPerceptionCapabilitiesLensCapabilitiesEducation {}
  /**
   * Outdoor place recognition capability. For example recognizing storefronts.
   */
  export interface Schema$AssistantApiLensPerceptionCapabilitiesLensCapabilitiesOutdoor {}
  /**
   * Shopping recognition capability.
   */
  export interface Schema$AssistantApiLensPerceptionCapabilitiesLensCapabilitiesShopping {}
  /**
   * Text recognition capability.
   */
  export interface Schema$AssistantApiLensPerceptionCapabilitiesLensCapabilitiesText {
    /**
     * Indicates whether text-to-speech is supported.
     */
    isTextToSpeechSupported?: boolean | null;
  }
  /**
   * Translation capability.
   */
  export interface Schema$AssistantApiLensPerceptionCapabilitiesLensCapabilitiesTranslate {
    /**
     * The list of language IETF BCP 47 tags that are supported. See the full details in the comment on the equivalent field in: http://google3/java/com/google/android/apps/gsa/search/shared/service/proto/lens_service_event.proto;l=55;rcl=355512559
     */
    supportedLanguageTags?: string[] | null;
  }
  export interface Schema$AssistantApiLiveTvChannelCapabilities {
    /**
     * A list of channel providers each of which provides a list of its channels.
     */
    channelsByProvider?: Schema$AssistantApiLiveTvChannelCapabilitiesChannelsByProvider[];
  }
  export interface Schema$AssistantApiLiveTvChannelCapabilitiesChannelsByProvider {
    /**
     * A list of channels provided by this input. Keep the performance impact in mind when the number/size of the channels is large. When there are too many channels, consider stripping out some data.
     */
    channels?: Schema$AssistantApiLiveTvChannelCapabilitiesLiveTvChannel[];
    /**
     * An identifier to identify the input source. For example for TIF based channels, this will be the TIF input ID to differentiate different tuner apps. See https://source.android.com/devices/tv
     */
    inputId?: string | null;
    /**
     * Type of provider who provides this channel input.
     */
    providerType?: string | null;
  }
  export interface Schema$AssistantApiLiveTvChannelCapabilitiesLiveTvChannel {
    /**
     * Unique channel identifier.
     */
    channelId?: string | null;
    /**
     * A list of channel names and synonyms.
     */
    channelName?: string[] | null;
    /**
     * Channel number displayed to user. Optional.
     */
    channelNumber?: string | null;
    /**
     * A deep link into the Live player app that tunes to this channel.
     */
    deeplink?: string | null;
    /**
     * KG mid of the channel if it exists in KG.
     */
    mid?: string | null;
    /**
     * Network KG mid of the channel if it exists in KG
     */
    networkMid?: string | null;
  }
  export interface Schema$AssistantApiLiveTvProvider {
    /**
     * Contains detailed provider information such as android app package name.
     */
    providerInfo?: Schema$AssistantApiCoreTypesProvider;
    /**
     * A provider enum string for OTT providers. The available key can be found in go/ump-provider-enum For Tuner provider, the provider key would be an ID the tuner app uploaded from TIF. See https://source.android.com/devices/tv
     */
    providerKey?: string | null;
    providerType?: string | null;
  }
  export interface Schema$AssistantApiLocationCapabilities {
    gpsAvailable?: boolean | null;
  }
  /**
   * Data which is produced for logging and debugging. Servers MUST NOT use this for any other purposes, such as branching on it. Next ID: 16
   */
  export interface Schema$AssistantApiLoggingOnlyData {
    /**
     * A user-readable string describing the ACP version (go/acp-version) of the client app used by the user to originate the conversation.
     */
    acpVersion?: string | null;
    /**
     * Random identifier assigned to Android mobile devices. Older logs may have previously stored other kinds of android IDs in this field, but all current logs should use the GServices Id. See go/androidids.
     */
    androidId?: string | null;
    /**
     * A user-readable string describing the version of the client app used by the user to originate the conversation.
     */
    appVersion?: string | null;
    /**
     * An enum specifying when was this ATV AssistantSettings entry initially created.
     */
    assistantSettingsSource?: string | null;
    /**
     * The type of board used by manufacturer for this device
     */
    boardName?: string | null;
    /**
     * The revision of board used
     */
    boardRevision?: string | null;
    /**
     * This field records the linking status between Assistant setting entry and Cast setting entry. Currently only ATV surface populates this field for profiling purpose.
     */
    castAssistantSettingLinkingResult?: Schema$AssistantApiCastAssistantSettingLinkingResult;
    /**
     * A user-readable string describing the device's hardware platform.
     */
    deviceModel?: string | null;
    /**
     * Any relevant info concerning the build options of the embedder (that is the software which runs as the 'driver' of an Assistant library, such as libassistant. the embedder is typically built by a third party)
     */
    embedderBuildInfo?: string | null;
    /**
     * A string recording the app version that is initially used to created this settings entry.
     */
    initialAppVersion?: string | null;
    /**
     * Boolean field to indicate whether a certain user is the primary user of a device or not. This is useful for distinguishing the user0 from other users given user0 might have certain privileges (Eg: Hubmode on Tangor)
     */
    isPrimaryUser?: boolean | null;
    /**
     * default display name of device over mdns. This is specified at the factory, not specified by the user.
     */
    mdnsDisplayName?: string | null;
    /**
     * A user-readable string describing the device's software platform.
     */
    platformBuild?: string | null;
    /**
     * A string describing device's release channel. For cast devices, the string will look like "qa-beta-channel", "eng-no-update", etc.
     */
    virtualReleaseChannel?: string | null;
  }
  export interface Schema$AssistantApiMediaControlSupport {
    /**
     * Whether to prevent confirmations (text, tts) for media control actions while media is playing so that the media session is not interrupted.
     */
    skipConfirmationsWhilePlaying?: boolean | null;
  }
  export interface Schema$AssistantApiMessageCapabilities {
    /**
     * If true, APP_ID queries initiated by this device should fall back to execution on the tethered device if it's available and if the primary device cannot perform the action (e.g. due to the app not being installed).
     */
    fallbackToTetheredDeviceAppCapabilities?: boolean | null;
    /**
     * For chat_message.SEND targeting, when either the primary or secondary (tethered) device is capable of handling the chat_message.SEND action, prefer targeting it to the primary device.
     */
    preferTargetingPrimaryDevice?: boolean | null;
    /**
     * Should only be checked if nonempty.
     */
    supportedRecipientTypes?: string[] | null;
  }
  export interface Schema$AssistantApiMovementCapabilities {
    /**
     * Indicates how much the device moves around. E.g., TV has a low mobility level, while Auto has a very high level.
     */
    mobility?: string | null;
  }
  export interface Schema$AssistantApiNotificationOutputRestrictions {
    optOutState?: Schema$AssistantApiNotificationOutputRestrictionsOptOutState;
  }
  /**
   * Per category/category group notification opt out settings.
   */
  export interface Schema$AssistantApiNotificationOutputRestrictionsOptOutState {
    categoryGroupState?: Schema$AssistantApiNotificationOutputRestrictionsOptOutStateCategoryGroupState[];
    categoryState?: Schema$AssistantApiNotificationOutputRestrictionsOptOutStateCategoryState[];
  }
  export interface Schema$AssistantApiNotificationOutputRestrictionsOptOutStateCategoryGroupState {
    categoryGroup?: string | null;
    state?: string | null;
  }
  export interface Schema$AssistantApiNotificationOutputRestrictionsOptOutStateCategoryState {
    category?: string | null;
    state?: string | null;
  }
  /**
   * Encapsulates the action capabilities of the OEM device. This data is merged from Device Model lookup, per-device registration, and per-request context. This data is sent to NLU layer for query understanding.
   */
  export interface Schema$AssistantApiOemCapabilities {
    /**
     * The OEM Cloud execution capability of this device, containing routing details for cloud fulfillment.
     */
    cloudCapability?: Schema$AssistantDevicesPlatformProtoCloudCapability;
    /**
     * If fulfillment is done via 3P cloud and 3P supports device capabilities, this field will be set.
     */
    cloudDeviceCapabilities?: {[key: string]: any} | null;
    /**
     * Device Model Id from DeviceModelPackage.
     */
    deviceModelId?: string | null;
    /**
     * Device Model Revision Id from DeviceModelPackage.
     */
    deviceModelRevisionId?: string | null;
    /**
     * Opaque supported action data related to a specific domain of devices, for example for car. go/car-talk-registration-model
     */
    deviceSpecificData?: string | null;
    /**
     * Internal-only config containing metadata about the Device Model, for example to control the ranking behavior.
     */
    internalCapability?: Schema$AssistantDevicesPlatformProtoInternalCapability;
    /**
     * 3P Action Metadata, populated from the Device Model lookup and the client request parameters. For example, an Assistant SDK request would have the billed project id of the Assistant request added here in order to enable any Device Actions developed using the same Google Cloud project. This data is sent to Service Engine to mask triggering for Device Actions.
     */
    thirdPartyActionConfig?: Schema$AssistantApiThirdPartyActionConfig;
  }
  /**
   * Definitions of on-device assistant capabilities.
   */
  export interface Schema$AssistantApiOnDeviceAssistantCapabilities {
    /**
     * Capabilities related to local network arbitration (go/local-network-arbitration). Indicates if the device is capable of being a host device in the LAN whiling doing local network arbitration.
     */
    isLocalNetworkArbitrationSupported?: boolean | null;
    /**
     * Capabilities related to on-device arbitration(go/arbitration-on-device).
     */
    isOnDeviceArbitrationSupported?: boolean | null;
    /**
     * Indicates if on-device assistant is enabled on this device. Example usecases: NGA (go/nga) or Marble (go/marble).
     */
    isOnDeviceAssistantSupported?: boolean | null;
    /**
     * This may be used by NGA. E.g. if understanding happens on device, we can have more aggressive logic when fulfilling some features on the server side, like teleport.
     */
    isOnDeviceUnderstandingSupported?: boolean | null;
  }
  /**
   * Definitions of on-device Smart Home capabilities. Next ID: 2
   */
  export interface Schema$AssistantApiOnDeviceSmartHomeCapabilities {
    /**
     * Master bit for on-device Smart Home features.
     */
    isOnDeviceSmartHomeSupported?: boolean | null;
  }
  /**
   * The on-device storage capabilities found on the device.
   */
  export interface Schema$AssistantApiOnDeviceStorageCapabilities {
    /**
     * Determines if an on-device storage is supported.
     */
    isSupported?: boolean | null;
  }
  /**
   * These are user configurable permissions representing what the device is allowed to output. Next ID: 11
   */
  export interface Schema$AssistantApiOutputRestrictions {
    /**
     * The type of Google Photo content which the device can output.
     */
    googlePhotoContent?: string | null;
    /**
     * Access settings for guests.
     */
    guestAccessOutput?: Schema$AssistantApiGuestAccessOutput;
    /**
     * The level of personal data which the device can output. See go/personal-readout for detail.
     */
    personalData?: string | null;
    /**
     * This controls if the server can proactively send notification to users, and it does not affect scenarios that users ask for information. The notification may include TTS and lights. It could be only lights for chirp.
     */
    proactiveNotificationOutput?: string | null;
    /**
     * Restrictions on displaying and interacting with content on proactive surfaces (e.g. Dragonglass home screen). Note: NEVER access this field of OutputRestrictions directly, use the code in assistant/assistant_server/settings/device/device_settings_util.h instead.
     */
    proactiveOutput?: Schema$AssistantApiProactiveOutput;
    /**
     * Whether YouTube autoplay is allowed for queries from the user to this device. See go/assistant-youtube-settings for details.
     */
    youtubeAutoplayRestriction?: string | null;
    /**
     * The type of YouTube content which the device can output.
     */
    youtubeContent?: string | null;
    /**
     * The type of YouTube TV content which the device can output.
     */
    youtubeTvContent?: string | null;
  }
  /**
   * Next ID: 7
   */
  export interface Schema$AssistantApiProactiveOutput {
    /**
     * Allows displaying all personal data on proactive surfaces with no face match capability.
     */
    allowAllPersonalData?: boolean | null;
    /**
     * For ANDROID_TV devices, the location that this setting was last changed from. Note: this structure allows to extend to more per-vertical bits in the future.
     */
    androidTvAssistantSettingsSource?: string | null;
    /**
     * Allows displaying Health and Fitness content on proactive surfaces. This is a sub bit of the device-wide PR bit - the device-wide PR bit must be enabled AND this vertical sub bit must be enabled for H&F content to be shown. This bit will be available on all surfaces that have the proactive-bit enabled. If the proactive-bit is not enabled, then we do not show health and fitness content at all (or even allow access to this setting).
     */
    healthAndFitnessProactive?: string | null;
    /**
     * Allows displaying photos content on Dragonglass proactive surfaces. This is a sub bit of the device-wide PR bit - the device-wide PR bit must be enabled AND this vertical sub bit must be enabled for photos content to be shown on Dragonglass surfaces. This bit will be available on all Dragonglass surfaces that have the proactive-bit enabled. If the proactive-bit is not enabled or it's not a Dragonglass surface, then we do not show proactive photos content at all, nor allow access to this setting. See go/opa-photos-sg-settings for more details.
     */
    photosProactive?: string | null;
    /**
     * Settings for displaying personal data on proactive surfaces with face match capability.
     */
    userMatchProactive?: string | null;
  }
  /**
   * Also known as "Extensions Without Extensions" or "The Poor Man's Any", this simple proto is used to transmit arbitrary protocol buffers over the wire. Unlike extensions: - It does not require the proto type to be compiled into the binary. (Useful so that the proto declaration can be inside the conversation package) - It is compatible with all versions of proto, including proto3 and the wack-tastic version used on ChromecastOS. Server libraries for dealing with it live in google3/assistant/protocol/protobuf_lib.h.
   */
  export interface Schema$AssistantApiProtobuf {
    /**
     * The serialized protocol buffer.
     */
    protobufData?: string | null;
    /**
     * The type of the protocol buffer to use. This must be a resolvable name (Namespace.ProtoName) and refer to a proto which is either compiled in to both client and server (e.g. a base proto type) or to one which is part of the conversation package.
     */
    protobufType?: string | null;
  }
  /**
   * Date-based recurrences specify repeating events. Conceptually, a recurrence is a (possibly unbounded) sequence of dates on which an event falls, described by a list of constraints. A date is in a recurrence if and only if it satisfies all of the constraints. Note that devices may support some constraints, but not all. IMPORTANT: The definition of Recurrence proto is being moved to //assistant/api/core_types/governed/datetime_type.proto. All existing references will be updated to point to the new location. If you are adding a reference, use the new one instead.
   */
  export interface Schema$AssistantApiRecurrence {
    /**
     * The first day of the recurrence. If begin is not set, then the reminder will start infinitely in the past.
     */
    begin?: Schema$AssistantApiDate;
    /**
     * A list of blacklisted dates to skip the alarm on.
     */
    blacklistedRanges?: Schema$AssistantApiRecurrenceDatetimeRange[];
    /**
     * Specifies the date in a month. For example, if day_of_month is 15, then it represent the 15th day of the specified month.
     */
    dayOfMonth?: number[] | null;
    /**
     * Specifies a weekly or daily recurrence. Constraint: The date falls on one of these days of the week, in 0...6 (Sunday...Saturday).
     */
    dayOfWeek?: number[] | null;
    /**
     * The last day of the recurrence.
     */
    end?: Schema$AssistantApiDate;
    /**
     * Multiplier on the frequency of the recurrence. Use this to specify patterns that recur every X days, months, years, etc. Example: [remind me to call mom every 2nd week]. Default is 1 (every day, every month, every year).
     */
    every?: number | null;
    /**
     * Specifies the month in a year. Constrain: the month falls on one of these months, in 1, 2, ... 12 (January...December).
     */
    monthOfYear?: number[] | null;
    /**
     * The number of occurrences after which the recurrence should end.
     */
    numOccurrences?: number | null;
    /**
     * Specifies the index of week in a month. For example, the second Tuesday every month, in this case, week_of_month should be 2.
     */
    weekOfMonth?: number[] | null;
  }
  /**
   * A representation of a range of time with start and end datetime specified.
   */
  export interface Schema$AssistantApiRecurrenceDatetimeRange {
    /**
     * End date of the range.
     */
    endDate?: Schema$AssistantApiDateTime;
    /**
     * Start date of the range.
     */
    startDate?: Schema$AssistantApiDateTime;
  }
  /**
   * These capabilities represent the tactile features associated with the device. This includes, for example, whether the device has a screen, how big the screen is, and privacy of the screen. Next ID: 11
   */
  export interface Schema$AssistantApiScreenCapabilities {
    /**
     * The scale factor used to convert Scalable Pixel (SP) units to Density-independent Pixel (DP) units (DP = SP * scale factor). Fonts are measured in units of SP, and on some platforms such as Android the SP to DP scale factor can be affected by the font size a user selects in accessibility settings.
     */
    fontScaleFactor?: number | null;
    /**
     * The types of input that this screen supports. Note that this can be empty in which case the screen's input type is unknown.
     */
    inputType?: string[] | null;
    /**
     * Mask defined for this device, if any.
     */
    mask?: Schema$AssistantApiScreenCapabilitiesMask;
    /**
     * The targeted schema version for ProtoLayout requests.
     */
    protoLayoutTargetedSchema?: Schema$AssistantApiScreenCapabilitiesProtoLayoutVersion;
    /**
     * If this field is absent, the resolution of the screen is unknown.
     */
    resolution?: Schema$AssistantApiScreenCapabilitiesResolution;
    /**
     * If screen is turned off.
     */
    screenOff?: boolean | null;
    /**
     * The ability of the client to correctly report screen state.
     */
    screenStateDetection?: string | null;
    /**
     * The primary supported rendering format for display on the device's screen. This may be used to determine what format of card to be returned when rendering cards.
     */
    supportedRenderingFormat?: string | null;
    /**
     * The screen states that the client supports. The current screen state is specified in DeviceProperties.screen.
     */
    supportedScreenStates?: string[] | null;
    /**
     * Whether the device enabled vision help features in accessibility settings. The settings is config in Assistant App and on-device settings, and stored in footprints. When enabled, font, color and TTS will be adjusted.
     */
    visionHelpEnabled?: boolean | null;
  }
  /**
   * A mask applied to the screen's pixel space to determine regions not visible on the physical device.
   */
  export interface Schema$AssistantApiScreenCapabilitiesMask {
    type?: string | null;
  }
  /**
   * Version info for ProtoLayout requests.
   */
  export interface Schema$AssistantApiScreenCapabilitiesProtoLayoutVersion {
    major?: number | null;
    minor?: number | null;
  }
  /**
   * A Resolution proto indicates the size of the application window. All fields are required.
   */
  export interface Schema$AssistantApiScreenCapabilitiesResolution {
    /**
     * Dots (pixels) per inch of the screen.
     */
    dpi?: number | null;
    heightPx?: number | null;
    /**
     * m_size is the smallest square box size to display a capital letter M so that the user can still easily understand it.
     */
    mSize?: number | null;
    /**
     * neng_size is the smallest square box size to display a letter 螚 (Neng, U+879A) so that the user can easily understand it. (Neng is a visually dense Chinese letter, and so may require a larger box than an M.)
     */
    nengSize?: number | null;
    /**
     * The dimensions of the application window, in pixels.
     */
    widthPx?: number | null;
  }
  /**
   * The Soli capabilities on Elaine, including gestures and sleep sensing. go/dingo-dc-software Next ID: 4
   */
  export interface Schema$AssistantApiSelinaCapabilites {
    /**
     * A list of gestures that selina supports
     */
    gestureCapabilities?: Schema$AssistantApiGestureCapabilities;
    /**
     * Whether the client supports selina.
     */
    selinaSupported?: boolean | null;
    /**
     * Whether the client can monitor sleep. This allows us to show sleep CUJ related information: go/TwilightDesign
     */
    sleepSensingSupported?: boolean | null;
  }
  export interface Schema$AssistantApiSettingsAmbientSettings {
    /**
     * Whether any user sets personal photos on this device. See go/ambient-setting-in-assistant-design.
     */
    anyUserHasSetPersonalPhotos?: boolean | null;
    /**
     * Whether or not the user's current selection for their ambient photo frame includes the auto-generated "Recent Highlights" album. This is used to determine which users to display the go/opa-photos-memories-tile. See go/opa-photo-memories-imax-optin for more discussion on why this bit was created.
     */
    recentHighlightsEnabled?: boolean | null;
    /**
     * Whether to enable the personal photo data in the ambient settings: https://screenshot.googleplex.com/Wd4OFkQfOyF See go/opa-photos-ambient-location-date-dd#heading=h.5x4iaouuiett for explanation.
     */
    showPersonalPhotoData?: boolean | null;
    /**
     * Whether current user sets personal photos on this device. See go/ambient-setting-in-assistant-design.
     */
    showPersonalPhotos?: boolean | null;
  }
  /**
   * These capabilities are associated with Assistant Settings on devices.
   */
  export interface Schema$AssistantApiSettingsAppCapabilities {
    /**
     * Capabilities that are associated with Assistant Settings on auto surfaces.
     */
    carSettingsCapabilities?: Schema$AssistantApiCarSettingsCapabilities;
    /**
     * Whether the client supports reissuing query after setting up in Music Settings.
     */
    reissueQueryAfterMusicSetup?: boolean | null;
    /**
     * Whether the client supports updating payments setting.
     */
    supportsPaymentsSettingsUpdate?: boolean | null;
  }
  /**
   * Settings pertaining to auto framing. See go/auto-framing-presentation.
   */
  export interface Schema$AssistantApiSettingsAutoFramingSettings {
    isAutoFramingEnabled?: boolean | null;
  }
  /**
   * Carrier related call settings on the device.
   */
  export interface Schema$AssistantApiSettingsCarrierCallDeviceSettings {
    /**
     * Whether this device is allowed to receive incoming PSTN calls.
     */
    allowIncomingCalls?: boolean | null;
  }
  /**
   * Specification of which communication features can be used.
   */
  export interface Schema$AssistantApiSettingsCommunicationsFilter {
    state?: string | null;
  }
  /**
   * Specification of times when most features on a device are disabled for certain users. During these periods, the device will respond to most interactions with something like "sorry, I'm sleeping right now". Design: go/home-ft-settings-storage PRD: go/home-family-tools-prd
   */
  export interface Schema$AssistantApiSettingsDeviceDowntimeSettings {
    schedules?: Schema$AssistantApiSettingsLabeledDowntimeSchedule[];
    /**
     * The set of users of this device that will have these downtime settings applied. Must have at least one element.
     */
    targets?: string[] | null;
  }
  /**
   * Defines a set of restrictions on particular device features for a certain set of users. Design: go/home-ft-settings-storage PRD: go/home-family-tools-prd
   */
  export interface Schema$AssistantApiSettingsDeviceFeatureFilters {
    /**
     * Enables/disables all the filters at the same time. For new devices or non-Cast devices this is always false.
     */
    enabled?: boolean | null;
    /**
     * The filters (feature restrictions) to apply when `enabled` is true.
     */
    featureFilters?: Schema$AssistantApiSettingsFeatureFilters;
    /**
     * The set of users of this device that will have these settings applied. Must have at least one element.
     */
    targets?: string[] | null;
  }
  export interface Schema$AssistantApiSettingsDeviceLogsOptIn {
    /**
     * Indicates whether the crash logs can be uploaded and the device logs can be enabled
     */
    optInEnabled?: boolean | null;
  }
  /**
   * Next ID: 73
   */
  export interface Schema$AssistantApiSettingsDeviceSettings {
    /**
     * LINT.ThenChange(//depot/google3/assistant/ui/assistant_device_settings_ui.proto)
     */
    ackStatus?: string | null;
    /**
     * A human-readable address string for the location; generally a one-line address such as "34 Masonic Ave, San Francisco CA 94117, United States". Set this field to empty string for deletion, in which case the rest of the location related fields below will be cleared as well.
     */
    address?: string | null;
    /**
     * The alias names of the device, e.g. my living room tv, tv, living room and etc., which user will usually use to refer to the device in addition to human_friendly_name. It can help speech biasing and query understanding. This field is set by the user and already localized.
     */
    aliasName?: string[] | null;
    /**
     * Whether this device is allowed to receive incoming calls.
     */
    allowIncomingCalls?: boolean | null;
    /**
     * Ambient settings contains the configuration of Photo Frame on DG device. This field relies on IMAX service to do the update, sync happenes after user updates IMAX device settings or a device registers in CloudCastDevice. So it's more like a cached version instead of definitive source-of-truth. More details at go/ambient-setting-in-assistant-design.
     */
    ambientSettings?: Schema$AssistantApiSettingsAmbientSettings;
    /**
     * The additional device ids. Currently used only for ATV. go/project-yellowstone Note: This field is for internal (Within settings) use only.
     */
    ancillaryDeviceId?: Schema$AssistantApiSettingsInternalAncillaryDeviceId;
    /**
     * Auto framing settings associated with a device. See go/auto-framing-presentation.
     */
    autoFramingSettings?: Schema$AssistantApiSettingsAutoFramingSettings;
    /**
     * Indicates whether the user has enabled Blue Steel. See go/blue-steel for more info on this project.
     */
    blueSteelEnabled?: boolean | null;
    /**
     * Describes roughly what a device is capable of doing and metadata around those capabilities. Note: this includes device limitations as well as user configurable settings.
     */
    capabilities?: Schema$AssistantApiDeviceCapabilities;
    /**
     * city and postal_code are sent to third party AoG Apps as location when permission is granted for precise or coarse location. https://developers.google.com/actions/reference/rest/Shared.Types/Permission city and postal_code have the same description as in Proto Postal Address: https://cs.corp.google.com/piper///depot/google3/location/country/postaladdress.proto city corresponds to locality_name, postal_code corresponds to postal_code_number. These two fields are set in assistant_settings_service by AddressConverter. https://cs.corp.google.com/piper///depot/google3/location/addressformatter/public/addressconverter.h See go/aog-i18n-address-parse for more information
     */
    city?: string | null;
    /**
     * Status of colocation. go/co-location-work-v2 Note: this is a cache at the Assistant level. The source of truth is inside CastAuthenticationServer, which is only used for Home devices.
     */
    colocationStatus?: string | null;
    /**
     * The timestamp that the device is linked with the user in milliseconds.
     */
    creationTimestampMs?: string | null;
    /**
     * Availability of this device for Assistant Cross-surface handoffs. (go/assistant-cross-surface)
     */
    crossSurfaceAvailability?: Schema$AssistantApiSettingsDeviceSettingsCrossSurfaceAvailability;
    /**
     * The identification of the default device which user want to output audio. See go/default-media-output-design for more info.
     */
    defaultAudioDeviceId?: Schema$AssistantApiCoreTypesDeviceId;
    /**
     * The identification of the default device which user want to output video. Note that, we don't fallback to this for audio playback when default_audio_device_id is not set. See go/default-media-output-design for more info.
     */
    defaultVideoDeviceId?: Schema$AssistantApiCoreTypesDeviceId;
    /**
     * The brand of the device, populated from DeviceOemParams. Examples: "google", "samsung".
     */
    deviceBrand?: string | null;
    /**
     * The identification of the device.
     */
    deviceId?: Schema$AssistantApiCoreTypesDeviceId;
    /**
     * The model ID of the device. This should be globally unique across manufactures/OEMs. Examples: "nest_cam_iq_2017", "comcast_voice_box_2017".
     */
    deviceModelId?: string | null;
    /**
     * The Device Platform Service lookup revision. (go/device-model-revision) For 1p devices, and most 3p devices with no custom feature, this should be always 0, which means no lookup needed. For 3p devices with custom assistant feature, this is provided directly by OEM as incremental (e.g. 1, 2, 3, ...)
     */
    deviceModelRevision?: number | null;
    /**
     * Only valid for ATV. Stores the android DUSI for the corresponding user. More details: go/auto-logout-on-unlink.
     */
    dusi?: string | null;
    /**
     * List of errors that happened during the face enrollment process if it failed. See go/face-match-enrollment-error for more info.
     */
    faceEnrollmentErrors?: string[] | null;
    /**
     * Indicates whether the user's face has been successfully enrolled on this device. See go/face-match-server-design for more info.
     */
    faceEnrollmentStatus?: string | null;
    /**
     * Indicates whether the user has enabled Face Match for this device. See go/face-match-server-design for more info on this project.
     */
    faceMatchEnabled?: boolean | null;
    /**
     * Stores GCM info associated with a device. See go/quartz-design-doc for more info.
     */
    gcmSettings?: Schema$AssistantApiSettingsGcmSettings;
    /**
     * Holds the data that should be written to HomeGraph. Note: this field is not persisted in Assistant Settings storage. It is simply used for transporting data when client calls UpdateSettings.
     */
    homeGraphData?: Schema$AssistantApiSettingsHomeGraphData;
    /**
     * The home graph ID that can be used to lookup the corresponding entry in HomeGraph. go/home-graph. Note: when this field is empty, it doesn't necessarily mean that the device is not in home graph. It just means that Assistant doesn't know about the mapping.
     */
    homeGraphId?: string | null;
    /**
     * Indicates whether the device is currently in Hospitality mode. go/hospitality-mode-design. This is moved to a per user setting in assistant settings. ref. go/hospitality-settings-v2
     */
    hospitalityModeStatus?: Schema$AssistantApiSettingsHospitalityMode;
    /**
     * The level of hotword sensitivity. go/hotword-sensitivity-prd
     */
    hotwordSensitivity?: string | null;
    /**
     * HotwordThresholdAdjustmentFactor contains threshold_adjustment_factor, and it's validity. TAF is a measure of adjustment applied to the hotword threshold as a result of go/autotune. Currently, this is updated from query_settings_frame, but if we move to updating it from the client, this could also contain TAFs as a result of Hotword Sensitivity, in addition to Autotune.
     */
    hotwordThresholdAdjustmentFactor?: Schema$AssistantApiSettingsHotwordThresholdAdjustmentFactor;
    /**
     * The human-friendly name of the cast device, e.g., my living room tv. This field is set by the user and already localized.
     */
    humanFriendlyName?: string | null;
    /**
     * Internal version of the DeviceSettings for measurement of the DeviceSettings mutation race conditions. See go/consistent-assistant-settings-update.
     */
    internalVersion?: Schema$AssistantApiSettingsInternalVersion;
    /**
     * Indicates whether the device is also managed through HA cloud sync. go/ha-dev-guide
     */
    isCloudSyncDevice?: boolean | null;
    /**
     * When true, the user has explicitly allowed audio and visual data collection on this device
     */
    isDeviceActivationCacheEnabled?: boolean | null;
    /**
     * Specifies if kids-mode is enabled for the device. See go/aff-parentalsupervision-dd.
     */
    kidsMode?: Schema$AssistantApiSettingsKidsMode;
    /**
     * Device's latest registration timestamp provided by Cast side. This field is not necessarily up to date. The update frequency is defined in last_registration_update_frequency_in_days field of AssistantConfig in java/com/google/chrome/dongle/common/proto/home_assistant_config.proto. go/cast-last-registration-time
     */
    lastCastRegistrationTimestamp?: string | null;
    /**
     * Coarsened hourly timestamp of when the device was last used.
     */
    lastUsedCoarseTimestamp?: string | null;
    /**
     * Stores pairing between different devices. See go/quartz-design-doc for more info.
     */
    linkedDeviceId?: Schema$AssistantApiCoreTypesDeviceId[];
    /**
     * Please do NOT use this field without prior approval from PWG. Users who have signed in onto this device, go/linked-users-in-pkg.
     */
    linkedUsers?: Schema$AssistantApiSettingsLinkedUser[];
    /**
     * The locale for the device: language + region, i.e., en-US, ja-JP.
     */
    locale?: string | null;
    /**
     * Coordinate information of the device location.
     */
    locationCoordinates?: Schema$AssistantApiCoreTypesLocationCoordinates;
    /**
     * The feature proto of the location of the device. Note: client does not need to populate this. It will be auto-populated based on "address" field on server side. Currently, only "bound" and "type" are persisted, since the entire FeatureProto is too big.
     */
    locationFeature?: Schema$GeostoreFeatureProto;
    /**
     * See go/marketplace-disclosure for more info.
     */
    marketplaceDisclosure?: Schema$AssistantApiSettingsMarketplaceDisclosure;
    masqueradeMode?: Schema$AssistantApiSettingsMasqueradeMode;
    /**
     * Information about how to send the user a notification. This won't be populated for fb-conv users (allo group chat users).
     */
    notificationProfile?: Schema$AssistantApiSettingsNotificationProfile;
    /**
     * OAuth client id for the device. This field is available for Assistant SDK devices. It is written when the device is registered to the user (AssistantSettingsUiService.LinkAssistantDeviceUi). When user revokes grant on the Assistant device, Assistant Devices Platform Service will receive Pubsub notification with OAuth client id for the revoked device, and we will compare that with this stored id to identity device to remove.
     */
    oauthClientId?: string | null;
    /**
     * Device specific app related settings.
     */
    onDeviceAppSettings?: Schema$AssistantApiSettingsOnDeviceAppSettings;
    /**
     * Specifies if device logs and crashes can be captured during SendFeedback
     */
    optInStatus?: Schema$AssistantApiSettingsDeviceLogsOptIn;
    /**
     * DEPRECATED: Use DeviceCapabilities.OutputRestrictions.personal_data instead. Whether the user has enabled payments for this device.
     */
    paymentsEnabled?: boolean | null;
    /**
     * Metadata about how personalization settings were configured.
     */
    personalizationMetadata?: Schema$AssistantApiSettingsPersonalizationMetadata;
    /**
     * Specify whether polite mode is enabled for this device. See go/pretty-please-dd.
     */
    politeMode?: Schema$AssistantApiSettingsPoliteMode;
    postalCode?: string | null;
    /**
     * Trusted device preferences Assistant reauth. go/assistant-reauth-verify-skip.
     */
    reauthTrustedDeviceSettings?: Schema$AssistantApiSettingsReauthTrustedDeviceSettings;
    /**
     * A human-readable shortened address. This is usually the street address. Note: client does not need to populate this. It will be auto-populated based on "address" field on server side. Developers can use this field to avoid reading out the full address everytime.
     */
    shortenedAddress?: string | null;
    /**
     * Indicates whether the user has enabled speaker-id for this device. See go/google-assistant-multi-user for more info on this project.
     */
    speakerIdEnabled?: boolean | null;
    /**
     * Settings related to TTS output.
     */
    speechOutputSettings?: Schema$AssistantApiSettingsSpeechOutputSettings;
    /**
     * Speech/hotword detection related settings.
     */
    speechSettings?: Schema$AssistantApiSettingsSpeechSettings;
    /**
     * Restrictions on how and when certain users can use a device. See go/home-ft-prd.
     */
    supervisionSettings?: Schema$AssistantApiSettingsDeviceSupervisionSettings;
    /**
     * The type of assistant surface. Only use this field when device type is ASSISTANT.
     */
    surfaceType?: Schema$AssistantApiCoreTypesSurfaceType;
    /**
     * Presence indicates a tethered wearable. go/wearable-device-ids.
     */
    tetheredInfo?: Schema$AssistantApiSettingsTetheredInfo;
    /**
     * Device time zone. It's mainly used for a one-time notification for new users when they just bought and activated their devices. They may not have used Search or Assistant before, so their timezone info may not available elsewhere when we want to send a notification. This should be used as a fallback only when other timezone sources such as assistant_settings:user_attribute#inferred_user_timezone are not available. Also, when both |time_zone| and |location| are set, the |location| should be preferred to derive the most up to date timezone. This info directly comes from the device through early device setting recording mechanism. See more details at go/early-device-setting-recording.
     */
    timeZone?: Schema$AssistantApiTimeZone;
    /**
     * Local network ID of the device (truncated to obfuscate devices and households globally). This is a temporary signal to determine proximity of Assistant devices in a house (HGS place).
     */
    truncatedLocalNetworkId?: string | null;
    /**
     * The type of the device. Note: this should only be used for grouping devices for UI presentation purpose. Use |capabilities| to decide what the device can do.
     */
    type?: string | null;
    /**
     * Indicates whether to play verbose tts for Elementary on chirp. See: go/opa-cast-a11y-impl-design fore more info on this project. Note: this should probably be in SpeechOutputSetting below.
     */
    verboseTtsForChromecastEnabled?: boolean | null;
    /**
     * Coarsened hourly timestamp of when the user was last verified by VoiceMatch on this device. This is used for enforcing VoiceMatch model TTL. go/voicematch-pdd-ttl
     */
    vmLastUsedCoarseTimestamp?: string | null;
    /**
     * Indicates whether the user's voice has been successfully enrolled on this device.
     */
    voiceEnrollmentStatus?: string | null;
    /**
     * A boolean indicates whether voice input (mic-button, hotword, etc) is enabled.
     */
    voiceInputEnabled?: boolean | null;
  }
  export interface Schema$AssistantApiSettingsDeviceSettingsCrossSurfaceAvailability {
    /**
     * Last known locale of the client.
     */
    lastKnownClientLocale?: string | null;
    /**
     * This is the timestamp when the AssistantRequestParams (in ASSISTANT_SNAPSHOT corpus) were last written for this device.
     */
    lastParamsWriteTimestamp?: string | null;
  }
  export interface Schema$AssistantApiSettingsDeviceSupervisionSettings {
    /**
     * Specification of times that a device shouldn't respond to certain users. See go/home-ft-prd.
     */
    downtimeSettings?: Schema$AssistantApiSettingsDeviceDowntimeSettings;
    /**
     * Restrictions on features that certain users can access on a device. See go/home-ft-prd.
     */
    featureFilters?: Schema$AssistantApiSettingsDeviceFeatureFilters;
  }
  /**
   * Specifies a period of up to 24 hours when downtime should be enabled, starting at certain time on a certain day of the week, and ending at a later time on either that day or the following day.
   */
  export interface Schema$AssistantApiSettingsDowntimePeriod {
    /**
     * True if downtime should be enabled during this period.
     */
    enabled?: boolean | null;
    /**
     * Time of day that this downtime period should end. Required. If end_time \> start_time, end_time is relative to start_day. Otherwise, end_time is relative to the day after start_day. For example, start_day: MONDAY, start_time: 9 p.m., end_time: 6 a.m. means that the downtime period starts at 9 p.m. on Monday and ends at 6 a.m. on Tuesday.
     */
    endTime?: Schema$GoogleTypeTimeOfDay;
    /**
     * The day of the week when this downtime period starts. Required.
     */
    startDay?: string | null;
    /**
     * Time of day that this downtime period should start. Required.
     */
    startTime?: Schema$GoogleTypeTimeOfDay;
  }
  /**
   * Specification of when downtime is enabled on different days of the week. Contains up to 7 DowntimePeriod messages, up to one per day of the week.
   */
  export interface Schema$AssistantApiSettingsDowntimeSchedule {
    /**
     * True if this downtime schedule should be enabled.
     */
    enabled?: boolean | null;
    /**
     * Downtime entries for the days of the week, in no particular order. There can be at most one period defined for each day of the week. Days of the week with no explicit period defined are treated as disabled, so the device is available all day (modulo an end time that may spill over from the previous day).
     */
    periods?: Schema$AssistantApiSettingsDowntimePeriod[];
  }
  /**
   * Duo related call settings on the device. Next ID: 5
   */
  export interface Schema$AssistantApiSettingsDuoCallDeviceSettings {
    /**
     * True if Duo Knock Kncok feature is enabled on the device.
     */
    allowKnockKnock?: boolean | null;
    /**
     * Boolean indicating if user has explicitly marked this device to be linked or not. This bit is used in case where unexpected errors occur and we have to check for account/device status and mark the device linked after verification.
     */
    shouldBeLinked?: boolean | null;
    /**
     * The call state of the device (i.e. whether a Duo call account has been setup on the device).
     */
    state?: string | null;
    /**
     * Client device settings: settings which are populated by client to give to duocore. TalkBack is an accessibility service that helps blind and vision-impaired users interact with their devices. Indicates whether talkback is enabled for the device. Note: this is per device settings currently filled by client for all users.
     */
    talkbackEnabled?: boolean | null;
  }
  /**
   * Specification of which assistant features are allowed for a particular device or user account.
   */
  export interface Schema$AssistantApiSettingsFeatureFilters {
    communicationsFilter?: Schema$AssistantApiSettingsCommunicationsFilter;
    musicFilter?: Schema$AssistantApiSettingsMusicFilter;
    newsFilter?: Schema$AssistantApiSettingsNewsFilter;
    podcastFilter?: Schema$AssistantApiSettingsPodcastFilter;
    searchFilter?: Schema$AssistantApiSettingsSearchFilter;
    thirdPartyAppsFilter?: Schema$AssistantApiSettingsThirdPartyAppsFilter;
    videoFilter?: Schema$AssistantApiSettingsVideoFilter;
    webviewFilter?: Schema$AssistantApiSettingsWebviewFilter;
  }
  export interface Schema$AssistantApiSettingsGcmSettings {
    gcmId?: string | null;
    gcmPackage?: string | null;
  }
  /**
   * Next ID: 8
   */
  export interface Schema$AssistantApiSettingsHomeGraphData {
    /**
     * Agent ID, aka project ID. Used as the AgentDeviceId.agent_id of device when calling Home Graph Service.
     */
    agentId?: string | null;
    /**
     * See go/ha-dev-guide and HomeGraphItem.attribute in //assistant/verticals/homeautomation/proto/home_graph.proto
     */
    attributes?: {[key: string]: any} | null;
    /**
     * Device ID, used as AgentDeviceId.device_id of device when calling Home Graph Service.
     */
    deviceId?: string | null;
    /**
     * HGS device type. See java/com/google/home/graph/service/config/protoconf.pi for the exhaustive list of type strings.
     */
    deviceType?: string | null;
    /**
     * Whether device data should be written to Home Graph via Assistant device_settings. Assistant SDK and Google Home write their devices into Home Graph through AssistantSettingsService, while Home Automation Partner devices (e.g. SmartThings, Philips Hue, Nest, TP-Link, etc.) don't need to be written to Home Graph through AssistantSettingsService. This field decides whether AssistantSettingsService writes devices to Home Graph or not.
     */
    shouldWriteToHomeGraph?: boolean | null;
    /**
     * Supported traits of the device. See java/com/google/home/graph/service/config/protoconf.pi for the exhaustive list of trait-strings.
     */
    supportedTraits?: string[] | null;
    /**
     * Whether the device supports direct response. See HomeGraphItem.supports_direct_response in //assistant/verticals/homeautomation/proto/home_graph.proto
     */
    supportsDirectResponse?: boolean | null;
  }
  export interface Schema$AssistantApiSettingsHospitalityCardSettings {
    /**
     * Config for Hospitality UI modules.
     */
    cardConfig?: Schema$AssistantApiSettingsHospitalityCardSettingsCardConfig[];
    /**
     * Toggle media tap gesture tutorial card.
     */
    showMediaTapGestureTutorial?: boolean | null;
    /**
     * Toggle photo swipe gesture tutorial card.
     */
    showPhotoSwipeGestureTutorial?: boolean | null;
    /**
     * Config for YouTube video cards.
     */
    youtubeCardConfig?: Schema$AssistantApiSettingsHospitalityCardSettingsYouTubeCardConfig[];
  }
  /**
   * Configuration for hospitality card.
   */
  export interface Schema$AssistantApiSettingsHospitalityCardSettingsCardConfig {
    /**
     * Whether the UI module requires user action. If true, the UI module can peek on to the top of Ambient. See SmartDisplayModuleState::ACTIVE_ACTION_REQUIRED.
     */
    activeActionRequired?: boolean | null;
    /**
     * Whether the UI module is dismissable.
     */
    dismissable?: boolean | null;
    /**
     * The time that the module is effective and visible to the user. If not set, the module is effective immediately.
     */
    effectiveTime?: Schema$AssistantApiTimestamp;
    /**
     * The time that the module is expired and invisible to the user. If not set, the module never expires.
     */
    expiryTime?: Schema$AssistantApiTimestamp;
    /**
     * The image URL for the UI module.
     */
    imageUrl?: string | null;
    /**
     * Module ID.
     */
    moduleId?: string | null;
    /**
     * Payload query to the partner AoG action when user responds to UI Module, e.g. “Tell the hotel how my stay is going”.
     */
    payloadQuery?: string | null;
    /**
     * Title of the message to be shown to user at the top of the UI Module.
     */
    title?: string | null;
  }
  /**
   * Configuration for YouTube video card (Stargazer tile).
   */
  export interface Schema$AssistantApiSettingsHospitalityCardSettingsYouTubeCardConfig {
    /**
     * URL of image to go on card. The URL must be a public link accessible from ZeroState.
     */
    imageUrl?: string | null;
    /**
     * ID of YouTube playlist to play on card tap. A playlist is used instead of a single video id to avoid autoplaying related videos. The playlist and the videos it contains must be public or unlisted to be accessible from ZeroState.
     */
    playlistId?: string | null;
    /**
     * Text on card (i.e., video title).
     */
    text?: string | null;
  }
  /**
   * Hospitality mode config for the current device. go/hospitality-mode-design. Next ID: 17
   */
  export interface Schema$AssistantApiSettingsHospitalityMode {
    /**
     * List of AOG app context ids that are linked to this device. These apps will have access to the structure information for the device.
     */
    aogContextId?: string[] | null;
    /**
     * Invocation phrase for hotel's AoG action. Used for ZS promotion card and "talk to my hotel" rewrites. Setting this to an empty value will mark it unset.
     */
    aogInvocationPhrase?: string | null;
    branding?: Schema$AssistantApiSettingsHospitalityModeBranding;
    cardSettings?: Schema$AssistantApiSettingsHospitalityCardSettings;
    /**
     * The time when we received a request to reset the device.
     */
    deviceClearRequest?: Schema$AssistantApiTimestamp;
    /**
     * Should the dialog have a shorter ttl. See go/ipp-consumer-prd#heading=h.ibu9b1ysdl4t and go/interpreter-device-clear#bookmark=id.hw8ey1bzjadn for context.
     */
    dialogTtlOverrideMicros?: string | null;
    /**
     * Identifier for the enterprise which owns the device. Setting this to an empty value will mark it unset.
     */
    enterpriseId?: string | null;
    /**
     * Indicates whether this device is in the hospitality mode.
     */
    hospitalityModeEnabled?: boolean | null;
    /**
     * Last time the device was cleared and placed in hospitality mode. Will be set when the switch is toggled on and reset when a guest checks out. On the device this triggers removing alarms, timers, etc.
     */
    lastDeviceClear?: Schema$AssistantApiTimestamp;
    /**
     * Indicates when hospitality settings were last updated.
     */
    lastModifiedTimestamp?: Schema$AssistantApiTimestamp;
    /**
     * Last time the welcome message was played for the guest. If last_welcomed < welcome_request, the message should be replayed and this time set.
     */
    lastWelcomed?: Schema$AssistantApiTimestamp;
    /**
     * Indicates whether or not the device must be reset manually (by voice or touch), as opposed to being automatically reset. go/hospitality-manual-reset
     */
    manualResetRequired?: boolean | null;
    /**
     * In order promoted languages for interpreter devices. This represents languages by BCP-47 language strings, such as "en", "en-US", "fr", "fr-CA", "sr-Latn", "zh-Hans-CN", "zh-Hant-HK",etc.
     */
    promotedLanguages?: string[] | null;
    type?: string | null;
    /**
     * Whether we allow users to initiate clearing the device verbally. We generally allow this for private devices and not for public ones.
     */
    verbalResetSupported?: boolean | null;
    /**
     * The time when we received a request to welcome the user.
     */
    welcomeRequest?: Schema$AssistantApiTimestamp;
  }
  /**
   * TODO(b/169423976) Consider moving Branding out of user level settings into enterprise level settings. Partner branding fields used to customize the ui. Next ID: 7
   */
  export interface Schema$AssistantApiSettingsHospitalityModeBranding {
    /**
     * Brand display in the UI
     */
    displayName?: string | null;
    /**
     * Brand display in the UI for languages that the enterprise has a localized name that is different from its global branding name. For example, Hilton is 'ヒルトン' in Japanese and '希爾頓' in Chinese. The keys are hospitality supported display locales, e.g. en, ja-JP, etc, defined in experiment parameter Hospitality__hospitality_display_supported_locales.
     */
    displayNameForLanguage?: {[key: string]: string} | null;
    largeLogoUrl?: string | null;
    smallLogoUrl?: string | null;
  }
  /**
   * HotwordThresholdAdjustmentFactor contains threshold_adjustment_factor, and it's validity. value should only be considered when is_valid = true.
   */
  export interface Schema$AssistantApiSettingsHotwordThresholdAdjustmentFactor {
    /**
     * Currently, is_valid is set to false whenever the TAF is not an Autotune aware value. This includes hotword sensitivity users, or devices not eligible for autotune.
     */
    isValid?: boolean | null;
    value?: number | null;
  }
  /**
   * Represents supporting device ids.
   */
  export interface Schema$AssistantApiSettingsInternalAncillaryDeviceId {
    /**
     * Contains device ids known to devices. eg. For ATV, it contains client_instance_id and cast_id.
     */
    deviceId?: Schema$AssistantApiCoreTypesDeviceId;
  }
  /**
   * Represents a version of a specifit setting, e.g. DeviceSettings.
   */
  export interface Schema$AssistantApiSettingsInternalVersion {
    /**
     * Contains the timestamp when this version was generated.
     */
    generationTime?: string | null;
    /**
     * Integer value of the version, it is a monotonically increasing number and starts at 0. On every update it is incremented by 1.
     */
    id?: string | null;
  }
  /**
   * Kids mode config for the current device. go/aff-parentalsupervision-dd
   */
  export interface Schema$AssistantApiSettingsKidsMode {
    kidsModeEnabled?: boolean | null;
    /**
     * Identifier of the account currently specified to be used with kids mode.
     */
    obfuscatedGaiaId?: string | null;
  }
  export interface Schema$AssistantApiSettingsLabeledDowntimeSchedule {
    /**
     * User-provided name for this schedule.
     */
    displayName?: string | null;
    schedule?: Schema$AssistantApiSettingsDowntimeSchedule;
  }
  /**
   * Represents the profile of the user who has signed in onto this device. Next id: 5
   */
  export interface Schema$AssistantApiSettingsLinkedUser {
    /**
     * Time of linking of the device with the user provided by Cast.
     */
    castLinkingTime?: string | null;
    /**
     * Primary email address of the user.
     */
    email?: string | null;
    gaiaId?: string | null;
    /**
     * Supports features which depend on profile name, when no matching contact is found.
     */
    names?: Schema$AppsPeopleOzExternalMergedpeopleapiName[];
  }
  export interface Schema$AssistantApiSettingsMarketplaceDisclosure {
    /**
     * True if the user has confirmed the marketplace disclosure.
     */
    confirmed?: boolean | null;
    /**
     * The time user confirmed the marketplace disclosure.
     */
    timestampMs?: string | null;
  }
  /**
   * Guest mode for the current device. go/assistant-guest-mode-summary
   */
  export interface Schema$AssistantApiSettingsMasqueradeMode {
    lastEnterGuestModeTimestamp?: Schema$AssistantApiTimestamp;
    lastExitGuestModeTimestamp?: Schema$AssistantApiTimestamp;
    masqueradeModeEnabled?: boolean | null;
  }
  /**
   * Specification of which music features can be used.
   */
  export interface Schema$AssistantApiSettingsMusicFilter {
    /**
     * Providers available at the time user updated settings.
     */
    availableProviders?: string[] | null;
    /**
     * Represents the state for the music provider filter.
     */
    providerFilterState?: string | null;
    state?: string | null;
    /**
     * Contains the list of whitelisted music providers.
     */
    whitelistedProviders?: string[] | null;
  }
  /**
   * Specification of which news features can be used.
   */
  export interface Schema$AssistantApiSettingsNewsFilter {
    state?: string | null;
  }
  export interface Schema$AssistantApiSettingsNotificationProfile {
    /**
     * Each device can have only one type of notification profile.
     */
    alloNotificationProfile?: Schema$AssistantApiSettingsNotificationProfileAlloNotificationProfile;
  }
  export interface Schema$AssistantApiSettingsNotificationProfileAlloNotificationProfile {
    /**
     * The send token of the conversation with the user.
     */
    botSendToken?: Schema$ChatBotPlatformBotSendToken;
    /**
     * The fireball id of this user.
     */
    id?: Schema$ChatBotPlatformFireballId;
  }
  export interface Schema$AssistantApiSettingsOnDeviceAppSettings {
    /**
     * On device carrier call related settings.
     */
    carrierCallDeviceSettings?: Schema$AssistantApiSettingsCarrierCallDeviceSettings;
    /**
     * On device duo call related settings.
     */
    duoCallDeviceSettings?: Schema$AssistantApiSettingsDuoCallDeviceSettings;
  }
  export interface Schema$AssistantApiSettingsPersonalizationMetadata {
    faceMatch?: string | null;
    personalResults?: string | null;
    voiceMatch?: string | null;
  }
  /**
   * Specification of which podcast features can be used.
   */
  export interface Schema$AssistantApiSettingsPodcastFilter {
    state?: string | null;
  }
  /**
   * Polite mode config for the current device. go/polite-mode-dd
   */
  export interface Schema$AssistantApiSettingsPoliteMode {
    politeModeEnabled?: boolean | null;
  }
  /**
   * Settings related to Assistant reauth. go/assistant-reauth-verify-skip Next id: 2
   */
  export interface Schema$AssistantApiSettingsReauthTrustedDeviceSettings {
    /**
     * Mapping from integrator client id to device's trust settings. Id from assistant/agent_platform/transactions/reauth/reauth_client.proto.
     */
    trustSettingsForClient?: {
      [
        key: string
      ]: Schema$AssistantApiSettingsReauthTrustedDeviceSettingsTrustSettings;
    } | null;
  }
  /**
   * Next id: 6
   */
  export interface Schema$AssistantApiSettingsReauthTrustedDeviceSettingsTrustSettings {
    /**
     * If true, don't ask user to trust this device again.
     */
    neverAskAgain?: boolean | null;
    /**
     * DEPRECATED: Use never_ask_again instead. Expiration timestamp of "never ask again" status. If this field is set and is later than current timestamp, we should NOT ask the user whether they'd like to trust this device.
     */
    neverAskExpirationTimestamp?: string | null;
    /**
     * Expiration timestamp of "trusted" status. If this field is set and is later than current timestamp, we can consider this device to be trusted.
     */
    trustDeviceExpirationTimestamp?: string | null;
  }
  /**
   * Specification of which search features can be used.
   */
  export interface Schema$AssistantApiSettingsSearchFilter {
    state?: string | null;
  }
  /**
   * Settings related to TTS output.
   */
  export interface Schema$AssistantApiSettingsSpeechOutputSettings {
    speechOutput?: string | null;
  }
  /**
   * Settings related to speech detection. See go/hotword-settings-on-cloud for more info. Next ID: 16
   */
  export interface Schema$AssistantApiSettingsSpeechSettings {
    /**
     * Indicates whether Continued Conversation is enabled for this device.
     */
    continuedConversationEnabled?: boolean | null;
    /**
     * Stores the device model type e.g Pixel.
     */
    deviceModelType?: string | null;
    /**
     * Whether the device has DSP chip to enable always on hotword detection.
     */
    dspAvailable?: boolean | null;
    /**
     * Whether hotword has been enabled by the user during navigation.
     */
    hotwordInNavigationEnabled?: string | null;
    /**
     * Stores hotword setting status for the locales which don't support voice match.
     */
    hotwordSetting?: string | null;
    /**
     * Whether pin/pattern lockscreen has been enabled by the user.
     */
    lockscreenEnabled?: boolean | null;
    /**
     * Stores if Assistant is available for the user's device/locale, where Enabled means it is available and disabled means it is not.
     */
    opaEligibilityState?: string | null;
    /**
     * Stores if Assistant is available for the user's device/locale. Deprecated as bools do not give accurate true/false ratios due to old clients reporting the default value.
     */
    opaEligible?: boolean | null;
    /**
     * Stores the Android SDK version. This comes from android.os.Build.VERSION.SDK_INT.
     */
    sdkVersion?: number | null;
    /**
     * Whether speaker ID model is present for the user.
     */
    speakerIdModelPresent?: boolean | null;
    /**
     * Indicates whether the user has enabled speaker-id (fromAnyScreen/alwaysOn) for this device. Deprecated - use voice_match_setting instead
     */
    speakerIdRecognitionEnabled?: boolean | null;
    /**
     * Indicates whether the user has enabled trusted voice for this device.
     */
    trustedVoiceEnabled?: boolean | null;
    /**
     * A bool indicating whether device supports unlocking device with hotword.
     */
    unlockWithHotwordAvailable?: boolean | null;
    /**
     * Stores if user was migrated from undecided to declined as apart of Mariko project. Used for potential growth targeting.
     */
    userMigratedToDeclined?: boolean | null;
    /**
     * Stores the hotword/voice match setting status for the locales which support voice match.
     */
    voiceMatchSetting?: string | null;
  }
  export interface Schema$AssistantApiSettingsTetheredInfo {
    /**
     * The host this wearable is tethered to (e.g. phone). When host is AGSA then this is agsa_client_instance_id. When host is IOPA then this is opa_ios_device_id.
     */
    primaryHostDeviceId?: string | null;
  }
  /**
   * Specification of which third party apps can be used.
   */
  export interface Schema$AssistantApiSettingsThirdPartyAppsFilter {
    state?: string | null;
  }
  /**
   * Specification of which video features can be used.
   */
  export interface Schema$AssistantApiSettingsVideoFilter {
    /**
     * State that indicates whether autoplay is enabled for youtube videos.
     */
    autoplayToggleState?: string | null;
    /**
     * Providers available at the time user updated settings.
     */
    availableProviders?: string[] | null;
    /**
     * Represents the state for the video provider filter.
     */
    providerFilterState?: string | null;
    state?: string | null;
    /**
     * Contains the list of whitelisted video providers.
     */
    whitelistedProviders?: string[] | null;
  }
  /**
   * Specification of which webview features can be used.
   */
  export interface Schema$AssistantApiSettingsWebviewFilter {
    /**
     * Indicates if user has consented Jasper warning message.
     */
    jasperWebviewConsent?: boolean | null;
    state?: string | null;
  }
  /**
   * The method of sign in which the client supports.
   */
  export interface Schema$AssistantApiSignInMethod {
    method?: string | null;
    /**
     * Make Google sign-in mandatory for using Google Assistant on the device.
     */
    signInRequired?: boolean | null;
  }
  /**
   * Capabilities related to SODA (Speech On-Device API). Next ID: 5
   */
  export interface Schema$AssistantApiSodaCapabilities {
    /**
     * Whether the device supports different levels of hotword sensitivity. go/hotword-sensitivity-prd
     */
    supportsHotwordSensitivity?: boolean | null;
    /**
     * Whether Simple Stop (go/simple-stop) is enabled on the device. Simple stop allows users to stop firing alarms and timers by just saying "stop" without first saying the hotword.
     */
    supportsSimpleStop?: boolean | null;
    /**
     * Whether the device supports speaker-id (speaker identification based on hotword and/or spoken query - go/speaker-id). Note: there are existing devices that support speaker-id but does not have this capability set. Not having this field populated doesn't necessarily mean the device doesn't support speaker-id.
     */
    supportsSpeakerId?: boolean | null;
    /**
     * Whether the device supports WarmWords (go/warm-words-framework).
     */
    supportsWarmWords?: boolean | null;
  }
  /**
   * These capabilities represent what software features the client supports. This should be determined based on the client's various software versions (OS, GSA version, etc). Next ID: 27
   */
  export interface Schema$AssistantApiSoftwareCapabilities {
    /**
     * IMPORTANT: Only one of AppCapabilities and AppCapabilitiesDelta should be in the SoftwareCapabilities. In the edge case if the client sends up both AppCapabilities and AppCapabilitiesDelta, AppCapabilitiesDelta is ignored. Complete list of app capabilities.
     */
    appCapabilities?: Schema$AssistantApiAppCapabilities[];
    /**
     * Incremental update for app capabilities.
     */
    appCapabilitiesDelta?: Schema$AssistantApiAppCapabilitiesDelta[];
    /**
     * App integrations settings for each packge name.
     */
    appIntegrationsSettings?: {
      [key: string]: Schema$AssistantApiAppIntegrationsSettings;
    } | null;
    /**
     * Capabilities related to Assistant on Auto surfaces.
     */
    carAssistantCapabilities?: Schema$AssistantApiCarAssistantCapabilities;
    /**
     * Capabilities related to clock functionality, like alarms, timers, etc.
     */
    clockCapabilities?: Schema$AssistantApiClockCapabilities;
    /**
     * A top-level version of Conversation protocol where the versions are explicitly defined at go/conversation-versions.
     */
    conversationVersion?: Schema$AssistantApiSupportedConversationVersion;
    /**
     * For torus x-device execution support
     */
    crossDeviceExecutionCapabilities?: Schema$AssistantApiCrossDeviceExecutionCapability;
    gacsCapabilities?: Schema$AssistantApiGacsCapabilities;
    gcmCapabilities?: Schema$AssistantApiGcmCapabilities;
    /**
     * Google Home app features.
     */
    homeAppCapabilities?: Schema$AssistantApiCapabilitiesHomeAppCapabilities;
    /**
     * Capabilities related to live TV channels.
     */
    liveTvChannelCapabilities?: Schema$AssistantApiLiveTvChannelCapabilities;
    /**
     * List of actions OEM supports. This includes built-in actions and custom actions.
     */
    oemCapabilities?: Schema$AssistantApiOemCapabilities;
    /**
     * on-device Assistant capabilities
     */
    onDeviceAssistantCapabilities?: Schema$AssistantApiOnDeviceAssistantCapabilities;
    /**
     * Capability bits for on-device Smart Home. go/framework-for-local-semex
     */
    onDeviceSmartHomeCapabilities?: Schema$AssistantApiOnDeviceSmartHomeCapabilities;
    /**
     * Reflects the storage capabilities on the device.
     */
    onDeviceStorageCapabilities?: Schema$AssistantApiOnDeviceStorageCapabilities;
    /**
     * The operating system of the device.
     */
    operatingSystem?: string | null;
    /**
     * An ordered list containing the live tv providers available in the client. The order of the providers reflects the ranking in the client and will be respected by server as well.
     */
    orderedLiveTvProviders?: Schema$AssistantApiLiveTvProvider[];
    /**
     * The Soli capabilities on Elaine. go/dingo-dc-software
     */
    selinaCapabilities?: Schema$AssistantApiSelinaCapabilites;
    settingsAppCapabilities?: Schema$AssistantApiSettingsAppCapabilities;
    supportedClientOp?: Schema$AssistantApiSupportedClientOp[];
    supportedFeatures?: Schema$AssistantApiSupportedFeatures;
    supportedMsgVersion?: Schema$AssistantApiSupportedProtocolVersion;
    supportedProviderTypes?: Schema$AssistantApiSupportedProviderTypes;
    surfaceProperties?: Schema$AssistantApiSurfaceProperties;
  }
  /**
   * DEPRECATED These capabilities are associated with speech detection on devices.
   */
  export interface Schema$AssistantApiSpeechCapabilities {
    /**
     * A bool indicating whether device supports dsp based hotword detection.
     */
    dspAvailable?: boolean | null;
    /**
     * A bool indicating whether device supports unlocking device with hotword.
     */
    unlockWithHotwordAvailable?: boolean | null;
  }
  /**
   * Next ID: 18
   */
  export interface Schema$AssistantApiSuggestionsSupport {
    /**
     * Whether client supports user impersonation on suggestion chip click. go/suggestion-click-impersonation
     */
    clickImpersonationSupported?: boolean | null;
    /**
     * Whether client supports suggestions debug data to be displayed.
     */
    debugDataSupported?: boolean | null;
    /**
     * Whether DRL history chip is supported. Related bug: http://b/241837879, http://b/171854732 Design doc: http://go/panthera-history-chip-dd DRL history chip was originally rolled out to Panthera in http://google3/googledata/experiments/mobile/agsa/studies/agsa_nga/opa_panthera_one_input_ui_launch.gcl?l=55&rcl=384682900. We plan to roll it out to NGA and TNG. drl_history_chip_supported bit specifies whether the client support (and should have) DRL history chip.
     */
    drlHistoryChipSupported?: boolean | null;
    /**
     * Whether client supports escape hatches aka post execution suggestions go/nga-escape-hatch-prd
     */
    escapeHatchSupported?: string | null;
    /**
     * Whether the client can rewrite suggestion query text into executed text, if the latter is present. If this feature is disabled, the rewrite happens in Assistant Server.
     */
    executedTextSupported?: boolean | null;
    /**
     * Whether the client supports passing back `execution_context` from |assistant.api.client_op.SuggestionProcessingParams| when the suggestion is clicked or spoken.
     */
    executionContextSupported?: boolean | null;
    /**
     * Whether the client supports features in |SuggestionFeatureSpecificAction|.
     */
    featureSpecificActionSupport?: Schema$AssistantApiFeatureSpecificActionSupport;
    /**
     * Whether the client supports handling App Actions' notification when the suggestion is clicked. This will allow the server to populate the `app_actions_notification_data` extension field from |SuggestionFeatureSpecificAction| proto message.
     */
    featureSpecificAppActionsNotificationSupported?: boolean | null;
    /**
     * Whether the multi-step try saying suggestion feature is supported. dd: go/tng-multi-step-simplified
     */
    multiStepTrySayingSupported?: boolean | null;
    /**
     * Whether the rule_id field in the execution_context is supported. This is a temporary workaround to be able to identify clicks on Person entity suggestions on Sabrina and is expected to be eventually deprecated. TODO(b/185517153) : Deprecate (but do not delete) once click tracking is correctly sent up from the Katniss client.
     */
    ruleIdInExecutionContextSupported?: boolean | null;
    /**
     * Whether the client can show executed_text after the click on the suggestion chip. Must be set to false on TNG. TNG disregards |SuggestionProcessingParams.show_executed_text| field and always treats it as if |show_executed_text=true|.
     */
    showExecutedTextSupported?: boolean | null;
    /**
     * Whether the client can show chip as (text | translation). go/lang-partner-doc
     */
    showTranslationSupported?: boolean | null;
    /**
     * A list of suggestions display targets supported by this client. If unset only DEFAULT SuggestionDisplayTarget is supported.
     */
    supportedDisplayTargets?: Schema$AssistantApiSuggestionsSupportDisplayTargetSupport[];
    /**
     * Whether client supports widget suggestion chip to be displayed.
     */
    widgetDataSupported?: boolean | null;
  }
  export interface Schema$AssistantApiSuggestionsSupportDisplayTargetSupport {
    /**
     * Whether the client can rewrite suggestion query text into executed text, if the latter is present for the display target.
     */
    executedTextSupported?: boolean | null;
    /**
     * Whether PresentationParams.header_text is supported for the display target.
     */
    headerTextSupported?: boolean | null;
    /**
     * Whether Suggestion.repress_impression is supported. If not repressed suggestions are not returned.
     */
    repressImpressionSupported?: boolean | null;
    /**
     * Display target that is supported.
     */
    target?: string | null;
  }
  export interface Schema$AssistantApiSunriseFeaturesSupport {
    /**
     * If true, the device can slowly brighten the screen and simulate sunrise experience. Alarms with sunrise field enabled can be set on this device.
     */
    sunriseSimulationSupported?: boolean | null;
  }
  /**
   * These are the set of ClientOps that are supported by the device.
   */
  export interface Schema$AssistantApiSupportedClientOp {
    /**
     * This should be the same as the name of the SemanticClientOp that is supported.
     */
    clientOpName?: string | null;
    /**
     * The properties associated with the ClientOp. This proto should be associated with the client_op_name.
     */
    clientOpProperties?: Schema$AssistantApiProtobuf;
    supportedExecution?: Schema$AssistantApiSupportedClientOpSupportedExecution;
    /**
     * A version of 0 is the equivalent to not having support for that client_op type. Note that a client_op is also unsupported if it is not included at all in the list of supported client_ops.
     */
    version?: number | null;
  }
  /**
   * Additional properties that client can support for executing the client op. They are surface-specific execution properties and are unrelated to the execution model.
   */
  export interface Schema$AssistantApiSupportedClientOpSupportedExecution {
    /**
     * ClientOp execution supports special rendering behavior while the user is in the middle of expressing their query. This behavior includes: 1) New partial output always over-writes prior partial output. 2) Canceling the interaction removes partial fulfilment from any user visible interaction history. If this is true, whether to apply the special rendering behavior will be determined by PartialFulfillmentRenderingParams. More details can be found at go/ma-natcon-pf-api.
     */
    supportsPartialFulfillment?: boolean | null;
    /**
     * Client can support synchronous execution of the client op. For tts.OUTPUT client op it means that client would honor |synchronous_playback_args| argument. Please see more at go/synchronous-sounds-design.
     */
    supportsSynchronousExecution?: boolean | null;
  }
  /**
   * The overall Conversation Protocol version. As we make fundamental changes to Conversation protocol that are non-backwards compatible, we will increment the protocol version. By default, all clients will support version 0. All versions are documented at go/conversation-versions.
   */
  export interface Schema$AssistantApiSupportedConversationVersion {
    /**
     * Whether conversation protocol is supported explicitly. If true, SingleDeviceCapabilityChecker::SupportsConversationProtocol will always return true.
     */
    supportsConversationProtocol?: boolean | null;
    /**
     * The supported version number.
     */
    version?: number | null;
  }
  /**
   * These are the set of features that are supported by the device. It's a part of the SoftwareCapabilities of the device. Next ID: 67
   */
  export interface Schema$AssistantApiSupportedFeatures {
    /**
     * Whether the client supports the alternative message notification sources on AAE, in which case notification-related operations can access it.
     */
    aaeNotificationSourceSupported?: boolean | null;
    /**
     * In what way is assistant continued presence supported. (go/opa-acp-prd)
     */
    acpSupport?: Schema$AssistantApiAssistantContinuedPresenceSupport;
    actionV2SupportedFeatures?: Schema$AssistantApiActionV2SupportedFeatures;
    /**
     * Whether the client supports AlarmTimerManager API (go/alarm-timer-manager-api).
     */
    alarmTimerManagerApiSupported?: boolean | null;
    /**
     * The client information for app control support. More details in: go/acaia.
     */
    appControlSupport?: Schema$AssistantApiAppControlSupport;
    /**
     * Whether the client supports the assistant explore section. This field will be active only when the Explore section is available to the user. This means that the user is (a) signed-in, (b) a IOPA / AGSA user, and (c) in a locale where explore is available.
     */
    assistantExploreSupported?: boolean | null;
    /**
     * Whether Assistant for Kids (a.k.a. Designed for Family) features are supported.
     */
    assistantForKidsSupported?: boolean | null;
    /**
     * Whether communications flows for the client can bypass the DI/DC check. The client will enforce some other equivalent permission as necessary concerning access to device contacts and apps.
     */
    bypassDiDcCheckForComms?: boolean | null;
    /**
     * Whether or not Assistant should enforce the dismissal of communication notifications associated with messages.
     */
    bypassMsgNotificationDismissal?: boolean | null;
    /**
     * Whether the client supports 1m providers (go/1m-partner-expansion).
     */
    client1mProvidersSupported?: boolean | null;
    /**
     * Whether the client can batch client op results before sending them to the server.
     */
    clientOpResultBatchingSupported?: boolean | null;
    /**
     * Whether the client supports confirmation flow before announcement of multiple messages. If set to true the user will be prompted once and confirmation will be taken before all the messages are announced.
     */
    confirmationBeforeReadingMultipleMessagesSupported?: boolean | null;
    /**
     * Whether the client supports cross-device broadcast (i.e. on Torus).
     */
    crossDeviceBroadcastSupported?: boolean | null;
    /**
     * The version of cross device broadcast (ie; broadcast on torus) which the client supports.
     */
    crossDeviceBroadcastVersion?: string | null;
    /**
     * Whether the client supports csat visual overlay. (go/sd-od-csat)
     */
    csatVisualOverlaySupported?: boolean | null;
    /**
     * The features set which duo client on the device supports. This should be serialized from proto {@code duo_client_api.DuoClientApiFeatures\}.
     */
    duoClientApiFeatures?: string | null;
    /**
     * Whether the client supports Duo group calling.
     */
    duoGroupCallingSupported?: boolean | null;
    /**
     * Information about what support this device has for fitness.
     */
    fitnessFeatureSupport?: Schema$AssistantApiFitnessFeatureSupport;
    /**
     * Fluid Actions features supported by the client. If this field is not set in the incoming request, it could mean that the client does not support Fluid Actions. Alternatively, it could mean that the client supports Fluid Actions, but syncs state with server using the old protocol, namely ConversationStateParams. When b/140733618 is resolved, Surface Adaptation Layer will add this field for old clients that support Fluid Actions framework.
     */
    fluidActionsSupport?: Schema$AssistantApiFluidActionsSupport;
    /**
     * Whether the surface client op performer supports Funtime alarms and timers. go/funtime-engdesign
     */
    funtimeSupported?: boolean | null;
    /**
     * Whether account linking via Google Deep Integrations (GDI) is supported. go/opa-gdi-design
     */
    gdiSupported?: boolean | null;
    /**
     * Whether the client supports the Gearhead message notification source, in which case notification-related operations can access it.
     */
    gearheadNotificationSourceSupported?: boolean | null;
    /**
     * Whether the client has a physical radio installed.
     */
    hasPhysicalRadio?: boolean | null;
    /**
     * Whether the client supports confirmation messages in Immersive Canvas actions. Deprecated: use the filed in immersive_canvas_support.
     */
    immersiveCanvasConfirmationMessageSupported?: boolean | null;
    immersiveCanvasSupport?: Schema$AssistantApiImmersiveCanvasSupport;
    /**
     * Whether the client supports account linking in-dialog (askForSignIn). This is used before this feature is moved to conversation protocol. To support this, the client needs to: - Integrate with Google Deep Integrations. - Have logic to send the result of account linking back to AS.
     */
    inDialogAccountLinkingSupported?: boolean | null;
    /**
     * Whether paired-phone contact upload is needed for communications queries to work (e.g. on AAE).
     */
    isPairedPhoneContactUploadNeededForComms?: boolean | null;
    /**
     * Whether a Bluetooth-paired phone is a core component of communications flows on the client.
     */
    isPairedPhoneNeededForComms?: boolean | null;
    /**
     * Whether the client supports confirmation flow when a permission is missing. If set to true, the user will be prompted and on confirmation the original flow will continue.
     */
    justInTimeSupported?: boolean | null;
    /**
     * Which way of launching the keyboard the client supports.
     */
    launchKeyboardSupported?: string | null;
    /**
     * Whether the client has Google Lens (Assistant Eyes).
     */
    lensSupported?: boolean | null;
    /**
     * Whether the surface supports LiveCards. In cases where the user intent flow cannot be completed within the Assistant, LiveCards are used to take the user to an external app or website. These cards will be pushed to the Google Home app via the PushMessage ClientOp.
     */
    liveCardsSupported?: boolean | null;
    /**
     * Whether the client supports the Lottie animation library for the broadcast feature.
     */
    lottieAnimationSupport?: string | null;
    /**
     * Whether the client supports Assistant dialogs within Maps. This field will be set only when the Maps on the surface supports Assistant dialogs embedded within Maps. go/gsa-gmm.
     */
    mapsDialogsSupported?: boolean | null;
    /**
     * Whether the device supports masquerade mode (go/masquerade).
     */
    masqueradeModeSupported?: boolean | null;
    /**
     * Information about how client handles media controls (play, pause, skip ...)
     */
    mediaControlSupport?: Schema$AssistantApiMediaControlSupport;
    /**
     * The ability of the client to detect media sessions on the device.
     */
    mediaSessionDetection?: string | null;
    /**
     * Whether the client supports joining a Google Meet meeting.
     */
    meetSupported?: boolean | null;
    /**
     * Whether the client can render no input response or just ignore it. No input response is returned when client has a no speech input interaction, eg. user tapped mic but didn't say anything.
     */
    noInputResponseSupported?: boolean | null;
    /**
     * When the entry source is search, whether the client supports rendering a similar response as OPA one does. Entry source is defined at http://cs/symbol:assistant.api.params.DeviceProperties.EntrySource
     */
    opaOnSearchSupported?: boolean | null;
    /**
     * Whether or not the client supports enabling parental controls. When a device to supports parental controls, it has the software necessary to store the relevant information required for parental controls to work. This information includes a boolean "enabled bit" as well as the obfuscated gaia ID of the kid account selected for use with parental controls. Devices supportings kids mode send this information to S3 via S3ClientInfo in every request. See go/aff-kidsproduct for details.
     */
    parentalControlsSupported?: boolean | null;
    /**
     * Whether the client supports persistent display. The new feature allows Assistant devices with screen to display a continuously updating permanent display, such as ambient weather, without the need for a user to ask the Assistant. Design doc: go/assistant-persistent-display.
     */
    persistentDisplaySupported?: boolean | null;
    /**
     * Whether the client supports the privacy-aware lockscreen protocol (go/assistant-lockscreen-spec).
     */
    privacyAwareLockscreenSupported?: boolean | null;
    /**
     * Whether the client supports tts tapering for the read messages flow. If set to true the tapered tts variant would be used during the read messages flow.
     */
    readMessagesTtsTaperingSupported?: boolean | null;
    /**
     * Whether the client supports message summarization.
     */
    readNotificationSummarizationSupported?: boolean | null;
    /**
     * Whether the client has remote casting enabled. For ex: we want to disable this for clients like Auto.
     */
    remoteCloudCastingEnabled?: boolean | null;
    /**
     * Whether the Assistant Server should generate feedback suggestion chips.
     */
    serverGeneratedFeedbackChipsEnabled?: boolean | null;
    /**
     * Whether the client supports SmartHome lock screen logic (i.e. on Tangor).
     */
    shLockScreenSupported?: boolean | null;
    /**
     * Which kind of sign in the client supports.
     */
    signInMethod?: Schema$AssistantApiSignInMethod;
    /**
     * Whether the client can monitor sleep. This allows us to show sleep CUJ related information: go/TwilightDesign Use for development only, see the same field in DeviceCapabilities.SoftwareCapabilities.SelinaCapabilities.
     */
    sleepSensingSupported?: boolean | null;
    /**
     * Whether the client supports smart space cross-device timers. (go/ss-x-device-timer)
     */
    smartspaceCrossDeviceTimerSupported?: boolean | null;
    /**
     * Whether or not the client supports gesture detection via soli chips. The reason to prepend the name with soli is to distinguish it from computer vision based methods, e.g. Newman devices.
     */
    soliGestureDetectionSupported?: boolean | null;
    /**
     * Suggestion chips features, supported by the client.
     */
    suggestionsSupport?: Schema$AssistantApiSuggestionsSupport;
    /**
     * Whether the client supports the sunrise screen brightening feature before the alarm fires. This is used to indicate whether sunrise alarms can be set on the device. http://cs/symbol:assistant.api.core_types.governed.RingtoneTaskMetadata.GentleWakeInfo
     */
    sunriseFeaturesSupport?: Schema$AssistantApiSunriseFeaturesSupport;
    /**
     * Whether the client supports faster optimization for tap_to_read feature.
     */
    tapToReadOptimizationSupported?: boolean | null;
    /**
     * Whether the device supports the 3p GUI framework, which allows third parties to enter the conversation with the user, showing their logo next to their chat bubbles, etc. go/3p-phone
     */
    thirdPartyGuiSupported?: boolean | null;
    /**
     * Transactions features, supported by the client. Transactions feature may includes how Transactions team want to populate additional information from the device to the server.
     */
    transactionFeaturesSupport?: Schema$AssistantApiTransactionFeaturesSupport;
    /**
     * The version of transactions which the client supports.
     */
    transactionsVersion?: string | null;
    /**
     * If set, it indicates that the client can open a separate HTML browser/webviewer (full viewer) to display certain visual results. These visual results usually require more memory to render (e.g. high resolution photos). Compared to the regular viewer that display all other Assistant result, the full viewer does not have memory limit. The field is copied from the device model. See http://google3/assistant/devices_platform/proto/device_model_capabilities.proto?l=225&rcl=312576471 Also see go/webassistant-full-card-viewer.
     */
    usesSeparateFullViewer?: boolean | null;
    /**
     * Whether the client supports viewing of reminder hub page or not. Default is supported. Set to true to disable returning reminder hub page url in reminder responses.
     */
    viewReminderHubPageNotSupported?: boolean | null;
    /**
     * Whether the client supports the programmatic warm welcome tutorial. Design doc: go/opal-pww-design.
     */
    warmWelcomeTutorialSupported?: boolean | null;
    /**
     * Whether the supports opening a URL in a web browser. For example, we want to disable this for clients like Chirp.
     */
    webBrowserSupported?: boolean | null;
    /**
     * Whether or not the client supports WhatsNext in the protocol.
     */
    whatsNextSupported?: boolean | null;
    /**
     * Whether the client supports joining a Zoom meeting.
     */
    zoomSupported?: boolean | null;
  }
  /**
   * Contains versions of protocol buffer messages. This is the equivalence of a proto3 map, keyed by a protocol buffer message’s name, and the value is the version of this message. e.g. {"assistant.api.core_types.Timer": 2, "assistant.api.core_types.Alarm": 1\} See go/assistant-protocol-versioning for more details.
   */
  export interface Schema$AssistantApiSupportedProtocolVersion {
    messageVersion?: Schema$AssistantApiSupportedProtocolVersionMessageVersionPair[];
  }
  export interface Schema$AssistantApiSupportedProtocolVersionMessageVersionPair {
    /**
     * The full path of a message which should start from the package name. e.g. "assistant.api.core_types.Timer".
     */
    messageName?: string | null;
    /**
     * The supported version number.
     */
    version?: number | null;
  }
  /**
   * Types of providers that are supported by the client. For example, ChromeOS support both web app and Android app (for eligible devices).
   */
  export interface Schema$AssistantApiSupportedProviderTypes {
    supportedTypes?: string[] | null;
  }
  /**
   * Properties of the surface that are not hardware related or feature specific.
   */
  export interface Schema$AssistantApiSurfaceProperties {
    executionCapabilities?: Schema$AssistantApiSurfacePropertiesExecutionCapabilities;
    /**
     * Indicates if the surface prefers glanceable UI when rendering Assistant response. (see go/mobile-dr-hbird-glanceable-comms-cuj for more context).
     */
    prefersGlanceableUi?: boolean | null;
    /**
     * If this field is unset, the response format is unknown
     */
    responseDisplayFormat?: string | null;
    /**
     * If true, the client supports receiving multiple responses. See go/multiple-response-in-media-use-cases for more details.
     */
    supportsMultiResponse?: boolean | null;
  }
  /**
   * Describes the capabilities that are related to the execution of client ops on the device.
   */
  export interface Schema$AssistantApiSurfacePropertiesExecutionCapabilities {
    /**
     * Completes the preloading ie., sets up the stage for the execution of client ops on the device while the previous conv delta is being executed. Refer to go/preload-convdelta for more information.
     */
    supportsClientOpPreloading?: boolean | null;
    /**
     * A value of true indicates that the client supports streaming of non-finalized responses by use of ClientExecutionParams.response_stream_id. and ClientExecutionParams.to_be_finalized.
     */
    supportsNonFinalizedResponses?: boolean | null;
    /**
     * If true, the client supports receiving non-materialized interactions (go/as-streaming-protocol-nm).
     */
    supportsNonMaterializedInteractions?: boolean | null;
  }
  /**
   * Restrictions related to system-level notifications.
   */
  export interface Schema$AssistantApiSystemNotificationRestrictions {
    categoryState?: Schema$AssistantApiSystemNotificationRestrictionsNotificationCategoryState[];
    channelState?: Schema$AssistantApiSystemNotificationRestrictionsNotificationChannelState[];
    /**
     * Specifies whether the surface is able to display notifications.
     */
    notificationCapabilities?: string | null;
  }
  /**
   * Notification channels state for the new server driven channels.
   */
  export interface Schema$AssistantApiSystemNotificationRestrictionsNotificationCategoryState {
    /**
     * Notification channel type.
     */
    categoryId?: number | null;
    /**
     * Weather the notifications on this channel are disabled.
     */
    disabled?: boolean | null;
    disabledReason?: string | null;
  }
  /**
   * Notification channels state.
   */
  export interface Schema$AssistantApiSystemNotificationRestrictionsNotificationChannelState {
    /**
     * Notification channel type.
     */
    channelType?: string | null;
    /**
     * Whether the notifications on this channel are enabled.
     */
    enabled?: boolean | null;
  }
  /**
   * 3P Action Metadata. Next ID: 3
   */
  export interface Schema$AssistantApiThirdPartyActionConfig {
    /**
     * DeviceActionCapability from DeviceModelPackage.
     */
    deviceActionCapability?: Schema$AssistantDevicesPlatformProtoDeviceActionCapability;
    /**
     * List of Action project capabilities.
     */
    projectConfigs?: Schema$AssistantApiThirdPartyActionConfigProjectConfig[];
  }
  /**
   * Metadata for ActionPackage. Device Actions are disabled by default unless explicitly enabled for the device here, see go/3p-device-actions-v2-design.
   */
  export interface Schema$AssistantApiThirdPartyActionConfigProjectConfig {
    /**
     * Google cloud project id for which the Action Package or Device Model is registered.
     */
    projectId?: string | null;
  }
  export interface Schema$AssistantApiThirdPartyCapabilities {
    /**
     * Restrictions for the device to share any data with third party apps. See details in go/atv-dsc.
     */
    dataSharingRestrictions?: string | null;
  }
  /**
   * A civil time relative to a timezone. IMPORTANT: The definition of TimeOfDay proto is being moved to //assistant/api/core_types/governed/datetime_type.proto. All existing references will be updated to point to the new location. If you are adding a reference, use the new one instead.
   */
  export interface Schema$AssistantApiTimeOfDay {
    /**
     * The hour, in 0...23.
     */
    hour?: number | null;
    /**
     * The minute, in 0...59.
     */
    minute?: number | null;
    /**
     * The fraction of seconds in nanoseconds, in 0..999999999.
     */
    nanosecond?: number | null;
    /**
     * The second, in 0...59. Leap seconds are not supported.
     */
    second?: number | null;
  }
  /**
   * An absolute point in time independent of timezone or calendar, based on the proto3 Timestamp (//google/protobuf/timestamp.proto). IMPORTANT: The definition of Timestamp proto is being moved to //assistant/api/core_types/governed/datetime_type.proto. All existing references will be updated to point to the new location. If you are adding a reference, use the new one instead. NOTE: THIS IS NO LONGER RECOMMENDED TO BE USED. It was originally defined separately from google.protobuf.Timestamp due to incompatibility with proto2 syntax. The incompatibility issues have since been resolved and so the Google-wide standard representation of google.protobuf.Timestamp should be preferred. In fact, google.protobuf.* protos in general are now recommended to be used in new APIs.
   */
  export interface Schema$AssistantApiTimestamp {
    /**
     * Non-negative fractions of a second at nanosecond resolution.
     */
    nanos?: number | null;
    /**
     * Seconds of UTC time since the Unix epoch.
     */
    seconds?: string | null;
  }
  /**
   * A time zone. Conceptually, a time zone is a set of rules associated with a location that describes a UTC offset and how it changes over time (e.g. Daylight Saving Time). The offset is used to compute the local date and time. IMPORTANT: The definition of TimeZone enum is being moved to //assistant/api/core_types/governed/datetime_type.proto. All existing references will be updated to point to the new location. If you are adding a reference, use the new one instead.
   */
  export interface Schema$AssistantApiTimeZone {
    /**
     * Time zone in IANA format, e.g. America/Los_Angeles for USA Pacific Time.
     */
    ianaId?: string | null;
  }
  export interface Schema$AssistantApiTransactionFeaturesSupport {
    /**
     * If true, setting this boolean means the device should not support voice PIN. For example, although the phone supports both voice and PIN pad, but we don't want users using voice. https://docs.google.com/document/d/1M8iJQX3GuxGZGeidS8Gl4KJt3LuBWAIlolPlW10DkxU/edit#heading=h.8ovvdd3i2thv
     */
    voicePinSuppressed?: boolean | null;
  }
  export interface Schema$AssistantApiVolumeProperties {
    /**
     * The volume percentages for spelled out values.
     */
    defaultVolumePercentage?: number | null;
    highVolumePercentage?: number | null;
    /**
     * The number of levels to move for a step.
     */
    levelStepSize?: number | null;
    lowVolumePercentage?: number | null;
    /**
     * The max number of volume levels the client supports.
     */
    maximumVolumeLevel?: number | null;
    mediumVolumePercentage?: number | null;
    veryHighVolumePercentage?: number | null;
    veryLowVolumePercentage?: number | null;
  }
  /**
   * LINT.IfChanged Identifier for an application provider. NOTE: AppProviderId contains surface-specific info, such as the Android package name of the application. This was necessary for supporting current use cases that rely on surface-specific info in feature code. Eventually we want to deprecate AppProviderId and fetch surface-specific info in some other way (e.g. in a surface-translation layer). But until then, we may continue extending AppProviderId with other surface-specific info.
   */
  export interface Schema$AssistantContextAppProviderId {
    /**
     * The activity class name. E.g. com.google.android.gm.ui.MailActivityGmail
     */
    activityClassName?: string | null;
    /**
     * Unique package name that identifies an Android app of the provider.
     */
    androidPackageName?: string | null;
    /**
     * Unique cast app id that identifies a Cast app of the provider.
     */
    castAppId?: string | null;
    /**
     * Version code of the application.
     */
    versionCode?: number | null;
  }
  /**
   * IMPORTANT: This proto is being migrated to ProviderId. If you are adding new field, please add to ProviderId as well.
   */
  export interface Schema$AssistantContextMediaProviderId {
    /**
     * Unique package name that identifies a Android app of the provider.
     */
    androidPackageName?: string | null;
    /**
     * Unique app id that identifies a Cast app of the provider.
     */
    castAppId?: string | null;
    /**
     * Unique package name that identifies a ChromeOS app of the provider.
     */
    chromeOsPackageName?: string | null;
    /**
     * Unique package name that identifies a Home app of the provider.
     */
    homeAppPackageName?: string | null;
    /**
     * Bundle identifier that identifies an iOS app of the provider.
     */
    iosBundleIdentifier?: string | null;
    /**
     * Unique package name that identifies a KaiOS app of the provider.
     */
    kaiOsPackageName?: string | null;
    /**
     * Each onboarded provider has a unique provider key. KG provider keys are string identifiers used to identify a provider in some Media backends since mids, names, etc can change.
     */
    kgProviderKey?: string | null;
    /**
     * The MID of the provider. A MID is a unique identifier issued by Knowledge Graph for all entities contained in its graph.
     */
    mid?: string | null;
    /**
     * Provider variant corresponding to the current MediaProviderId.
     */
    providerVariant?: Schema$AssistantContextProviderVariant;
    /**
     * Bundle id that identifies an Session Initiation Protocol (SIP) provider.
     */
    sipProviderId?: string | null;
  }
  /**
   * Identifier used to represent a single application (a.k.a. provider). This model represents the surface-agnostic counterpart for assistant.api.core_types.Provider. E.g. it should avoid directly using package names for Android, bundle identifiers for iOS, etc. We require the transformation between assistant.context.ProviderId and assistant.api.core_types.Provider to either be lossless, or "lossy yet retrievable" (e.g. if package name is not available in ProviderId, it can still be retrieved using the ProviderMappingsModule). NOTE: 1. As of May 2021, verticals are highly fragmented in terms of how they represent/identify a provider, and so we may need to accommodate some vertical-specific representations. However, these should be generalized as much as possible so that they can be used by other verticals if needed. 2. If we need to differentiate between whether a provider is a media provider, app actions provider, timer provider, etc. we should capture this information in the context proto that contains a ProviderId field, rather than in the ProviderId message itself. 3. Any common fields across different provider identifier representations (e.g. ecosystem type) should be part of assistant.context.ProviderId directly.
   */
  export interface Schema$AssistantContextProviderId {
    /**
     * TODO(b/241170835) Deprecate this field.
     */
    appProviderId?: Schema$AssistantContextAppProviderId;
    /**
     * Ecosystem type for this provider.
     */
    ecosystemType?: string | null;
    /**
     * DEPRECATED. Fields in MediaProviderId have been pulled out into separate fields in ProviderId and ProviderMetadata. TODO(b/243953766) Deprecate this field.
     */
    mediaProviderId?: Schema$AssistantContextMediaProviderId;
    /**
     * The MID of the provider. A MID is a unique identifier issued by Knowledge Graph for all entities contained in its graph.
     */
    mid?: string | null;
    /**
     * ID issued by the Provider Corpus to uniquely identify a provider entity e.g. an Android app, a Cast app or a Cloud provider. In practice, a single partner can have multiple providers entities. For more detail, see go/se-storage-provider-id. This is the preferred/ standardized ID to use for ProviderId that all use-cases should eventually migrate to.
     */
    providerCorpusId?: string | null;
    /**
     * Provider variant corresponding to the current provider. It's used together with mid to uniquely identify provider.
     */
    providerVariant?: Schema$AssistantContextProviderVariant;
  }
  /**
   * Identifies a business policy used for selecting a given content provider in the form of a name and a resulting scoring action.
   */
  export interface Schema$AssistantContextProviderSelectionPolicy {
    /**
     * Result of applying the policy.
     */
    policyAction?: string | null;
    /**
     * Name of the policy.
     */
    policyName?: string | null;
  }
  /**
   * Message that gets returned from the Provider Selection Library (PSL). It encodes the scores, applied policies, and pruning decisions for a given provider candidate.
   */
  export interface Schema$AssistantContextProviderSelectionResult {
    /**
     * Alternative bucketed score for use by downstream ranking providers. A raw numeric score is subject to semantic-drift, while a bucket is not.
     */
    bucketedFinalScore?: string | null;
    /**
     * Final score in the range [0,1] that can be used for ranking providers. Incorporates both policy rules and quality considerations.
     */
    finalScore?: number | null;
    /**
     * List of business policies applied to the candidate.
     */
    policyApplied?: Schema$AssistantContextProviderSelectionPolicy[];
    /**
     * Indicates whether the candidate should be pruned.
     */
    shouldPrune?: boolean | null;
  }
  /**
   * Note: As of May 2021, multiple providers use the same mids (e.g. YouTube Main, YouTube Go, and YouTube Music all have the same mids). However, quite often we end up using surface specific identifiers (e.g. Android package names, iOS bundle identifiers, etc.) to differentiate amongst them. This field allows us to move away from surface specific identifiers towards a surface-agnostic enum representing the same information.
   */
  export interface Schema$AssistantContextProviderVariant {
    emptyMidVariant?: string | null;
    spotifyVariant?: string | null;
    youtubeVariant?: string | null;
  }
  /**
   * Capability with regard to support of alarms by the client.
   */
  export interface Schema$AssistantDevicesPlatformProtoAlarmCapability {
    /**
     * Maximum number of alarms that can be created on the client. Zero or unset indicates no maximum limit.
     */
    maxSupportedAlarms?: number | null;
    /**
     * Whether the client restricts alarms to ring within the next 24 hours.
     */
    restrictAlarmsToNextDay?: boolean | null;
    /**
     * Whether the client supports mutation of any alarm attribute such as time_pattern, recurrence_pattern, etc through the MUTATE action. If this is false, MUTATE may only be used to disable or dismiss an alarm. This field is true by default for backwards-compatibility; clients which don't support mutation outside of Disable/DismissAlarm should explicitly set this to false.
     */
    supportsGenericMutations?: boolean | null;
    /**
     * Whether the client supports the STOP alarm action. If this is false, stop actions will be represented by the MUTATE action, and the device may need to check alarm state to determine if there's a firing alarm that needs to be dismissed.
     */
    supportsStopAction?: boolean | null;
  }
  export interface Schema$AssistantDevicesPlatformProtoArgSpec {
    intValueSpec?: Schema$AssistantDevicesPlatformProtoIntValueSpec;
    optionValueSpec?: Schema$AssistantDevicesPlatformProtoOptionValueSpec;
    type?: string | null;
  }
  export interface Schema$AssistantDevicesPlatformProtoCallCallCapability {}
  export interface Schema$AssistantDevicesPlatformProtoClientReconnectCapability {}
  /**
   * States the cloud capabilities of the device, i.e. the endpoint(s) to use for cloud execution of Actions or Registration.
   */
  export interface Schema$AssistantDevicesPlatformProtoCloudCapability {
    /**
     * The list of CloudEndpoints supported by this Device Model. Note that each should have a unique |name|. If any cloud endpoints are provided here, then the first one in the list will be used by default for all Cloud Execution. An Intent may override the default by providing an |execution_config|.
     */
    cloudEndpoints?: Schema$AssistantDevicesPlatformProtoCloudEndpoint[];
  }
  /**
   * A cloud endpoints associates with this device, it can be used for query parsing, or cloud execution.
   */
  export interface Schema$AssistantDevicesPlatformProtoCloudEndpoint {
    /**
     * The name for this cloud endpoint. It's unique per Locale. This is not an API resource name. Ex: sample-nlu-endpoint
     */
    name?: string | null;
    /**
     * The list of scopes to be provided in the OAuth2 token. They must be a subset of the scopes registered in the Account Linking flow, or the request will fail. If the client itself provides the token, then this field is ignored.
     */
    scopes?: string[] | null;
    /**
     * The URL for this endpoint, it must start with https.
     */
    url?: string | null;
  }
  export interface Schema$AssistantDevicesPlatformProtoCoreDismissAssistantCapability {}
  /**
   * This capability represents device action needed capability. Next ID: 10
   */
  export interface Schema$AssistantDevicesPlatformProtoDeviceActionCapability {
    /**
     * Integrate your device with Google's Smart Home solution by putting your device into Google's Home Graph, a database that stores and provides contextual data about the home and its devices. For example, Home Graph can store the concept of a living room that contains multiple types of devices, when you say "turn on the light" to a device, if you have light in the living room, that light will be turned on.
     */
    assistantDeviceInRoomOptOut?: boolean | null;
    /**
     * Specifies behavior for built-in device actions for this device model. If not specified, defaults to ENABLE_CONFIGURED_INTENTS_ONLY.
     */
    builtInIntentMode?: string | null;
    /**
     * Specifies which custom device actions should be enabled for this device model. This will only affect the behavior of intents corresponding to those from the Action Package of this project. If not specified, defaults to ENABLE_ALL.
     */
    customIntentMode?: string | null;
    /**
     * Default instructions for routing of any Intent. The data here could be overridden for specific Intents if provided directly in the 'intents' field.
     */
    defaultExecutionConfig?: Schema$AssistantDevicesPlatformProtoExecutionConfig;
    /**
     * Specifies capabilities for device actions that are inlined in the google.assistant.embedded.v1.DeviceAction message.
     */
    inlinedActionCapability?: Schema$AssistantDevicesPlatformProtoInlinedActionCapability;
    /**
     * Intent configurations. Built-in and custom intents may be configured here. Note that built-in intents will always behave with IntentMode of ENABLE_CONFIGURED_INTENTS_ONLY. The IntentMode for custom intents can be changed using the custom_intent_mode. To configure an intent, list it here with its intent name, e.g. "MY_CUSTOM_INTENT", "google.assistant.car.model.capabilities.AC_TEMPERATURE".
     */
    intents?: Schema$AssistantDevicesPlatformProtoIntent[];
    /**
     * Provided data which augments the device action capabilities. Some built-in intents may require additional configuration to be provided. One example could be the list of channels available for the `action.intent.SelectChannel` intent.
     */
    providedData?: Schema$AssistantDevicesPlatformProtoProvidedData[];
    /**
     * List of built-in traits such as "action.devices.traits.OnOff" See java/com/google/home/graph/service/config/protoconf.pi As of Nov. 2017, we also support custom traits for EAP users. We'll eventually disable custom traits once custom actions are in place.
     */
    traits?: string[] | null;
    /**
     * Specifies the format how Google routes queries to 3P cloud. By default, this field is unset, all partners should get shallow NLU. This is needed *ONLY* for specific partners for strong business reasons.
     */
    understandingConfig?: Schema$AssistantDevicesPlatformProtoUnderstandingConfig;
  }
  export interface Schema$AssistantDevicesPlatformProtoDeviceModifySettingCapability {
    clientOpProperty?: Schema$AssistantApiClientOpPropertiesDeviceModifySettingClientOpProperty;
  }
  export interface Schema$AssistantDevicesPlatformProtoDeviceTakePhotoCapability {}
  /**
   * Specifies the routing capabilities of the Intent. It will apply only when the Intent is triggered. Next ID: 8
   */
  export interface Schema$AssistantDevicesPlatformProtoExecutionConfig {
    /**
     * Instructions for performing a cloud execution request for the Intent when the execution_type is set to CLOUD. If non-empty, then the device execution would be routed to the CloudEndpoint specified by this name. The Account Linking exchange may be performed to fetch the OAuth access token, and the access token will be included in the HTTP header.
     */
    cloudEndpointName?: string | null;
    /**
     * If this field is set, then the Syndication cloud call will be disabled for this intent. Note this only applies if any Syndication cloud endpoint is associated with the Device Model, otherwise setting this field does nothing. By default, all Intents that are enabled and supported by the Syndication API will be routed through the Syndication cloud endpoint if it's provided.
     */
    cloudIntentTranslationDisabled?: boolean | null;
    /**
     * Specifies the intent command format for this Action. For example, in order to launch an Android intent instead of receiving the device action payload on the client, then this field can be set with "intent:/#Intent;...;my_extra={$.params.channels[0].channelCode\};end" The parameter "{$.params.channels[0].channelCode\}" is in JSON path format, and will be replaced with the content from the original device action payload. Thus, with # JSON "execution": [ { "command": "action.devices.commands.SelectChannel", "params": { "channels": [{ "channelName": "exampleChannel", "channelCode": "1-1" \}] \} \} ] as the original action result, then the final result would look like "intent:/#Intent;...;my_extra=\"1-1\";end"
     */
    intentCommandFormat?: string | null;
    /**
     * If this field is set, then local execution capability is disabled for all matching intents.
     */
    localDisabled?: boolean | null;
    /**
     * Specifies how to execute this Action when it is invoked locally (from the same device.)
     */
    localExecutionType?: string | null;
    /**
     * If this field is set, then remote execution capability is disabled for all matching intents.
     */
    remoteDisabled?: boolean | null;
    /**
     * Specifies how to execute this Action when it is invoked remotely (from a different device.)
     */
    remoteExecutionType?: string | null;
  }
  export interface Schema$AssistantDevicesPlatformProtoExecutionWaitCapability {}
  export interface Schema$AssistantDevicesPlatformProtoInlinedActionCapability {
    /**
     * Specifies capabilities for handling on-device alarms. The presence of this field, even if empty, implies that the device supports alarms.
     */
    alarm?: Schema$AssistantDevicesPlatformProtoAlarmCapability;
    /**
     * Specifies the size limits on responses. If message is not defined then no limits exist.
     */
    responseLimits?: Schema$AssistantDevicesPlatformProtoResponseLimits;
    /**
     * Specifies capabilities for handling assistant.embedded.v1.DeviceOp.
     */
    supportedDeviceOps?: Schema$AssistantDevicesPlatformProtoSupportedDeviceOps;
    /**
     * Whether this device model package support sdk.EXECUTE client_op (a.k.a action.devices.EXECUTE intent), which will be filled into google.assistant.embedded.v1.DeviceAction.device_request_json. It is default to true (and not public), since all 3P will depends on the device_request_json. Only internal projects like Edoras will set this to false.
     */
    supportSdkExecute?: boolean | null;
    /**
     * Specifies whether server can send a series of responses for a single query. Example: Routines where multiple actions to be executed one after another.
     */
    supportsMultiResponse?: boolean | null;
    /**
     * Specifies capabilities for handling on-device timers. The presence of this field, even if empty, implies that the device supports timers.
     */
    timer?: Schema$AssistantDevicesPlatformProtoTimerCapability;
    /**
     * Specifies whether client supports receiving `DeviceAction.tts_output`.
     */
    ttsOutput?: Schema$AssistantDevicesPlatformProtoTtsOutputCapability;
  }
  /**
   * An intent configures the behavior of a device action for this device. Next ID: 7
   */
  export interface Schema$AssistantDevicesPlatformProtoIntent {
    /**
     * List of arguments associated this intent. Each of which depends a template for the expected argument.
     */
    argSpecs?: {
      [key: string]: Schema$AssistantDevicesPlatformProtoArgSpec;
    } | null;
    /**
     * Instructions for the routing of this Intent.
     */
    executionConfig?: Schema$AssistantDevicesPlatformProtoExecutionConfig;
    /**
     * The name of the intent.
     */
    name?: string | null;
    /**
     * List of provided data names used by this intent. Note that some built-in intents will not function properly without provided data, such as `action.intent.SwitchChannel` or `action.intent.AppSelector`.
     */
    providedDataNames?: string[] | null;
    /**
     * Security configuration for this Intent.
     */
    securityConfig?: Schema$AssistantDevicesPlatformProtoSecurityConfig;
    /**
     * The conditions which must be met by the device before executing this Intent. More than one can be provided, in which case the conditions operate with the "AND" operator, i.e. the first condition which is failed will be used to restrict the execution of this Intent.
     */
    triggerConditions?: Schema$AssistantDevicesPlatformProtoTriggerCondition[];
  }
  /**
   * Capabilities that may only be set internally. Only internal callers (i.e. Googlers or Google owned projects) will be able to set these, thanks to go/assistant-device-model-package-ownership.
   */
  export interface Schema$AssistantDevicesPlatformProtoInternalCapability {
    /**
     * When using the Assistant SDK (Embedded Assistant API), the project id used to authenticate the gRPC request is checked and must match against the project id of the Device Model. We will additionally allow the project ids listed in the device model here to be let through. See https://docs.google.com/document/d/1InAczpQJs6LCH1l--2yy67JM9hsBJbiL57fusnL3A8A
     */
    allowedAssistantSdkAuthProjectIds?: string[] | null;
    /**
     * Load the assistant.api.AppCapabilities from DEVICE_INSTALLED_APP footprint corpus. See go/edoras-geller.
     */
    appCapabilitiesFromDeviceInstallApps?: boolean | null;
    /**
     * Uses this endpoint for device action fulfillment when there's no endpoint in syndication_metadata. 1p surfaces/devices such as telephone can enable this for its cloud action fulfillment without enabling the whole syndication experience.
     */
    cloudDeviceActionEndpoint?: Schema$AssistantDevicesPlatformProtoCloudEndpoint;
    /**
     * Signals that the model will have updated ranking behavior as described in https://docs.google.com/document/d/1SN_AgadRr_cdIrFe-qgRbIX2J1sOE7lcRXAvM1GUPoU.
     */
    deviceActionsEligibleForHighConfidence?: boolean | null;
    /**
     * Make Google sign-in mandatory for using Google Assistant on the device. (This bit is initially added for Samsung TV.)
     */
    forceSignIn?: boolean | null;
    /**
     * When looking up device (for example for disclosure consent check), then always use the third party device id for lookup instead of any other device id which would normally have higher precedence, such as cast_device_id.
     */
    forceThirdPartyDeviceIdForDeviceLookup?: boolean | null;
    /**
     * Adds "transactions.AUTHENTICATION" for car automation probers. Since the probers run as Assistant SDK requests, voice match always fails for car automation requests, so we add this client op as a hack to allow probers to appear as personal devices and bypass voice match. See b/137221645.
     */
    forceTransactionsAuthentication?: boolean | null;
    /**
     * Signals that this device can "render" raw search results even with no screen (e.g., using a text reader). If this is true, fallback search results can be returned as a custom device action in a SearchResults message. http://google3/assistant/embedded/proto_translation/utils/proto/search_results.proto
     */
    hasCustomSearchResultsRendering?: boolean | null;
    /**
     * When looking up device (for example for disclosure consent check), use this project id as part of the primary key for the device lookup (i.e. instead of the device_config.agent_id.) The precedence is as follows: 1) this field, if set for the device's device model 2) device_config.agent_id 3) device_model.project_id
     */
    overrideProjectIdForDeviceLookup?: string | null;
    stadiaAssistantConfig?: Schema$AssistantDevicesPlatformProtoInternalCapabilityStadiaAssistantConfig;
    /**
     * Telephone server is able to send attribution to user feature phone. See go/telephone-attribution.
     */
    telephoneAttribution?: boolean | null;
  }
  /**
   * The StadiaAssistantConfig. This field should only be set if the device model is a Stadia.
   */
  export interface Schema$AssistantDevicesPlatformProtoInternalCapabilityStadiaAssistantConfig {
    stadiaPlatform?: string | null;
  }
  export interface Schema$AssistantDevicesPlatformProtoIntValueSpec {
    maxValue?: string | null;
    minValue?: string | null;
  }
  export interface Schema$AssistantDevicesPlatformProtoMediaNextCapability {}
  export interface Schema$AssistantDevicesPlatformProtoMediaPauseCapability {}
  export interface Schema$AssistantDevicesPlatformProtoMediaPlayMediaCapability {}
  export interface Schema$AssistantDevicesPlatformProtoMediaPreviousCapability {}
  export interface Schema$AssistantDevicesPlatformProtoMediaResumeCapability {}
  export interface Schema$AssistantDevicesPlatformProtoMediaShowControlsCapability {}
  export interface Schema$AssistantDevicesPlatformProtoMediaStopCapability {}
  export interface Schema$AssistantDevicesPlatformProtoOptionValueSpec {
    values?: string[] | null;
  }
  /**
   * Provided data which augments the device action capabilities. Some built-in intents may require additional configuration to be provided. One example could be the list of channels available for the `action.intent.SelectChannel` intent.
   */
  export interface Schema$AssistantDevicesPlatformProtoProvidedData {
    name?: string | null;
  }
  export interface Schema$AssistantDevicesPlatformProtoProviderFulfillCapability {}
  export interface Schema$AssistantDevicesPlatformProtoProviderOpenCapability {
    clientOpProperty?: Schema$AssistantApiClientOpPropertiesProviderOpenClientOpProperty;
  }
  /**
   * Specifies the size limits on responses receivable by the client.
   */
  export interface Schema$AssistantDevicesPlatformProtoResponseLimits {
    /**
     * Max size in bytes of the total serialized AssistResponse receivable by the client. If response exceeds this max, response may be modified by the server.
     */
    maxAssistResponseSizeBytes?: number | null;
    /**
     * Maximum size in bytes (not characters) of text the display can handle (which may be different from how much the display can show at a time due to scrolling).
     */
    maxDisplayLinesBytes?: number | null;
    /**
     * Maximum size in bytes (not characters) for each suggestion chip.
     */
    maxSuggestionChipBytes?: number | null;
    /**
     * Maximum number of suggestion chips the device can handle to display.
     */
    maxSuggestionChips?: number | null;
  }
  /**
   * Encapsulates security configuration for a single intent of a device model.
   */
  export interface Schema$AssistantDevicesPlatformProtoSecurityConfig {
    /**
     * Specifies auth mechanism to be used upon remote request for device action.
     */
    authMechanismForRemoteRequests?: string | null;
  }
  export interface Schema$AssistantDevicesPlatformProtoSendChatMessageCapability {}
  /**
   * This message will specify supports for fields in |assistant.embedded.v1.DeviceOp|, for a device model package. See go/easi-client-op2 for more info. Next ID: 17
   */
  export interface Schema$AssistantDevicesPlatformProtoSupportedDeviceOps {
    /**
     * |call_call| specifies the support for the call.CALL clientop, and the corresponding call_call field in assistant.embedded.v1.DeviceOp.
     */
    callCall?: Schema$AssistantDevicesPlatformProtoCallCallCapability;
    /**
     * |client_reconnect| indicates support for client.RECONNECT using assistant.embedded.v1.DeviceOp. There is an alternative API/capability for client.RECONNECT specified in RoutineCapability.supports_reconnect. Client should choose between this and RoutineCapability but not both.
     */
    clientReconnect?: Schema$AssistantDevicesPlatformProtoClientReconnectCapability;
    /**
     * [core_dismiss_assistant] specifies the support for core.DISMISS_ASSISTANT client_op and the corresponding core_dismiss_assistant field in assistant.embedded.v1.DeviceOp.
     */
    coreDismissAssistant?: Schema$AssistantDevicesPlatformProtoCoreDismissAssistantCapability;
    /**
     * |device_modify_setting| specifies the support for device.MODIFY_SETTING client_op, and the corresponding device_modify_setting field in assistant.embedded.v1.DeviceOp.
     */
    deviceModifySetting?: Schema$AssistantDevicesPlatformProtoDeviceModifySettingCapability;
    /**
     * [device_take_photo] specifies the support for the device.TAKE_PHOTO clientop, and the corresponding device_take_photo field in assistant.embedded.v1.DeviceOp.
     */
    deviceTakePhoto?: Schema$AssistantDevicesPlatformProtoDeviceTakePhotoCapability;
    /**
     * |execution_wait| specifies the support for execution.WAIT client_op, and the corresponding execution_wait field in assistant.embedded.v1.DeviceOp.
     */
    executionWait?: Schema$AssistantDevicesPlatformProtoExecutionWaitCapability;
    mediaNext?: Schema$AssistantDevicesPlatformProtoMediaNextCapability;
    mediaPause?: Schema$AssistantDevicesPlatformProtoMediaPauseCapability;
    mediaPlayMedia?: Schema$AssistantDevicesPlatformProtoMediaPlayMediaCapability;
    mediaPrevious?: Schema$AssistantDevicesPlatformProtoMediaPreviousCapability;
    mediaResume?: Schema$AssistantDevicesPlatformProtoMediaResumeCapability;
    mediaShowControls?: Schema$AssistantDevicesPlatformProtoMediaShowControlsCapability;
    mediaStop?: Schema$AssistantDevicesPlatformProtoMediaStopCapability;
    /**
     * |provider_fulfill| specifies the support for provider.FULFILL client_op, and the corresponding provider_fulfill field in assistant.embedded.v1.DeviceOp.
     */
    providerFulfill?: Schema$AssistantDevicesPlatformProtoProviderFulfillCapability;
    /**
     * |provider_open| specifies the support for provider.OPEN client_op, and the corresponding provider_open field in assistant.embedded.v1.DeviceOp.
     */
    providerOpen?: Schema$AssistantDevicesPlatformProtoProviderOpenCapability;
    /**
     * |send_chat_message| specifies the support for the chat_message.SEND clientop, and the corresponding send_chat_message field in assistant.embedded.v1.DeviceOp.
     */
    sendChatMessage?: Schema$AssistantDevicesPlatformProtoSendChatMessageCapability;
  }
  /**
   * Capability with regard to support of timers by the client.
   */
  export interface Schema$AssistantDevicesPlatformProtoTimerCapability {
    /**
     * Maximum extended timer duration supported by the client. The extended timer duration is the total start-to-finish duration after an AddTimeToTimer operation. E.g. if a user sets a timer for 30 minutes, and later adds 10 minutes, the extended duration is 40 minutes. Zero or unset indicates no maximum limit.
     */
    maxSupportedExtendedTimerDuration?: Schema$AssistantApiDuration;
    /**
     * Maximum timer duration supported by the client. Zero or unset indicates no maximum limit.
     */
    maxSupportedTimerDuration?: Schema$AssistantApiDuration;
    /**
     * Maximum number of timers that can be created on the client. Zero or unset indicates no maximum limit.
     */
    maxSupportedTimers?: number | null;
    /**
     * Whether the client supports the MUTATE timer action. If this is false, mutate operations may be handled by sending a pair of REMOVE and CREATE timer actions to replace the existing timer instead of mutating it.
     */
    supportsMutateAction?: boolean | null;
  }
  /**
   * A TriggerCondition is described as a set of states which must be met by the device. It also includes instructions to the Assistant on what kind of response to execute when the condition is not met.
   */
  export interface Schema$AssistantDevicesPlatformProtoTriggerCondition {
    /**
     * The map of state keys along with their values which must be returned by the device, for example to start the dishwasher you may require states: {"door": "CLOSED", "detergent_status": "READY"\}.
     */
    requiredStateValues?: {
      [key: string]: Schema$AssistantDevicesPlatformProtoArgSpec;
    } | null;
    /**
     * A simple TTS to play.
     */
    simpleTts?: string | null;
    /**
     * Refers to a defined ConditionalResult keyed by its status. It could be a built-in or custom ConditionalResult for this Intent. Note: the states provided by the device MUST contain all of the states required by the ConditionalResult.
     */
    status?: string | null;
  }
  /**
   * Capabilities with regard to support of outputting TTS.
   */
  export interface Schema$AssistantDevicesPlatformProtoTtsOutputCapability {
    /**
     * Specifies whether client supports out-of-band TTS synthesis. When this is enabled, client could receive TTS request message in `SpeechOutputArgs.structured_tts` which it can then use to make request to S3 for synthesizing TTS audio.
     */
    supportsStructuredTts?: boolean | null;
  }
  /**
   * Specifies the NLU level that Google performs, which determines the request format sent to the 3P cloud.
   */
  export interface Schema$AssistantDevicesPlatformProtoUnderstandingConfig {
    /**
     * Specifies the NLU level for the intent.
     */
    nluLevel?: string | null;
  }
  /**
   * The information associated with an error while selecting the target device. Next ID: 2
   */
  export interface Schema$AssistantDeviceTargetingDeviceTargetingError {
    type?: string | null;
  }
  /**
   * Message containing the processed provider signals. This message is consumed by systems outside of the Provider GP, such as the HGR. For use of provider signals within the Provider GP, please refer to the CTF-governed PackedProviderSignals defined in: cs/google3/assistant/context/proto/packed_provider_signals.proto;rcl=486224300;l=68
   */
  export interface Schema$AssistantGroundingProviderProviderSignalResult {
    /**
     * Whether the provider is the default provider for the BII and entity type. Also known as the 'preferred_provider'.
     */
    isDefaultProvider?: boolean | null;
    /**
     * Whether the provider is currently open in the foreground on the device.
     */
    isForegroundProvider?: boolean | null;
    /**
     * Indicates that fulfillment on this provider will happen within the provider app
     */
    isInAppProvider?: boolean | null;
    /**
     * Whether the provider is installed, or otherwise reachable, from the device.
     */
    isInstalled?: boolean | null;
    /**
     * Whether the provider was the last-used provider for this intent on the device. Also known as the 'sticky_provider'.
     */
    isLastUsedProvider?: boolean | null;
    /**
     * Whether the provider was specified by the query.
     */
    isQueryRestrictedProvider?: boolean | null;
    /**
     * The result of running provider-selection on the provider candidate. This is populated by the Signal Extractor after the PSL has been run.
     */
    providerSelectionResult?: Schema$AssistantContextProviderSelectionResult;
    /**
     * Contains the "fulfillment type" of provider eg whether it's 0p or System API provider.
     */
    providerTypeSignal?: string | null;
  }
  export interface Schema$AssistantGroundingRankerAssistantInteractionFeatures {
    timeDecayed14dHalfLife?: number | null;
    /**
     * Frequency features.
     */
    timeDecayed1dHalfLife?: number | null;
    timeDecayed7dHalfLife?: number | null;
    timeDecayedAccepted14dHalfLife?: number | null;
    timeDecayedAuis14dHalfLife?: number | null;
    timeDecayedCanceled14dHalfLife?: number | null;
    timeDecayedDeclined14dHalfLife?: number | null;
    timeSinceLastButOneCanceledActionSecs?: number | null;
    timeSinceLastButOneCompletedActionSecs?: number | null;
    timeSinceLastButTwoCanceledActionSecs?: number | null;
    timeSinceLastButTwoCompletedActionSecs?: number | null;
    timeSinceLastCanceledActionSecs?: number | null;
    /**
     * Recency features.
     */
    timeSinceLastCompletedActionSecs?: number | null;
  }
  /**
   * Features to be passed from Contact GP to HGR. Next ID: 13
   */
  export interface Schema$AssistantGroundingRankerContactGroundingProviderFeatures {
    /**
     * Concept id for relationships in English, e.g. "Mother" for all non-English locales. It's only populated for source = RELATIONSHIP.
     */
    conceptId?: string | null;
    contactSource?: string | null;
    /**
     * Whether the query is a relationship query based on the annotation source.
     */
    isRelationshipFromAnnotation?: boolean | null;
    /**
     * Whether the contact has relationship in the contact metadata.
     */
    isRelationshipFromSource?: boolean | null;
    /**
     * Whether only populates a single candidate.
     */
    isSingleCandidate?: boolean | null;
    /**
     * Whether the contact is starred contact.
     */
    isStarred?: boolean | null;
    matchedNameType?: string | null;
    /**
     * Number of alternate contact names from fuzzy contact match. (Not suggest using it since it can change due to retrieval iteration)
     */
    numAlternateNameFromFuzzyContactMatch?: number | null;
    /**
     * Number of alternate contact names from S3_HYPOTHESES. (Not suggest using it since it can change due to retrieval iteration)
     */
    numAlternateNamesFromS3?: number | null;
    /**
     * Number of alternate contact names from interpretation. (Not suggest using it since it can change due to retrieval iteration)
     */
    numAlternativeNamesFromInterpretation?: number | null;
    /**
     * Number of contacts populated by the contact Grounding Provider. (Not suggest using it since it can change due to retrieval iteration)
     */
    numCandidates?: number | null;
    recognitionAlternateSource?: string | null;
  }
  /**
   * Device contact affinity from android call logs.
   */
  export interface Schema$AssistantGroundingRankerDeviceContactAffinityFeatures {
    aggregateAffinity?: number | null;
    callAffinity?: number | null;
    messageAffinity?: number | null;
  }
  /**
   * Features to be extracted from Device GP for ranking in HGR. Each candidate from Device GP will be associated with its own DeviceGroundingProviderFeatures. Next ID: 5
   */
  export interface Schema$AssistantGroundingRankerDeviceGroundingProviderFeatures {
    /**
     * ID for the device. This feature is needed specifically for PRR and it contains PII. Note that not every device has a corresponding DeviceId.
     */
    deviceId?: Schema$AssistantApiCoreTypesGovernedDeviceId;
    /**
     * Features generated by Device Targeting library (Lumos).
     */
    deviceTargetingFeatures?: Schema$AssistantGroundingRankerDeviceTargetingFeatures;
    /**
     * Labels tagged by Device Targeting library (Lumos).
     */
    deviceTargetingLabels?: Schema$AssistantGroundingRankerDeviceTargetingLabels;
    /**
     * The set of information that helps identify the surface.
     */
    surfaceIdentity?: Schema$AssistantApiCoreTypesGovernedSurfaceIdentity;
  }
  /**
   * Features generated by Device Targeting library (Lumos). See go/hgr-lumos-integration and go/lumos-feature-extraction for more details. Next ID: 3
   */
  export interface Schema$AssistantGroundingRankerDeviceTargetingFeatures {
    properties?: Schema$AssistantGroundingRankerDeviceTargetingFeaturesProperties;
    states?: Schema$AssistantGroundingRankerDeviceTargetingFeaturesStates;
  }
  /**
   * The properties of the device. They are static and won't change. Next ID: 4
   */
  export interface Schema$AssistantGroundingRankerDeviceTargetingFeaturesProperties {
    /**
     * The model ID of the device. This should be globally unique across manufacturers/OEMs.
     */
    deviceModelId?: string | null;
    /**
     * Indicate whether the device is owned by the user who is speaking.
     */
    isOwnedBySpeaker?: boolean | null;
    /**
     * Assistant surface type (ontology).
     */
    surfaceType?: string | null;
  }
  /**
   * The states of the device. They are dynamic and may change based on the current context. Next ID: 5
   */
  export interface Schema$AssistantGroundingRankerDeviceTargetingFeaturesStates {
    /**
     * The distance of the device relative to others that hear the user's OKG. Timestamp of when the device was last used. Should correspond to when the AssistantRequestParams (in ASSISTANT_SNAPSHOT corpus) were last written for this device.
     */
    distance?: string | null;
    /**
     * Indicate whether the device is docked on a base.
     */
    isDocked?: boolean | null;
    /**
     * Indicate whether the device is locked.
     */
    isLocked?: boolean | null;
    /**
     * Indicate whether the device is tethered to another device.
     */
    isTethered?: boolean | null;
  }
  /**
   * Labels tagged by Device Targeting library (Lumos). See go/hgr-lumos-integration and go/lumos-feature-extraction for more details. Next ID: 2
   */
  export interface Schema$AssistantGroundingRankerDeviceTargetingLabels {
    /**
     * Indicate whether the device is selected by Lumos as the target device.
     */
    isSelectedByLumos?: boolean | null;
  }
  /**
   * Features to be extracted from Endpoint GP for ranking in HGR. Next ID: 2
   */
  export interface Schema$AssistantGroundingRankerEndpointGroundingProviderFeatures {
    /**
     * Proxy signal which tells whether the user provided a confirmation to a prompt or not. See http://shortn/_XnZAJBIiwG for more details.
     */
    isUserConfirmed?: boolean | null;
  }
  /**
   * Next ID: 7
   */
  export interface Schema$AssistantGroundingRankerGroundingProviderFeatures {
    contactGroundingProviderFeatures?: Schema$AssistantGroundingRankerContactGroundingProviderFeatures;
    deviceGroundingProviderFeatures?: Schema$AssistantGroundingRankerDeviceGroundingProviderFeatures;
    endpointGroundingProviderFeatures?: Schema$AssistantGroundingRankerEndpointGroundingProviderFeatures;
    mediaGroundingProviderFeatures?: Schema$AssistantGroundingRankerMediaGroundingProviderFeatures;
    podcastGroundingProviderFeatures?: Schema$AssistantGroundingRankerPodcastGroundingProviderFeatures;
    providerGroundingProviderFeatures?: Schema$AssistantGroundingRankerProviderGroundingProviderFeatures;
  }
  export interface Schema$AssistantGroundingRankerLaaFeature {
    name?: string | null;
    value?: number | null;
  }
  export interface Schema$AssistantGroundingRankerLaaFeatures {
    bindingSet?: Schema$AssistantGroundingRankerLaaFeaturesBindingSet;
    communicationEndpoint?: Schema$AssistantGroundingRankerLaaFeaturesCommunicationEndpoint;
    contact?: Schema$AssistantGroundingRankerLaaFeaturesContact;
    features?: Schema$AssistantGroundingRankerLaaFeature[];
    provider?: Schema$AssistantGroundingRankerLaaFeaturesProvider;
  }
  export interface Schema$AssistantGroundingRankerLaaFeaturesBindingSet {
    assistantInteractionFeatures?: Schema$AssistantGroundingRankerAssistantInteractionFeatures;
  }
  export interface Schema$AssistantGroundingRankerLaaFeaturesCommunicationEndpoint {
    assistantInteractionFeatures?: Schema$AssistantGroundingRankerAssistantInteractionFeatures;
  }
  export interface Schema$AssistantGroundingRankerLaaFeaturesContact {
    assistantInteractionFeatures?: Schema$AssistantGroundingRankerAssistantInteractionFeatures;
    deviceContactAffinityFeatures?: Schema$AssistantGroundingRankerDeviceContactAffinityFeatures;
  }
  export interface Schema$AssistantGroundingRankerLaaFeaturesProvider {
    assistantInteractionFeatures?: Schema$AssistantGroundingRankerAssistantInteractionFeatures;
  }
  /**
   * Features to be passed from Media GP to HGR. Next ID: 17
   */
  export interface Schema$AssistantGroundingRankerMediaGroundingProviderFeatures {
    /**
     * Release type for an album container.
     */
    albumReleaseType?: string | null;
    /**
     * Temporary ambiguity classifier signals.
     */
    ambiguityClassifier?: string | null;
    /**
     * Mid of the media item. This is currently only used in manual rules.
     */
    entityMid?: string | null;
    /**
     * True if the argument's type was explicitly mentioned in the query.
     */
    hasTypeSemanticEdge?: boolean | null;
    /**
     * Whether the candidate is YouTube CAST_VIDEO candidate. CAST_VIDEO is a deeplink platform. This signal will be used to promote YouTube Music screenful candidates with CAST_VIDEO platform for free users because free users cannot get exact entities in screenless response and can get exact entities with ads in screenful response.
     */
    isCastVideo?: boolean | null;
    /**
     * True if the media search query is included in the entity name and artists.
     */
    isMediaSearchQuerySubsetOfEntityNameAndArtist?: boolean | null;
    isMostRecentSongAlbumAmbiguous?: boolean | null;
    /**
     * True if the media deeplink has tag SEED_RADIO.
     */
    isSeedRadio?: boolean | null;
    /**
     * True if the user requests seed radio.
     */
    isSeedRadioRequest?: boolean | null;
    /**
     * Indicates whether this is youtube content seeking music.
     */
    isYoutubeMusicSeeking?: boolean | null;
    /**
     * MediaAquaAction::media_content_type from interpretation. It can be used for cross-content type ranking, for example, if a candidate's content type does not match this content type from interpretation, this candidate will be slightly demoted. Also, we might avoid fetching some signals when the content type is generic music, since some content types do not need ranking.
     */
    mediaContentType?: string | null;
    /**
     * MSC(Media Short Click) rate. MSC rate = total number of MSC events / total number of MSC candidates The event is considered as MSC candidate if the event is a media seeking query(excluding follow-ons) and the media result is successfully fulfilled. The event is MSC event if any of the following is in the following queries within 30 secs: FOLLOWED_BY_DUPLICATE FOLLOWED_BY_ADD_OR_DELETE_MANUAL_REFINEMENT FOLLOWED_BY_SAME_VERTICAL (MEDIA) FOLLOWED_BY_STOP More details: go/media-ranking, go/billboard-navboost, go/magma-music-actions-efrac
     */
    mscRate?: number | null;
    /**
     * Scubed predicted SAI value (pSAI - SCUBED_MUSIC_ACTIONS) for music populated by a regression model that incorporates a BERT model signal as well as other Scubed signals.
     */
    scubedPSaiMusic?: number | null;
    /**
     * Scubed predicted SAI value (pSAI - SCUBED_TVM_ACTIONS) for music populated by a regression model that incorporates a BERT model signal as well as other Scubed signals.
     */
    scubedPSaiTvm?: number | null;
    /**
     * Type of the media item.
     */
    type?: string | null;
    youtubeConfidenceScore?: number | null;
  }
  /**
   * Features to be extracted from Podcast GP for ranking in HGR. Next ID: 6
   */
  export interface Schema$AssistantGroundingRankerPodcastGroundingProviderFeatures {
    /**
     * Whether the podcast is exclusive to a provider a not.
     */
    isExclusive?: boolean | null;
    /**
     * The count of the unique users that listened to the podcast in the last 28 days.
     */
    podcastListenersCount?: number | null;
    /**
     * Provider popularity score. More details are here go/ps-to-kg.
     */
    popularityScore?: number | null;
    /**
     * The relevance score from Scubed.
     */
    scubedNg3ModelScore?: number | null;
    /**
     * Tstar score is a signal that indicates the quality of the entity.
     */
    scubedTstarScore?: number | null;
  }
  /**
   * Features to be extracted from Provider GP for ranking in HGR. Next ID: 7
   */
  export interface Schema$AssistantGroundingRankerProviderGroundingProviderFeatures {
    /**
     * Cluster IDs for the provider. This field is repeated because some providers can be associated with multiple clusters. PRR specific feature.
     */
    providerClusterIds?: string[] | null;
    /**
     * ProviderId for the provider in the binding set. PRR specific feature.
     */
    providerId?: Schema$AssistantContextProviderId;
    /**
     * Provider signals extracted from Provider GP.
     */
    providerSignalResult?: Schema$AssistantGroundingProviderProviderSignalResult;
    /**
     * Provider quality score in the range [0,1] that can be used for ranking providers. Incorporates both policy rules and quality considerations.
     */
    pslScore?: number | null;
  }
  export interface Schema$AssistantLogsAllMediaStreamLog {
    /**
     * All active media streams while the user issues the query.
     */
    streams?: Schema$AssistantLogsMediaStreamLog[];
    /**
     * The stream selected by stream transfer logic to be transferred to another device. It will be empty for other features. Target_stream is different from target_device since target_stream could have multiple devices.
     */
    targetStream?: Schema$AssistantLogsMediaStreamLog;
  }
  /**
   * This message logs details on ambiguous device targeting logic. 1. It first takes a list of ambiguous devices 2. Then applies two filters: structure filter and playability filter. 3. If more than one device remains, it tiggers DeviceSelectionDialog to let the user pick one device.
   */
  export interface Schema$AssistantLogsAmbiguousTargetDeviceLog {
    /**
     * Device index of the initial ambiguous devices. The device index in this message is consistent with the device index in DeviceInfoLog. It would be used to track more detailed information of a device if needed.
     */
    ambiguousDeviceIndex?: number[] | null;
    /**
     * DeviceInfo for devices after the filters and promoters. - When device targeting is only configured for single target, these are ambiguous devices that would have been the output of Lumos. Downstream may perform extra check before disambiguation dialog. For example, Media Initiation checks playability for devices. The output here is before the check. - When configured for multi-target, these are just the target devices. For privacy consideration, we may only log device id field inside.
     */
    devicesAfterPromoters?: Schema$AssistantLogsDeviceInfoLog[];
    /**
     * the final targeted device selected by playability filter or DeviceSelectionDialog
     */
    finalTargetDevice?: Schema$AssistantLogsDeviceInfoLog;
    /**
     * Device index of the devices after playability filter
     */
    playabilityFilteredDevicesIndex?: number[] | null;
    /**
     * When there is no qualified devices after playability check, it would populate punt_info below. If all devices are filtered out for the same reason, there would only be one item. Otherwise, there will be multiple items.
     */
    puntInfoLog?: Schema$AssistantLogsAmbiguousTargetDeviceLogPuntInfoLog[];
    /**
     * Device index of the devices after structure filter
     */
    structureFilteredDeviceIndex?: number[] | null;
  }
  /**
   * PuntInfoLog is used to log why devices get filtered out during media content playability check. It contains media excuse, provider mid and also index of devices filtered by them.
   */
  export interface Schema$AssistantLogsAmbiguousTargetDeviceLogPuntInfoLog {
    /**
     * Index of devices that have the same punt info during playability check, i.e. same media_excuse and provider_mid.
     */
    deviceIndex?: number[] | null;
    /**
     * Excuse for media action triggering. See: assistant/verticals/media/proto/media_excuse.proto.
     */
    mediaExcuse?: number | null;
    /**
     * Provider id that the excuse belongs to. This is the KG MID of the provider, e.g., "/m/09jcvs" for Youtube.
     */
    providerMid?: string | null;
  }
  /**
   * This is the log version of apps.people.oz.external.mergedpeopleapi.DeviceContactInfo Next ID: 2
   */
  export interface Schema$AssistantLogsCommunicationDeviceContactInfoLog {
    /**
     * This list provides account information from the raw contact which is the source of this field.
     */
    rawContactInfo?: Schema$AssistantLogsCommunicationRawDeviceContactInfoLog[];
  }
  /**
   * This is the log version of fuzzy ngram match results that's used for generating the best fuzzy match. Next ID: 3
   */
  export interface Schema$AssistantLogsCommunicationFuzzyNgramMatchLog {
    relativeCost?: number | null;
    type?: string | null;
  }
  /**
   * From google3/quality/qrewrite/proto/account_provenance.proto;l=14 We need to copy this as the above proto has Enum field which is not compatible between proto2 and proto3. go/proto2-versus-proto3#enums
   */
  export interface Schema$AssistantLogsCommunicationGoogleAccountProvenance {
    email?: string | null;
    gaiaId?: string | null;
    isDasherAccount?: boolean | null;
  }
  /**
   * Contact meta data. Next ID: 30
   */
  export interface Schema$AssistantLogsCommunicationPersonalContactDataLog {
    /**
     * Google AccountProvenance of the contact.
     */
    accountProvenance?: Schema$AssistantLogsCommunicationGoogleAccountProvenance;
    /**
     * Populated if matched_name_type is GIVEN_NAME_ALIAS or FULL_NAME_ALIAS.
     */
    commonNameAliasConfidence?: number | null;
    /**
     * Concept id for relationships in English, e.g. "Mother" for all non-English locales. It's only populated for source = RELATIONSHIP.
     */
    conceptId?: string | null;
    /**
     * Integer value corresponding to DeviceContactExtraMetadata.Attribute enum. http://google3/social/graph/wire/proto/merged_person.proto?l=933&rcl=320308954
     */
    deviceContactAttributes?: number[] | null;
    /**
     * # emails stored for the contact.
     */
    emailIdCount?: number | null;
    /**
     * Populate only if ContactRecognitionAlternate.Source is 'FUZZY_CONTACT_MATCH'.
     */
    fuzzyNgramMatch?: Schema$AssistantLogsCommunicationFuzzyNgramMatchLog[];
    /**
     * Contact owner's gaia id from cs/symbol::symbol:quality_qrewrite.PersonalContactData.shared_contact_owner_gaia_id. Only populated for is_shared = true and non sign-out mode and user is not the owner of the contact(shared contact from other user). This field is not being logged in P2.
     */
    gaiaId?: string | null;
    /**
     * Boolean value indicating whether selected contact is from different account than the logged in account.
     */
    isContactFromSecondaryAccount?: boolean | null;
    /**
     * If this is a shared contact. This is true in 2 cases: - User is calling their own contacts that have been marked as shared. - User is calling shared contacts from some other user's contact list. This field is not being logged in P2.
     */
    isShared?: boolean | null;
    /**
     * Indicate the contact matches the transliterated query.
     */
    isTransliteratedMatch?: boolean | null;
    /**
     * True if the contact is a vanity contact(has email = user's email address).
     */
    isVanityContact?: boolean | null;
    /**
     * If the lookup was done using relationship which is visible to guests. This value will only be set if lookup was done using relationship. E.g. user has a guest relationship (doctor) -\> (John) And user says "call doctor", then this value will be true.
     */
    isVisibleToGuestsRelationship?: boolean | null;
    /**
     * The matched name type of a contact candidate.
     */
    matchedNameType?: string | null;
    /**
     * Alternate recognition term which was used to match this contact.
     */
    matchedRecognitionAlternateName?: string | null;
    /**
     * Ngram matched by starlight lookup for fuzzy matching in fulfillment. We need this to analyze how many contacts are returned by starlight lookup that is not matched by fuzzy matching. For example, "Komal Dear" is matched to "Komal Dr" by fuzzy match. When doing starlight lookup, "Komal" and "Dr" will be looked up separately. So "Dr xxx" will also be returned. We want to see how often this happens.
     */
    matchedStarlightLookupName?: string[] | null;
    /**
     * PersonMetadata of the selected contact.
     */
    metadata?: Schema$AssistantLogsCommunicationPersonMetadataLog;
    /**
     * The indices of the contact in |candidate_contact| whose name matches the |selected_contact_data|. |candidate_contact|: http://google3/logs/proto/assistant/contact.proto?l=111&rcl=306283376 |selected_contact_data|: http://google3/logs/proto/assistant/contact.proto?l=108&rcl=306283376
     */
    nameMatchedContactIndex?: number[] | null;
    /**
     * The original name in the query as transcribed by ASR.
     */
    originalQueryName?: string | null;
    /**
     * Information regarding the phone endpoints of the selected contact. Currently it is only logged for selected candidate.
     */
    phone?: Schema$AssistantLogsCommunicationPhoneLog[];
    /**
     * # phone_numbers stored for the contact.
     */
    phoneNumberCount?: number | null;
    /**
     * Encodes if pkg_person was resolved via a name or relationship reference.
     */
    pkgReferenceType?: string | null;
    /**
     * Populate only if ContactRecognitionAlternate.Source is not NONE.
     */
    recognitionAlternateScore?: number | null;
    /**
     * Recognition alternative source type. If not none, then it indicates the personal contact data is alternative and how the alternative is fulfilled.
     */
    recognitionAlternateSource?: string | null;
    /**
     * The number of resolved relationship names and contact pointers from Assistant Memory.
     */
    relationshipMemoryCount?: number | null;
    /**
     * Information regarding the selected phone endpoint. Currently it is only logged for selected candidate.
     */
    selectedPhone?: Schema$AssistantLogsCommunicationPhoneLog;
    /**
     * Shortcut information of the contact.
     */
    shortcutContactInfo?: Schema$MajelContactInformationShortcutInformation;
    /**
     * The contact source of a contact candidate.
     */
    source?: string | null;
    /**
     * Integer value corresponding to SystemContactGroup enum. http://google3/social/graph/wire/proto/merged_person.proto?l=3151&rcl=320308954
     */
    systemContactGroupId?: number[] | null;
    /**
     * DEPRECATED. Use phone instead. Used before 2020-01-13. Number of phone numbers annotated with Whatsapp.
     */
    whatsappPhoneNumberCount?: number | null;
  }
  /**
   * This is the log version of apps.people.oz.external.mergedpeopleapi.PersonMetadata Next ID: 2
   */
  export interface Schema$AssistantLogsCommunicationPersonMetadataLog {
    deviceContactInfo?: Schema$AssistantLogsCommunicationDeviceContactInfoLog[];
  }
  /**
   * This is the log version of apps.people.oz.external.mergedpeopleapi.Phone proto. Next ID: 3
   */
  export interface Schema$AssistantLogsCommunicationPhoneLog {
    /**
     * This list provides account information from the raw contact which is the source of this field.
     */
    rawDeviceContactInfo?: Schema$AssistantLogsCommunicationRawDeviceContactInfoLog[];
    /**
     * Label for phone number in the Contacts app. It can have standard values provided by the app e.g. MOBILE, HOME, WORK etc, but users are allowed to modify. So essentially it becomes user content.
     */
    type?: string | null;
  }
  /**
   * This is the log version of apps.people.oz.external.mergedpeopleapi.RawDeviceContactInfo proto. Next ID: 3
   */
  export interface Schema$AssistantLogsCommunicationRawDeviceContactInfoLog {
    /**
     * Account type of raw contact, e.g. "com.google" or "com.linkedin.android".
     */
    accountType?: string | null;
  }
  /**
   * Log device info of default speaker and tv
   */
  export interface Schema$AssistantLogsDefaultDeviceLog {
    defaultSpeaker?: Schema$AssistantLogsDeviceInfoLog;
    defaultTv?: Schema$AssistantLogsDeviceInfoLog;
    sourceDeviceId?: string | null;
  }
  export interface Schema$AssistantLogsDefaultDevicesLog {
    localDefaultDevices?: Schema$AssistantLogsDefaultDeviceLog;
    /**
     * Default settings of nearby devices.
     */
    nearbyDefaultDevices?: Schema$AssistantLogsDefaultDeviceLog[];
  }
  /**
   * Device annotation mention from query
   */
  export interface Schema$AssistantLogsDeviceAnnotationLog {
    /**
     * The raw text mentioning a device from the query, such as "any tv".
     */
    rawTextFromQuery?: string | null;
    /**
     * The annotation type mentioned in the query.
     */
    type?: string | null;
    /**
     * The matched device name set by the user, such as "big screen tv".
     */
    userDefinedName?: string | null;
  }
  /**
   * The information related to the device. Next ID: 18
   */
  export interface Schema$AssistantLogsDeviceInfoLog {
    /**
     * Device identifier string for the current device used in the arbitration service.
     */
    arbitrationDeviceId?: string | null;
    connectivity?: string | null;
    /**
     * The identification of the device. DeviceId (go/as-device-id) has multiple fields. To consloidate it to a single to make dremel easier, we use the string obtained by calling go/get-device-id.
     */
    deviceId?: string | null;
    /**
     * The identification of the device. The logging version of the full DeviceId.
     */
    deviceIdLog?: Schema$AssistantLogsSettingsDeviceIdLog;
    /**
     * We index linked devices and log these index to avoid logging device_id. device_index should always be a positive number or -1. -1 means this device is not in homegraph.
     */
    deviceIndex?: number | null;
    /**
     * This is the device_model_id field in device_settings proto. It has the same value for the same type of devices. e.g. Sonos.Sonos One.S13
     */
    deviceModelId?: string | null;
    /**
     * LINT.ThenChange(//depot/google3/assistant/context/proto/device_arbitration.proto:EstimatedRelativeDistance)
     */
    distance?: string | null;
    /**
     * The lumos processor which eliminated this device, if applicable
     */
    eliminatingLumosProcessor?: string | null;
    /**
     * The home structure id of the device.
     */
    homeStructureId?: string | null;
    isRemote?: boolean | null;
    /**
     * This flag indicates this is a non-local device that is tethered to local/originating device. Tethered device is a special case of is_remote and typically used in wearable scenarios. This is always false for local device and when it is true, it implies is_remote is also true.
     */
    isTethered?: boolean | null;
    mediaCapabilities?: Schema$AssistantLogsMediaCapabilities;
    mediaDeviceType?: string | null;
    /**
     * User defined device name
     */
    name?: string | null;
    /**
     * This field should be populated only when there is at least one session on this device.
     */
    sessions?: Schema$AssistantLogsDeviceMediaSessionLog[];
    /**
     * This field should be populated only when the device is an Assistant device.
     */
    surfaceType?: string | null;
  }
  /**
   * Log about the media session on a device.
   */
  export interface Schema$AssistantLogsDeviceMediaSessionLog {
    deviceId?: Schema$AssistantApiCoreTypesDeviceId;
    mediaSessionType?: string | null;
    /**
     * The type of the media session. If provider does not report this field, we ## compute it by mapping provider type to media type. Here is the mapping: |ProviderType |MediaItemMetadata.Type| |-------------------------------------- |MUSIC |TRACK | |VIDEO |VIDEO | |LIVE_TV |TV_CHANNEL | |AUDIOBOOK |AUDIO_BOOK | |PODCAST |PODCAST_EPISODE | ## |LIVE_STREAMING|VIDEO |
     */
    mediaType?: string | null;
    /**
     * The playback states of the session.
     */
    playbackState?: string | null;
    /**
     * The KG mid of the media provider.
     */
    providerMid?: string | null;
    supportedTransportControl?: string[] | null;
  }
  /**
   * Contains information logged in target device selection. See go/improve-device-targeting-logging for details. Next Id: 22
   */
  export interface Schema$AssistantLogsDeviceSelectionLog {
    /**
     * Default settings of all nearby devices Deprecated, use default_devices_log instead.
     */
    allDefaultDevices?: Schema$AssistantLogsDefaultDeviceLog[];
    /**
     * Logs all active media sessions.
     */
    allMediaStreamLog?: Schema$AssistantLogsAllMediaStreamLog;
    /**
     * DeviceSelectionLog for counterfactual logging.
     */
    counterfactualDeviceSelectionLog?: Schema$AssistantLogsDeviceSelectionLog;
    /**
     * Include default tv and default speaker Deprecated, use all_default_devices below.
     */
    defaultDevices?: Schema$AssistantLogsDefaultDeviceLog;
    defaultDevicesLog?: Schema$AssistantLogsDefaultDevicesLog;
    /**
     * Temporaray field for debugging ANDROID_AUTO multi_target_devices punt. This will be removed once we identify the root cause.
     */
    devicesStr?: string[] | null;
    inputErrorLog?: Schema$AssistantLogsInputErrorLog[];
    /**
     * Now we just log the media sessions on local device Deprecated, use NearbyDevicesLog::LocalDevice instead.
     */
    localDevice?: Schema$AssistantLogsDeviceInfoLog;
    /**
     * Indicates which library populated the device_selection_log for this query.
     */
    logDataSource?: string | null;
    /**
     * The Media Focus information. This field should be populated only when there is a Media Focus. Deprecated, use media_focuses below instead.
     */
    mediaFocus?: Schema$AssistantLogsMediaFocusInfoLog;
    /**
     * Media focuses on all devices.
     */
    mediaFocusesLog?: Schema$AssistantLogsMediaFocusesLog;
    /**
     * All nearby devices and local device.
     */
    nearbyDevicesLog?: Schema$AssistantLogsNearbyDevicesLog;
    /**
     * This should log the query annotation features found in the device, such as the device annotation, the room annotation, and the structure annotation from the query.
     */
    queryAnnotation?: Schema$AssistantLogsQueryAnnotationLog;
    /**
     * The result of device selection.
     */
    selectionResult?: Schema$AssistantLogsDeviceSelectionResultLog;
    testCodes?: Schema$AssistantLogsDeviceTargetingTestCode[];
  }
  /**
   * Log the selection result. Next ID: 11
   */
  export interface Schema$AssistantLogsDeviceSelectionResultLog {
    /**
     * Deprecated, please use qualified_devices.
     */
    ambiguousTargetDevices?: Schema$AssistantLogsAmbiguousTargetDeviceLog;
    deviceSelectionDecisionSummary?: Schema$AssistantLogsMediaDeviceSelectionDecisionSummary;
    deviceTargetingErrorType?: string | null;
    /**
     * The class name for the final filter/promoter used by Lumos for device targeting. This filter or promoter runs for all users, and contains no data specific to the individual user.
     */
    finalLumosStage?: string | null;
    /**
     * ////////////////////////////////////////////////////////////////////////// Ambiguous Results: the library failed to select the final target device(s) but it narrows down to a set of devices which are all valid target device candidates. The client needs to do further disambiguation, e.g., giving a dialog or having customized logic. The low confidence target device means the library falied to select the target device but it picked two devices for the client to do disambiguation.
     */
    lowConfidenceTargetDevice?: Schema$AssistantLogsLowConfidenceTargetDeviceLog;
    /**
     * ////////////////////////////////////////////////////////////////////////// This field log the error while selecting target device in media_focus_selector.
     */
    mediaFocusSelectionErrorType?: string | null;
    /**
     * The log for each stage of Lumos, showing the number of eliminated devices from each processor.
     */
    processorInfo?: Schema$AssistantLogsLumosProcessorInfo[];
    /**
     * We will apply several filters and dialogs to select a target device if media_focus_selector fail to select one. This field should log the devices left after each filter or dialog. It also log the detailed info of the final target device.
     */
    qualifiedDevices?: Schema$AssistantLogsAmbiguousTargetDeviceLog;
    /**
     * ////////////////////////////////////////////////////////////////////////// Unambiguous Results: the library successfully selected the final target device(s) and no further disambiguation is needed. Deprecated, please use target_device.
     */
    singleTargetDevice?: Schema$AssistantLogsDeviceInfoLog;
    targetDevice?: Schema$AssistantLogsTargetDeviceLog;
  }
  /**
   * Test code is used to track special events happening in Device Targeting Library. Next Id: 2
   */
  export interface Schema$AssistantLogsDeviceTargetingTestCode {
    type?: string | null;
  }
  export interface Schema$AssistantLogsInputErrorLog {
    errorCode?: number | null;
    errorType?: string | null;
  }
  /**
   * Represents the case where there is a target device with low confidence so that the library didn't directly target it. Instead, the library returns the low confidence target device and the fallback device for the client to decide to either trigger a dialog to disambiguate or select one of them based on extra business logic. Next ID: 3
   */
  export interface Schema$AssistantLogsLowConfidenceTargetDeviceLog {
    /**
     * The fallback device.
     */
    fallbackDeviceLog?: Schema$AssistantLogsDeviceInfoLog;
    /**
     * The selected low confidence focus device.
     */
    lowConfTargetDeviceLog?: Schema$AssistantLogsDeviceInfoLog;
  }
  export interface Schema$AssistantLogsLumosProcessorInfo {
    /**
     * Number of candidate devices after this stage is run.
     */
    devicesAfterRun?: number | null;
    /**
     * Number of candidate devices before this stage is run.
     */
    devicesBeforeRun?: number | null;
    /**
     * Name of the processor for this stage.
     */
    processorName?: string | null;
  }
  export interface Schema$AssistantLogsMediaCapabilities {
    canReceiveRemoteAction?: boolean | null;
    hasScreen?: boolean | null;
  }
  /**
   * A summary of the reasons that we chose a certain target device.
   */
  export interface Schema$AssistantLogsMediaDeviceSelectionDecisionSummary {
    deviceSelectionPreferenceUsed?: string | null;
    deviceSelectionReason?: string | null;
    miscSelectionSignal?: string[] | null;
  }
  /**
   * Following are the MDA compatible loggings for media focus, default settings and nearby devices.
   */
  export interface Schema$AssistantLogsMediaFocusesLog {
    dialogTriggered?: boolean | null;
    localMediaFocus?: Schema$AssistantLogsMediaFocusInfoLog;
    /**
     * Deprecated, use nearby_media_focuses instead.
     */
    mediaFocuses?: Schema$AssistantLogsMediaFocusInfoLog[];
    /**
     * MediaFouces found on nearby devices.
     */
    nearbyMediaFocuses?: Schema$AssistantLogsMediaFocusInfoLog[];
  }
  /**
   * The information related to Media Focus. TODO(b/138952173) Deprecate MediaFocusState in logs/proto/majel_gws/media_action_triggering_info.proto and assistant/verticals/media/proto/target_device_info.proto
   */
  export interface Schema$AssistantLogsMediaFocusInfoLog {
    /**
     * How long the device is in focus so far
     */
    currentFocusDurationSec?: number | null;
    /**
     * TODO(b/134944092) Log MediaFocusDialogTrigger Enum in focus_status.
     */
    dialogTriggered?: boolean | null;
    /**
     * LINT.ThenChange(//depot/google3/logs/proto/majel_gws/media_action_triggering_info.proto) The focus device.
     */
    focusDevice?: Schema$AssistantLogsDeviceInfoLog;
    /**
     * The media focus state at the time of the request.
     */
    mediaFocusState?: string | null;
    /**
     * The source device of media focus.
     */
    sourceDeviceId?: string | null;
  }
  /**
   * Media stream is composed of a media session and one or more devices which are hosting (playing) the session. Usually, a session is only hosted by one devcie. However, with cast group or stream transfer/expansion, a session could be hosted by multiple devices, which are playing the same session simultaneously.
   */
  export interface Schema$AssistantLogsMediaStreamLog {
    /**
     * The device index in this message is consistent with the device index in DeviceInfoLog. This field refers to the devices that hosting the session.
     */
    deviceIndex?: number[] | null;
    session?: Schema$AssistantLogsDeviceMediaSessionLog;
  }
  export interface Schema$AssistantLogsNearbyDevicesLog {
    /**
     * The timestamp that DeviceArbitration is created in milliseconds.
     */
    deviceArbitrationCreationTimestampMs?: string | null;
    /**
     * The timestamp that DeviceTargetingInput is built in milliseconds.
     */
    deviceTargetingInputCreationTimestampMs?: string | null;
    eliminatedByFurtherDistance?: number | null;
    eliminatedByLocalClosest?: number | null;
    eliminatedByUnknownDifferentRoom?: number | null;
    eliminatedByUnregisteredDevice?: number | null;
    localDevice?: Schema$AssistantLogsDeviceInfoLog;
    nearbyDevices?: Schema$AssistantLogsDeviceInfoLog[];
    numClosestDevices?: number | null;
    numEquallyCloseDevices?: number | null;
    numFurtherDevices?: number | null;
    numHearingDevices?: number | null;
    numUnknownDistanceDevices?: number | null;
  }
  /**
   * Provider annotation annotated from the query. These fields contain the detailed information for the provider. (e.g. for Youtube, package_names contains "com.google.android.youtube", localized_names contains "youtube", and lang contains "en" from "en-US" which depends on user's setting.)
   */
  export interface Schema$AssistantLogsProviderAnnotationLog {
    lang?: string | null;
    localizedNames?: string[] | null;
    packageNames?: string[] | null;
  }
  /**
   * Log about the query requirements
   */
  export interface Schema$AssistantLogsQueryAnnotationLog {
    /**
     * Deprecated, please use room_annotations.
     */
    deviceAnnotation?: Schema$AssistantLogsDeviceAnnotationLog;
    /**
     * Log the device annotations mentioned in the query.
     */
    deviceAnnotations?: Schema$AssistantLogsDeviceAnnotationLog[];
    /**
     * Log the provider annotations annotated from the query.
     */
    providerAnnotation?: Schema$AssistantLogsProviderAnnotationLog;
    /**
     * TODO(b/171250187) Deprecates the optional RoomAnnotationLog and DeviceAnnotationLog. Deprecated, please use device_annotations.
     */
    roomAnnotation?: Schema$AssistantLogsRoomAnnotationLog;
    /**
     * Log the room annotations mentioned in the query.
     */
    roomAnnotations?: Schema$AssistantLogsRoomAnnotationLog[];
    /**
     * Log the structure annotations mentioned in the query.
     */
    structureAnnotations?: Schema$AssistantLogsStructureAnnotationLog[];
  }
  /**
   * Annotate a single reminder instance.
   */
  export interface Schema$AssistantLogsReminderLog {
    /**
     * The reminder is created N seconds ago. This helps tracking how the user issues follow-up actions after reminder is created. For example, whether the user likes to issues another [show reminders] query right after reminder is created?
     */
    createdSecondsAgo?: string | null;
    /**
     * If the reminder is retrieved by a ranking class (see go/opa-reminders-ranker), this will be populated with the class info. Refer to assistant.productivity.ReminderRankingClass.RankingType. Since that proto is in proto2 format, we can only wire by int type.
     */
    retrievedRankingClass?: number | null;
  }
  /**
   * Room annotation mentioned in query.
   */
  export interface Schema$AssistantLogsRoomAnnotationLog {
    /**
     * The raw text mentioning a room from the query, such as "my living room".
     */
    rawTextFromQuery?: string | null;
    /**
     * The number of rooms annotated, if there are multiple structures. They are guaranteed to have the same text_from_query and name due to exact matching.
     */
    roomCount?: number | null;
    /**
     * The annotation type mentioned in the query.
     */
    type?: string | null;
    userDefinedName?: string | null;
  }
  /**
   * The logging-version of DeviceId proto, which identifies a device. This mirrors cs/google3/assistant/api/core_types/device_type.proto?q=symbol:DeviceId Next ID: 6
   */
  export interface Schema$AssistantLogsSettingsDeviceIdLog {
    /**
     * The client_instance_id on devices with GSA. See 'client_instance_field' in go/androidids.
     */
    agsaClientInstanceId?: string | null;
    /**
     * A unique device ID for Assistant devices as proposed by go/ocelot-team.
     */
    canonicalDeviceId?: string | null;
    /**
     * If set, indicates that the device is a cast device, and contains the UUID of the cast device. Corresponds to the device_id field of the CastDevice proto.
     */
    castDeviceId?: string | null;
    /**
     * DUSI (go/dusi) is used as the identifier here. This identifier is unique to the user and device. This will help identify which device or application the user's request originated from. This is not to be confused with the client_instance_id that android devices provide. This is currently used by surfaces that use the assistant-legacy-nexus and assistant-legacy-clockwork pipelines. DUSI is created and set in S3. This field is only filled for GAIA requests.
     */
    clientInstanceId?: string | null;
    /**
     * The unique device ID for HomeGraph devices. This is the HomeGraph ID, created when the device is registered into HomeGraph. It is immutable for the same device unless it is completely deleted and recreated. See go/home-graph for details. \}
     */
    homeGraphDeviceId?: string | null;
    /**
     * The unique ID for libassistant based devices.
     */
    libassistantDeviceId?: string | null;
  }
  /**
   * Structure annotation mentioned in query.
   */
  export interface Schema$AssistantLogsStructureAnnotationLog {
    /**
     * The raw text mentioning a structure from the query, such as "my house".
     */
    rawTextFromQuery?: string | null;
    /**
     * The annotation type mentioned in the query.
     */
    type?: string | null;
    userDefinedName?: string | null;
  }
  /**
   * Represents the case where the library successfully selects the target device. It could be one or multiple devices. Next ID: 4
   */
  export interface Schema$AssistantLogsTargetDeviceLog {
    devices?: Schema$AssistantLogsDeviceInfoLog[];
    lowConfidenceReason?: string | null;
    resultConfidenceLevel?: string | null;
  }
  export interface Schema$AssistantPfrDeviceRdMetadata {
    deviceName?: string | null;
    deviceTypes?: string[] | null;
    effectiveArgSpanLength?: number | null;
    /**
     * True if there are more than one possible resolutions to the RD.
     */
    hasAmbiguousResolutions?: boolean | null;
    /**
     * True if there's at least one device id that gets resolved. Note this is different from is_grounded = true: it is possible that is_grounded = false (num_grounded_args =0) but there is resolved device ids. E.g.: "turn on the blue light" Power_on(device_object = [d1, d2]:RD(category=DeviceObject(name='blue light')) where there are "blue light 1" and "blue light 2" hence two resolved device ids. But since the quantifier is single, GB can't resolve the ambiguity and would set num_grounded_args = 0 to indicate such unresolved ambiguity.
     */
    hasResolvedDeviceId?: boolean | null;
    roomName?: string | null;
  }
  /**
   * Used by the Smarthome Business Rules twiddler to determine whether to replace the top-scoring Smarthome intent with another.
   */
  export interface Schema$AssistantPfrSmartHomeIntentMetadata {
    /**
     * Each DeviceRdMetadata represents one device RD (device slot) in the intent. Note that each device RD could have multiple device groundings inside of it.
     */
    deviceRdMetadata?: Schema$AssistantPfrDeviceRdMetadata[];
    intentName?: string | null;
    /**
     * When num_constraints == num_constraints_satisfied, indicating all slot matchings are exact match.
     */
    isExactMatch?: boolean | null;
    /**
     * When num_grounded_args \> 0, indicating there is at least one top-level argument is grounded.
     */
    isGrounded?: boolean | null;
  }
  /**
   * Signals to be used by the Prefulfillment Ranker. Derived from the ParsingSignals and GroundingSignals carried by the FunctionCall. LINT.IfChange Next ID: 62
   */
  export interface Schema$AssistantPrefulfillmentRankerPrefulfillmentSignals {
    /**
     * Assistant User Interaction Score for binding set.
     */
    bindingSetAuis?: number | null;
    /**
     * BindingSet level invalid reason. This is only useful when the bindingset is invalid after running the horizontal check in HGR. More details: go/gb-infeasible.
     */
    bindingSetInvalidReason?: string | null;
    /**
     * Pauis score for the binding set
     */
    bindingSetPauis?: number | null;
    /**
     * BindingSet level validity. When one of the GPs returns invalid resolution, or the combined bindingset is invalid, this enum will indidate the validity. More details: go/gb-infeasible.
     */
    bindingSetValidity?: string | null;
    /**
     * A parsing score that is independently calibrated by each parser/IG.
     */
    calibratedParsingScore?: number | null;
    /**
     * Whether the intent is dominant according to NSP deep-media.
     */
    deepMediaDominant?: boolean | null;
    /**
     * Indicates interpretation dominance predicted by KScorer
     */
    dominant?: boolean | null;
    /**
     * The total effective length of the spans for the arguments used to construct the parse. May include vertical specific adjustments. Eg: For the query [delete my 7 p.m. alarm called chicken] and intent Delete_alarm(alarm_object=RD(category=AlarmObject( label="chicken", trigger_time_datetime=<< 7 PM \>\>))), the effective argument span is "7 p.m." + "chicken" (total length of 13).
     */
    effectiveArgSpanLength?: number | null;
    /**
     * Whether this is a fulfillable, dominant Media intent.
     */
    fulfillableDominantMedia?: boolean | null;
    /**
     * Whether or not the intent was generated by a legacy Aqua domain that PFR should care about.
     */
    generatedByLegacyAquaDomain?: boolean | null;
    /**
     * Grounding Signals. Score indicating how grounded the intent is, populated by the Grounding Box.
     */
    groundabilityScore?: number | null;
    /**
     * Grounding Provider related ranking features, including general Grounding Provider ranking features(shared among multiple GPs) and specific Grounding Provider ranking features(provided by a specific GP).
     */
    groundingProviderFeatures?: Schema$AssistantGroundingRankerGroundingProviderFeatures;
    /**
     * Whether the interpretation has a Search answer group object, signifying it came from Search resolution.
     */
    hasAnswerGroup?: boolean | null;
    /**
     * This is a cross-intent feature which is calculated by iterating all intent candidates. This feature should be populated in post-IG stage (before GB).
     */
    inQueryMaxEffectiveArgSpanLength?: number | null;
    /**
     * intent_name is used by PFR ensemble model. See go/pfr_ha_launch_doc
     */
    intentName?: string | null;
    /**
     * QUS intent-based ranking signals. Assistant User Interaction Score which is aggregated using intent name.
     */
    intentNameAuisScore?: number | null;
    /**
     * Assistant User Interaction Score which is aggregated using intent name from exp laelaps.
     */
    intentNameAuisScoreExp?: number | null;
    /**
     * Intent level Pauis User Interaction Score.
     */
    intentNamePauis?: number | null;
    /**
     * intent_type differentiates between intents that share the top level intent name. For eg: for TV_FALLBACK_SEARCH_INTENT, the top level intent name must be "Find_media" and the media_object argument within it must be of type "Media_unspecified".
     */
    intentType?: string | null;
    /**
     * Feasibility of fulfilling the binding set. Eg: For PlayMedia, this is equivalent to playability. More details: go/hgr-feasibility-feature.
     */
    isFeasible?: boolean | null;
    /**
     * Whether the intent is fully grounded.
     */
    isFullyGrounded?: boolean | null;
    /**
     * Used for PFR manual rule to prefer high confidence podcast intent (e.g. topical, genre) over generic podcast intents.
     */
    isHighConfidencePodcastIntent?: boolean | null;
    /**
     * Whether the intent is a media control intent.
     */
    isMediaControlIntent?: boolean | null;
    /**
     * Whether the intent is a PlayGenericMusic-type intent.
     */
    isPlayGenericMusic?: boolean | null;
    /**
     * Used for PFR manual rule to prefer high confidence podcast intent (e.g. topical, genre) over generic podcast intents.
     */
    isPodcastGenericIntent?: boolean | null;
    /**
     * Whether the intent is a podcast intent.
     */
    isPodcastIntent?: boolean | null;
    /**
     * Whether the intent is an intent marked disabled by the Sage IG.
     */
    isSageDisabledIntent?: boolean | null;
    /**
     * Whether this intent was generated by Sage.
     */
    isSageIntent?: boolean | null;
    /**
     * Whether the intent is a media object tvm intent.
     */
    isTvmIntent?: boolean | null;
    /**
     * Whether the intent is a Smarthome-domain intent with valid device arguments.
     */
    isValidSmarthomeIntent?: boolean | null;
    /**
     * Whether the intent is a media object video intent.
     */
    isVideoIntent?: boolean | null;
    /**
     * The rank order of the interpretation as determined by kscorer. The kscorer-determined dominant interpretation, if any, gets a rank of 0. The remaining N interpretations get a rank of 1 through N.
     */
    kscorerRank?: number | null;
    /**
     * Learn and adapt(go/laa) related features. Design doc: go/laa-profile-signal-for-grounding.
     */
    laaFeatures?: Schema$AssistantGroundingRankerLaaFeatures;
    /**
     * This feature is always false / no-op in serving time. In training time, this feature may be set true on specific examples for weighted training where when this signal is true, only cross-intent level features are used for training and other candidate level features are masked (set as missing).
     */
    maskCandidateLevelFeatures?: boolean | null;
    /**
     * The maximum score assigned by the Horizontal Grounding Ranker (HGR) across all of the intent's binding sets.
     */
    maxHgrScoreAcrossBindingSets?: number | null;
    /**
     * Rank of the intent as reported by NSP.
     */
    nspRank?: number | null;
    /**
     * Number of alternative hypotheses from speech recognition(S3).
     */
    numAlternativeHypothesis?: number | null;
    /**
     * Sum of the number of constraints used by the Grounding Box to ground each variable.
     */
    numConstraints?: number | null;
    /**
     * Sum of the number of constraints satisfied for each variable. Depending on the match score for a constraint, this number can be fractional and is in the range [0, num_constraints]. Populated by the Grounding Box.
     */
    numConstraintsSatisfied?: number | null;
    /**
     * Number of groundable arguments the intent has, populated by the Grounding Box.
     */
    numGroundableArgs?: number | null;
    /**
     * Number of grounded arguments the intent has, populated by the Grounding Box.
     */
    numGroundedArgs?: number | null;
    /**
     * Signals as proposed in go/improved-grounding-signals. Number of arguments, possibly nested, that the Grounding Box tried to ground.
     */
    numVariables?: number | null;
    /**
     * Number of arguments, possibly nested, that the Grounding Box was able to ground. This includes ambiguously grounded arguments.
     */
    numVariablesGrounded?: number | null;
    /**
     * A ID corresponding to which bucket a given parsing score belongs in.
     */
    parsingScoreMse8BucketId?: number | null;
    /**
     * Query understanding phase the intent was produced in.
     */
    phase?: string | null;
    /**
     * Cosine similarity between predicted query-to-term model and assistant intent-type-based salient terms. This is intended to be only used for ACE ranking and only populated for assistant traffic.
     */
    pq2tVsAssistantIbstCosine?: number | null;
    /**
     * Cosine similarity between predicted query-to-term model and intent-type-based salient terms. This is intended to be used as a backoff to pq2t_vs_qibst_cosine if it is missing.
     */
    pq2tVsIbstCosine?: number | null;
    /**
     * Intent confidence predicted by the AssistantVerticalClassifier QRewrite servlet.
     */
    predictedIntentConfidence?: number | null;
    /**
     * Used in HGR to modify the ranker based on input experimental flag and intent name.
     */
    rankerName?: string | null;
    /**
     * The determination made by the SearchDispatchingConfig as to whether and how this interpretation should be dispatched to Search.
     */
    searchDispatch?: string | null;
    /**
     * SmartHome intent metadata used for the SmartHome business-rules twiddler.
     */
    smarthomeIntentMetadata?: Schema$AssistantPfrSmartHomeIntentMetadata;
    subIntentType?: string | null;
    /**
     * Average of per-word confidence for top speech recognition hypothesis. The value is from RecognizerHypothesisLog: http://google3/logs/proto/speech/service/recognizer_log.proto?l=848&rcl=281400256
     */
    topHypothesisConfidence?: number | null;
    /**
     * Horizontal feature that stores information about confidence scores for each resolution within the binding set.
     */
    verticalConfidenceScore?: number | null;
  }
  /**
   * A message to represent an item in a list. Just a basic string for now, but extensible for the future.
   */
  export interface Schema$AssistantProductivityListItem {
    /**
     * [REQUIRED] The name of the list item.
     */
    name?: string | null;
  }
  /**
   * Proto descrbing an attachment to an Assistant Reminder. If the attachment has different behavior on different surfaces (e.g., deeplinks), there will be multiple attachments attach to the Reminder. Each of them will specify the surface type and the corresponding deeplink.
   */
  export interface Schema$AssistantRemindersAttachment {
    /**
     * REQUIRED. An unique identifier for the attachment. We have a plan to index this field, so it's marked as REQUIRED. Chat with opa-reminders-eng@ if you have a use case without an attachment ID.
     */
    id?: string | null;
    link?: Schema$AssistantRemindersAttachmentLink;
    /**
     * REQUIRED. Surface types this attachment should be shown.
     */
    surfaceType?: string[] | null;
  }
  export interface Schema$AssistantRemindersAttachmentLink {
    /**
     * REQUIRED. The link to surface to frontends (e.g., Hubpage, notifications.) This could also be a surface-specific deeplink (be sure to set `surface_type` accordingly.)
     */
    linkUrl?: string | null;
    /**
     * REQUIRED. The text for the notification link button. Note: We cannot take nlp_generation.TemplateData yet due to cyclic dependency. The plan is to cut dependency from TemplateData to quality.actions.Reminder.
     */
    notificationText?: Schema$AssistantRemindersNlgTemplateKey;
  }
  /**
   * Since this is stored in BE, any update on this proto needs LGTM by ARIS storage owner
   */
  export interface Schema$AssistantRemindersMemoryPayload {
    /**
     * Whether the reminder created has a referenced_entity attached to it or not(go/hub-memory-payload). Since we plan to set this in Assistant reminder creation path flow, in case later the referenced_entity is removed from the reminder, then this bit might still remain true. Also in case referenced_entity is later added to reminder(for example when referenced_entity is attached by Server), then also this bit might remain false. This bit will be used to *guess* if the user has a memory-enabled AGSA, thus we'll surface the "open memory" button on hubpage. This check is not perfect, as the user might have other phones with older AGSA, so this is just a *best guess*. This field won't be stored in Memory backend, and will not be populated back when retrieving reminders.
     */
    hasReferencedEntityAtCreation?: boolean | null;
    /**
     * Id of record that is associated with Reminder. This will be set for all Assistant reminders created after the first launch of the Reminder Memory integration, see go/reminders-memory for more details. Also, this might apply to all other types of reminders.
     */
    recordId?: string | null;
  }
  /**
   * Equivalent to nlp_generation.TemplateKey. We cannot use nlp_generation.TemplateKey message directly becasue that proto is defined in a relatively large proto and has other dependencies, which will increase the size unnecessary and might hit many limitations (e.g., 5MiB limitation for Spanner type environment.).
   */
  export interface Schema$AssistantRemindersNlgTemplateKey {
    /**
     * REQUIRED.
     */
    messageSet?: string | null;
    /**
     * REQUIRED.
     */
    templateName?: string | null;
  }
  export interface Schema$AssistantTeleportTeleportNicknameSignals {
    /**
     * Whether the nickname could also refer to a location. For example, "walmart", "starbucks".
     */
    hasLocationInterpretation?: boolean | null;
    /**
     * Indicates whether the user has the app installed.
     */
    installInfo?: string | null;
    /**
     * True when the name is generic, i.e when it could refer to multiple packages from different developrs. For example, "mail" is considered a generic name (since it can refer to "gmail", "yahoo mail" etc.) but "facebook" although could refer to both "facebook" and "facebook lite" is not considered generic (both packages are from the same third party).
     */
    isGeneric?: boolean | null;
    /**
     * The tier of the nickname.
     */
    nicknameTier?: string | null;
    source?: string | null;
  }
  /**
   * Neural contact match signals.
   */
  export interface Schema$AssistantVerticalsCommonContactMatchSignal {
    /**
     * Neural contact match similarity score.
     */
    matchScore?: number | null;
  }
  /**
   * Metadata for Actions-on-Google configuration.
   */
  export interface Schema$AssistantVerticalsHomeautomationProtoActionProjectConfig {
    /**
     * Actions-on-Google action context ID. See go/sdm-hospitality-design.
     */
    contextId?: string | null;
  }
  /**
   * An agent + device pair that uniquely identifies a device.
   */
  export interface Schema$AssistantVerticalsHomeautomationProtoAgentDeviceId {
    /**
     * The agent's ID. Generally it is the agent's Google pantheon project id.
     */
    agentId?: string | null;
    /**
     * Device ID defined by the agent.
     */
    deviceId?: string | null;
  }
  /**
   * AgentInformation represents the details needed to support both 1P and 3P partnerships for Home Automation. Next ID: 7
   */
  export interface Schema$AssistantVerticalsHomeautomationProtoAgentInformation {
    authType?: string | null;
    deviceSource?: string | null;
    executionPath?: string | null;
    /**
     * Unique Agent ID which maps to a specific Agent. Not using Agent Name here as it may change over time.
     */
    id?: string | null;
    /**
     * Agent's foreign key that uniquely identifies a user's device.
     */
    key?: string | null;
  }
  /**
   * Protos representing device or structure attributes. See go/hgs-attributes-protos. Only protos approved and formalized by assistant/HG team should be added here.
   */
  export interface Schema$AssistantVerticalsHomeautomationProtoAttribute {
    structureBasedRoutine?: Schema$AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutine;
  }
  /**
   * LINT.IfChange(proto_attributes)
   */
  export interface Schema$AssistantVerticalsHomeautomationProtoAttributes {
    attributeProtos?: Schema$AssistantVerticalsHomeautomationProtoAttribute[];
  }
  /**
   * LINT.IfChange(proto_event_trigger) Next id: 5
   */
  export interface Schema$AssistantVerticalsHomeautomationProtoCommonEventTrigger {
    enabled?: boolean | null;
    /**
     * Detailed settings for the event trigger; unset if not applicable.
     */
    eventTriggerPayload?: {[key: string]: any} | null;
    /**
     * Different event type may have different settings. For example: * SCHEDULED will have event_trigger_payload of cs/symbol:assistant.verticals.voice_shortcut.proto.Schedule * LOCATION will have event_trigger_payload of cs/symbol:assistant.verticals.voice_shortcut.proto.LocationTriggerEvent
     */
    eventTriggerType?: string | null;
    /**
     * Unique identifier for the EventTrigger, e.g. SCHEDULED_ROUTINES. See the enum values of cs/symbol:WorkflowTriggerInput.TriggerSource
     */
    triggerSource?: number | null;
  }
  /**
   * Routines team stores the core Structure Based Routine data as the payload. We will add specific metadata on a per-need basis. LINT.IfChange(proto_structure_based_routine) Next id: 12 These two forms of payload are equivalent data in different formats and both will be stored in Home Graph. 1. The internal format will fan out to the DynamicEntity Footprints for read in Settings flow and Execution. 2. The UI format will be stripped out upon replication to DynamicEntity Footprints due to its redundancy and the Footprints data size limit, i.e. DE Footprints will only contain the internal format.
   */
  export interface Schema$AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutine {
    /**
     * Whether this Routine is enabled or not. If false, then this Routine can't be triggered by Voice.
     */
    enabled?: boolean | null;
    /**
     * The unique identifier for a class of workflows. For example: * "sbr_001" =\> Away * "sbr_002" =\> Home * "category_template" =\> CUSTOM
     */
    googlePreconfigWorkflowId?: string | null;
    language?: string | null;
    /**
     * Internal format payload primarily for Routines team use.
     */
    payload?: {[key: string]: any} | null;
    /**
     * The security level of the Structure Based Routine as determined by the most security-sensitive task.
     */
    securityLevel?: string | null;
    shared?: boolean | null;
    storagePayload?: {[key: string]: any} | null;
    structureId?: string | null;
    /**
     * Voice or event triggers.
     */
    triggers?: Schema$AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineTrigger[];
    type?: string | null;
    /**
     * UI format payload primarily for external team use.
     */
    uiPayload?: {[key: string]: any} | null;
  }
  /**
   * Next id: 3
   */
  export interface Schema$AssistantVerticalsHomeautomationProtoCommonStructureBasedRoutineTrigger {
    eventTrigger?: Schema$AssistantVerticalsHomeautomationProtoCommonEventTrigger;
    voiceTrigger?: Schema$AssistantVerticalsHomeautomationProtoCommonVoiceTrigger;
  }
  /**
   * LINT.IfChange(proto_voice_trigger) Next id: 2
   */
  export interface Schema$AssistantVerticalsHomeautomationProtoCommonVoiceTrigger {
    query?: string | null;
  }
  /**
   * The Concierge features a structure is eligible for. See {@link home.graph.common.ConciergeFeatures\}.
   */
  export interface Schema$AssistantVerticalsHomeautomationProtoConciergeFeatures {
    conciergeProductFeatures?: string[] | null;
  }
  /**
   * Next ID: 5
   */
  export interface Schema$AssistantVerticalsHomeautomationProtoDeviceTargetingOutputQueryInfo {
    /**
     * The query span for device mention.
     */
    annotatedSpanDevice?: string | null;
    /**
     * The query span for room mention.
     */
    annotatedSpanRoom?: string | null;
    /**
     * The query span for structure mention.
     */
    annotatedSpanStructure?: string | null;
    /**
     * This field is from query_info.processed_mentioned_span in DTO.
     */
    processedMentionedSpan?: string | null;
  }
  /**
   * Next ID: 9
   */
  export interface Schema$AssistantVerticalsHomeautomationProtoHomeAutomationDevice {
    /**
     * the next 3 fields are for Lumos output (DTO) that needs to be propagated to the Fulfilment through the HomeAutomationDevice proto.
     */
    deviceSelectionLog?: Schema$AssistantLogsDeviceSelectionLog;
    dtoError?: Schema$AssistantDeviceTargetingDeviceTargetingError;
    /**
     * This field is from query_info in DTO.
     */
    dtoQueryInfo?: Schema$AssistantVerticalsHomeautomationProtoDeviceTargetingOutputQueryInfo;
    /**
     * Device meta data.
     */
    homeautomationMetadata?: Schema$AssistantVerticalsHomeautomationProtoHomeAutomation_MetaData;
    /**
     * list of HomeAutomationDeviceItem. After migration completes, we will mark the above 4 field as deprecated and only use this field.
     */
    list?: Schema$AssistantVerticalsHomeautomationProtoHomeAutomationDeviceItem[];
    /**
     * Corresponding to casse matched_item CustomTypeItem key.
     */
    matchedItemKey?: string | null;
    /**
     * Corresponding to casse Argument raw_value.
     */
    matchedItemRawvalue?: string | null;
    /**
     * Corresponding to casse matched_item CustomTypeItem value.
     */
    matchedItemValue?: string[] | null;
  }
  export interface Schema$AssistantVerticalsHomeautomationProtoHomeAutomationDeviceItem {
    /**
     * Device meta data.
     */
    homeautomationMetadata?: Schema$AssistantVerticalsHomeautomationProtoHomeAutomation_MetaData;
    /**
     * Corresponding to casse matched_item CustomTypeItem key.
     */
    matchedItemKey?: string | null;
    /**
     * Corresponding to casse Argument raw_value.
     */
    matchedItemRawvalue?: string | null;
    /**
     * Corresponding to casse matched_item CustomTypeItem value.
     */
    matchedItemValue?: string[] | null;
  }
  /**
   * Next ID: 45
   */
  export interface Schema$AssistantVerticalsHomeautomationProtoHomeAutomation_MetaData {
    /**
     * Custom actions that this item supports.
     */
    actionProjectConfigs?: Schema$AssistantVerticalsHomeautomationProtoActionProjectConfig[];
    /**
     * Agent details.
     */
    agentInformation?: Schema$AssistantVerticalsHomeautomationProtoAgentInformation;
    /**
     * Device ID that matches the ID passed from the device to discourse_context when a user issues a query to an Assistant-enabled device that is registered with Cast (via CCS (see go/castservers)), or some other service.
     */
    assistantDeviceId?: string | null;
    /**
     * Attributes data as provided from SYNC. This gets used in mutation and execution and in some potential cases, in biasing.
     */
    attributes?: {[key: string]: any} | null;
    /**
     * See Device.creator_gaia_ids in //home/graph/proto/service/types.proto. If empty, the GAIA ID from the request EUC is assumed to be the creator. We only need at most one creator_gaia_id.
     */
    creatorGaiaId?: string | null;
    /**
     * Any types that are not the given item type, but derived later. For example, if an item has type action.devices.types.OUTLET but is named "floor lamp" we can derive that it also has type action.devices.types.LIGHT. Also considered along with |type| when triggering type-based actions.
     */
    derivedType?: string[] | null;
    /**
     * See note in home_graph.proto; loaded into DE now to avoid having to double-read assistant settings records as per go/smarthome-removing-assistant-settings
     */
    deviceModelId?: string | null;
    /**
     * GCM address for cloud execution across google cloud messaging rather than 3p cloud.
     */
    gcmExecutionAddress?: string | null;
    /**
     * List of parent group IDs, if the device is added to one or multiple device groups (see go/home-groups). Will be consumed by Smart Home APIs and (in the future) Assistant CTF to populate the group member list of device groups.
     */
    groupIds?: string[] | null;
    /**
     * The hash value from go/de-consistency-check
     */
    hashValue?: string | null;
    /**
     * Whether local home platform should discover new devices via LAN for the structure.
     */
    lanscanOptedIn?: boolean | null;
    /**
     * Matter Unique ID. Contains VID/PID information
     */
    matterUniqueId?: Schema$AssistantVerticalsHomeautomationProtoMatterUniqueId;
    /**
     * Model name from HomeGraph, populated from model_manifest.model_name. See b/200087451.
     */
    modelName?: string | null;
    /**
     * Indicates whether notifications have been enabled by a user and will be announced for this device. This is set by the user within the Google app settings, and Google will announce the device notification only if both notification_supported_by_agent and notification_enabled_by_user are true.
     */
    notificationEnabledByUser?: boolean | null;
    /**
     * Indicates whether the device is capable of sending notifications. This field will be set by the agent (partner) on an incoming SYNC. If a device is not capable of generating notifications, the partner should set this flag to false. If a partner is not capable of calling ReportStateAndNotification to send notifications to Google, the partner should set this flag to false. If there is a user setting in the partner app to enable notifications and it is turned off, the partner should set this flag to false.
     */
    notificationSupportedByAgent?: boolean | null;
    /**
     * Store custom data for agent calls here. This will likely be short-lived -- we will replace this with calls to HGS. (Note: This may end up not temporary if we only need it for a couple partners -- more efficient to have it on a few users than require HGS reads for all users.
     */
    opaqueCustomData?: string | null;
    /**
     * Operational CHIP Node ID that combines the fabric ID and node id in format of . (Hex format without 0x prefix, for example, 0F001234FA67AA39.1234ABCD1111DDDD).
     */
    operationalNodeId?: string | null;
    /**
     * Other agent id + foreign id pairs associated with the device. This can be used to represent a group of devices (e.g. Sonos' bonded zone) as a single device, or a device that comes in through different sync flows (e.g. Newman with a Nest camera).
     */
    otherDeviceIds?: Schema$AssistantVerticalsHomeautomationProtoAgentDeviceId[];
    /**
     * Additional device sources. This can be the result of the device being merged with other devices with a different source.
     */
    otherDeviceSources?: string[] | null;
    /**
     * LINT.IfChange(home_graph_single_parent) At the moment, we just have a single string. In future this will expand with additional metadata from client or cloud execution data store. In today's 'tree' HomeGraph each object has a single parent. In the future this may have a mesh for complex cases -- zones, doors, etc -- so we make this a repeated element today. LINT.ThenChange(//depot/google3/assistant/assistant_server/settings/user_defined_actions/footprints/footprint_accessor.cc:home_graph_single_parent)
     */
    parentNode?: string[] | null;
    /**
     * The type of the parent. Currently only set for devices, to distinguish between structure and room parents. Items currently have only one parent, and entries after the first parent_type are ignored.
     */
    parentType?: string[] | null;
    /**
     * User-given nicknames for an entity (e.g. "My house"). These nicknames are unique to the gaia user. Nickname in DeviceInfo is per-entity level nickname, while personalized_nicknames is per-user per-entity.
     */
    personalizedNicknames?: string[] | null;
    /**
     * Stores the location for the STRUCTURE type.
     */
    physicalLocation?: Schema$AssistantVerticalsHomeautomationProtoPhysicalLocation;
    /**
     * We use this to determine if the synonyms matched in the aqua interpretation is plural. Then we will return disambiguate dialog or execute commands with all the targets.
     */
    plural?: string[] | null;
    /**
     * Which of the values was the original, user-provided name -- or our disambiguated, cleaned-up version of it. This is what we use in TTS when we need to identify an object that wasn't just spoken uniquely by the user -- in disambiguation dialogue, or in response to a collective interrogative (e.g. "what lights are on in the kitchen?")
     */
    primaryName?: string | null;
    /**
     * Whether device report state is out of sync with Query response.
     */
    reportStateStatus?: string | null;
    /**
     * User's role information for this device. This will be used in Home Automation server to decide if user has authority to fulfill its request.
     */
    roleInformation?: Schema$AssistantVerticalsHomeautomationProtoRoleInformation;
    /**
     * Only present for a target device. Indicates this target device is reachable by a local (AoGH) path via an AoGH device.
     */
    routableViaGcm?: boolean | null;
    /**
     * SAFT Document with linguistic annotations for the primary device name.
     */
    saftDocument?: Schema$NlpSaftDocument;
    /**
     * Data needed for SDM (fleet management). See go/enterprise-id-in-assistant.
     */
    smartDeviceManagementData?: Schema$AssistantVerticalsHomeautomationProtoSmartDeviceManagementData;
    /**
     * SmartHome feature flags that may be enabled per-item.
     */
    smartHomeFeatures?: Schema$AssistantVerticalsHomeautomationProtoSmartHomeFeatures;
    /**
     * The features that are available for a structure. Will only be populated if the item_type == STRUCTURE.
     */
    supportedStructureFeatures?: Schema$AssistantVerticalsHomeautomationProtoSupportedStructureFeatures;
    /**
     * Map from agent ID to supported traits. Some devices (e.g. Newman) have multiple agents, with each agent being associated with a specific set of traits. This could alternatively have been formatted as map as {trait, agent\} pairs instead of the {agent, list of trait\} pairs, but we retain this format to be consistent with HomeGraph's representation. In practice, a trait should only be paired with a single agent (i.e. we should not have two agents with the same trait in their value list). This field is optional and should only be provided if the item has multiple agents.
     */
    supportedTraitsByAgent?: {
      [
        key: string
      ]: Schema$AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataSupportedTraits;
    } | null;
    /**
     * This device supports direct response -- if the device itself is issuing the query (which means it's also an assistant surface) we can return its payload directly rather than via cloud.
     */
    supportsDirectResponse?: boolean | null;
    /**
     * Only present for an AoGH device. HGS Device ID of a target device and the signal strength (RSSI in dB, higher is better) between that target device and the AoGH device. If this map is empty, there are no target devices reachable by this AoGH device.
     */
    targetDeviceSignalStrengths?: {[key: string]: string} | null;
    /**
     * The timestamp at which the TDSS map was last updated. This information is used to help determine which hub would be preferred if multiple hubs report the same reach-ability for a device.
     */
    tdssUpdateTimestamp?: string | null;
    /**
     * For SHED devices, some traits can only be executed on 3P cloud, e.g. "action.devices.traits.MediaInitiation", "action.devices.traits.Channel" go/shed-per-trait-routing
     */
    traitRoutingHints?: Schema$HomeGraphCommonTraitRoutingHints[];
    /**
     * Map from traits to routing table. Metadata includes preferred execution path per trait and, when Matter is preferred, which endpoint should be used for the trait.
     */
    traitRoutingTable?: {
      [key: string]: Schema$HomeGraphCommonRoutingTable;
    } | null;
    /**
     * Map of trait to a proto representing the attribute. This is different from the attributes field above which is represented as a struct. The attributes here are represented as protos and will require specific support per trait.
     */
    traitToAttributeProtos?: {
      [key: string]: Schema$AssistantVerticalsHomeautomationProtoAttributes;
    } | null;
    /**
     * The item type, such as "action.devices.types.VACUUM" - to be used in triggering type-based actions, e.g. "start vacuuming": go/smarthome-type-based-actions.
     */
    type?: string | null;
    /**
     * The priority order of speech targeting: 1. user_defined_device_type 2. derived_device_type 3. device_type
     */
    userDefinedDeviceType?: string | null;
    /**
     * Set to which level of voice match is needed. Enum based on string input from the partner in json sync. Values accepted: "none" (but in this case partners won't set it), "owner" [requires matching one of the creator gaia IDs], or "member" [any recognized voice 'enrolled' on the device]. This may expand; only "owner" is in use for first partner, Tile.
     */
    voiceMatchRequired?: string | null;
    /**
     * This device will report state; we can query realtime state from local HGS rather than slow QUERY intent to the 3p cloud.
     */
    willReportState?: boolean | null;
    /**
     * SAFT Document with linguistic annotations for the zone name, if applicable.
     */
    zoneNameSaftDocument?: Schema$NlpSaftDocument;
  }
  export interface Schema$AssistantVerticalsHomeautomationProtoHomeAutomation_MetaDataSupportedTraits {
    traits?: string[] | null;
  }
  /**
   * Matter unique Id. These values are provided by the device.
   */
  export interface Schema$AssistantVerticalsHomeautomationProtoMatterUniqueId {
    productId?: number | null;
    uniqueId?: string | null;
    vendorId?: number | null;
  }
  export interface Schema$AssistantVerticalsHomeautomationProtoPhysicalLocation {
    address?: string | null;
    geoLocation?: Schema$GoogleTypeLatLng;
  }
  /**
   * Represents the user’s role such as assistant only or manager for a device. Design doc: https://docs.google.com/document/d/1c1hnauEbBfDkywO3GZkI8ejHP765l2tLspmPgckEe2Y/
   */
  export interface Schema$AssistantVerticalsHomeautomationProtoRoleInformation {
    /**
     * When true, role_type will be ignored, Nest IAM RPC will called to check authority.
     */
    iamCheckRequired?: boolean | null;
    roleType?: string | null;
  }
  export interface Schema$AssistantVerticalsHomeautomationProtoSmartDeviceManagementData {
    /**
     * The enterprise that owns the structure. E.g. Disney, Dream Hotel, etc. This is used for log/analytics purpose. For privacy reasons, we log at enterprise level instead of structure level.
     */
    enterpriseId?: string | null;
  }
  /**
   * SmartHome feature flags that may be enabled per-item. LINT.IfChange
   */
  export interface Schema$AssistantVerticalsHomeautomationProtoSmartHomeFeatures {
    /**
     * Flag indicating whether the background Circadian Lighting effect is enabled for a particular light (go/circadian-lighting-e2e).
     */
    circadianLightingEnabled?: boolean | null;
    /**
     * Flag indicating whether automatic Energy Savings are enabled for this item.
     */
    energySavingsEnabled?: boolean | null;
    /**
     * Flag indicating whether Gentle Wake Up is enabled for this item (go/sleep-wake-design).
     */
    gentleWakeupEnabled?: boolean | null;
    /**
     * Flag indicating whether the user has enabled / disabled sending Home/Away status updates to the device through the Google custom IntelligenceEvents Matter cluster. (go/google-clusters-design)
     */
    homeAwayOverMatterEnabled?: boolean | null;
  }
  /**
   * The features a structure supports.
   */
  export interface Schema$AssistantVerticalsHomeautomationProtoSupportedStructureFeatures {
    conciergeFeatures?: Schema$AssistantVerticalsHomeautomationProtoConciergeFeatures;
  }
  /**
   * Represents the properties of a mention. Next ID: 13
   */
  export interface Schema$AttentionalEntitiesMentionProperties {
    /**
     * The unique device on which the mention occurred. For example, if the user has two Google Home devices, this indicates which of the two was used.
     */
    deviceId?: Schema$AssistantApiCoreTypesDeviceId;
    /**
     * ID of the event that resulted in this entity mention. For user and system turn AEs, this is taken from the ConversationSnapshotId of the snapshot containing this mention. For client AEs, this is empty. This can be used to join back this particular mention to the specific "turn" in which this mention took place.
     */
    eventId?: Schema$EventIdMessage;
    /**
     * If this mention corresponds to a WebAnswer, then this defines the score associated with that answer.
     */
    factoidScore?: number | null;
    /**
     * If present, this entity was mentioned as part of a larger list.
     */
    listEntryInfo?: Schema$AttentionalEntitiesMentionPropertiesListEntryInfo;
    /**
     * Estimates the recency of the mention. This is internally computed at runtime on a turn-by-turn basis.
     */
    recency?: string | null;
    /**
     * The semantic role that the entity was used in.
     */
    role?: Schema$AttentionalEntitiesSemanticRoleId;
    /**
     * How salient this mention is. This field will only be set if the mention is derived from a SearchAnswerValue. See go/webresultsdata-as-aes for more details.
     */
    salience?: string | null;
    /**
     * Contains metadata about the source of the mention.
     */
    source?: Schema$AttentionalEntitiesMentionPropertiesSource;
    /**
     * If present, properties of visual mentions (e.g., how they are displayed to the user, visibility, etc.).
     */
    spatialProperties?: Schema$AttentionalEntitiesSpatialProperties;
    /**
     * Details about how this mention was presented.
     */
    surfaceForm?: Schema$AttentionalEntitiesSurfaceForm;
    /**
     * Unix timestamp noting (approximately) when this mention occurred. We do not guarantee that the time will correspond precisely to when the user uttered/heard a response. If mentions within a single turn have *different* timestamps, they should accurately reflect the order in which the mentions occurred. If that order is unknown, they should all have the same timestamp.
     */
    timestamp?: string | null;
  }
  /**
   * Contains information about how an entity was presented as part of a list.
   */
  export interface Schema$AttentionalEntitiesMentionPropertiesListEntryInfo {
    /**
     * The index of the entity presented to the user. NOTE: Indexing starts from 0.
     */
    index?: string | null;
    /**
     * A string which uniquely identifies the list item this entity represents in the list. For example, consider the "OrderPizza" intent with the "size" slot: U: I want to order a pizza A: Sure. What size do you want: large, medium, or small? U: Gigantic The lexical_groundings_id can be "large" to identify the large item in the list. This lexical_groundings_id together with the semantic role fields (i.e., role.intent_id & role.role_id) can be used to match the nlp_semantic_parsing::LexicalGroundings::ValueTermType to utilize lexical grounding for i18n of static list selection items. Note that this field only needs to be populated when developers expect to provide lexical groundings for the list item this entity represents. Effectively, this field will be populated when this entity is published by ListPresentationFrame and the ::quality::dialog_manager::IntentStageSignals::FieldCandidate.lexical_groundings_id field is populated. See go/lpf-i18nv2 & go/taskstate-ae-sync for more details.
     */
    lexicalGroundingsId?: string | null;
  }
  /**
   * The agent or system from which the mention was derived. Each mention corresponds to a single source.
   */
  export interface Schema$AttentionalEntitiesMentionPropertiesSource {
    client?: Schema$AttentionalEntitiesMentionPropertiesSourceClient;
    system?: Schema$AttentionalEntitiesMentionPropertiesSourceSystem;
    user?: Schema$AttentionalEntitiesMentionPropertiesSourceUser;
  }
  /**
   * The client provided this entity. Currently, this exclusively corresponds to an entity that was circulated by the client. See go/on-device-aes for more details.
   */
  export interface Schema$AttentionalEntitiesMentionPropertiesSourceClient {}
  /**
   * The Assistant mentioned this entity. This corresponds to entities annotated during fulfillment. More specifically, these entities are typically provided by developers either via a Monastery frame or an InteractionBuilder.
   */
  export interface Schema$AttentionalEntitiesMentionPropertiesSourceSystem {}
  /**
   * The user mentioned this entity. It was extracted from a previous winning intent (IntentQuery or IntentUpdate). Such entities are computed at runtime from the interpretation history without any developer intervention.
   */
  export interface Schema$AttentionalEntitiesMentionPropertiesSourceUser {}
  /**
   * Uniquely identifies a semantic role. When this role corresponds to a slot in a registered user intent (see go/assistant-intent-catalog), then the SemanticRoleId maps precisely onto that slot in the intent catalog. However, not all semantic roles corresponds to such user intent slots.
   */
  export interface Schema$AttentionalEntitiesSemanticRoleId {
    /**
     * Semantic roles will be defined locally, within the context of a single task/feature. The |intent_id| is a unique identifier for such a local cluster. In most cases, this should be exactly the same as the name of the intent used for TaskState (see go/assistant-intent-catalog). In cases where the intent isn't well-defined, this can be an arbitrary, feature-defined identifier.
     */
    intentId?: string | null;
    /**
     * Identifier for a semantic role, unique within the namespace of |intent_id|. When this role corresponds to a slot in the intent, the |role_id| should be equal to the name of that argument. For example, consider an entry in the intent catalog: core_intent { id { id: "BookARide" \} slot { name: "provider" type { string_type { \} \} \} slot { name: "num_riders" type { number_type { \} \} \} \} Then, the |role_id| would be "provider" or "num_riders" when referring to one of these slots. NOTE: when responding to the user, the Assistant may actually make use of other roles such as "ETA" or "driver" that are not part of the intent declaration. These should still be assigned consistent semantic roles. For example, a dialog with the Shopping feature: User: Where can I buy XYZ? Google: [Best Buy in Sunnyvale] has [XYZ] in stock. User: Great! Give me directions. In this case, both "Best Buy" and "XYZ" would be pushed to attentional entities. Best Buy, in this case, may not be an argument in the ShoppingItemStockInquiry intent, but should still have a consistent |role_id| such as "possessing_business".
     */
    roleId?: string | null;
  }
  /**
   * Properties of visual mentions (e.g., how they are displayed to the user, visibility, etc.).
   */
  export interface Schema$AttentionalEntitiesSpatialProperties {
    visibility?: string | null;
  }
  /**
   * How the entity was presented in this mention at a surface level. For example, "President Barack Obama" or "Barack Obama" or "he" might all be reasonable surface forms for the MID /m/02mjmr.
   */
  export interface Schema$AttentionalEntitiesSurfaceForm {
    text?: string | null;
  }
  /**
   * This data is expected to appear in approximately 2 out of every 1,000 documents with an average of 2 fields per document. Rough order of size is in the hundreds of kilobytes per Mustang shard.
   */
  export interface Schema$BiasingPerDocData {
    biasingfield?: Schema$BiasingPerDocDataBiasingField[];
  }
  /**
   * A replacement for BiasingPerDocData that is more efficient wrt size in the index.
   */
  export interface Schema$BiasingPerDocData2 {
    biasingField?: Schema$BiasingPerDocData2BiasingField[];
  }
  export interface Schema$BiasingPerDocData2BiasingField {
    /**
     * A fingerprint of the actual name of the field.
     */
    compressedName?: number | null;
    /**
     * The value, under various representations to get maximum compression. Exactly one of them is guaranteed to be filled. value as a double.
     */
    value?: number | null;
    /**
     * a floating value, represented as an integer by converting using floating_value * 1000. Useable for all floating values that need 3 digits of precision, and are small enough.
     */
    valueFloat?: number | null;
    /**
     * value as an int32. When the value is encode-able as an integer.
     */
    valueInt?: number | null;
  }
  /**
   * Metadata fields on which we can bias (sort) search results independently from the normal ranking using a ScoreAdjuster
   */
  export interface Schema$BiasingPerDocDataBiasingField {
    /**
     * Fingerprint of the attribute name (no need to keep long field names)
     */
    Name?: string | null;
    /**
     * Biasing value translated into a double for uniform comparison
     */
    Value?: number | null;
  }
  /**
   * A BlobRef is used to refer to a blob in BlobStore. Clients may only manipulate blobs through BlobRefs. BlobRefs should not be sent in the clear outside of Google (for example, encoded in URLs, stored in a client cookie, or referred to in Javascript); for efficiency, the IDs expose internal details of the blobstore (such as machine IPs or cluster names). If clients need to store BlobRefs outside of Google, they must encrypt the BlobRef securely or use an alternative insecure identifier with an id-\>BlobRef mapping inside our network.
   */
  export interface Schema$BlobstoreBlobRef {
    BlobID?: string | null;
    Options?: string | null;
    RefID?: string | null;
    ShardBin?: number | null;
    /**
     * Size of the complete blob, in bytes.
     */
    Size?: string | null;
    /**
     * The ID of the V2 blob this blob has
     */
    SourceV2BlobID?: string | null;
    /**
     * Deprecated.
     */
    V2ReadBlobToken?: string | null;
  }
  /**
   * Additional data for Blog/Posts
   */
  export interface Schema$BlogPerDocData {
    /**
     * used for blogurl crowding.
     */
    blogurlFp?: string | null;
    /**
     * This score captures how spammy the client is that the micropost was created with. The higher the score the worse.
     */
    clientSpamminess?: number | null;
    /**
     * For the threaded conversation view. Only populated in docs with provider type SYNTHETIC_CONVERSATION_DOC.
     */
    convTree?: Schema$BlogsearchConversationTree;
    copycatScore?: number | null;
    docQualityScore?: number | null;
    /**
     * A syntactic reshare is a document that is * created from an original and shared with friends and * we detect this resharing property by syntactically parsing the doc. . For example, a retweet is an example of a syntactic_reshare because we can detect that it's a reshare by grepping for "RT @".
     */
    isSyntacticReshare?: boolean | null;
    /**
     * Experimental data for quality experiments. This will NOT be populated in prod, but we will use this for experiments.
     */
    microblogQualityExptData?: Schema$Proto2BridgeMessageSet;
    /**
     * For replies/reshares. num_mentions = number of times the pattern @foo appears in the document.
     */
    numMentions?: number | null;
    outlinks?: Schema$BlogPerDocDataOutlinks[];
    /**
     * The fingerprint for the body text of the microblog post. It is copied from MicroBlogPost.post_content_fingerprint.
     */
    postContentFingerprint?: number | null;
    qualityScore?: number | null;
    /**
     * Blog scoring signals.
     */
    spamScore?: number | null;
    universalWhitelisted?: boolean | null;
    /**
     * User and doc quality scores for updates (aka microposts).
     */
    userQualityScore?: number | null;
  }
  /**
   * Resolved url and site spamscore for outlinks in updates (aka microposts).
   */
  export interface Schema$BlogPerDocDataOutlinks {
    /**
     * Representative id for an equivalence class of URLs. E.g. http://youtube.com/watch?v=12 and http://youtube.com/watch?v=12&feature=related have the same aggregation id since they're effectively the same webpage
     */
    aggregationFp?: string | null;
    resolvedUrl?: string | null;
    siteSpamScore?: number | null;
    title?: string | null;
  }
  export interface Schema$BlogsearchConversationNode {
    /**
     * The username of the author of the microblog post represented by this node.
     */
    authorName?: string | null;
    /**
     * A list of docids of child nodes.
     */
    children?: string[] | null;
    /**
     * The creation date of the doc.
     */
    date?: string | null;
    /**
     * Docid of the microblog post represented by this node.
     */
    docid?: string | null;
    /**
     * The docid of the parent node. The root of the tree will leave this empty.
     */
    parent?: string | null;
  }
  export interface Schema$BlogsearchConversationTree {
    /**
     * The id of this conversation.
     */
    convId?: string | null;
    /**
     * The nodes in this conversation. No particular order is assumed.
     */
    nodes?: Schema$BlogsearchConversationNode[];
  }
  /**
   * Information to indicate BG availability for businesses. This message is filled from Topic Server and stored in the GSR in Superroot.
   */
  export interface Schema$BlueGingerClientVisibleProtoBlueGingerSupportedServices {
    /**
     * List of supported modules for a business.
     */
    modules?: Schema$BlueGingerClientVisibleProtoBlueGingerSupportedServicesBlueGingerModule[];
  }
  export interface Schema$BlueGingerClientVisibleProtoBlueGingerSupportedServicesBlueGingerModule {
    /**
     * Module name, e.g. hairdresser_reservation. from quality/views/extraction/kcube/bg/modules/modules.bzl.
     */
    name?: string | null;
    /**
     * Services of this module that are supported by the business, e.g. haircuts.
     */
    services?: string[] | null;
    useCase?: string | null;
  }
  /**
   * Per-doc data for the web page about the cited book Approximate size is on average ~10bytes
   */
  export interface Schema$BookCitationPerDocData {
    /**
     * the book id for the main citation
     */
    bookId?: string | null;
    /**
     * the discretized citation score for the main book. we map the raw score 1.0-20.0 to 0 - 127
     */
    discretizedCitationScore?: number | null;
    /**
     * Is there a preview or excerpt of the book on this document?
     */
    previewable?: boolean | null;
    /**
     * book id for the second citation if we can't separate the two top citations (they are too close).
     */
    secondBookId?: string | null;
    /**
     * the discretized score for the second citation
     */
    secondDiscretizedCitationScore?: number | null;
  }
  /**
   * We divide up a week into individual open intervals. If any are present then they must be arranged in strictly increasing order, with non-empty spaces between successive intervals, and all times between 0 and 604800, the number of seconds in a week.
   */
  export interface Schema$BusinessHours {
    dayopen?: number | null;
    interval?: Schema$BusinessHoursInterval[];
  }
  export interface Schema$BusinessHoursInterval {
    /**
     * The interval ends at the start of this second
     */
    end?: number | null;
    /**
     * Time in seconds since Midnight-Monday-Morn
     */
    start?: number | null;
  }
  /**
   * Token to be exposed and stored by the bot
   */
  export interface Schema$ChatBotPlatformBotSendToken {
    /**
     * Time since epoch (micros) that this will expire
     */
    expiryTimeMicros?: string | null;
    /**
     * Encrypted InternalSendToken
     */
    sendToken?: string | null;
  }
  export interface Schema$ChatBotPlatformFireballId {
    /**
     * When used as a user ID, it's the phone number of the sender. When used as a session ID: For group conversation, it is the group ID. For 1 to 1, it is the receiver or sender phone number. For 1 to bot, it is the receiver phone number or empty.
     */
    id?: Schema$GoogleInternalCommunicationsInstantmessagingV1Id;
  }
  /**
   * Next ID: 6
   */
  export interface Schema$ClassifierPornClassifierData {
    classification?: Schema$ClassifierPornClassifierDataClassification[];
    /**
     * Records whether the image linker is run already. This is only used for Alexandria but NOT for Segindexer.
     */
    imageBasedDetectionDone?: boolean | null;
    timestamp?: string | null;
  }
  export interface Schema$ClassifierPornClassifierDataClassification {
    label?: string | null;
    score?: number | null;
  }
  /**
   * Next ID: 3
   */
  export interface Schema$ClassifierPornDocumentData {
    classifierdata?: Schema$ClassifierPornClassifierData;
    sitedata?: Schema$ClassifierPornSiteData;
  }
  /**
   * Generic output for one vertical.
   */
  export interface Schema$ClassifierPornQueryClassifierOutput {
    /**
     * This field is only filled for the CSAI vertical.
     */
    csaiClassification?: string | null;
    /**
     * DO NOT USE: This field is temporary and should be used only for the CSAI Onebox. This field is the result of the regular expression classifier alone as opposed to a combination with Seti classifier as in csai_classification field.
     */
    csaiRegexpHighConfidenceClassification?: string | null;
    /**
     * Human-readable debug information about the classification. This field is only set if output_debug is set in the classification input.
     */
    debug?: string | null;
    /**
     * The bit that shows if this classifier outputs positive classification for the input query. Set by thresholding with a recommended threshold.
     */
    isPositive?: boolean | null;
    /**
     * The score that the classifier assigned to the input query. This is filled by all verticals.
     */
    score?: number | null;
  }
  /**
   * Multi-label classification output. It contains the output for each vertical. The output for some verticals can be empty, in case that vertical is not supported by the classifier or if the set of verticals was restricted using MultiLabelClassifierInput.verticals.
   */
  export interface Schema$ClassifierPornQueryMultiLabelClassifierOutput {
    csai?: Schema$ClassifierPornQueryClassifierOutput;
    fringe?: Schema$ClassifierPornQueryClassifierOutput;
    medical?: Schema$ClassifierPornQueryClassifierOutput;
    minor?: Schema$ClassifierPornQueryClassifierOutput;
    offensive?: Schema$ClassifierPornQueryClassifierOutput;
    porn?: Schema$ClassifierPornQueryClassifierOutput;
    spoof?: Schema$ClassifierPornQueryClassifierOutput;
    violence?: Schema$ClassifierPornQueryClassifierOutput;
    vulgar?: Schema$ClassifierPornQueryClassifierOutput;
  }
  /**
   * QuerySats contains the information about the queries that users typed to search for this image.
   */
  export interface Schema$ClassifierPornQueryStats {
    /**
     * A query text porn score for the queries which have clicks to the image: query_text_porn_score := sum(clicks(query) * text_porn_score(query)) / sum(clicks(query))
     */
    queryTextPornScore?: number | null;
    totalClicks?: number | null;
  }
  /**
   * ReferrerCounts stores how many referrers an images has and how many of them were classified as porn and as adult/softporn respectively. Note that a referrer is usually a landing page, but as of March 2011 this also includes referrers which an image can 'inherit' by propagating counts from near duplicate images.
   */
  export interface Schema$ClassifierPornReferrerCounts {
    adult?: number | null;
    /**
     * Number of referrers which are classified as porn and as adult.
     */
    porn?: number | null;
    /**
     * Total number of referrers.
     */
    total?: number | null;
  }
  /**
   * Next ID: 53
   */
  export interface Schema$ClassifierPornSiteData {
    /**
     * The average pedo page score for the site.
     */
    avgPedoPageScore?: number | null;
    finalPedoSiteScore?: number | null;
    /**
     * The number of pages that were used to compute the scores and ratios.
     */
    numberOfPages?: string | null;
    /**
     * The number of pages with pedo restrict.
     */
    numberOfPedoPages?: string | null;
    /**
     * Sitechunk used to compute the signals. The field is present only for data created after December 2022.
     */
    site?: string | null;
    /**
     * The ratio of porn/softporn of the site this page belongs to.
     */
    sitePornRatio?: number | null;
    siteSoftpornRatio?: number | null;
    versionedscore?: Schema$ClassifierPornSiteDataVersionedScore[];
    /**
     * The cubic mean aggregation of violence page scores in the site.
     */
    violenceScore?: number | null;
    violenceStats?: Schema$ClassifierPornSiteViolenceStats;
  }
  /**
   * The site porn score of the site to which the page of interest belongs to. Multiple versions are kept across large changes for some time. The Version-4 score is the average Universal Page Probability of all the site's pages, and will come with populated verticals4_score and site_rule (if any rule fires) fields. When using this score it is recommended to subscribe to the following mailing list: g/safesearch-announce.
   */
  export interface Schema$ClassifierPornSiteDataVersionedScore {
    score?: number | null;
    siteRule?: string[] | null;
    version?: number | null;
    /**
     * Please talk to safesearch@ before relying on any of these internal fields:
     */
    verticals4Score?: number | null;
  }
  /**
   * Next ID: 6
   */
  export interface Schema$ClassifierPornSiteViolenceStats {
    meanFinalViolenceScore?: number | null;
    numberOfImages?: string | null;
    numberOfVideos?: string | null;
    videoViolenceScore?: number | null;
  }
  /**
   * The identity to configure a CloudSQL instance provisioned via SLM Terraform.
   */
  export interface Schema$CloudAiPlatformTenantresourceCloudSqlInstanceConfig {
    /**
     * Output only. The CloudSQL instance connection name.
     */
    cloudSqlInstanceConnectionName?: string | null;
    /**
     * Input/Output [Optional]. The CloudSQL instance name within SLM instance. If not set, a random UUIC will be generated as instance name.
     */
    cloudSqlInstanceName?: string | null;
    /**
     * Input [Optional]. The KMS key name or the KMS grant name used for CMEK encryption. Only set this field when provisioning new CloudSQL instances. For existing CloudSQL instances, this field will be ignored because CMEK re-encryption is not supported.
     */
    kmsKeyReference?: string | null;
    /**
     * Input [Optional]. MDB roles for corp access to CloudSQL instance.
     */
    mdbRolesForCorpAccess?: string[] | null;
    /**
     * Output only. The SLM instance's full resource name.
     */
    slmInstanceName?: string | null;
    /**
     * Input [Required]. The SLM instance template to provision CloudSQL.
     */
    slmInstanceTemplate?: string | null;
    /**
     * Input [Required]. The SLM instance type to provision CloudSQL.
     */
    slmInstanceType?: string | null;
  }
  /**
   * The identity to configure a GCS bucket.
   */
  export interface Schema$CloudAiPlatformTenantresourceGcsBucketConfig {
    admins?: string[] | null;
    /**
     * Input/Output [Optional]. The name of a GCS bucket with max length of 63 chars. If not set, a random UUID will be generated as bucket name.
     */
    bucketName?: string | null;
    /**
     * Input/Output [Optional]. Only needed for per-entity tenant GCP resources. During Deprovision API, the on-demand deletion will only cover the tenant GCP resources with the specified entity name.
     */
    entityName?: string | null;
    /**
     * Input/Output [Optional]. The KMS key name or the KMS grant name used for CMEK encryption. Only set this field when provisioning new GCS bucket. For existing GCS bucket, this field will be ignored because CMEK re-encryption is not supported.
     */
    kmsKeyReference?: string | null;
    /**
     * Input/Output [Optional]. Only needed when the content in bucket need to be garbage collected within some amount of days.
     */
    ttlDays?: number | null;
    /**
     * Input/Output [Required]. IAM roles (viewer/admin) put on the bucket.
     */
    viewers?: string[] | null;
  }
  /**
   * The dynamic IAM bindings to be granted after tenant projects are created.
   */
  export interface Schema$CloudAiPlatformTenantresourceIamPolicyBinding {
    /**
     * Input/Output [Required]. The member service accounts with the roles above. Note: placeholders are same as the resource above.
     */
    members?: string[] | null;
    /**
     * Input/Output [Required]. The resource name that will be accessed by members, which also depends on resource_type. Note: placeholders are supported in resource names. For example, ${tpn\} will be used when the tenant project number is not ready.
     */
    resource?: string | null;
    /**
     * Input/Output [Required]. Specifies the type of resource that will be accessed by members.
     */
    resourceType?: string | null;
    /**
     * Input/Output [Required]. The role for members below.
     */
    role?: string | null;
  }
  /**
   * The configuration for a spanner database provisioning. Next ID: 8
   */
  export interface Schema$CloudAiPlatformTenantresourceInfraSpannerConfig {
    /**
     * Input [Optional]. The options to create a spanner database. Note: give the right options to ensure the right KMS key access audit logging and AxT logging in expected logging category.
     */
    createDatabaseOptions?: Schema$CloudAiPlatformTenantresourceInfraSpannerConfigCreateDatabaseOptions;
    /**
     * Input [Optional]. The KMS key name or the KMS grant name used for CMEK encryption. Only set this field when provisioning new Infra Spanner databases. For existing Infra Spanner databases, this field will be ignored because CMEK re-encryption is not supported. For example, projects//locations//keyRings//cryptoKeys/
     */
    kmsKeyReference?: string | null;
    /**
     * Input [Required]. The file path to the spanner SDL bundle.
     */
    sdlBundlePath?: string | null;
    /**
     * Input [Optional]. The spanner borg service account for delegating the kms key to. For example, spanner-infra-cmek-nonprod@system.gserviceaccount.com, for the nonprod universe.
     */
    spannerBorgServiceAccount?: string | null;
    spannerLocalNamePrefix?: string | null;
    spannerNamespace?: string | null;
    /**
     * Input [Required]. Every database in Spanner can be identified by the following path name: /span//:
     */
    spannerUniverse?: string | null;
  }
  /**
   * The options to create a spanner database. KMS key access audit logging and AxT logging will be associated with the given resource name, resource type and service name. Please ensure to give right options to enable correct audit logging and AxT logging.
   */
  export interface Schema$CloudAiPlatformTenantresourceInfraSpannerConfigCreateDatabaseOptions {
    /**
     * The cloud resource name for the CMEK encryption. For example, projects//locations/
     */
    cmekCloudResourceName?: string | null;
    /**
     * The cloud resource type for the CMEK encryption. For example, contentwarehouse.googleapis.com/Location
     */
    cmekCloudResourceType?: string | null;
    /**
     * The service name for the CMEK encryption. For example, contentwarehouse.googleapis.com
     */
    cmekServiceName?: string | null;
  }
  /**
   * The identity to configure a service account.
   */
  export interface Schema$CloudAiPlatformTenantresourceServiceAccountIdentity {
    /**
     * Output only. The service account email that has been created.
     */
    serviceAccountEmail?: string | null;
    /**
     * Input/Output [Optional]. The tag that configures the service account, as defined in google3/configs/production/cdpush/acl-zanzibar-cloud-prod/activation_grants/activation_grants.gcl. Note: The default P4 service account has the empty tag.
     */
    tag?: string | null;
  }
  /**
   * The identity to configure a tenant project.
   */
  export interface Schema$CloudAiPlatformTenantresourceTenantProjectConfig {
    /**
     * Input/Output [Required]. The billing account properties to create the tenant project.
     */
    billingConfig?: Schema$GoogleApiServiceconsumermanagementV1BillingConfig;
    /**
     * Input/Output [Required]. The folder that holds tenant projects and folder-level permissions will be automatically granted to all tenant projects under the folder. Note: the valid folder format is `folders/{folder_number\}`.
     */
    folder?: string | null;
    /**
     * Input/Output [Required]. The policy bindings that are applied to the tenant project during creation. At least one binding must have the role `roles/owner` with either `user` or `group` type.
     */
    policyBindings?: Schema$GoogleApiServiceconsumermanagementV1PolicyBinding[];
    /**
     * Input/Output [Required]. The API services that are enabled on the tenant project during creation.
     */
    services?: string[] | null;
  }
  /**
   * The tenant project and tenant resources. Next ID: 10
   */
  export interface Schema$CloudAiPlatformTenantresourceTenantProjectResource {
    /**
     * The CloudSQL instances that are provisioned under the tenant project.
     */
    cloudSqlInstances?: Schema$CloudAiPlatformTenantresourceCloudSqlInstanceConfig[];
    /**
     * The GCS buckets that are provisioned under the tenant project.
     */
    gcsBuckets?: Schema$CloudAiPlatformTenantresourceGcsBucketConfig[];
    /**
     * The dynamic IAM bindings that are granted under the tenant project. Note: this should only add new bindings to the project if they don't exist and the existing bindings won't be affected.
     */
    iamPolicyBindings?: Schema$CloudAiPlatformTenantresourceIamPolicyBinding[];
    /**
     * The Infra Spanner databases that are provisioned under the tenant project. Note: this is an experimental feature.
     */
    infraSpannerConfigs?: Schema$CloudAiPlatformTenantresourceInfraSpannerConfig[];
    /**
     * Input/Output [Required]. The tag that uniquely identifies a tenant project within a tenancy unit. Note: for the same tenant project tag, all tenant manager operations should be idempotent.
     */
    tag?: string | null;
    /**
     * The configurations of a tenant project.
     */
    tenantProjectConfig?: Schema$CloudAiPlatformTenantresourceTenantProjectConfig;
    /**
     * Output only. The tenant project ID that has been created.
     */
    tenantProjectId?: string | null;
    /**
     * Output only. The tenant project number that has been created.
     */
    tenantProjectNumber?: string | null;
    /**
     * The service account identities (or enabled API service's P4SA) that are expclicitly created under the tenant project (before JIT provisioning during enabled API services).
     */
    tenantServiceAccounts?: Schema$CloudAiPlatformTenantresourceTenantServiceAccountIdentity[];
  }
  /**
   * A collection of tenant resources.
   */
  export interface Schema$CloudAiPlatformTenantresourceTenantResource {
    /**
     * A list of P4 service accounts (go/p4sa) to provision or deprovision.
     */
    p4ServiceAccounts?: Schema$CloudAiPlatformTenantresourceServiceAccountIdentity[];
    /**
     * A list of tenant projects and tenant resources to provision or deprovision.
     */
    tenantProjectResources?: Schema$CloudAiPlatformTenantresourceTenantProjectResource[];
  }
  /**
   * The identity of service accounts that have been explicitly created under tenant projects.
   */
  export interface Schema$CloudAiPlatformTenantresourceTenantServiceAccountIdentity {
    /**
     * Output only. The email address of the generated service account.
     */
    serviceAccountEmail?: string | null;
    /**
     * Input/Output [Required]. The service that the service account belongs to. (e.g. cloudbuild.googleapis.com for GCB service accounts)
     */
    serviceName?: string | null;
  }
  /**
   * The basic message that contains a single decision output of go/deeptagger.
   */
  export interface Schema$CommerceDatastoreDeepTag {
    /**
     * The confidence of the tag, encoded to 14 bits (range [0, 16383]). Due to modeling details, a large number of tags become trustworthy with confidence greater than 0.001, so two bytes of precision are required.
     */
    confidence?: number | null;
    /**
     * A Deep Tag enum in uint32 form.
     */
    tag?: number | null;
  }
  /**
   * Image-level deep tags: essentially equivalent to the proto above but containing tags that are computed at the image level. These image signals are maintained by the Visual Shopping team (visual-shopping@). *** If you do use the signals, please add an entry in go/ShoppingImageAttributeClients to be notified for model upgrade. *** We recommend our clients against using the raw confidence value directly. Instead, the clients should use the library, cs/ads/shopping/visual/deeptags/public/single_tag.h and cs/ads/shopping/visual/deeptags/public/single_scored_tag.h to specify an operating point in terms of precision or recall. See the following code example: http://google3/shopping/visual/explore_looks/looks_offline_pipeline.cc?l=268&rcl=304165166 *** `model_outputs` is a repeated field. Please check `version` to get the model you desire to use, instead of indexing the model_outputs directly e.g. model_outputs(0). We will remove the old versions in the future and this will lead to incorrect model. *** Models: As of Q2 2020, we have two models running within Shopping: model one only has the overlay tag, which we are deprecating, and model two has the tags specified in go/VisualShoppingImageAttributes.
   */
  export interface Schema$CommerceDatastoreImageDeepTags {
    /**
     * The set of outputs for a series of model versions. The size of this field should not extend beyond 4 at any time: two versions for slow-update track dependencies, and two versions for fast-update track dependencies.
     */
    modelOutputs?: Schema$CommerceDatastoreImageDeepTagsModelOutput[];
  }
  export interface Schema$CommerceDatastoreImageDeepTagsModelOutput {
    backgroundType?: Schema$CommerceDatastoreDeepTag;
    collage?: Schema$CommerceDatastoreDeepTag;
    /**
     * We are looking to deploy a model for the Ads team to identify images with bad cropping. The model will be for Ads only and we will not populate the cropping field in CDS.
     */
    cropping?: Schema$CommerceDatastoreDeepTag;
    modelType?: Schema$CommerceDatastoreDeepTag;
    /**
     * Tag corresponds to the shopping non-family safe (nfs) image signal.
     */
    nfs?: Schema$CommerceDatastoreDeepTag;
    objectCount?: Schema$CommerceDatastoreDeepTag;
    /**
     * Tag corresponding to unwanted text overlay (watermarks, logos, promotional elements, artifacts, etc).
     */
    overlay?: Schema$CommerceDatastoreDeepTag;
    selfie?: Schema$CommerceDatastoreDeepTag;
    /**
     * Tag corresponding to the text overlay classifier (watermarks, logos, promotional elements, artifacts, etc).
     */
    textOverlay?: Schema$CommerceDatastoreDeepTag[];
    version?: number | null;
  }
  /**
   * Protocol record used for collecting together all information about a document. Please consult go/dj-explorer for two basic questions about `CompositeDoc`: - Where should I look up certain information (e.g: pagerank, language)? - What does each field in CompositeDoc mean and who should I contact if I have questions? To add a new field into CompositeDoc, or change existing field's size significantly, please file a ticket at go/dj-new-field, fill in necessary information and get approved by docjoin-access@ team. Next id: 191
   */
  export interface Schema$CompositeDoc {
    /**
     * Contains necessary information to enforce row level Docjoin access control.
     */
    accessRequirements?: Schema$IndexingPrivacyAccessAccessRequirements;
    additionalchecksums?: Schema$CompositeDocAdditionalChecksums;
    alternatename?: Schema$CompositeDocAlternateName[];
    anchors?: Schema$Anchors;
    anchorStats?: Schema$IndexingDocjoinerAnchorStatistics;
    /**
     * This field is present iff the page has a bad SSL certificate itself or in its redirect chain.
     */
    badSslCertificate?: Schema$IndexingBadSSLCertificate;
    /**
     * Visible content checksum as computed by repository::parsehandler::checksum::Checksum96bitsParseHandler. The value is a Fprint96 in "key format" (i.e., by Fprint96::AsKey()).
     */
    ContentChecksum96?: string | null;
    cseId?: Schema$QualityProseCSEUrlInfo[];
    /**
     * URL should only be selected for CSE Index if it's pagerank is higher than cse_pagerank_cutoff.
     */
    csePagerankCutoff?: number | null;
    /**
     * Contains the tracking version of various data fields in CompositeDoc.
     */
    dataVersion?: Schema$IndexingDocjoinerDataVersion;
    doc?: Schema$GDocumentBase;
    /**
     * A generic container to hold document annotations and signals. For a full list of extensions live today, see go/wde.
     */
    docAttachments?: Schema$Proto2BridgeMessageSet;
    /**
     * Info about "selected" images associated with the document for which we (already) have ImageData. For each image URL, some fixed number of documents are selected as web referrers for the image URL, and within those selected documents, we say the image is "selected". Within the remaining documents, we say the image is "rejected". Note that this distinction is slightly different from selected for indexing. Only images within doc_images where is_indexed_by_imagesearch is true will be selected for indexing. You can find the rejected images at composite_doc.doc_attachments().get(). You can find images that are selected, but for which we have no ImageData (yet) at composite_doc.image_indexing_info().selected_not_indexed_image_link()
     */
    docImages?: Schema$ImageData[];
    /**
     * This message set is used for data pushed into the index using the signals framework that is never to be used in Mustang or TG Continuum scoring/snippeting code. Any protocol buffer stored in this message set is automatically returned in a docinfo response - it ends up in the "info" message set in the WWWSnippetResponse, so it can be used in post-doc twiddlers and for display in GWS with no code changes in Mustang or Teragoogle.
     */
    docinfoPassthroughAttachments?: Schema$Proto2BridgeMessageSet;
    /**
     * Info about videos embedded in the document.
     */
    docVideos?: Schema$ImageRepositoryVideoProperties[];
    /**
     * Data produced by the embedded-content system. This is a thin message, containing only embedded_links_info data for the embedder and JavaScript/CSS embedded links (the embedded-content bigtable also contains snapshots, compressed document trees and all embedded link types). Provided using the index signal API.
     */
    embeddedContentInfo?: Schema$IndexingEmbeddedContentEmbeddedContentInfo;
    extradup?: Schema$CompositeDocExtraDup[];
    forwardingdup?: Schema$CompositeDocForwardingDup[];
    includedcontent?: Schema$CompositeDocIncludedContent[];
    indexinginfo?: Schema$CompositeDocIndexingInfo;
    /**
     * Serialized indexing intermediate data.
     */
    indexingIntermediate?: string | null;
    /**
     * This field associates a document to particular labels and assigns confidence values to them.
     */
    labelData?: Schema$QualityLabelsGoogleLabelData;
    liveexperimentinfo?: Schema$CompositeDocLiveExperimentInfo;
    localinfo?: Schema$LocalWWWInfo;
    /**
     * Localized alternate names are similar to alternate names, except that it is associated with a language different from its canonical. This is the subset of webmaster-provided localized alternate names being in the dup cluster of this document. Used during serving for swapping in the URL based on regional and language preferences of the user.
     */
    localizedAlternateName?: Schema$IndexingConverterLocalizedAlternateName[];
    localizedvariations?: Schema$CompositeDocLocalizedVariations;
    /**
     * Only present in partial cdocs.
     */
    partialUpdateInfo?: Schema$CompositeDocPartialUpdateInfo;
    perDocData?: Schema$PerDocData;
    /**
     * Porn related data used for image and web search porn classification as well as for diagnostics purposes.
     */
    porninfo?: Schema$ClassifierPornDocumentData;
    properties?: Schema$DocProperties;
    /**
     * Contains information necessary to perform policy decision on the usage of the data assosiated with this cdoc.
     */
    ptoken?: Schema$PtokenPToken;
    qualitysignals?: Schema$CompositeDocQualitySignals;
    /**
     * Information about the most recent creation and expiration of this domain. It's extracted from domainedge signal.
     */
    registrationinfo?: Schema$RegistrationInfo;
    /**
     * If present, indicates that some content was inserted, deleted, or replaced in the document's content (in CompositeDoc::doc::Content::Representation), and stores information about what was inserted, deleted, or replaced.
     */
    richcontentData?: Schema$IndexingConverterRichContentData;
    /**
     * rich snippet extracted from the content of a document.
     */
    richsnippet?: Schema$RichsnippetsPageMap;
    robotsinfolist?: Schema$CompositeDocRobotsInfoList;
    /**
     * to copy to per-doc
     */
    scaledIndyRank?: number | null;
    /**
     * Sitelinks: a collection of interesting links a user might be interested in, given they are interested in this document. WARNING: this is different from the crawler Sitemaps (see SitemapsSignals in the attachments).
     */
    sitemap?: Schema$Sitemap;
    /**
     * Row timestamp in CDoc storage.
     */
    storageRowTimestampMicros?: string | null;
    subindexid?: string[] | null;
    syntacticDate?: Schema$QualityTimebasedSyntacticDate;
    /**
     * WARNING!!! "url" field in CompositeDoc is optional, and is usually missing: e.g., Docjoin CompositeDoc's don't have CompositeDoc::url. has_url() checking is often useful. So don't rely on CompositeDoc::url unless you're sure otherwise. Usually you want to use CompositeDoc::doc::url instead.
     */
    url?: string | null;
    /**
     * Date in the url extracted by quality/snippets/urldate/date-in-url.cc This is given as midnight GMT on the date in question.
     */
    urldate?: string | null;
  }
  /**
   * Additional checksums of the document.
   */
  export interface Schema$CompositeDocAdditionalChecksums {
    /**
     * Same as ContentChecksum96 but without transient boilerplate.
     */
    NoTransientChecksum96?: string | null;
    /**
     * Deprecated. Use simhash_v2 and simhash_v2_significance instead.
     */
    SimHash?: string | null;
    SimHashIsTrusted?: boolean | null;
    /**
     * Simhash-v2 is generated by SimHashParseHandler, designed as a complete replacement of simhash-v1 (a.k.a. the original simhash above) from ApproxDupsParseHandler. Simhash-v2 uses a revised algorithm so that it is expected to work better in most cases than simhash-v1. They coexist in current transition period, then simhash-v1 will be retired.
     */
    simhashV2?: string | null;
    /**
     * Simhash-v2-significance is used to describe the confidence about the corresponding simhash-v2 value. It is defined as the average absolute difference from zero of all internal state components when finalizing a simhash-v2 value in HashMultiSetDotCauchy. We used to compare the significance against some pre-defined threshold (default: 20) to get a boolean value "trusted_simhash_v2". However, it is possible that this field is missing while "simhash_v2" is present, in such case (1) Use "SimHashIsTrusted" instead if it is present, AND/OR (2) Assume "simhash_v2" is trusted if its value is non-zero.
     */
    simhashV2Significance?: number | null;
  }
  /**
   * Alternate names are some urls that we would like to associate with documents in addition to canonicals. Sometimes we may want to serve these alternatenames instead of canonicals. Alternames in CompositeDoc should come from WebMirror pipeline.
   */
  export interface Schema$CompositeDocAlternateName {
    /**
     * Fp96 of webmirror equivalence class as of last time this was exported.
     */
    ecnFp?: string | null;
    Url?: string | null;
    /**
     * See webutil/urlencoding
     */
    UrlEncoding?: number | null;
  }
  /**
   * The top non-forwarding dups of the canonical url.
   */
  export interface Schema$CompositeDocExtraDup {
    /**
     * Fp96 of webmirror equivalence class as of last time this was exported.
     */
    ecnFp?: string | null;
    /**
     * The url of the non-forwarding dup.
     */
    url?: string | null;
  }
  /**
   * The top forwarding dups of the canonical url. (note: it may actually include some dups that are NOT used for forwarding data but for making "info:" complete)
   */
  export interface Schema$CompositeDocForwardingDup {
    /**
     * The name of the url's webmirror equivalence class.
     */
    ecn?: string | null;
    ecnFp?: string | null;
    /**
     * The purpose(s) of the forwarding dup indicating if it is used for forwarding signal/anchors generally, or only for forwarding some specific signal (e.g. navboost), or for some other purposes (e.g., not for forwarding any data but for making "info:" complete). See indexing/dups/public/dups.h for more details.
     */
    purposes?: number | null;
    /**
     * Raw pagerank of the url.
     */
    rawPagerank?: number | null;
    /**
     * The webmirror repid of the forwarding dup.
     */
    repid?: string | null;
    /**
     * The url of the forwarding dup.
     */
    url?: string | null;
    /**
     * The encoding of the url (see webutil/urlencoding for details).
     */
    urlencoding?: number | null;
  }
  export interface Schema$CompositeDocIncludedContent {
    includedDoc?: Schema$GDocumentBase;
    linkUrl?: string | null;
    perDocData?: Schema$PerDocData;
    properties?: Schema$DocProperties;
    /**
     * Indicate how this content came to be included. Legal values are constructed by bitwise-OR-ing values from the included_content::SourceType enum. Default SourceTypeBitfield = included_content::INCLUDED_FRAME
     */
    SourceTypeBitfield?: string | null;
  }
  /**
   * Contains information *mostly* used within indexing (e.g. not used for building the production serving shards). Most of this data is generated only in Alexandria, however there are exceptions.
   */
  export interface Schema$CompositeDocIndexingInfo {
    /**
     * To hold extra info for building a final cdoc from raw cdoc and goldmine annotations.
     */
    cdocBuildInfo?: Schema$IndexingDocjoinerCDocBuildInfo;
    /**
     * Whether current page is under content protection, i.e. a page has been crawled as an error page, but we preserve its last known good content and keep its crawl_status as converter.CrawlStatus::CONTENT.
     */
    contentProtected?: boolean | null;
    /**
     * If set, indicates that the crawl status was converted to ROBOTED for the reason specified by the enum value in converter.RobotedReasons.ConvertToRobotedReasons. See indexing/converter/proto/converter.proto for details. If unset, then the document was not converted to roboted, and if the document crawl status is ROBOTED, then the document is disallowed (at least to Google) in robots.txt.
     */
    convertToRobotedReason?: number | null;
    /**
     * One of the enum values in converter.CrawlStatus.State (see indexing/converter/proto/converter.proto for details). Default is converter.CrawlStatus::CONTENT. The document is roboted if the value is converter.CrawlStatus::ROBOTED.
     */
    crawlStatus?: number | null;
    demotionTags?: string[] | null;
    /**
     * One of the enum values in converter.ErrorPageType (see indexing/converter/proto/error-page-detector-enum.proto for detail). Default is converter::ERROR_PAGE_NONE.
     */
    errorType?: number | null;
    freshdocsCorpora?: string[] | null;
    /**
     * The host id of the document. Used chiefly to determine whether the document is part of a parked domain.
     */
    hostid?: string | null;
    /**
     * A short descriptive string to help identify the IE application or setup where this CDoc is generated. For example: websearch_m3 This field is for debuggability purposes.
     */
    ieIdentifier?: string | null;
    /**
     * Indexing info about images (i.e. image links missing image data, etc).
     */
    imageIndexingInfo?: Schema$ImageSearchImageIndexingInfo;
    /**
     * The timestamp (the time since the Epoch, in microseconds) when the docjoin is exported from indexing. The main purpose of this field is to identify different versions of the same document.
     */
    indexingTs?: string | null;
    /**
     * If set, the timestamp in microseconds when the URL stopped being canonical. This should never be set for exported canonical documents. This field is used by dups during canonical flip, and by webmain when doc selection switched between desktop and mobile. Union respects this timestamp to prevent old doc being deleted until the new doc is picked up
     */
    noLongerCanonicalTimestamp?: string | null;
    /**
     * This score is calculated by re-mapping the back onto the partition's score distribution, such that the score represents the score of the equivalently ranked organically-selected document.
     */
    normalizedClickScore?: number | null;
    /**
     * The raw navboost count for the canonical url without aggregating the navboost from dup urls. This field is used when building forwarding map.
     */
    rawNavboost?: number | null;
    /**
     * The timestamp (the time since the Epoch, in microseconds) to represent doc version, which is used in the downstream processing after Raffia. If it's not set, indexing_ts will be used as row_timestamp. The timestamp is generally set by reprocessing to set slightly newer indexing_ts such that the system can respect the reprocessed version to overwrite old data in storage.
     */
    rowTimestamp?: string | null;
    /**
     * Selection tier rank is a language normalized score ranging from 0-1 over the serving tier (Base, Zeppelins, Landfills) for this document.
     */
    selectionTierRank?: number | null;
    /**
     * The tracing ids is to label the version of url for url status tracking. This repeated field will carry at most 10 tracing id. See more details in go/rich-tracing-design There will be less than 2% base+uz cdocs carrying this field. The major sources of tracing ids include: * Indexing API pushed urls * Index Metrics sampling urls The tracing ids will be written into cdocs by Webmain Ramifier. The consumer of the tracing ids is Union serving notification collector see more at go/serving-notification-from-union
     */
    tracingId?: string[] | null;
    /**
     * Changerate information for this doc (see crawler/changerate/changerate.proto for details).
     */
    urlChangerate?: Schema$CrawlerChangerateUrlChangerate;
    /**
     * Url change history for this doc (see crawler/changerate/changerate.proto for details). Note if a doc has more than 20 changes, we only keep the last 20 changes here to avoid adding to much data in its docjoin.
     */
    urlHistory?: Schema$CrawlerChangerateUrlHistory;
    /**
     * UrlPatternSignals for this doc, used to compute document score in LTG (see indexing/signal_aggregator/proto/signal-aggregator.proto for details).
     */
    urlPatternSignals?: Schema$IndexingSignalAggregatorUrlPatternSignals;
    /**
     * Indexing info about videos.
     */
    videoIndexingInfo?: Schema$ImageRepositoryVideoIndexingInfo;
  }
  /**
   * Contains information needed for end-to-end live experiments. For a cdoc generated by production pipeline, it includes experiment IDs that have selected current document. For a cdoc generated by experiment pipeline, it includes current experiment ID.
   */
  export interface Schema$CompositeDocLiveExperimentInfo {
    /**
     * List of necessary information for each live experiments.
     */
    perLiveExperimentInfo?: Schema$CompositeDocLiveExperimentInfoPerLiveExperimentInfo[];
  }
  /**
   * Contains information for a live experiment.
   */
  export interface Schema$CompositeDocLiveExperimentInfoPerLiveExperimentInfo {
    /**
     * ID of a live experiment.
     */
    experimentId?: string | null;
    /**
     * Partial CDoc for a live experiment.
     */
    partialCdoc?: Schema$CompositeDoc;
  }
  export interface Schema$CompositeDocLocalizedVariations {
    /**
     * A subset of computed variations, only the members which are dups to the main url. Used during serving for swapping in the URL based on regional and language preferences of the user.
     */
    dupsComputedAlternateNames?: Schema$IndexingDupsComputedLocalizedAlternateNamesLocaleEntry[];
    /**
     * All localized alternate names provided by the webmaster (canonical and dups, indexed and not-indexed). Used on the ranking side for swapping out results based on the webmaster preference.
     */
    webmasterAlternateNames?: Schema$IndexingConverterLocalizedAlternateName[];
  }
  /**
   * Contains information about the partial updates present in a partial CompositeDoc.
   */
  export interface Schema$CompositeDocPartialUpdateInfo {
    /**
     * List of goldmine annotator updates present in the enclosing partial cdoc.
     */
    goldmineAnnotatorNames?: string[] | null;
    /**
     * List of images signal updates present in the enclosing partial cdoc. Images signal name for a images signal is the unique name for the signal according to SignalSpec.
     */
    imagesSignalNames?: string[] | null;
    /**
     * Contains last full indexing information for partial updates.
     */
    lastFullIndexingInfo?: Schema$CompositeDocPartialUpdateInfoLastFullIndexingInfo[];
    /**
     * Which tier we should do cdoc lookup to merge partial cdocs. This uses the integer value of indexing.selection.CorpusId. NOT intended for other usage.
     */
    shouldLookupDocjoinsTier?: number | null;
    /**
     * List of signal updates present in the enclosing partial cdoc. Signal name for a signal is unique name for the signal according to SignalSpec.
     */
    signalNames?: string[] | null;
  }
  /**
   * Last full indexing information for the partial CDoc.
   */
  export interface Schema$CompositeDocPartialUpdateInfoLastFullIndexingInfo {
    /**
     * The corpus of last full updates.
     */
    corpus?: string | null;
    /**
     * Last full update indexing timestamp in microseconds.
     */
    lastFullIndexingTsMicros?: string | null;
  }
  /**
   * Note: This is a misleading name as of 2022/10/14. The field is still set and has meaningful data, but no longer holds quality signals. All the data are freshness-related and they're not particularly sensitive.
   */
  export interface Schema$CompositeDocQualitySignals {
    /**
     * Contains a date used for the "Date Last Modified" toolbelt restrict mode. Note: this date is a combined date and is different from the pure shingle-based signal stored in contentage.last_significant_update field.
     */
    lastSignificantUpdate?: Schema$QualityTimebasedLastSignificantUpdate;
    pagetype?: Schema$QualityTimebasedPageType;
  }
  /**
   * List of robots info parsed for the user-agents other than the default used to crawl this page.
   */
  export interface Schema$CompositeDocRobotsInfoList {
    newsRobotsInfo?: Schema$IndexingConverterRobotsInfo;
  }
  /**
   * A message containing per doc signals that are compressed and included in Mustang and TeraGoogle. For TeraGoogle, this message is included in perdocdata which means it can be used in preliminary scoring. CAREFUL: For TeraGoogle, this data resides in very limited serving memory (Flash storage) for a huge number of documents. Next id: 42
   */
  export interface Schema$CompressedQualitySignals {
    /**
     * anchor_mismatch_demotion: converted from QualityBoost.mismatched.boost.
     */
    anchorMismatchDemotion?: number | null;
    /**
     * authority promotion: converted from QualityBoost.authority.boost
     */
    authorityPromotion?: number | null;
    /**
     * baby_panda_demotion: converted from QualityBoost.rendered.boost.
     */
    babyPandaDemotion?: number | null;
    /**
     * New BabyPanda demotion, applied on top of Panda. This is meant to replace |baby_panda_demotion|.
     */
    babyPandaV2Demotion?: number | null;
    /**
     * Impressions, unsquashed, host level, not to be used with compressed ratios. Not to be used in Pattern Data.
     */
    crapsAbsoluteHostSignals?: number | null;
    crapsNewHostSignals?: string | null;
    crapsNewPatternSignals?: string | null;
    /**
     * For craps_[url|pattern]_signals, please avoid accessing these fields directly, even in minor ways like checking has_craps_*. Instead, please use methods from quality/navboost/craps/craps-lossy-compression.h or talk to dice-team.
     */
    crapsNewUrlSignals?: string | null;
    crapsUnscaledIpPriorBadFraction?: number | null;
    /**
     * Page quality signals converted from fields in proto QualityBoost in quality/q2/proto/quality-boost.proto. To save indexing space, we convert the float values in [0, 1] to integers in range [0, 1023] (use 10 bits). exact_match_domain_demotion: converted from QualityBoost.emd.boost.
     */
    exactMatchDomainDemotion?: number | null;
    /**
     * This field is *not* propagated to shards, but it's populated at serving time by go/web-signal-joins (see b/207344056). See go/0DayLEs for details. This is only meant to be used during LEs, it should *not* be used for launches.
     */
    experimentalNsrTeamData?: Schema$QualityNsrExperimentalNsrTeamData;
    /**
     * This field is *not* propagated to shards, but it's populated at serving time by go/web-signal-joins (see b/207344056). See go/0DayLEs for details. This is only meant to be used during LEs, it should *not* be used for launches.
     */
    experimentalNsrTeamWsjData?: Schema$QualityNsrExperimentalNsrTeamWSJData[];
    /**
     * This field is *not* propagated to shards. It is meant to be populated at serving time using one of the versions present in the `experimental_nsr_team_wsj_data` field above (using the `ExperimentalNsrTeamDataOverridesParams` opti to populate it; see http://source/search?q=ExperimentalNsrTeamDataOverridesParams%20file:ascorer.proto). The purpose of this field is to be read by an experimental Q* component, in order to quickly run LEs with new delta components. See go/0DayLEs for details.
     */
    experimentalQstarDeltaSignal?: number | null;
    /**
     * This field is *not* propagated to shards. It is meant to be populated at serving time using one of the versions present in the `experimental_nsr_team_wsj_data` field above (using the `ExperimentalNsrTeamDataOverridesParams` opti to populate it; see http://source/search?q=ExperimentalNsrTeamDataOverridesParams%20file:ascorer.proto). The purpose of this field is to be read by an experimental Q* component, in order to quickly run LEs with new components. See go/0DayLEs for details.
     */
    experimentalQstarSignal?: number | null;
    /**
     * This field is *not* propagated to shards. It is meant to be populated at serving time using one of the versions present in the `experimental_nsr_team_wsj_data` field above (using the `ExperimentalNsrTeamDataOverridesParams` opti to populate it; see http://source/search?q=ExperimentalNsrTeamDataOverridesParams%20file:ascorer.proto). The purpose of this field is to be read by an experimental Q* component, in order to quickly run LEs with new site components. See go/0DayLEs for details.
     */
    experimentalQstarSiteSignal?: number | null;
    /**
     * S2V low quality score: converted from quality_nsr.NsrData, applied in Qstar. See quality_nsr::util::ConvertNsrDataToLowQuality.
     */
    lowQuality?: number | null;
    /**
     * nav_demotion: converted from QualityBoost.nav_demoted.boost.
     */
    navDemotion?: number | null;
    /**
     * NSR confidence score: converted from quality_nsr.NsrData.
     */
    nsrConfidence?: number | null;
    /**
     * NSR override bid, used in Q* for emergency overrides.
     */
    nsrOverrideBid?: number | null;
    /**
     * Versioned NSR score to be used in continuous evaluation of the upcoming NSR version and assess quality impact on various slices.
     */
    nsrVersionedData?: Schema$NSRVersionedItem[];
    /**
     * PairwiseQ data for QTJ. This field is *not* propagated to shards, but is populated at serving time by go/web-signal-joins. See b/175762140
     */
    pairwiseqScoringData?: Schema$PairwiseQScoringData;
    /**
     * Versioned PairwiseQ score to be used in continuous evaluation of the upcoming PairwiseQ versions and assess quality impact on various slices.
     */
    pairwiseqVersionedData?: Schema$PairwiseQVersionedItem[];
    /**
     * This is the encoding of Panda fields in the proto SiteQualityFeatures in quality/q2/proto/site_quality_features.proto. The encoding/decoding is performed using functions from quality_coati::coati_util.
     */
    pandaDemotion?: number | null;
    /**
     * Encoded page-level PQ signals.
     */
    pqData?: number | null;
    /**
     * Stripped page-level signals, not present in the encoded field 'pq_data'.
     */
    pqDataProto?: Schema$QualityNsrPQData;
    productReviewPDemotePage?: number | null;
    /**
     * Product review demotion/promotion confidences. (Times 1000 and floored)
     */
    productReviewPDemoteSite?: number | null;
    productReviewPPromotePage?: number | null;
    productReviewPPromoteSite?: number | null;
    /**
     * Fields product_review_p_review_page and product_review_p_uhq_page are for promoting/demoting HQ/LQ review pages in NGS. See go/pr-boosts for details. The possibility of a page being a review page.
     */
    productReviewPReviewPage?: number | null;
    /**
     * The possibility of a page being a high quality review page.
     */
    productReviewPUhqPage?: number | null;
    /**
     * Scam model score. Used as one of the web page quality qstar signals. Value range from 0 to 1023.
     */
    scamness?: number | null;
    /**
     * serp demotion: applied in Qstar.
     */
    serpDemotion?: number | null;
    /**
     * site_authority: converted from quality_nsr.SiteAuthority, applied in Qstar.
     */
    siteAuthority?: number | null;
    /**
     * Versioned TopicEmbeddings data to be populated later into superroot / used directly in scorers.
     */
    topicEmbeddingsVersionedData?: Schema$QualityAuthorityTopicEmbeddingsVersionedItem[];
    /**
     * Unauthoritative score. Used as one of the web page quality qstar signals.
     */
    unauthoritativeScore?: number | null;
    /**
     * NSR for low-quality videos, converted from quality_nsr.NsrData.vlq_nsr.
     */
    vlqNsr?: number | null;
  }
  /**
   * The following protobuf is used to store an attribution from one page to (usually) one other page, giving credit for the content. This information is used during ranking to promote the attributed page. This protobuf is copied from a quality_contra::SelectedAttribution. See //quality/contra/authorship/attribution and https://qwiki.corp.google.com/display/Q/ContentTrackingContentAttribution.
   */
  export interface Schema$ContentAttributions {
    /**
     * Selected outgoing attributions extracted on FreshDocs.
     */
    freshdocsOutgoing?: Schema$ContentAttributionsOutgoingAttribution[];
    /**
     * Selected outgoing attributions extracted via offline MR jobs.
     */
    offlineOutgoing?: Schema$ContentAttributionsOutgoingAttribution[];
    /**
     * Selected outgoing attributions extracted online on Alexandria.
     */
    onlineOutgoing?: Schema$ContentAttributionsOutgoingAttribution[];
  }
  /**
   * This is a copy of quality_contra::SelectedAttribution::SelectedInfo. The url is converted to docid and other fields are copied directly.
   */
  export interface Schema$ContentAttributionsOutgoingAttribution {
    bestEvidenceType?: string | null;
    docid?: string | null;
    properties?: number | null;
    usableForClustering?: boolean | null;
  }
  export interface Schema$ContentAwareCropsIndexing {
    /**
     * Compact representation for Mustang storage. See image/search/utils/packed_crops.h for details on the packing format.
     */
    mustangBytes?: string | null;
    mustangBytesVersion?: number | null;
  }
  /**
   * Contains lexical metadata for a given reference. For example, this proto will be used to store locale-specific Lexical mids for contact relationships (e.g. /g/11gv0vypg4 is the mid for mother in english and /g/11gmy_gv87 is for mother in french) as an extension to QRefAnnotation::other_metadata, when available.
   */
  export interface Schema$CopleyLexicalMetadata {
    /**
     * Mid for an entity that has lexical data (a LexiconEntry). See https://g3doc.corp.google.com/nlp/generation/g3doc/lexical_data.md for for more information about lexical data. This is the canonical mid for this entity (eg. it would be for "mother" in EN even if user referred to "mom").
     */
    canonicalLexicalMid?: string | null;
  }
  /**
   * Represents a reference made by a user that refers to some personal entity.
   */
  export interface Schema$CopleyPersonalReference {
    /**
     * The manner in which the entity was referenced (e.g. "my hotel", "the airport").
     */
    personalReferenceType?: string | null;
  }
  /**
   * General message used to store metadata about references to personal entities, even if those entities cannot be resolved.
   */
  export interface Schema$CopleyPersonalReferenceMetadata {
    /**
     * A list of all references made. Empty if no personal references exist. Multiple references can be present when multiple references were made in a single query, or the type of reference was ambiguous.
     */
    references?: Schema$CopleyPersonalReference[];
    /**
     * The strength of the personal reference. For example "my flight" may receive a high reference_score, whereas "the airport" may receive a low score.
     */
    referenceScore?: number | null;
    /**
     * Subreference metadata for all compound references on this span.
     */
    subreferenceMetadata?: Schema$CopleySubreferenceMetadata;
  }
  export interface Schema$CopleySourceTypeList {
    sourceTypeMetadata?: Schema$CopleySourceTypeMetadata[];
  }
  /**
   * Contains the source and type information related to a personal entity, for example if it's an hotel or a restaurant (type) and if it comes from gmail, calendar, etc. (source). Next ID: 13
   */
  export interface Schema$CopleySourceTypeMetadata {
    /**
     * Annotation ID of a contact annotation, e.g. a relationship set via Assistant. This ID is generated by People Write Server. It is used to delete Contact Annotations via People API.
     */
    contactAnnotationId?: string | null;
    displayableName?: string | null;
    /**
     * Only used if personal_data_provenance == PERSONAL_SOURCE_GMAIL. Used to create a link to the source email in the form: mail.google.com/mail/u/0/?extsrc=sync&client=h&plid={email_identifier\}
     */
    emailIdentifier?: string | null;
    /**
     * Populated for some footprints data sources; uniquely identifies the footprint that generated the personal data that this provenance is attached to.
     */
    eventId?: Schema$EventIdMessage;
    localDiscoverySettingsMetadata?: Schema$PersonalizationSettingsApiProtoLocalDiscoveryLocalDiscoverySettingsMetadata;
    personalDataProvenance?: string | null;
    personalDataType?: string | null;
    provenanceCategory?: string[] | null;
    /**
     * Sensitivity applying to this copley annotation.
     */
    sensitivity?: Schema$KnowledgeAnswersSensitivitySensitivity;
  }
  /**
   * Represents the most compound resolved entities and most nested unresolved references for a span. Useful for punting.
   */
  export interface Schema$CopleySubreferenceMetadata {
    /**
     * Resolved entities are sorted from highest resolution score to lowest.
     */
    mostCompoundResolvedEntities?: Schema$CopleySubreferenceResolution[];
    /**
     * This is a merged representation of the compound reference having the most_compound_resolved_entities as an argument.
     */
    mostNestedUnresolvedReference?: Schema$CopleySubreferenceReference;
  }
  /**
   * Represents a reference that may be part of a larger compound reference. For example, "my brother's birthday" will have a subreference that may have references for "my brother".
   */
  export interface Schema$CopleySubreferenceReference {
    /**
     * Type of reference. There may be multiple for a single reference (e.g. relationship and contact).
     */
    personalReferenceTypes?: string[] | null;
    /**
     * Highest reference score for any references merged in this span.
     */
    referenceScore?: number | null;
    /**
     * Only set for unresolved relationship references and can be used to get the canonical word for the relationship (e.g. "mother") in TTS.
     */
    relationshipLexicalInfo?: Schema$CopleyLexicalMetadata;
  }
  /**
   * Represents a resolution that may be part of a larger compound reference. For example, "my brother's birthday" will have a subreference that may have resolutions for "my brother".
   */
  export interface Schema$CopleySubreferenceResolution {
    /**
     * Can be used with PKG Service for looking up metadata about this entity at fulfillment/GenX time.
     */
    mid?: string | null;
    /**
     * Name of the entity represented by this resolution.
     */
    name?: string | null;
    /**
     * A resolution score of 0 indicates that it did not resolve to a real entity.
     */
    resolutionScore?: number | null;
  }
  export interface Schema$CorpusSelectionInfo {
    corpus?: string | null;
    /**
     * Corpus specific score for an image
     */
    corpusScore?: number | null;
    /**
     * Whether an image was selected for indexing.
     */
    isSelectedForIndexing?: boolean | null;
    /**
     * Set of referrers indexed with the image.
     */
    referrerDocid?: string[] | null;
    /**
     * Set of referrer urls indexed with the image.
     */
    referrerUrls?: string[] | null;
  }
  export interface Schema$CountryClickDistribution {
    /**
     * To store confidence in the distribution in cases when total is not set.
     */
    confidence?: number | null;
    item?: Schema$CountryClickDistributionItem[];
    /**
     * To store total clicks on this page/domain.
     */
    total?: number | null;
  }
  export interface Schema$CountryClickDistributionItem {
    doubleValue?: number | null;
    name?: string | null;
    value?: number | null;
  }
  /**
   * If you add new fields to this message, do not use any tag value less than the "Next free tag" below. The lower tag values might be missing in this file, but they were used in past for some field, so cannot be used again. Next free tag: 44
   */
  export interface Schema$CountryCountryAttachment {
    /**
     * Store weighted click distribution for page level country-id classification.
     */
    clickDistribution?: Schema$CountryClickDistribution;
    /**
     * Is true if the country attachment was computed through the UGC pipeline.
     */
    countryidFromUgc?: boolean | null;
    /**
     * A non critical field to store debug info for a country attachment. Used in experiments and for debugging.
     */
    debug?: string | null;
    /**
     * Set to the signal source URLs when merging country signals in Alexandria during sitemoves. Essentially if sites A and B move to C, and we merge A and B's signal to C, in the countryattachment signal C will have URL A and B as source_url. Only used for debugging and it doesn't show up in docjoins.
     */
    debugSourceUrl?: string[] | null;
    /**
     * Specifies the origin of `geo_locations`. Right now, it can either come from deprecated Docloc system or the new Brainloc system when Docloc doesn't have sufficient evidence.
     */
    documentLocationSource?: string | null;
    existNextLevel?: boolean | null;
    /**
     * Booleans to keep track of where the country-id of the page came from. These are used for debugging and/or unittests, and cleared in production.
     */
    fromLanguageFallback?: boolean | null;
    fromRestricts?: boolean | null;
    fromSgDomains?: boolean | null;
    fromTld?: boolean | null;
    fromUgc?: boolean | null;
    fromUrlPattern?: boolean | null;
    fromWmx?: boolean | null;
    /**
     * New MetroID: Now called GeoLocations since the locations could be sublocalities, cities or states. GeoLocations are always more fine grained than country. TODO (jayeshv): Once new MetroID/GeoLocations is launched everywhere, deleted old MetroID related fields.
     */
    geoLocations?: Schema$CountryGeoLocations;
    global?: boolean | null;
    /**
     * Set to true if the local_countries field can be used for country restricts as well.
     */
    isValidForCountryRestrict?: boolean | null;
    /**
     * two-letter(lower-case) countrycode, e.g. us countries that is local to
     */
    localCountries?: string[] | null;
    /**
     * Fields that actually store the country id in docjoins. The format of this data is defined in //i18n/identifiers/stableinternalregionconverter.cc. Converter defined there can be used to convert it to RegionCode format.
     */
    localCountryCodes?: number[] | null;
    /**
     * Metro locations: list of NavBoost feature V2 associated with a doc, along with the enclosing province. Metro locations with new tags.
     */
    metroIdList?: Schema$CountryMetroNBFeature[];
    /**
     * Metro level data. metro_location_id stores geotokens for metro restricts.
     */
    metroLocationId?: string[] | null;
    /**
     * Metro navboost: list of (NavBoost feature V2, navboost float) pairs.
     */
    metroNavboost?: Schema$CountryMetroNBFeature[];
    provinceGeotokenList?: Schema$CountryProvinceGeotoken[];
    /**
     * two-letter(lower-case) countrycode, e.g. us countries that is related to, but not local to
     */
    relatedCountries?: string[] | null;
    relatedCountryCodes?: number[] | null;
    /**
     * List of two-letter(lower-case) countrycodes(e.g. us) valid for restricts. Typically cloned out of local_countries if is_valid_for_country_restrict is set to true.
     */
    restrictCountries?: string[] | null;
    /**
     * [Experimental]: Top salient countries for a doc. If a country can not be found on this field it can be considered that this doc is not relevant to it.
     */
    salientCountries?: Schema$CountrySalientCountry[];
    salientCountrySet?: Schema$QualitySalientCountriesSalientCountrySet;
    /**
     * Domain name of keys in filtering metro reducer class, used only by the intermediate mapreduces to produce filtered data.
     */
    sitename?: string | null;
    /**
     * Super global pages get lesser demotion than global pages. A document can only be either global or super_global but not both.
     */
    superGlobal?: boolean | null;
    urlPatternBasedCountry?: number | null;
    /**
     * Language and country extracted using the URL pattern map.
     */
    urlPatternBasedLanguage?: number | null;
    /**
     * This is used to store the visible country id computed from logs data
     */
    userVisibleCountryFromLogs?: string | null;
    /**
     * This is the country id we show to users on the result page. This is kept different from country demotion country id because we dont want to expose our backoff and url based detection algorithm - also we want to be ultra conservative in showing this.
     */
    userVisibleLocalCountry?: number | null;
    /**
     * If result is global, store weight above ideal, as a confidence signal. Used in query localness, cleared in production CountryAttachment.
     */
    weightAboveIdealForLocalness?: number | null;
    /**
     * Country specified for a web-site through webmaster console.
     */
    wmxCountry?: string | null;
  }
  /**
   * Stores one location and all meta-data associated with that location.
   */
  export interface Schema$CountryGeoLocation {
    /**
     * The radius (in miles) around the assigned location that the document gets 50% of its clicks.
     */
    clickRadius50Percent?: number | null;
    /**
     * Confidence on the location. Ranges in [0.0, 1.0]. Cleared during index creation.
     */
    confidence?: number | null;
    /**
     * Confidence mapped to [0, 100]. Converted to integer for efficient storage. Populated during index creation.
     */
    confidencePercent?: number | null;
    /**
     * Used for compressed docloc data. In compressed data, instead of location_info, only an integer ID for that LocationInfo is stored. A separate lookup table is used to get full LocationInfo from the internal ID.
     */
    internalId?: number | null;
    locationInfo?: Schema$CountryLocationInfo;
    /**
     * True if this location is assigned to one of the subpages, and not to the page itself. If the total number of locations assigned to all the subpages of a page is small (usually up to 5), then that page also gets assigned those locations, and this flag is set for those locations.
     */
    propagatedFromASubpage?: boolean | null;
  }
  /**
   * List of locations assigned to a document.
   */
  export interface Schema$CountryGeoLocations {
    geoLocation?: Schema$CountryGeoLocation[];
    /**
     * This will be set to true for documents which receive several clicks but are not assigned any location because the click distribution is flat. Typical examples are global sites like facebook.com, chains like walmart.com, informational sites like wikipedia.org etc. This flag is not propagated to deeper pages since this signal is meant to indicate that a website or a part of website is conclusively non-local, so propagating this information to deeper pages does not make sense. If this flag is set, then the only possible geo_location will be the ones which are propagated_from_a_subpage.
     */
    isNonLocationSpecific?: boolean | null;
    /**
     * Depth of the URL from it's nearest parent in GeoLocation data. Webpages inherhit locations from their parent pages. For example, if foo.com/a is assigned location L1, and foo.com/a/b is not assigned any location, then http://www.foo.com/a/b inherits location L1 from it's nearest parent foo.com/a in GeoLocation data. This attribute is the distance from the nearest parent which is present in GeoLocation data. In this particular case, it will be 1.
     */
    propagationDepthFromParent?: number | null;
  }
  /**
   * This represents one location.
   */
  export interface Schema$CountryLocationInfo {
    /**
     * The latitude and longitude of the conceptual center of the location. For cities, this would be the center of the downtown, or maybe the location of city hall. For states and countries it might be the capital city. But there are no guarantees and this may be any random point inside the location.
     */
    center?: Schema$GeostorePointProto;
    city?: string | null;
    /**
     * Human readable name hierarchy. Only the relevant fields will be present. For example for city GeoLocations, sub_locality field will not be present. Cleared during index creation.
     */
    country?: string | null;
    county?: string | null;
    /**
     * Oyster feature ID of the enclosing state. Cleared during index creation.
     */
    enclosingStateFeatureId?: Schema$GeostoreFeatureIdProto;
    /**
     * Oyster feature ID of the location. Cleared during index creation.
     */
    featureId?: Schema$GeostoreFeatureIdProto;
    state?: string | null;
    /**
     * 32 bit fingerprint of the feature id of the state of this location. For cities and sub-localities it will be the enclosing state. For state locations, it will be fingerprint of the feture-id of the location itself. Populated during index creation.
     */
    stateIdFprint?: number | null;
    subLocality?: string | null;
    /**
     * Type of the location (sub-locality, city, state etc).
     */
    type?: string | null;
  }
  /**
   * A metro feature, keyed by NavBoost feature id V2. This can be a metro id, a boost, or extended in the future to add probabilities or weights.
   */
  export interface Schema$CountryMetroNBFeature {
    /**
     * The enclosing_province_geotoken is a 32 bit fingerprint of the state encosing the (metro) id. MetroId's can span multiple states. Enclosing geotoken is filled in with the state name for disambiguation. ProvinceGeotoken field is different as it indicates an "interest". Format: 32 bit fingerprint(__state__country).
     */
    enclosingProvinceGeotoken?: number | null;
    /**
     * A 32 bit navboost v2 feature id encoding (country, language, metro). NavBoosterUtils class (google3/quality/navboost/nav_booster_utils.h) provides functions to decode this feature.
     */
    id?: number | null;
    /**
     * This is the multiplier to apply to the result for this locale & query. NOTE: This is for serving purposes only and should not be populated in the index.
     */
    navboost?: number | null;
  }
  /**
   * A 32 bit fingerprint of a state level geotoken. The geotoken is in the following format: __state__country. These indicate a page is of interest to these states/regions of a country. The use of message is to enable easy additions of probabilities or weights per metro id in the future.
   */
  export interface Schema$CountryProvinceGeotoken {
    geotoken?: number | null;
  }
  /**
   * Salient Countries is an estimated probability (salience) of a doc to be relevant to a country. On this message, countries are represented as int32 (the format of this data is defined in i18n/identifiers/stableinternalregionconverter.cc). Salience is a value in range [0.0 - 1.0] in which 1.0 represents a high likelihood to be relevant to the country
   */
  export interface Schema$CountrySalientCountry {
    compressedSalience?: number | null;
    countryCode?: number | null;
    salience?: number | null;
  }
  /**
   * Proto contains parameters for a multiple component distributions, where each component has non-negative weight and the sum of component weights is 1.
   */
  export interface Schema$CrawlerChangerateMultipleComponentDistribution {
    components?: Schema$CrawlerChangerateSingleComponentDistribution[];
  }
  /**
   * Proto contains parameters of a single component distribution.
   */
  export interface Schema$CrawlerChangerateSingleComponentDistribution {
    /**
     * Scaling factor to ensure the approximated posterior to have the same scale as the product of prior and likelihood. This value is used to compute posterior weights. Uses log scale to provide a wider range. This field is for internal use only.
     */
    logScaling?: number | null;
    /**
     * The type indicates the type of the distribution.
     */
    type?: string | null;
    /**
     * The weight is only used in multiple component scenarios.
     */
    weight?: number | null;
  }
  /**
   * NEXT_TAG: 13
   */
  export interface Schema$CrawlerChangerateUrlChange {
    /**
     * Duplicate UrlChanges crawled within a specified time range will be merged together. UrlChanges are considered duplicates if the simhash, simhash_is_trusted, simhash_v2, simhash_v2_is_trusted, and shingle_simhash are the same. additional_changes_merged indiciates the number of duplicate UrlChanges merged into this UrlChange.
     */
    additionalChangesMerged?: number | null;
    /**
     * Deprecated fields. The fraction of tiles (0 to 1) that changed.
     */
    fractionalTileChange?: number | null;
    /**
     * The length in seconds of the change.
     */
    interval?: number | null;
    /**
     * Whether the content of the off-domain links changed.
     */
    offDomainLinksChange?: boolean | null;
    /**
     * The new count of off-domain links, if they changed.
     */
    offDomainLinksCount?: number | null;
    /**
     * The new count of on-domain links, if the count changed.
     */
    onDomainLinksCount?: number | null;
    /**
     * Whether the number of on-domain links changed.
     */
    onDomainLinksCountChange?: boolean | null;
    /**
     * The old simhash value obtained from shingles.
     */
    shingleSimhash?: Schema$IndexingConverterShingleFingerprint;
    /**
     * The simhash-v1 value. Use of simhash-v1 is deprecated, and newer UrlChange should only contain simhash-v2. During this transition period, UrlChange can contain either simhash or simhash_v2. It is possible that previous UrlChange only contain simhash-v1 and the next UrlChange only contain simhash-v2. In this case, we skip that interval in our changerate computation. [go/changerate-simhash-v2-migration]
     */
    simhash?: string | null;
    /**
     * Whether the simhash-v1 should be trusted.
     */
    simhashIsTrusted?: boolean | null;
    /**
     * The simhash-v2 value.
     */
    simhashV2?: string | null;
    /**
     * Whether the simhash-v2 value should be trusted.
     */
    simhashV2IsTrusted?: boolean | null;
  }
  /**
   * The next available field number is 22. To access the best estimate of change period, please use GetChangePeriod in predict-change-rate.h to select between this and other change period estimates below.
   */
  export interface Schema$CrawlerChangerateUrlChangerate {
    /**
     * The approximated posterior distribution.
     */
    approximatedPosterior?: Schema$CrawlerChangerateMultipleComponentDistribution;
    /**
     * The "significance" of the average change we saw of this document (from 0 to 1). Influenced by content changes. This can be used for prioritizing the crawl (higher significance first).
     */
    averageChangeSignificance?: number | null;
    /**
     * //////////////////////////////////////////////////////////////////////////// The classic changerate estimation. //////////////////////////////////////////////////////////////////////////// The classic estimate of change period (in seconds). It is computed by inserted a "fake" change and no-change interval as a prior distribution. This field is generally not used and should NOT be accessed directly. See above for correct method for determining the change period estimate.
     */
    changeperiod?: number | null;
    /**
     * The confidence (between 0 and 1) in the changeperiod guess.
     */
    confidence?: number | null;
    /**
     * //////////////////////////////////////////////////////////////////////////// The changerate estimation based on the global prior. //////////////////////////////////////////////////////////////////////////// The global-based changeperiod. This is our estimate (in seconds) for the average time between changes. It is computed using the new prior method based on global_based_prior_period and the global_based_prior_strength specified below. This is used for computing pattern priors. Use pattern_based_change_period or changeperiod fields for all other purposes.
     */
    globalBasedChangePeriod?: number | null;
    /**
     * The 'confidence' of the global-based changeperiod. This is the n-th root of the posterior evaluated at MAP point, where n is the number of history intervals. For now, it is hard to interpret the meaning of the absolute values of 'average' posterior cross different sets of data.
     */
    globalBasedChangePeriodConfidence?: number | null;
    /**
     * The 2 parameters below specify the prior employed in calculating the global_based_change_period. These values are precomputed through an offline analysis and specified via flags.
     */
    globalBasedPriorPeriod?: number | null;
    globalBasedPriorStrength?: number | null;
    /**
     * The last time (unix timestamp) we saw a changed copy of the document. Provided iff we have seen the page change.
     */
    lastChanged?: number | null;
    /**
     * The "significance" of the last change we saw of this document (from 0 to 1). Influenced by content changes, etc. This can be used for prioritizing the crawl (higher significance first).
     */
    lastChangeSignificance?: number | null;
    /**
     * The last time (unix timestamp) we saw a fetched copy of the document.
     */
    lastFetched?: number | null;
    /**
     * The number of intervals we've seen for this document (where an interval is two different versions).
     */
    numIntervals?: number | null;
    /**
     * //////////////////////////////////////////////////////////////////////////// The changerate estimation based on the pattern prior. //////////////////////////////////////////////////////////////////////////// The pattern-based changeperiod. This is our estimate (in seconds) for the average time between changes. It is calculated based on the pattern_based_prior_period and pattern_based_prior_strength below. This quantity will eventually replace the old changeperiod calculation.
     */
    patternBasedChangePeriod?: number | null;
    /**
     * The same as global_based_change_period_confidence, except it is computed using pattern based priors.
     */
    patternBasedChangePeriodConfidence?: number | null;
    /**
     * The lower edge of a confidence interval for the pattern-based change period.
     */
    patternBasedLowerChangePeriod?: number | null;
    /**
     * The 2 parameters below specify the prior employed in calculating the pattern_based_change_period. These values are calculated in a separate process and looked up based on the URL pattern.
     */
    patternBasedPriorPeriod?: number | null;
    patternBasedPriorStrength?: number | null;
    /**
     * The version number of the algorithm, refer to ChangePeriodVersion for more information.
     */
    patternChangePeriodVersion?: number | null;
    /**
     * //////////////////////////////////////////////////////////////////////////// Basic information of a document. //////////////////////////////////////////////////////////////////////////// The type of the document determined by crawl histories, refer to TYPE for more information.
     */
    type?: number | null;
    /**
     * //////////////////////////////////////////////////////////////////////////// The UGC changerate estimation. //////////////////////////////////////////////////////////////////////////// Information on change period generated from user generated content (UGC) change history.
     */
    ugcChangePeriod?: number | null;
    ugcChangePeriodConfidence?: number | null;
  }
  export interface Schema$CrawlerChangerateUrlHistory {
    /**
     * All the changes we've seen for this URL.
     */
    change?: Schema$CrawlerChangerateUrlChange[];
    /**
     * The latest version we've seen.
     */
    latestVersion?: Schema$CrawlerChangerateUrlVersion;
    /**
     * This field in only set in 'url_history' column of Union repository to avoid having to read CompositeDocs.
     */
    url?: string | null;
  }
  /**
   * NEXT_TAG: 15
   */
  export interface Schema$CrawlerChangerateUrlVersion {
    /**
     * Same as the field in UrlChange. This allows us to merge identical UrlVersions into a single UrlVersion.
     */
    additionalChangesMerged?: number | null;
    /**
     * The content type of the page.
     */
    contentType?: number | null;
    /**
     * Whether this is an IMS response (a 304, not modified).
     */
    isImsNotModified?: boolean | null;
    /**
     * The date from the LastModified header, if present.
     */
    lastModified?: number | null;
    /**
     * The checksum of all the off-domain links on the page.
     */
    offDomainLinksChecksum?: number | null;
    /**
     * The count of all the off-domain links on the page.
     */
    offDomainLinksCount?: number | null;
    /**
     * The count of all the on-domain links on the page. We aren't worried about the contents themselves, since they might often change (e.g., session ids). We assume that a change in the number of links is significant, however.
     */
    onDomainLinksCount?: number | null;
    /**
     * The simhash value obtained from shingles.
     */
    shingleSimhash?: Schema$IndexingConverterShingleFingerprint;
    /**
     * The simhash-v1 value. The simhash-v1 is now deprecated and new UrlVersions should only populate simhash-v2. During migration phase from using simhash-v1 to simhash-v2, it is possible that previous UrlChange only contain simhash-v1 and the next UrlChange / UrlVersion could only contain simhash-v2. In this case, we skip that interval in our changerate computation. [go/changerate-simhash-v2-migration]
     */
    simhash?: string | null;
    /**
     * Whether the simhash-v1 should be trusted.
     */
    simhashIsTrusted?: boolean | null;
    /**
     * The simhash-v2 value.
     */
    simhashV2?: string | null;
    /**
     * Whether the simhash-v2 value should be trusted.
     */
    simhashV2IsTrusted?: boolean | null;
    /**
     * The tiles of the document body. We use int32s instead of int64s (the norm) in order to save space. Since rare inaccuracy doesn't really matter, we've decided this is an okay tradeoff.
     */
    tile?: number[] | null;
    /**
     * The timestamp we crawled the page.
     */
    timestamp?: number | null;
  }
  export interface Schema$CrowdingPerDocData {
    newscluster?: Schema$CrowdingPerDocDataNewsCluster[];
  }
  /**
   * For crowding in news we need to keep data about the last X clustering iterations around.
   */
  export interface Schema$CrowdingPerDocDataNewsCluster {
    /**
     * Fingerprint combination of all urls in a cluster
     */
    ClusterId?: string | null;
    /**
     * This is the X in the "and X related \>\>" link on headlines and search results
     */
    ClusterSize?: number | null;
    /**
     * When was this clustered (needed for keeping last X iterations around and discarding earlier ones)
     */
    ClusterTimeStamp?: number | null;
  }
  export interface Schema$DeepCropIndexing {
    /**
     * Compact representation for indexing, see creatism::CropBitmap for details on the packing format.
     */
    cropBytes?: string | null;
  }
  export interface Schema$DeepCropPixels {
    /**
     * Pixels version of the DeepCropIndexing bytes, this corresponds to the crop box for a given image (based input image size and desired aspect ratio).
     */
    x0?: number | null;
    x1?: number | null;
    y0?: number | null;
    y1?: number | null;
  }
  /**
   * NOTE: In segindexer, the docproperties of a document may be reused from a previous cycle if its content is not changed. If you add a new field to DocProperties, make sure it is taken care (i.e., gets copied from a previous cycle to the current document) in CDocProperties::EndDocument().
   */
  export interface Schema$DocProperties {
    /**
     * The average weighted font size of a term in the doc body
     */
    avgTermWeight?: number | null;
    /**
     * Missing or meaningless title
     */
    badTitle?: boolean | null;
    badtitleinfo?: Schema$DocPropertiesBadTitleInfo[];
    /**
     * A Language enum value. See: go/language-enum
     */
    languages?: number[] | null;
    /**
     * Leading text information generated by google3/quality/snippets/leadingtext/leadingtext-detector.cc
     */
    leadingtext?: Schema$SnippetsLeadingtextLeadingTextInfo;
    numPunctuations?: number | null;
    numTags?: number | null;
    /**
     * The number of tokens, tags and punctuations in the tokenized contents. This is an approximation of the number of tokens, tags and punctuations we end up with in mustang, but is inexact since we drop some tokens in mustang and also truncate docs at a max cap.
     */
    numTokens?: number | null;
    /**
     * The restricts for CSE structured search.
     */
    proseRestrict?: string[] | null;
    restricts?: string[] | null;
    /**
     * The time CDocProperties::StartDocument() is called, encoded as seconds past the epoch (Jan 1, 1970). This value is always refreshed and not reused.
     */
    timestamp?: string | null;
    /**
     * Extracted from the title tag of the content. This is typically extracted by TitleMetaCollector defined at google3/segindexer/title-meta-collector.h. Please see its documentation for the format and other caveats.
     */
    title?: string | null;
  }
  /**
   * Bad title information.
   */
  export interface Schema$DocPropertiesBadTitleInfo {
    score?: number | null;
    type?: string | null;
  }
  /**
   * Protocol buffer for storing compressed feature.
   */
  export interface Schema$DrishtiCompressedFeature {
    featureName?: string | null;
    /**
     * in_range_bitstream is the string produced by range coder, while out_of_range_bitstream corresponds to the overflow stream, which is used whenever a quantized value is out of range. See https://cs.corp.google.com/piper///depot/google3/research/vision/piedpiper/brain/python/layers/entropy_models.py?l=225&cl=234825412
     */
    inRangeBitstream?: string | null;
    outOfRangeBitstream?: string | null;
  }
  export interface Schema$DrishtiDenseFeatureData {
    /**
     * If extra is present it must be of the same length as value.
     */
    extra?: Schema$DrishtiFeatureExtra[];
    generalExtra?: Schema$DrishtiFeatureExtra;
    /**
     * Dense data.
     */
    value?: number[] | null;
  }
  export interface Schema$DrishtiFeatureExtra {}
  export interface Schema$DrishtiFeatureSetData {
    /**
     * Extra information for this particular FeatureSetData (example timestamp of this frame in the video). (Almost never used).
     */
    extra?: Schema$DrishtiFeatureExtra[];
    /**
     * The following can have multiple FeatureSetElement(s) Each of these FeatureSetElement correspond to the various feature groups. One concrete example is the way these features are generated - example audio, video or OCR.
     */
    feature?: Schema$DrishtiFeatureSetDataFeatureSetElement[];
    /**
     * Labels for this particular FeatureSetData. (Almost never used). Only interesting when you have (for example) frame level labels.
     */
    label?: Schema$DrishtiLabelSetElement[];
  }
  /**
   * A FeatureSetElement stores the features coming from a single group.
   */
  export interface Schema$DrishtiFeatureSetDataFeatureSetElement {
    compressed?: Schema$DrishtiCompressedFeature;
    dense?: Schema$DrishtiDenseFeatureData;
    indexed?: Schema$DrishtiIndexedFeatureData;
    /**
     * A name for the feature group: example "AUDIO", "VIDEO", "OCR", etc.
     */
    name?: string | null;
    quantized?: Schema$DrishtiQuantizedDenseFeatureData;
    quantizedByteDense?: Schema$DrishtiQuantizedByteDenseFeatureData;
    quantizedByteIndexed?: Schema$DrishtiQuantizedByteIndexedFeatureData;
    sparse?: Schema$DrishtiSparseFeatureData;
  }
  /**
   * This represents a sequence (ordered) of FeatureSetData elements.
   */
  export interface Schema$DrishtiFeatureSetDataSequence {
    /**
     * FeatureSetData contains the features. In most scenarios, you only have one element. However, multiple elements are appropriate in case of videos where each element may correspond to a frame in the video.
     */
    element?: Schema$DrishtiFeatureSetData[];
    /**
     * Some extra information about this FeatureSetDataSequence. (Almost never used).
     */
    extra?: Schema$DrishtiFeatureExtra[];
    /**
     * Global (video-level) labels. In most cases, you only have one LabelSetElement. All the labels will be stored in this single LabelSetElement. Scenarios where you may have multiple LabelSetElement(s) is (for example) when you want to differentiate the labels into various sub-groups - eg, central vs relevant, kg-ids vs queries, etc.
     */
    label?: Schema$DrishtiLabelSetElement[];
    /**
     * If set, must be same length as element. Each entry is the timestamp in microseconds where the FeatureSetData element was extracted.
     */
    timestamp?: string[] | null;
  }
  export interface Schema$DrishtiIndexedFeatureData {
    /**
     * If extra is present it must be of the same length as index and value.
     */
    extra?: Schema$DrishtiFeatureExtra[];
    generalExtra?: Schema$DrishtiFeatureExtra;
    /**
     * Indexed data. index and value must be of the same length.
     */
    index?: string[] | null;
    value?: number[] | null;
  }
  export interface Schema$DrishtiLabelSetData {
    extra?: Schema$DrishtiFeatureExtra[];
    generalExtra?: Schema$DrishtiFeatureExtra;
    targetClass?: string[] | null;
    targetClassName?: string[] | null;
    targetValue?: number[] | null;
    targetWeight?: number[] | null;
    /**
     * Weight assigned to this set of labels.
     */
    weight?: number | null;
  }
  export interface Schema$DrishtiLabelSetElement {
    label?: Schema$DrishtiLabelSetData;
    name?: string | null;
  }
  /**
   * Proto message to store quantized dense feature data.
   */
  export interface Schema$DrishtiQuantizedByteDenseFeatureData {
    /**
     * If extra is present it must be of the same length as value.
     */
    extra?: Schema$DrishtiFeatureExtra[];
    generalExtra?: Schema$DrishtiFeatureExtra;
    /**
     * Quantized values for the feature.
     */
    value?: string | null;
  }
  /**
   * Proto message to store quantized indexed feature data.
   */
  export interface Schema$DrishtiQuantizedByteIndexedFeatureData {
    /**
     * If extra is present it must be of the same length as value.
     */
    extra?: Schema$DrishtiFeatureExtra[];
    generalExtra?: Schema$DrishtiFeatureExtra;
    index?: string[] | null;
    /**
     * Quantized values for the feature.
     */
    value?: string | null;
  }
  export interface Schema$DrishtiQuantizedDenseFeatureData {
    /**
     * If extra is present it must be of the same length as value.
     */
    extra?: Schema$DrishtiFeatureExtra[];
    generalExtra?: Schema$DrishtiFeatureExtra;
    /**
     * Quantized Dense data.
     */
    value?: string[] | null;
  }
  export interface Schema$DrishtiSparseFeatureData {
    /**
     * If extra is present it must be of the same length as label and value.
     */
    extra?: Schema$DrishtiFeatureExtra[];
    generalExtra?: Schema$DrishtiFeatureExtra;
    /**
     * Indexed data. label and value must be of the same length.
     */
    label?: string[] | null;
    value?: number[] | null;
  }
  /**
   * The attributes of encoded thumbnail images. Next id: 9.
   */
  export interface Schema$DrishtiVesperEncodedThumbnail {
    /**
     * Image size in bytes. Meaningful when contents are not stored inline (e.g., via `image_blob_id`).
     */
    byteSize?: string | null;
    /**
     * JPEG/WEBP quality factor in range [0,100].
     */
    encodingQuality?: number | null;
    /**
     * Image encoding type.
     */
    encodingType?: string | null;
    height?: number | null;
    /**
     * The Blob ID of the thumbnail image in the Blobstore. We recommend absolute IDs with universe prefix if this field is passed across systems. The owner of this blob is also responsible for data Wipeout compliance.
     */
    imageBlobId?: string | null;
    /**
     * Encoded thumbnail bytes. Prefer this over `image_string` as we are not supposed to store image bytes in a proto string field.
     */
    imageBytes?: string | null;
    /**
     * Please migrate to `image_bytes`.
     */
    imageString?: string | null;
    /**
     * Thumbnail resolution.
     */
    width?: number | null;
  }
  /**
   * LINT: LEGACY_NAMES MovingThumbnail is defined as a short video clip that represents the whole video content. Next id: 17.
   */
  export interface Schema$DrishtiVesperMovingThumbnail {
    /**
     * The begin timestamp in milliseconds.
     */
    beginTimestampMs?: number | null;
    /**
     * The duration of the moving thumbnail in milliseconds. Note that the duration may not be the difference between begin_timestamp_ms and end_timestamp_ms, esp when the moving thumbnail covers multiple clips from the video.
     */
    durationMs?: number | null;
    encodedGifAnimation?: string | null;
    /**
     * The encoded video string.
     */
    encodedVideoString?: string | null;
    /**
     * The encoded WebP animation.
     */
    encodedWebpAnimation?: string | null;
    /**
     * The end timestamp in milliseconds.
     */
    endTimestampMs?: number | null;
    /**
     * Pixel height of the moving thumbnail.
     */
    height?: number | null;
    /**
     * MovingThumbnail id (e.g., the video id).
     */
    id?: string | null;
    /**
     * If set, this is the algorithm version used to generate this moving thumbnail.
     */
    movingThumbnailerVersion?: string | null;
    /**
     * MovingThumbnail name.
     */
    name?: string | null;
    /**
     * The score of the moving thumbnail.
     */
    score?: number | null;
    scoreComponents?: Schema$DrishtiVesperMovingThumbnailScoreComponents;
    /**
     * A set of single frame thumbnails in the MovingThumbnail.
     */
    thumbnails?: Schema$DrishtiVesperThumbnail[];
    /**
     * MovingThumbnail type.
     */
    type?: string | null;
    /**
     * The actual quality of the Webp animation. Note this value may not be equal to the quality value requested in the animation creator's options. This is because other requirements, such as the max file size, may force the creator to lower the actual quality value.
     */
    webpQualityLevel?: number | null;
    /**
     * Pixel width of the moving thumbnail.
     */
    width?: number | null;
  }
  /**
   * Sum of individual score components within a moving thumbnail. Used as input for weight fitting.
   */
  export interface Schema$DrishtiVesperMovingThumbnailScoreComponents {
    audienceRewindRatioScore?: number | null;
    iconicFaceScore?: number | null;
    matchingScore?: number | null;
    motionScore?: number | null;
    titleMatchingScore?: number | null;
    videoThumbQualityScore?: number | null;
  }
  /**
   * The attributes of a video thumbnail.
   */
  export interface Schema$DrishtiVesperThumbnail {
    /**
     * Thumbnail dense features
     */
    denseFeatures?: number[] | null;
    /**
     * Thumbnail image as an encoded image. Deprecated, use encoded_thumbnails instead.
     */
    encodedImageString?: string | null;
    /**
     * Thumbnail image as an encoded image with smaller resolution. Deprecated, use encoded_thumbnails instead.
     */
    encodedImageStringSmall?: string | null;
    /**
     * Encoded thumbnail images.
     */
    encodedThumbnails?: Schema$DrishtiVesperEncodedThumbnail[];
    /**
     * Thumbnail id.
     */
    id?: string | null;
    /**
     * Text in video thumbnails that was detected by OCR.
     */
    ocrText?: string | null;
    /**
     * Thumbnail quality scores.
     */
    qualityScores?: Schema$DrishtiVesperThumbnailQualityScore[];
    /**
     * If true, this thumbnail should update default thumbnail.
     */
    shouldUpdateDefaultThumbnail?: boolean | null;
    /**
     * Thumbnailer Version.
     */
    thumbnailerModelVersion?: string | null;
    /**
     * Thumbnail timestamp in milliseconds.
     */
    timestampMs?: number | null;
    /**
     * Thumbnail type.
     */
    type?: string | null;
    userReportedThumbnail?: Schema$DrishtiVesperUserReportUserReportedThumbnail;
    /**
     * All user reported thumbnails of interest.
     */
    userReportedThumbnails?: Schema$DrishtiVesperUserReportUserReportedThumbnail[];
    /**
     * Thumbnail version, i.e., the unix time in seconds when the thumbnail was created.
     */
    version?: number | null;
  }
  export interface Schema$DrishtiVesperThumbnailQualityScore {
    score?: number | null;
    type?: string | null;
  }
  /**
   * Proto holding values for details about human labels.
   */
  export interface Schema$DrishtiVesperUserReportHumanLabel {
    racyLevel?: string | null;
  }
  /**
   * Proto holding values for details about score and the source model.
   */
  export interface Schema$DrishtiVesperUserReportModelScore {
    modelName?: string | null;
    score?: number | null;
  }
  /**
   * Proto holding values for user reported thumbnails. Next id: 12
   */
  export interface Schema$DrishtiVesperUserReportUserReportedThumbnail {
    denseFeatures?: number[] | null;
    /**
     * Number of days in which volume is calculated.
     */
    duration?: number | null;
    humanLabel?: Schema$DrishtiVesperUserReportHumanLabel;
    /**
     * Daily aggregared impressions for the reported video.
     */
    impressions?: number | null;
    /**
     * Whether the thumbnail needs a human label.
     */
    needHumanLabel?: boolean | null;
    rawHumanLabels?: Schema$DrishtiVesperUserReportHumanLabel[];
    reportScore?: Schema$DrishtiVesperUserReportModelScore;
    reportType?: string | null;
    score?: Schema$DrishtiVesperUserReportModelScore;
    useCase?: string | null;
    /**
     * Number of reports.
     */
    volume?: number | null;
  }
  /**
   * Video level container for thumbnail with its attributes, e.g., timestamp, id, quality scores, annotations, or features.
   */
  export interface Schema$DrishtiVesperVideoThumbnail {
    /**
     * Video id.
     */
    id?: string | null;
    movingThumbnails?: Schema$DrishtiVesperMovingThumbnail[];
    thumbnails?: Schema$DrishtiVesperThumbnail[];
  }
  /**
   * Deep-linking data is used to construct a deep-link URI for an activity or frame's embed, such that on click, the user is taken to the right place in a mobile app. If the app is not installed, the user is taken to the app store. If not on mobile, an analogous web uri is used.
   */
  export interface Schema$EmbedsDeepLinkData {
    /**
     * Application ID (or project ID) from Google API Console.
     */
    appId?: string | null;
    /**
     * The data for a Google API Console client is entered by a developer during client registration and is stored in PackagingService.
     */
    client?: Schema$EmbedsPackagingServiceClient[];
    /**
     * The ID for non-URL content. Embeds may either have no analogous web presence or prefer a native mobile experience if supported. In the case of no web presence, instead of setting the "url" field of an embed, such developers will set this field and other content fields, e.g. thumbnail, title, description. If set, this field is used to construct the deep-link URI. Note that the native experience is preferred over the web link and the web link is used as a fallback.
     */
    deepLinkId?: string | null;
    /**
     * Analogous web presence. Used as desktop fallback or when no native link data is present.
     */
    url?: string | null;
  }
  /**
   * Represents an embedded object in an update. This is a wrapper class that can contain a single specific item proto in an extension field. Think of it as a base class like `Message` in Java. Each item proto must declare that it extends this proto: message ExampleObject { option (item_type) = EXAMPLE_OBJECT; extend EmbedClientItem { optional ExampleObject example_object = ; \} \} See go/es-embeds for details.
   */
  export interface Schema$EmbedsEmbedClientItem {
    /**
     * The canonical ID of the embed. If absent, the canonical ID is equal to the ID; if present, then the canonical ID represents an "equivalence class" of embeds which really refer to the same object. (For example, the URLs http://www.foo.com/ and http://foo.com/ refer to the same object) This field may be updated periodically by background processes.
     */
    canonicalId?: string | null;
    /**
     * Deep-linking data to take the user to the right place in a mobile app. This is only used for preview and attribution. Links that are specific to a given embed type should live on that specific embed's proto by using Link. See http://goto.google.com/mariana-design.
     */
    deepLinkData?: Schema$EmbedsDeepLinkData;
    /**
     * The ID of the embed. This corresponds to the schema.org ID, as represented in the ItemScope.id field.
     */
    id?: string | null;
    /**
     * The provenance of the embed, populated when the embed originated from a web fetch. The provenance captures information about the web page the embed had originated, like the URL that was retrieved and the retrieved URL's canonical form. This is useful in the case where the URL shared by the URL redirects (e.g., in the case of a shortened URL).
     */
    provenance?: Schema$EmbedsProvenance;
    /**
     * The ID used to identify the embed during rendering. This field will match ID, if set, otherwise it will be the ID of the parent activity. This field is only populated on the server for client use and is not persisted to storage.
     */
    renderId?: string | null;
    /**
     * Signature of the embed, used for verification.
     */
    signature?: string | null;
    /**
     * Transient generic data that will not be saved on the server.
     */
    transientData?: Schema$EmbedsTransientData;
    /**
     * The first value in `type` determines which extension field will be set. When creating an EmbedClientItem, you only need to set the first (primary) type in this field. When the server receives the item, it will populate the full type list using the parent annotations in the ItemType enum.
     */
    type?: string[] | null;
  }
  /**
   * Developers register a client in Google API Console to get the deep-linking feature on Google+ posts or frames about their apps. The client data is stored in this proto.
   */
  export interface Schema$EmbedsPackagingServiceClient {
    /**
     * Android app's package name to generate the deep-link URI.
     */
    androidPackageName?: string | null;
    /**
     * iOS app's App Store ID to generate the App Store URL when app is not installed on device.
     */
    iosAppStoreId?: string | null;
    /**
     * iOS app's bundle ID to generate the deep-link URI.
     */
    iosBundleId?: string | null;
    /**
     * Type of Google API Console client.
     */
    type?: string | null;
  }
  /**
   * This field records where the ItemScope was retrieved, if it was created via a web fetch.
   */
  export interface Schema$EmbedsProvenance {
    /**
     * Annotation blob from Annotation Service.
     */
    annotationBlob?: string | null;
    /**
     * Canonical url of the retrieved_url, if one was resolved during retrieval, for example, if a rel="canonical" link tag was provided in the retrieved web page.
     */
    canonicalUrl?: string | null;
    /**
     * The url originally passed in the PRS request, which should be used to re-discover the content. Note that this URL may be a forwarding service or link shortener (bit.ly), so it should not be assumed to be canonical, but should be used for navigation back to the original source of the itemscope.
     */
    inputUrl?: string | null;
    /**
     * Contains exact types as parsed, whether or not we recognized that type at parse time. If an itemscope is created by merging SchemaOrg markup and open graph markup then the first itemtype would be schemaorg type, the second would be open graph and so on. example: http://schema.org/VideoObject, og:video.movie Plain text; usually a URL
     */
    itemtype?: string[] | null;
    /**
     * The server retrieved timestamp (in msec).
     */
    retrievedTimestampMsec?: string | null;
    /**
     * The final URL that was the actual source of the itemscope, after any redirects.
     */
    retrievedUrl?: string | null;
  }
  /**
   * Transient generic data that will not be saved on the server.
   */
  export interface Schema$EmbedsTransientData {}
  /**
   * An EventId is a 128 bit identifier that uniquely identifies an event, such as a query. The event time recorded to the nearest microsecond, along with information about the process generating the event, ensures that all EventIds are unique. Details of this EventId are described in a design document: http://www/eng/designdocs/sawmill/adlogs.html
   */
  export interface Schema$EventIdMessage {
    /**
     * process_id is an integer that identifies the process on this machine that generated this event. This id is calculated once when the server generates its first event, and may change if the process is migrated to a different host. This field has a very specific format mandated by the logs collection infrastructure, which is subject to change WITHOUT NOTICE. As of 2013-01-09, this format is: uint32 process_id = (time(NULL) << 24) + (getpid() & 0xFFFFFF); If you are generating an extended_pid directly, you MUST use one of the maintained library implementations in order to generate it properly: C++ //borg/borgletlib:extended_pid; call borg::ExtendedPid() Python //borg/borgletlib/python:pyextendedpid; call ExtendedPid() Go //borg/borgletlib/go:extendedpid; call Get() Java //java/com/google/common/logging; call EventId.getPid() If you think that you need to parse the values of this field, please contact logs-collection-dev@ to discuss your requirement.
     */
    processId?: number | null;
    /**
     * server_ip is the IPv4 address or http://go/ghostid of the machine running the server that created this event message. This allows us to distinguish between events that occur at the same time on different servers. Format: 10.1.2.3 is stored as 0x0a010203, and GHostId 1 as 0x00000001.
     */
    serverIp?: number | null;
    /**
     * time_usec is the number of microseconds since the epoch (i.e., since 1970-01-01 00:00:00 UTC) as an int64: 1e6 * (unix time) + microseconds. Applications must ensure that EventIdMessages have increasing times, artificially increasing time_usec to one greater than the previous value if necessary. Alternate implementations were considered: 1. storing unix time and microseconds separately would require a bit more storage, and the convenience of having a single value representing the time seemed more useful than having trivial access to a unix time. 2. storing unix time in the upper 32 bits would allow for more precision - up to 4G events/second, but it wouldn't print nicely as a decimal value and it seems unlikely that any single server would ever sustain more than 1M events/second. 3. Java-compatible time uses millis - this would limit servers to 1000 events per second - too small. Other names for this field were considered, including time, time_stamp, and utime. We felt that including the units in the name would tend to produce more readable code. utime might be interpreted as user time. unix timestamp * 1e6 + microseconds
     */
    timeUsec?: string | null;
  }
  /**
   * the extra info response from ascorer used to build snippets in GWS experiments
   */
  export interface Schema$ExtraSnippetInfoResponse {
    matchinfo?: Schema$ExtraSnippetInfoResponseMatchInfo;
    querysubitem?: Schema$ExtraSnippetInfoResponseQuerySubitem[];
    tidbit?: Schema$ExtraSnippetInfoResponseTidbit[];
  }
  export interface Schema$ExtraSnippetInfoResponseMatchInfo {
    /**
     * bitvector of query items matching the title
     */
    titleMatches?: string | null;
    /**
     * bitvector of query items matching the url
     */
    urlMatches?: string | null;
    /**
     * bitvector of query items considered by chooser
     */
    weightedItems?: string | null;
  }
  /**
   * A query term, phrase, or synonym. An original query term or phrase is called an "item". Each item may have more than one "subitem" if there are synonyms. In rare cases a subitem may correspond to multiple items, such as the subitem "cia" in the query [central intelligence agency].
   */
  export interface Schema$ExtraSnippetInfoResponseQuerySubitem {
    /**
     * Additional information from the SnippetQuery.
     */
    isHighlighted?: boolean | null;
    isOptional?: boolean | null;
    /**
     * true iff this subitem was an original query term or phrase. Can only be false if want_all_query_subitems == true in the request.
     */
    isOriginal?: boolean | null;
    /**
     * a bitvector of the query items corresponding to this subitem. Typically only one bit is set, but see comment above.
     */
    items?: number | null;
    /**
     * text associated with this query item
     */
    text?: string | null;
    /**
     * the weight of this query item, as calculated by SubitemWeight(): https://qwiki.corp.google.com/display/Q/SnippetWeights
     */
    weight?: number | null;
  }
  export interface Schema$ExtraSnippetInfoResponseTidbit {
    anchorinfo?: Schema$ExtraSnippetInfoResponseTidbitAnchorInfo;
    /**
     * For tidbits only: position of tidbit in the document. More specifically, tidbit is found at [begin, end) in the document's tokens.
     */
    begin?: number | null;
    end?: number | null;
    /**
     * a bitvector of each query term within this tidbit
     */
    items?: string | null;
    /**
     * the score for this tidbit if there was one this is returned for Snippets and Tidbits and is only meaningful for comparing between objects of the same type (snippet to snippet, tidbit to tidbit)
     */
    score?: number | null;
    /**
     * the tidbit text, with search terms already highlighted
     */
    text?: string | null;
    type?: string | null;
  }
  /**
   * this information is specific to anchors and is only returned if type == ANCHOR
   */
  export interface Schema$ExtraSnippetInfoResponseTidbitAnchorInfo {
    offdomainCount?: number | null;
    ondomainCount?: number | null;
  }
  export interface Schema$FaceIndexing {
    /**
     * Always use image/search/utils/face_proto_util.h for packing and unpacking these values.
     */
    mustangBytes?: string | null;
    mustangBytesVersion?: number | null;
  }
  export interface Schema$FatcatCompactBinaryClassification {
    /**
     * Either binary_classifier will be set, using the enum above, or binary_classifier_name will be set, if it is not one of the classifiers in the enum - never both.
     */
    binaryClassifier?: string | null;
    binaryClassifierName?: string | null;
    /**
     * A CompactDocClassification will not usually have a weight. For a CompactSiteClassification, this value will be 0...127 corresponding to 0.0...1.0, indicating fraction of the site that this label applies to
     */
    discreteFraction?: number | null;
  }
  /**
   * The result of PetacatAnnotator. Each result contains: 1. RephilClusters; 2. At most 5 verticals from each taxonomy, sorted by the probabilities in descending order. 3. Binary classification results about page types and sensitive content. The types of taxonomies include: verticals4, geo, verticals4_geo, products_services, icm_im_audiences and icm_im_audiences_dev.
   */
  export interface Schema$FatcatCompactDocClassification {
    binary?: Schema$FatcatCompactBinaryClassification[];
    clusters?: Schema$FatcatCompactRephilClusters;
    epoch?: string | null;
    langCode?: string | null;
    /**
     * The id of the Rephil model used to generate the Rephil clusters. If it is absent, Rephil 4 is assumed.
     */
    rephilModelId?: number | null;
    taxonomic?: Schema$FatcatCompactTaxonomicClassification[];
    /**
     * not needed if the url is the sstable / bigtable key used during intermediate processing only
     */
    url?: string | null;
    /**
     * The relative weight of this doc within a site, typically something like pagerank or navboost impressions. May be a large number (like an actual pageviews estimate), not limited to a small range.
     */
    weight?: string | null;
  }
  export interface Schema$FatcatCompactRephilClusters {
    cluster?: Schema$FatcatCompactRephilClustersCluster[];
  }
  export interface Schema$FatcatCompactRephilClustersCluster {
    /**
     * 0...127 corresponds to 0.0 - 1.0
     */
    discreteWeight?: number | null;
    id?: number | null;
  }
  /**
   * A version of this proto for logging is available at cs/symbol:logged_fatcat.LoggedCompactTaxonomicClassification
   */
  export interface Schema$FatcatCompactTaxonomicClassification {
    category?: Schema$FatcatCompactTaxonomicClassificationCategory[];
    classifierVersion?: string | null;
    /**
     * Either taxonomy will be set, using the enum above, or taxonomy_name will be set (if the taxonomy is not one of the ones in the enum) - never both
     */
    taxonomy?: string | null;
    taxonomyName?: string | null;
  }
  /**
   * A taxonomic category. A classification consists of weight (totalling 1.0) distributed among one or more categories.
   */
  export interface Schema$FatcatCompactTaxonomicClassificationCategory {
    /**
     * go/petacat-faq#how-should-i-interpret-classification-weights Discrete to reduce size. Range is [0,127], corresponding to [0.0,1.0].
     */
    discreteWeight?: number | null;
    /**
     * The category's ID, e.g. 20 for /Sports in the go/verticals4 taxonomy.
     */
    id?: number | null;
  }
  /**
   * http://go/contact-detail-hash.
   */
  export interface Schema$FocusBackendContactDetailHash {
    type?: string | null;
    /**
     * The hash here will be a 16-bit weak hash to avoid reverse engineering for decoding the actual contact detail. The hash value is computed by the fingerprint of the raw contact detail mod 2^16.
     */
    value?: number | null;
  }
  /**
   * A contact pointer that represents a contact (http://go/assistant-contact-id).
   */
  export interface Schema$FocusBackendContactPointer {
    /**
     * The annotation ID. Annotations are only allowed to point to annotations that do not themselves have a pointer (avoids any possibilty of loops). Cast this field to string in javascript to make it compile in js.
     */
    annotationId?: string | null;
    /**
     * The raw contact ID from an active mobile device of the user.
     */
    deviceRawContactId?: Schema$FocusBackendDeviceRawContactId;
    /**
     * The contact ID from the Focus backend. Cast this field to string in javascript to make it compile in js.
     */
    focusContactId?: string | null;
    /**
     * Additional contact ids that are not actively used to match contact pointers to contacts.
     */
    otherContactId?: Schema$FocusBackendOtherContactId;
    /**
     * The secondary identifier of contact. It will be used when the primary ID doesn't match any contact.
     */
    secondaryId?: Schema$FocusBackendSecondaryContactId;
  }
  /**
   * //////////////////// DeviceContactId ////////////////////// Used by Device Contacts only. For more details see go/fbs-support-for-device-contacts.
   */
  export interface Schema$FocusBackendDeviceContactId {
    /**
     * DeviceContact Id.
     */
    ContactId?: string | null;
    /**
     * Device Id.
     */
    DeviceId?: Schema$FocusBackendDeviceId;
  }
  /**
   * //////////////////// DeviceId ////////////////////// Used by Device Contacts only. For more details see go/fbs-support-for-device-contacts.
   */
  export interface Schema$FocusBackendDeviceId {
    /**
     * The GServices id on Android. See go/android-id.
     */
    AndroidDeviceId?: string | null;
    /**
     * DeviceId.Hash is a SHA256 of some attribute of the user and device. For Android devices: Hash = SHA256(gaia_account_name + “:” + “1” + “:” + (android id - LSB)); For iOS devices: Hash = TOLOWER(HEX(GMCSComputeUserDeviceToken(userId, iOsDeviceId)) For more details see go/client-instance-id.
     */
    Hash?: string | null;
  }
  /**
   * //////////////////// DeviceRawContactId ////////////////////// Used by Device Contacts Only. The Raw ID as assigned to the original contact on the device. For more details see go/fbs-support-for-device-contacts.
   */
  export interface Schema$FocusBackendDeviceRawContactId {
    DeviceId?: Schema$FocusBackendDeviceId;
    /**
     * Raw ID assigned by the device. Cast this field to string in javascript to make it compile in js.
     */
    RawContactId?: string | null;
  }
  /**
   * Additional contact ids that are not actively used to match contact pointers to contacts. There may be overlap with primary or secondary contact ids.
   */
  export interface Schema$FocusBackendOtherContactId {
    /**
     * Device contact ID, when available: - The annotation points to a device contact, and the device contact id was correctly populated when the annotation was created. Note that the device contact id is populated once per device contact on a device. It is distinct from RawContactId - a single device contact may have multiple raw contact ids. - The annotation points to a Focus contact that was merged with device contact information in Starlight. When the annotation was created, a device contact id was available on the merged person object. - The contact annotation was created from April 2021 onwards. All prior annotations do not populate this field. ContactPointer creation relies on the client caller to correctly populate the device contact id, and does not enforce any assumptions on availability of this field. This field is repeated because in rare cases Starlight may merge device contact information across different devices into a single merged person object. WARNING: Use with extreme caution! This ID is not stable. For more details see go/fbs-support-for-device-contacts.
     */
    deviceContactId?: Schema$FocusBackendDeviceContactId[];
  }
  /**
   * The secondary ID of a contact.
   */
  export interface Schema$FocusBackendSecondaryContactId {
    /**
     * The hashes of the contact details (e.g. phone number and email address).
     */
    contactDetailHash?: Schema$FocusBackendContactDetailHash[];
    /**
     * The contact's full name, not hashed.
     */
    contactName?: string | null;
    /**
     * The hash of contact's full name, generated using Fingerprint2011(). Cast this field to string in javascript to make it compile in js.
     */
    contactNameHash?: string | null;
  }
  /**
   * Citation contains the information needed to correctly attribute the source of data.
   */
  export interface Schema$FreebaseCitation {
    /**
     * Mid of the dataset.
     */
    dataset?: string | null;
    /**
     * If set to true, the citation is required to be displayed when the data is used.
     */
    isAttributionRequired?: boolean | null;
    /**
     * Name of the project of the data's origin.
     */
    project?: string | null;
    /**
     * The name of the provider of this information.
     */
    provider?: string | null;
    /**
     * A human readable statement of attribution.
     */
    statement?: string | null;
    /**
     * Uri link associated with this data.
     */
    uri?: string | null;
  }
  /**
   * An Id contains the identifiers used to reference this topic (entity) in the Knowledge Graph. The Knowledge Graph supports several forms of identifiers: - "mids" (machine ids) that are assigned at creation time, and support a resolution mechanism that tracks topics after they are merged (for more about mids, see go/kg-mid), - "ids" are human-readable ids (HRIDs) that are derived from a namespace hierarchy stored in Knowledge Graph, and a set of rules, - "guids" are low-level ids historically used in Freebase (pre-Knowledge Graph, deprecated). Only the mid and id are supplied here. Note that mids can be converted to guids or uint64s (see //metaweb/util/mid/mid.h).
   */
  export interface Schema$FreebaseId {
    /**
     * "id" may be a human readable ID (HRID) or a MID. Originally it was intended to always be a human readable ID, but that convention was not always followed so clients should be wary. Not every topic has an id.
     */
    id?: string | null;
    /**
     * The "mid" should be used whenever a globally unique, primary key into the Knowledge Graph is needed. These keys are always prefixed with the "/m" and "/g", (and more rarely the "/x" and "/t") namespaces, and are alphanumeric strings consisting of lowercase letters excluding vowels, numbers and the underscore character. (Applications should not assume a constant length for these strings as Livegraph reserves the right to extend the number of characters to accommodate more topics.)
     */
    mid?: string | null;
  }
  /**
   * Represents a geopoint, which is one of the possible Value types.
   */
  export interface Schema$FreebaseLatLong {
    latDeg?: number | null;
    longDeg?: number | null;
  }
  /**
   * Represents a measurements, which is one of the possible Value types. A measurement value like "5.2 meter^2 / second" would be represented as: magnitude: 5.2 unit { unit_mid: "/m/mid_for_meter" power: 2 \} unit { unit_mid: "/m/mid_for_second" power: -1 \}
   */
  export interface Schema$FreebaseMeasurement {
    magnitude?: number | null;
    /**
     * Repeated units are interpreted as a product. i.e. (meter ^ 1) * (second ^ -2)
     */
    unit?: Schema$FreebaseMeasurementUnit[];
  }
  export interface Schema$FreebaseMeasurementUnit {
    power?: number | null;
    unit?: Schema$FreebaseId;
    /**
     * Deprecated fields.
     */
    unitMid?: string | null;
  }
  /**
   * List of { predicate, { object \} \} to be processed as a Nested Struct. Nested Struct can be recursive. NestedStruct.property_value(i).value(j) may have nested_struct field.
   */
  export interface Schema$FreebaseNestedStruct {
    propertyValue?: Schema$FreebasePropertyValue[];
  }
  /**
   * A PropertyValue associates properties with values in the context of a topic.
   */
  export interface Schema$FreebasePropertyValue {
    /**
     * The id of the property.
     */
    property?: Schema$FreebaseId;
    /**
     * Indicates the total values that exist for this property, even if they aren't all present in the value field, due to truncation.
     */
    totalValueCount?: string | null;
    /**
     * The value associated with the property for the containing topic.
     */
    value?: Schema$FreebaseValue[];
    /**
     * If ValueStatus is not set at all, the implication is that there are well-known value(s), specified in the "value" field. (It should be considered malformed data to have value_status set when len(values) \> 0.)
     */
    valueStatus?: string | null;
  }
  /**
   * A Topic represents a Knowledge Graph entity with its associated properties and their values.
   */
  export interface Schema$FreebaseTopic {
    /**
     * The id (mid and human-readable id) of the topic. The id will always be present and will contain a mid value for topics in the topic sstable.
     */
    id?: Schema$FreebaseId;
    /**
     * The property-value bindings associated with the topic. Note that in the case where a property is relevant to a topic based on its type, but no values of that property are present for the topic, the PropertyValue will simply not appear, rather than being present with a null value, or empty repeated value list.
     */
    propertyValue?: Schema$FreebasePropertyValue[];
  }
  /**
   * Values are effectively a union of several possible Knowledge Graph types: simple primitive datatypes such as booleans, integers and floats, references to other Knowledge Graph topics (by id), or "compound values" which are expressed as embedded topics with associated properties and values. Values occur in indexed order (if any).
   */
  export interface Schema$FreebaseValue {
    /**
     * key, uri, or datetime. Present when value is bool.
     */
    boolValue?: boolean | null;
    /**
     * Citation data for this value. See: http://go/kg-clap
     */
    citation?: Schema$FreebaseCitation;
    /**
     * Compound values are those that contain either a number of simple valued facets (such as a latitude/longitude pair), or "mediator" topics representing multi-dimensional relationships between topics. In both cases we represent them here with an embedded topic, although the topic's identity is somewhat secondary to the property/value pairs it contains. (The identity is still made available so that it can be used to perform updates to that mediator on the Knowledge Graph.)
     */
    compoundValue?: Schema$FreebaseTopic;
    /**
     * Deletion provenance for this value.
     */
    deletionProvenance?: Schema$StorageGraphBfgTripleProvenance[];
    /**
     * The lang of the display_value field.
     */
    displayLang?: string | null;
    /**
     * The display value of this value. This is a i18n-aware formatted value if present.
     */
    displayValue?: string | null;
    /**
     * An optional name for a proto field.
     */
    expectedProto?: string | null;
    /**
     * Present when value is float.
     */
    floatValue?: number | null;
    /**
     * Present when value is an id.
     */
    idValue?: Schema$FreebaseId;
    /**
     * Index of the value relative to the containing property (if any). Knowledge Graph supports a loose notion of indexing: some non-unique properties may have indices, while others may not. Furthermore, for a single property, some values may have indices (such as the top 5 actors in a film), while others may not (the film's supporting cast). Un-indexed values will appear at the end of the repeated value list. This field contains the index value only when is present in the Knowledge Graph.
     */
    index?: string | null;
    /**
     * Present when value is int.
     */
    intValue?: string | null;
    /**
     * Whenever the value is text with TYPE_TEXT, the lang field is populated with the III LanguageCode associated with the string_value field.
     */
    lang?: string | null;
    latLongValue?: Schema$FreebaseLatLong;
    measurementValue?: Schema$FreebaseMeasurement;
    /**
     * Populated if this value holds NestedStruct. 'type' field needs to be set to TYPE_NESTED_STRUCT.
     */
    nestedStruct?: Schema$FreebaseNestedStruct;
    /**
     * Provenance for this value.
     */
    provenance?: Schema$StorageGraphBfgTripleProvenance[];
    /**
     * Similar to string_value/etc but contains raw bytes.
     */
    rawValue?: string | null;
    /**
     * Present when value is text, enum,
     */
    stringValue?: string | null;
    subgraphId?: string[] | null;
    /**
     * The ISO-8601 timestamp corresponding to when this value was created (when it was written to the Knowledge Graph). Deprecated in favor of timestamp_usec.
     */
    timestamp?: string | null;
    /**
     * The microsecond timestamp corresponding to when this value was created.
     */
    timestampUsec?: string | null;
    type?: string | null;
  }
  /**
   * Next id: 127
   */
  export interface Schema$GDocumentBase {
    content?: Schema$GDocumentBaseContent;
    /**
     * unix secs from epoch
     */
    ContentExpiryTime?: number | null;
    directory?: Schema$GDocumentBaseDirectory[];
    /**
     * Sometimes the URL displayed in search results should be different from what gets indexed (e.g. in enterprise, content management systems). If this value is not set, we default to the regular URL.
     */
    DisplayUrl?: string | null;
    /**
     * 64-bit docid of the document (usually fingerprint of URL, but not always). WARNING: This does NOT uniquely identify a document ANYMORE. For a unique identifier across all documents in production please refer to the field 'id().key()' listed above.
     */
    DocId?: string | null;
    /**
     * 96-bit fingerprint of the canonical url's webmirror equivalence class name as of when this cdoc was exported.
     */
    ecnFp?: string | null;
    ExternalFeedMetadata?: string | null;
    /**
     * Enterprise-specific external metadata. See http://engdoc/eng/designdocs/enterprise/enterprise_indexing_metadata.html
     */
    ExternalHttpMetadata?: string | null;
    /**
     * Deprecated, do not use, this field is not populated since 2012.
     */
    FilterForSafeSearch?: number | null;
    /**
     * The primary identifier of a production document is the document key given in the ServingDocumentIdentifier, which is the same as the row-key in Alexandria, and represents a URL and its crawling context. In your production code, please always assume that the document key is the only way to uniquely identify a document. ## Recommended way of reading: const string& doc_key = cdoc.doc().id().key(); ## CHECK(!doc_key.empty()); More background information can be found in google3/indexing/crawler_id/servingdocumentidentifier.proto The ServingDocumentIdentifier uniquely identifies a document in serving and also distinguishes between experimental vs. production documents. The SDI is also used as an input for the union/muppet key generation in serving.
     */
    id?: Schema$IndexingCrawlerIdServingDocumentIdentifier;
    /**
     * IP addr in binary (allows for IPv6)
     */
    IPAddr?: string | null;
    /**
     * Localsearch-specific data.
     */
    localsearchDocInfo?: Schema$LocalsearchDocInfo;
    NoArchiveReason?: number | null;
    NoFollowReason?: number | null;
    NoImageframeOverlayReason?: number | null;
    NoImageIndexReason?: number | null;
    /**
     * When these reasons are set to a non zero value, the document should not be indexed, or show a snippet, or show a cache, etc. These reasons are bit maps of indexing.converter.RobotsInfo.RobotedReasons enum values reflecting the places where the restriction was found.
     */
    NoIndexReason?: number | null;
    NoPreviewReason?: number | null;
    NoSnippetReason?: number | null;
    NoTranslateReason?: number | null;
    /**
     * Ocean-specific data.
     */
    oceanDocInfo?: Schema$OceanDocInfo;
    originalcontent?: Schema$GDocumentBaseOriginalContent;
    /**
     * This field is long-deprecated in favour of Pagerank_NS, it is no longer maintained and can break at any moment.
     */
    Pagerank?: number | null;
    /**
     * Pagerank-NearestSeeds is a pagerank score for the doc, calculated using NearestSeeds method. This is the production PageRank value teams should use.
     */
    PagerankNS?: number | null;
    /**
     *  is the webmirror representative id of the canonical url. Urls with the same repid are considered as dups in webmirror. WARNING: use this field with caution! The webmirror duprules change frequently, so this value only reflects the duprules at the time when the canonical's docjoin is built.
     */
    Repid?: string | null;
    /**
     * Citation data for science articles.
     */
    ScienceMetadata?: Schema$ScienceCitation;
    /**
     * WARNING: the URL does NOT uniquely identify a document ANYMORE. For a unique identifier across all documents in production please refer to the field 'id().key()' listed above. Reason: foo.bar:/http and foo.bar:/http:SMARTPHONE share the same URL, but the body of the two documents might differ because of different crawl-context (desktop vs. smartphone in this example).
     */
    URL?: string | null;
    URLAfterRedirects?: string | null;
    /**
     * See webutil/urlencoding
     */
    URLEncoding?: number | null;
    /**
     * The user agent name used to crawl the URL. See //crawler/engine/webmirror_user_agents.h for the list of user-agents (e.g. crawler::WebmirrorUserAgents::kGoogleBot). NOTE: This field is copied from the first WEBMIRROR FetchReplyClientInfo in trawler_fetch_info column. We leave this field unpopulated if no WEBMIRROR FecthReplyClientInfo is found. As the submission of cl/51488336, Alexandria starts to populate this field. However, docjoins from freshdocs (or any other source), won't have this field populated, because we believe no one needs to read this field from freshdocs docjoins.
     */
    userAgentName?: string | null;
  }
  /**
   * Main content section
   */
  export interface Schema$GDocumentBaseContent {
    AuthMethod?: number | null;
    /**
     * The actual length of the content: If Representation is compressed, this equals to Content.UncompressedLength; otherwise it is the length of the representation string.
     */
    ContentLength?: number | null;
    /**
     * See enum ContentType in //depot/google3/webutil/http/content-type.proto.
     */
    ContentType?: number | null;
    /**
     * Crawled file size of the original document.
     */
    crawledFileSize?: number | null;
    /**
     * Seconds since Unix epoch.
     */
    CrawlTime?: string | null;
    /**
     * GeometryAnnotations, encoded with GeometryUtil::DeltaEncode() to reduce disk space usage. Use GeometryUtil::DeltaDecode() to decode this field.
     */
    encodedGeometryAnnotations?: string | null;
    /**
     * See //depot/google3/i18n/encodings/public/encodings.h Encoding of representation
     */
    Encoding?: number | null;
    /**
     * Set to false if Representation does not contain HTTP headers.
     */
    HasHttpHeader?: boolean | null;
    /**
     * A Language enum value. See: go/language-enum Default is english
     */
    Language?: number | null;
    /**
     * If OriginalEncoding is present, the body part of the Representation was converted to UTF-8, Encoding was set to UTF8, and OriginalEncoding was set to the original encoding before conversion. However, the HTTP headers part of the content might not be valid UTF-8. -1=an invalid value
     */
    OriginalEncoding?: number | null;
    /**
     * Possibly compressed for old documents. It is not compressed for docjoins produced by Raffia after ~2012.
     */
    Representation?: string | null;
    /**
     * Historically present if Representation is compressed.
     */
    UncompressedLength?: number | null;
    /**
     * Whether the content was visual right-to-left, and if so, what type of visual document it is. Must be one of the values in enum VisualType from google3/repository/rtl/visualtype.h Default is NOT_VISUAL_DOCUMENT. See http://wiki/Main/RtlLanguages for background.
     */
    VisualType?: number | null;
  }
  /**
   * The Directory proto group holds snippet and title metadata which is made available to the snippet code. The proto group was originally created for metadata coming from the Google Web Directory (gwd) project. It has since come to be used to hold metadata from gwd and other sources.
   */
  export interface Schema$GDocumentBaseDirectory {
    /**
     * encoded in UTF8
     */
    Category?: string | null;
    /**
     * encoded in UTF8
     */
    Description?: string | null;
    DescriptionScore?: number | null;
    /**
     * "gwd", etc.
     */
    Identifier?: string | null;
    /**
     * go/language-enum
     */
    Language?: number | null;
    /**
     * encoded in UTF8
     */
    Title?: string | null;
    /**
     * Deprecated; do not use. There is no code populating these fields as of Oct 2017.
     */
    TitleScore?: number | null;
    URL?: string | null;
  }
  /**
   * The original, unconverted document, typically PDF or Word. Copied from OriginalDoc field of doclogs. Unlike "Content", this does not contain any HTTP headers. The content may be compressed using the same method as "Content". In practice it is only compressed in the Teragoogle index. It is never compressed in docjoins because those are compressed at the sstable level. In doclogs content will only be compressed if the Trawler fetchreply is also compressed--which is currently never and unlikely to change for performance reasons.
   */
  export interface Schema$GDocumentBaseOriginalContent {
    Representation?: string | null;
    /**
     * present iff rep is compressed
     */
    UncompressedLength?: number | null;
  }
  /**
   * The generic version of a snippet response
   */
  export interface Schema$GenericSnippetResponse {
    /**
     * Per-doc debug information.
     */
    debugInfo?: string[] | null;
    /**
     * Servlet-specific response info.
     */
    info?: Schema$Proto2BridgeMessageSet;
    /**
     * Lines of the snippet HTML. Typically gws concatenates these and lets the browser wrap. The values include trailing spaces, so inserting additional spaces is not necessary. However, for very old browsers, gws may insert break tags after each snippet line. This field is confusing and poorly named; "snippet_line" would be better. In particular, note that this does not return multiple snippets for a result. Nor are these fields the individual tidbits of the snippet.
     */
    snippet?: string[] | null;
    /**
     * The title HTML. It may contain tags to denote query term matches. It may be already truncated and "..." is put instead (note that truncation does not always happen at the very end of the title text). However the existence of "..." does not guarantee that the snippet generation algorithm truncated it; e.g. webmasters themselves can write "...".
     */
    title?: string | null;
    /**
     * Snippet-specific members (tag ids 16+, must be optional!) Example: optional NewContentResponse new_response;
     */
    wwwSnippetResponse?: Schema$WWWSnippetResponse;
  }
  /**
   * Actions supported by Madden for a local entity.
   */
  export interface Schema$GeoOndemandAssistantSupportedActions {
    /**
     * Whether this local entity allows guest checkout for reservations.
     */
    allowsGuestCheckout?: boolean | null;
    /**
     * Whether or not this local entity supports asynchronous restaurant reservations, through the above restaurant_reservation_url.
     */
    isAsynchronousRestaurantReservation?: boolean | null;
    /**
     * URL for the Madden restaurant reservation flow, e.g. for display in a WebView. Not populated if restaurant reservations are not supported for the local entity.
     */
    restaurantReservationUrl?: string | null;
  }
  /**
   * This class holds information about a single access point. An access point establishes a relationship between a feature (like a POI or building) and some other feature. For example, consider a TYPE_LOCALITY feature like Seattle. An access point might be the TYPE_AIRPORT feature for Seattle-Tacoma International Airport. The airport feature defines the access point to gain airplane-based access to Seattle. A feature like Seattle will typically have multiple access points. You can get to Seattle using airplanes, various forms of public transit, or by driving a car. Thus Seattle would have multiple access points. You may be able to get to Seattle by flying into SeaTac, or you might be able to fly into Boeing Field, or Paine Field in Everett. You could drive in from the North/South using I-5, or you could drive in from the East using I-90. Many access points are from the road network. Thus the access point for some building at 123 Main Street would likely be a segment that defines the 100-200 block of "Main Street". A feature at the corner of "Hollywood" and "Vine" streets might have access points from both named streets. Access points are an optional field. Data editors may ignore them when creating features or editing other fields. In these cases, other quality teams will synthesize and update them. Several fields are also optional, as they are derivable from other fields. Access points to non-TYPE_SEGMENT features should always have the following fields set: - feature_type - feature_id - point Location and reference fields: BASIC vs DERIVABLE Access points to TYPE_SEGMENT features must have all the following BASIC fields: - feature_type (of the segment, e.g. TYPE_ROAD or TYPE_VIRTUAL_SEGMENT) - point_off_segment (or point; see "fuzzy point" note below) - unsuitable_travel_mode (may be empty) - level (indoor access points only) The following are DERIVABLE fields, which should only be added if the supplier is confident about their accuracy: - feature_id - point_on_segment - segment_position Editing clients are encouraged to set all fields, but they may set only the BASIC fields, in which case quality teams may use the BASIC fields to snap to an appropriate segment and derive the remaining fields. Example: The segment is split, so that the portion that the access point is on has a new feature ID. Quality teams notice that the point_on_segment is no longer on the segment with feature_id, finds the new nearest segment based on feature_type and existing point_on_segment, and re-derives a new feature_id, point_on_segment, and segment_position, keeping other fields consistent. Fuzzy point special case If the editor does not have side-of-road information for access points or is otherwise unsure of the precise placement of the access point, it may supply the point field (and not point_off_segment) as basic data instead, in which case quality teams may generate the point_off_segment. Identity Access points are considered semantically equivalent if they have the same geometry, including derived fields, and the same references to other features (feature_id, level_feature_id). For the exact definition, see cs/symbol:geostore::AreAccessPointsEquivalent. Field definitions
   */
  export interface Schema$GeostoreAccessPointProto {
    /**
     * RESERVED
     */
    canEnter?: boolean | null;
    /**
     * RESERVED
     */
    canExit?: boolean | null;
    /**
     * The ID of the feature that defines the access point. The bounding box of the feature is expanded to include the bounding box of the feature with the access point in accordance with the standard practice for bucketing map/reduce operations. See the wiki page at http://wiki/Main/OysterBucketingMapReduce for more information. For access points to TYPE_SEGMENT features, this may be re-derived if necessary by looking up the nearest segment to existing geometry.
     */
    featureId?: Schema$GeostoreFeatureIdProto;
    /**
     * The type of the feature. Required, to allow handling the access point differently based on feature type. For access points to non-TYPE_SEGMENT features, this cached type also makes things easier for clients that aren't running a bucketing map-reduce. For access points to TYPE_SEGMENT features, this is used to find to find the nearest segment of the given type.
     */
    featureType?: number | null;
    /**
     * For indoor access points, this should be set to the level that the access point is on. The feature_id should point to the indoor segment, but when it is missing or invalid, and we need to derive it from geometry, only segments on this level will be considered. For non-indoor access points, level should remain unset, and when we derive feature_id from geometry, only segments not on any level (non-indoor segments) will be considered. The bounding box of the level feature is expanded to include the bounding box of the feature with the access point in accordance with the standard practice for bucketing map/reduce operations. See the wiki page at http://wiki/Main/OysterBucketingMapReduce for more information. (Though in general the feature should reside on the level already anyway..)
     */
    levelFeatureId?: Schema$GeostoreFeatureIdProto;
    /**
     * Field-level metadata for this access point.
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * For access points to non-TYPE_SEGMENT features, the location of the access point. For access points to TYPE_SEGMENT features, this can be supplied as a fuzzy access point that is not guaranteed to be on the correct side of road. It should not be used by end clients in case of TYPE_SEGMENT access points.
     */
    point?: Schema$GeostorePointProto;
    /**
     * If the access point is defined by a TYPE_SEGMENT feature, this is the location of the access point displaced slightly to the correct side of the segment. This offset is in a direction perpendicular to the direction of travel along the segment. The actual offset distance is unspecified. It would typically be relatively small (approximately 1 meter). You can subtract the "off segment" point from the "on segment" point to get a vector of unknown length pointing from "on segment" point to the "off segment" point. You can then scale that vector to whatever length you want. Note that extending this displacement vector a large distance (10s of meters) may result in a new point that is in the middle of some other feature (park, street, intersection). This is the preferred basic geometry field for incoming data from editing clients and importers, if side-of-road is well-established.
     */
    pointOffSegment?: Schema$GeostorePointProto;
    /**
     * If the access point is defined by a TYPE_SEGMENT feature, this is the point on the centerline of the segment that is closest to the actual access point. May be re-derived if necessary to maintain precise placement on segment.
     */
    pointOnSegment?: Schema$GeostorePointProto;
    /**
     * LINT.ThenChange(//depot/google3/geostore/cleanup/callbacks/\ ID_DUPLICATE_ACCESS_POINT.cc)
     */
    priority?: string | null;
    /**
     * If the access point is defined by a TYPE_SEGMENT feature, this is the location of the access point expressed as a fractional distance along the segment. The value runs from 0 to 1 inclusive. May be re-derived if necessary to maintain precise placement on segment.
     */
    segmentPosition?: number | null;
    /**
     * This list represents the travel modes for which this access-point should be avoided. If this list is empty, the access-point is suitable for any travel mode. If all access points are unsuitable for the current travel mode, client should revert to other heuristics (e.g. feature center). This is only used for access points to TYPE_SEGMENT features; access points to non-TYPE_SEGMENT features, e.g. TYPE_ESTABLISHMENT_POI features with gcid:transit_station GConcepts are just identified by feature_type and feature_id.
     */
    unsuitableTravelMode?: string[] | null;
  }
  /**
   * This class represents a parsed field within an address. NOTE: if you add a field to this proto, please update the AreAddressComponentsEquivalent() function in google3/geostore/base/internal/addresscomponent.cc
   */
  export interface Schema$GeostoreAddressComponentProto {
    /**
     * The id of the corresponding Feature, if such a feature is defined. As discussed above for feature_type, components of TYPE_FEATURE or TYPE_LANDMARK may have a corresponding feature id.
     */
    featureId?: Schema$GeostoreFeatureIdProto;
    /**
     * For components of TYPE_FEATURE or TYPE_LANDMARK, this is the feature type (TYPE_COUNTRY, TYPE_LOCALITY, TYPE_ESTABLISHMENT_POI etc.). Note that some features may not actually exist in the geostore (e.g. a village that we've never heard of), in which case the feature_id will be missing but the feature_type is still specified. Please refer to IsValidAddressComponentFeatureType() in google3/geostore/base/public/addresscomponent.h for the definitive list of feature types allowed for the type (either TYPE_FEATURE or TYPE_LANDMARK) of components.
     */
    featureType?: number | null;
    /**
     * The order of this address component relative to the ones that share the same feature_type in the AddressProto. For now, the primary use of this index field is to handle ordering issue of multiple occurrences of AddressComponentProto with feature_type of TYPE_ROUTE (and subtypes), or TYPE_POLITICAL, where the order of the address components matters as there are dependences. 0 is the smallest valid index value, representing the most specific address component. Index value of 1 represents a relatively less specific address component of the same feature_type on which the 0-indexed address component depends.
     */
    index?: number | null;
    /**
     * The parsed_name field contains one or more names of an address component. Its actual contents depends on where in the Geo/Google stack you are reading a feature: 1. When an address is initially parsed via a feed or other raw input and structured as an AddressProto, parsed_name should contain the set of names that corresponds to the (possibly normalized) raw text from the raw input. 2. In MapFacts, the address component may be linked to an actual feature via feature_id. Any address formatting directly from MapFacts should follow links to retrieve names when possible. The parsed_name contents may be formatted directly if the address component is unlinked following the same rules as selecting and formatting the name of a feature. The cached parsed_name is regularly refreshed from the linked feature with the minimal set of names for address components (usually just a single, preferred name, in the local language, plus a Latin-script name: go/story-of-ac-names). 3. In serving systems, the names of linked features may be denormalized into the parsed_name field to facilitate quicker address formatting or for simple data filtering (e.g. finding all geocodes in California by name). If reading a feature from such a system, the parsed_name field could contain multiple names in multiple languages that reflect a cached copy of the names associated with the linked features. Formatting of such names should follow the same rules as selecting and formatting the name of a feature itself.
     */
    parsedName?: Schema$GeostoreNameProto[];
    /**
     * Any numerical address component may optionally be specified as a range. For example if a component of TYPE_STREET_NUMBER has the optional "range" attribute, then it represents a range of addresses rather than a single address (see AddressRangeProto for details).
     */
    range?: Schema$GeostoreAddressRangeProto;
    /**
     * A place for clients to attach arbitrary data to an address component. Never set in MapFacts.
     */
    temporaryData?: Schema$Proto2BridgeMessageSet;
    /**
     * Additional text to append before and/or after the parsed_name, when the address is formatted. Multiple instance should represent translations. Currently, this is only permitted on TYPE_LANDMARK components, and only one instance is permitted.
     */
    textAffix?: Schema$GeostoreTextAffixProto[];
    /**
     * Every address component has a type. Most address components correspond to one of the feature types defined in FeatureProto, so rather than defining a separate category system here, instead we mark them as TYPE_FEATURE and store the FeatureProto type in the feature_type() field. This is how we handle countries, cities, streets, etc. However, there are a few types of address components that do not have a corresponding feature type (e.g. PO boxes). These components have their type defined here. An address component of TYPE_STREET_NUMBER may correspond to a physical entity that defines a street number, such as a geocoded address or a land parcel. In this case, the address component may have a link to the corresponding feature. A good reference for what types of address components are possible is the xAL standard, which is a published XML schema: http://www.oasis-open.org/committees/ciq/download.shtml. This standard is the basis of the PostalAddress protocol message.
     */
    type?: string | null;
  }
  /**
   * Represents the unparsed portion of an address with an associated language.
   */
  export interface Schema$GeostoreAddressLinesProto {
    /**
     * The external form of a Google International Identifiers Initiative (III) LanguageCode object. See google3/i18n/identifiers/languagecode.h for details. We place extra restrictions on languages in addition to what the III library requires. See http://go/geo-schema-reference/feature-properties/languages.md
     */
    language?: string | null;
    /**
     * These lines are in display order.
     */
    line?: string[] | null;
  }
  /**
   * This class represents an address, partial address, or address range. It is intended to be attached to features to identify their address(es). Some important points about addresses: - The addresses in the Geo Schema do *not* include a component for the name of the feature, i.e. they are not self-referential. For example, the name of a feature might be "Zack's Pizza" and its address would be "123 Main Street". Similarly, streets, cities, and counties do not include themselves as part of their address. The address of "Seattle" is "King County, Washington, USA". If want to construct an address that *does* include the feature name, you can simply prepend it to the other address components. - Lakes, mountains, and other natural features do not normally have addresses. Countries also do not have addresses because they are at the top of the political hierarchy. - Address components in the Geo Schema are listed in a particular order, independent of the conventions used by the country in which they occur. The basic order is "smallest to largest" starting with street numbers and routes, then political features, and ending with postal features. The exact rules are defined by the implementation of the AddressComponentOrdering::IsLessThan() function. - Some types of address components may occur more than once in an address. For example, a UK address with a "dependent thoroughfare" would have two components of TYPE_ROUTE (i.e. street names). These are listed in the order they are normally written.
   */
  export interface Schema$GeostoreAddressProto {
    /**
     * The unparsed portion (lines) of the address. An address can have multiple unparsed portions. Multiple unparsed portions sharing the same language should be modeled as one address_lines instance having multiple lines. Historically, we also supported uparsed portions in different languages, but we no longer do. Consequently, only one value is allowed for this field despite the fact that it is repeated. See go/address-lines-multi-language for information about why we made this change. If any components are filled in, this is supplemental to (i.e. disjoint from) them. Furthermore, this must be the most specific portion of the address (except for the portion, if any, stored in the name field of feature.proto). Unparsed lines are always formatted together in a block. Other address components are never formatted between the address lines. This doesn't imply that the address lines are always either the first or the last part of the formatted output.
     */
    addressLines?: Schema$GeostoreAddressLinesProto[];
    /**
     * A list of parsed address components, e.g. the street, city, etc. An address range is one type of component.
     */
    component?: Schema$GeostoreAddressComponentProto[];
    /**
     * ** DEPRECATED ** This field is now deprecated (see b/33268032). If you want to store cross street information as part of an address, use the address_lines field.
     */
    crossStreet?: Schema$GeostoreAddressComponentProto[];
    /**
     * Field-level metadata for this address.
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * reserved
     */
    partialDenormalization?: Schema$GeostoreAddressProto;
    /**
     * The opaque ID of the address template that contains rules for structuring this address. The id of the address template can be retrieved using google3/geostore/address_templates/public/address_templates.h
     */
    templateId?: string | null;
    /**
     * A place for clients to attach arbitrary data to an address. Never set in MapFacts.
     */
    temporaryData?: Schema$Proto2BridgeMessageSet;
  }
  /**
   * This class represents a range of numbers in an address. It is an optional additional field in the 'AddressComponentProto' message. This structure can be used to model both single addresses and address ranges. There are two primary use-cases for address ranges: definitions and references. Ranges are being defined when they are present on the addresses of segment features. Ranges are being referenced when they are present on non-segment features. NOTE: If you add fields in this proto, consider updating the AreAddressRangesEquivalent() function in google3/geostore/base/internal/addressrange.cc
   */
  export interface Schema$GeostoreAddressRangeProto {
    /**
     * Two or more address numbers. Each number represents an address that was mentioned by the data provider.
     */
    number?: number[] | null;
    /**
     * For address range definitions: Two or more interpolation parameter values. The length of this array must match the length of the number array, and each parameter number specifies the position of the corresponding address number. Each value is an interpolation between 0.0 and 1.0 inclusive. The value is proportional to the distance traveled along the segment's polyline starting at its origin. The parameters must be provided in increasing order and the values in the number array must be in strictly increasing or decreasing order. We make an exception for singleton addresses, which are represented as two copies of a (number, parameter) pair, for backwards compatibility. For address range references: This array must be empty.
     */
    parameter?: number[] | null;
    /**
     * If specified, the prefix or suffix is applied to all numbers in the range. For example, this can be used to indicate that addresses B1 through B99 are on one side of the street, while A1 through A99 are on the other side of the street.
     */
    prefix?: string | null;
    /**
     * If 'same_parity' is true, then all 'number' values must have the same parity (even or odd), and this address range only includes addresses whose parity is the same as the given 'number' values.
     */
    sameParity?: boolean | null;
    suffix?: string | null;
    /**
     * A place for clients to attach arbitrary data to an address range. Never set in MapFacts. Here are some examples: Example #1: Single non-numeric address (e.g., "Twelve") At the moment this can only be represented as a street number (with the value in the parsed_name field of the AddressComponentProto). We have future plans to make other changes so we can handle this case. Example #2: Single semi-numeric address (e.g., "12bis") The number array contains two copies of the single numeric value (12). The prefix is empty and the suffix contains "bis". The parameter array has two identical values specifying the position of the single address. Example #3: Simple address range (e.g., "100 to 198, even numbers only") The number array contains the two values "100" and "198". The prefix and suffix strings are empty in this example. The parameter array has two values, one for each number. The same_parity flag is set in this example.
     */
    temporaryData?: Schema$Proto2BridgeMessageSet;
  }
  /**
   * A feature’s geometry that is populated from the 3D Geometry Store. Please see go/a3d-and-mapfacts for design details.
   */
  export interface Schema$GeostoreAnchoredGeometryProto {
    /**
     * The ID to be used to fetch the feature’s geometry from the 3D Geometry Store.
     */
    geometryId?: string | null;
  }
  /**
   * A container for speed limits that allows tagging with a correctness trust level.
   */
  export interface Schema$GeostoreAppliedSpeedLimitProto {
    /**
     * The actual speed limit value.
     */
    speedLimit?: Schema$GeostoreSpeedLimitProto;
    /**
     * The level of trust we have in this speed limit value.
     */
    trustLevel?: string | null;
  }
  /**
   * An AttachmentProto contains structured data of a client-specified type. An attachment is uniquely identified by the combination of its attachment_id and client_name_space fields.
   */
  export interface Schema$GeostoreAttachmentsAttachmentProto {
    /**
     * attachment_id distinguishes messages of the same type_id associated with the same feature. It can not be set to 0x0.
     */
    attachmentId?: string | null;
    /**
     * This field specifies a namespace identifier that can be used to track the sources of attachments in a human friendly format. Name spaces must be at most 64 characters long and must be composed entirely of alphanumeric characters, hyphens, and underscores. No other characters are allowed.
     */
    clientNameSpace?: string | null;
    /**
     * comment is a human-readable string that is logged whenever this attachment is processed by the framework.
     */
    comment?: string | null;
    /**
     * messages contains the structured data for this attachment. It should contain a single message with a type ID matching the value of the type_id field below.
     */
    messages?: Schema$Proto2BridgeMessageSet;
    /**
     * type_id determines the type of the actual attachment that should be set in the messages MessageSet. It can not be set to 0x0.
     */
    typeId?: string | null;
  }
  /**
   * Used to represent the unique id of an attribute.
   */
  export interface Schema$GeostoreAttributeIdProto {
    /**
     * The id of the attribute. Stored as a stripped format of the gcid (e.g. "foo" instead of "gcid:att_foo").
     */
    id?: string | null;
    /**
     * Set because it's required, but not really meaningful in geostore (always set to "Geo").
     */
    providerId?: string | null;
    type?: string | null;
  }
  /**
   * Protocol buffer for attaching attributes and values to instances. This is for assigning a particular attribute and value to a repository item, not for metadata. For protocol buffers that represents metadata about attributes and values, see CanonicalAttribute in itemclass.proto and ValueSpace in valuespace.proto.
   */
  export interface Schema$GeostoreAttributeProto {
    applicationData?: Schema$Proto2BridgeMessageSet;
    attributeDisplay?: Schema$GeostoreAttributeValueDisplayProto[];
    booleanValue?: boolean | null;
    /**
     * The canonical attribute for this attribute instance.
     */
    canonicalAttributeId?: Schema$GeostoreAttributeIdProto;
    doubleValue?: number | null;
    /**
     * For those attribute ids that expect their values to be taken from an enumeration-style set of values, that value's gcid should be stored here, e.g. "gcid:attval_yes".
     */
    enumIdValue?: string | null;
    floatValue?: number | null;
    int64Value?: string | null;
    integerValue?: number | null;
    itemClassId?: Schema$GeostoreAttributeIdProto;
    /**
     * Field-level metadata for this attribute
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * Fully qualified package name because genprotohdf uses genproto for this proto2 syntax: https://wiki.corp.google.com/twiki/bin/view/Main/Proto2WithGenproto
     */
    protoValue?: Schema$Proto2BridgeMessageSet;
    /**
     * The attribute value falls into one of these fields, based on value_type:
     */
    stringValue?: string | null;
    uint32Value?: number | null;
    /**
     * Used to store language-specific names of this attribute's value (e.g. a translation into another language).
     */
    valueDisplay?: Schema$GeostoreAttributeValueDisplayProto[];
    valueSpaceId?: Schema$GeostoreAttributeIdProto;
    valueType?: string | null;
  }
  /**
   * Used to help display language-specific names of attributes.
   */
  export interface Schema$GeostoreAttributeValueDisplayProto {
    language?: string | null;
    synonym?: string | null;
  }
  export interface Schema$GeostoreBarrierLogicalMaterialProto {
    material?: string[] | null;
  }
  /**
   * A BestLocaleProto holds information about the best-match locale for a feature. Clients may use this information to determine the appropriate local name of a feature.
   */
  export interface Schema$GeostoreBestLocaleProto {
    /**
     * The ID of the best-match TYPE_LOCALE feature for this feature.
     */
    locale?: Schema$GeostoreFeatureIdProto;
    /**
     * The ID of the localization policy to apply when selecting a name for a feature. This field should always be set. If feature_id is also defined, this field should have the same localization policy ID as the referenced locale feature. Localization policy IDs are arbitrary identifiers (up to some number of bytes; see geostore/base/public/constants.h) that uniquely distinguish a set of language-selection rules.
     */
    localizationPolicyId?: string | null;
    /**
     * Field-level metadata for this best locale.
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
  }
  /**
   * The reference to a BizBuilder listing. For details on BizBuilder see http://g3doc/commerce/bizbuilder/backend/g3doc/index.md
   */
  export interface Schema$GeostoreBizBuilderReferenceProto {
    /**
     * Listing id. Used in queries to BizBuilder backend for listing access.
     */
    id?: string | null;
  }
  /**
   * A border represents a line of division between two features of the same type (i.e. United States and Mexico, but not California and Mexico). Borders are only used for features that tile an area. For example, country features have borders with one another because they tile an area of land. Country features do not have borders with province features because those two types of features may intersect with each other. The geometry of a border will often be similar (or derived from) the geometry of the two features that it separates. However, it is useful to have borders represented by stand-alone features for map-styling purposes. Ideally, the geometry in a border feature would be exactly the same as the common edges of the polygonal geometry of the two features. This may not always be true in practice. At some point in the future we would like to build a network of borders for features that are supposed to tile with each other. The network would be composed of different border types meeting at endpoint intersections. In the process of building this network, we would perform small geometry corrections to ensure that the borders align properly at all zoom levels. Border features are intended primarily for map drawing, and they would rarely be useful for geocoding. One exception would be for famous borders like the "Mason Dixon Line" or the "Berlin Wall." The standard feature properties have the following interpretations: name - Borders rarely have names unless they notable in their own right (e.g. "Mason Dixon Line", "Berlin Wall"). point - A border should not have point geometry. polyline - A border should have a single polyline that represents the division between the two features. polygon - A border should not have polygon geometry.
   */
  export interface Schema$GeostoreBorderProto {
    /**
     * The ids of the area features to the left and right of the border, relative to the start and end of this borders' polyline geometry. These features should have the same type as the "type" attribute above. These ids are not required because the corresponding features may be nonexistent or difficult to obtain.
     */
    featureIdLeft?: Schema$GeostoreFeatureIdProto;
    featureIdRight?: Schema$GeostoreFeatureIdProto;
    /**
     * The logical borders which this border is a part of.
     */
    logicalBorder?: Schema$GeostoreFeatureIdProto[];
    /**
     * List of border status overrides. Due to legal reasons, we may be required to display some borders differently on some domains for instance.
     */
    overrideStatus?: Schema$GeostoreOverrideBorderStatusProto[];
    /**
     * The border status identifies the legal status of the border line.
     */
    status?: string | null;
    /**
     * The type of the features this border separates. Should always be a subtype of TYPE_POLITICAL. NOTE: as of December 2019, we currently require this to be equal to TYPE_COUNTRY or TYPE_ADMINISTRATIVE_AREA1. In the future, we may support TYPE_BORDER for lower types of political features.
     */
    type?: number | null;
  }
  /**
   * NOTE: BoundingMarkerProto could be compared against one another by canonicalizing them via GetCanonicalBoundingMarker() in google3/geostore/base/internal/lane.cc. Any fields that don't contribute to the definition of a bounding marker in the real world should be bundled with the annotative fields near the bottom and excluded in GetCanonicalBoundingMarker(). LINT.IfChange
   */
  export interface Schema$GeostoreBoundingMarkerProto {
    /**
     * References to any gcid:physical_lane_marker features that bound this lane or lane connection.
     */
    boundingMarker?: Schema$GeostoreFeatureIdProto;
    /**
     * A token that can be used to identify the version of the data about this bounding marker.
     */
    boundingMarkerToken?: string | null;
    /**
     * Which part of the flowline does this association refer to? These should be between 0 and 1. These are optionally set, but can be approximated geometrically if they aren’t set. NOTE: These refer to the geometry of this feature.
     */
    flowlineAdjacencyBeginFraction?: number | null;
    flowlineAdjacencyEndFraction?: number | null;
    /**
     * Which part of the marker track does this association refer to? These should be between 0 and 1. These are optionally set, but can be approximated geometrically if they aren’t set. NOTE: These refer to the geometry of the marker feature.
     */
    markerAdjacencyBeginFraction?: number | null;
    markerAdjacencyEndFraction?: number | null;
    /**
     * Which side of the flowline does the marker occur on.
     */
    side?: string | null;
  }
  /**
   * This protocol buffer holds the building-specific attributes for features of type TYPE_COMPOUND_BUILDING.
   */
  export interface Schema$GeostoreBuildingProto {
    /**
     * The height of the base of this building, in meters above ground-level, if known.
     */
    baseHeightMetersAgl?: number | null;
    /**
     * The level in this building that should get displayed by default. If present, the default display level must be one of this building's levels that are listed in the level[] field, and if a level is set as a default level of one building, all buildings sharing the level should have that same level as their default level. If not present, clients should not display any level by default for that building.
     */
    defaultDisplayLevel?: Schema$GeostoreFeatureIdProto;
    /**
     * The number of floors above the base of the building, if known. For example a regular 1-story building would set this to "1". Use a value of GeostoreConstants::kDefaultHeightPerFloor when converting "floors" to "height_meters".
     */
    floors?: number | null;
    floorsMetadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * The height of the building above its base, in meters, if known.
     */
    heightMeters?: number | null;
    heightMetersMetadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * The levels in this building, in no particular order. These levels refer back to the building via another strong reference (the LevelProto.building field).
     */
    level?: Schema$GeostoreFeatureIdProto[];
    /**
     * "Structure" denotes a physical architecture of the building that is readily visible. This attribute is useful in that rarer structures can make good landmarks.
     */
    structure?: string | null;
  }
  /**
   * This holds data specific to business chain features.
   */
  export interface Schema$GeostoreBusinessChainProto {
    /**
     * Canonical GConcepts describe the ideal state of the GConcepts of this business chain's members.
     */
    canonicalGconcepts?: Schema$GeostoreCanonicalGConceptProto[];
  }
  /**
   * A BusinessHoursProto stores a weekly schedule of opening hours for a business (represented as a BusinessHours message) together with other closely related information that is Geo-specific.
   */
  export interface Schema$GeostoreBusinessHoursProto {
    /**
     * The actual hours represented by this BusinessHoursProto.
     */
    data?: Schema$BusinessHours;
    /**
     * Field-level metadata for these hours.
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
  }
  /**
   * Message containing calls to action specified by the business owner.
   */
  export interface Schema$GeostoreCallToActionProto {
    /**
     * Required.
     */
    ctaType?: string | null;
    url?: Schema$GeostoreUrlProto;
  }
  /**
   * This proto represents a canonical gconcept of a business chain's members.
   */
  export interface Schema$GeostoreCanonicalGConceptProto {
    gconcept?: Schema$GeostoreGConceptInstanceProto;
    /**
     * Whether the gconcept must be on a member. This must be true for a primary gconcept.
     */
    isRequired?: boolean | null;
  }
  /**
   * This protocol buffer holds S2 cell covering for the feature. See util/geometry/s2cell_union.h for more information on S2 cells. See geostore/base/public/cellcovering.h for utility functions.
   */
  export interface Schema$GeostoreCellCoveringProto {
    /**
     * Array of S2 cell ids that represent the covering. There is no preset limit on how many cells can be used.
     */
    cellId?: string[] | null;
  }
  /**
   * CityJsonProto is a custom proto representation of the portion of the CityJSON spec (https://www.cityjson.org/) relevant to internal projects. See go/cityjsonproto-design for more information about the modeling and design decisions implemented here.
   */
  export interface Schema$GeostoreCityJsonProto {
    /**
     * City objects associated with this CityJsonProto.
     */
    cityObjects?: Schema$GeostoreCityJsonProtoCityObject[];
    /**
     * Spec for converting vertices from a local coordinate system in arbitrary units to ECEF coordinates in meters (https://en.wikipedia.org/wiki/Earth-centered,_Earth-fixed_coordinate_system).
     */
    transform?: Schema$GeostoreCityJsonProtoTransform;
    /**
     * Vertices as local coordinates represented as a flattened list: [x1,y1,z1,x2,y2,z2,x3,y3,z3]. Vertices are relative to a local coordinate system and rounded to their nearest integer value. See `transform` for how vertices can be transformed from a local coordinate system into an Earth-centered, Earth-fixed coordinate system. Vertices are flattened for space efficiency, memory locality, and processing performance. To access the x,y,z coordinates of vertex N, read the values at indices 3N, 3N+1, and 3N+2.
     */
    vertexXyz?: number[] | null;
  }
  /**
   * Representation of an object with geometry.
   */
  export interface Schema$GeostoreCityJsonProtoCityObject {
    /**
     * Geometries associated with this object.
     */
    geometries?: Schema$GeostoreCityJsonProtoCityObjectGeometry[];
    /**
     * The ID of this CityObject, which must be unique within this CityJsonProto. The ID does not have a meaning outside this CityJsonProto.
     */
    id?: string | null;
    /**
     * Type of object represented, e.g. building.
     */
    type?: string | null;
  }
  /**
   * Representation of geometry. Geometries vary both in type and in level-of-detail, enabling representation of any shape at any level of granularity.
   */
  export interface Schema$GeostoreCityJsonProtoCityObjectGeometry {
    /**
     * Level-of-detail (LoD) indicates how intricate the geometric representation is. May be a single digit per CityGML standards or X.Y per TU Delft (visual depiction at https://3d.bk.tudelft.nl/lod/). `CityObject`s may have multiple geometries with the same LoD.
     */
    lod?: string | null;
    /**
     * For geometries consisting of a single point, line, or loop.
     */
    multipoint?: Schema$GeostoreCityJsonProtoCityObjectGeometryMultiPoint;
    /**
     * For geometries consisting of a collection of surfaces.
     */
    multisurface?: Schema$GeostoreCityJsonProtoCityObjectGeometryMultiSurface;
    /**
     * For geometries consisting of a watertight 3D shape.
     */
    solid?: Schema$GeostoreCityJsonProtoCityObjectGeometrySolid;
  }
  /**
   * A single line, loop, or set of points.
   */
  export interface Schema$GeostoreCityJsonProtoCityObjectGeometryMultiPoint {
    /**
     * A collection of references to vertices in `CityJsonProto.vertex_xyz`. `CityJsonProto.vertex_xyz` is a flattened list of vertex coordinates. A value in `x_indices` should be the index of the x-coordinate of the desired vertex V; the full coordinates of vertex V can then be found at indices [V,V+1,V+2]. For example, an `x_indices` containing 3, 0, and 12 references three vertices, whose complete x,y,z coordinates can respectively be found at `CityJsonProto.vertex_xyz` indices [3,4,5], [0,1,2], and [12,13,14].
     */
    xIndices?: number[] | null;
  }
  /**
   * A collection of arbitrary surfaces that have no prescribed topological relationship.
   */
  export interface Schema$GeostoreCityJsonProtoCityObjectGeometryMultiSurface {
    /**
     * All surfaces are standalone entities with no relationship to each other.
     */
    surfaces?: Schema$GeostoreCityJsonProtoCityObjectGeometrySurface[];
  }
  /**
   * A 3D shape, composed of a watertight exterior shell with optional interior watertight shells.
   */
  export interface Schema$GeostoreCityJsonProtoCityObjectGeometrySolid {
    /**
     * The first shell is exterior; any additional are interior.
     */
    shells?: Schema$GeostoreCityJsonProtoCityObjectGeometryMultiSurface[];
  }
  /**
   * A polygonal surface, composed of a closed exterior loop with optional closed interior loops.
   */
  export interface Schema$GeostoreCityJsonProtoCityObjectGeometrySurface {
    /**
     * The first loop is exterior; any additional are interior.
     */
    loops?: Schema$GeostoreCityJsonProtoCityObjectGeometryMultiPoint[];
  }
  /**
   * Information for transforming a point from an "old" to "new" coordinate frame. Applied as follows: vertex_new = scale * vertex_old + translate
   */
  export interface Schema$GeostoreCityJsonProtoTransform {
    /**
     * Relative scale of the vertices in the new coordinate system relative to the old coordinate system. Applies to all three x,y,z coordinates.
     */
    scale?: number | null;
    /**
     * Offset of each vertex in the new coordinate system relative to the old coordinate system.
     */
    translate?: Schema$GeostoreCityJsonProtoTransformXyzVector;
  }
  /**
   * Vector of length three whose values respectively correspond to the x, y, and z axes.
   */
  export interface Schema$GeostoreCityJsonProtoTransformXyzVector {
    x?: number | null;
    y?: number | null;
    z?: number | null;
  }
  /**
   * Generic item proto. This is intended to have only certain aspects filled (e.g. photo only, name + price). Valid combinations of properties are enforced by linters.
   */
  export interface Schema$GeostoreComposableItemProto {
    /**
     * Call to action for the individual product.
     */
    callToAction?: Schema$GeostoreCallToActionProto;
    jobMetadata?: Schema$GeostoreJobMetadata;
    /**
     * Any photos describing this item.
     */
    media?: Schema$GeostoreMediaItemProto[];
    /**
     * The repeated name_info field is for price list sections listed in multiple languages. At least one name_info containing id must be specified. There should be at most one name_info for any given language. When representing a job item, there should be exactly one name_info specified.
     */
    nameInfo?: Schema$GeostorePriceListNameInfoProto[];
    /**
     * Represents if an item is offered at a business. For TYPE_JOB, this represents if this job is offered by the corresponding business
     */
    offered?: string | null;
    /**
     * Price of the item. There should be at most one price for any given currency.
     */
    price?: Schema$GeostorePriceRangeProto;
    /**
     * Represents which price format is being used by this item, which determines the usage/meaning of the “price” field above. Optional – the default value is legal and safe (represents no price if the “price” field is unset).
     */
    priceFormat?: string | null;
    /**
     * Numerical score which can be provided by data sources to indicate preferred item ordering. This is purely a hint – we are not required to followed it if we have a different order we think is better. Higher scores represent items that should be shown more prominently/earlier. Optional.
     */
    rankingHint?: number | null;
  }
  /**
   * A count value tagged with a comparison operator. This can be used for axle count, trailer count, etc.
   */
  export interface Schema$GeostoreCountComparisonProto {
    comparisonOperator?: string | null;
    count?: number | null;
  }
  /**
   * Possible patterns of a crossing stripe (any element that denotes a point on a segment or lane at which the vehicle must stop or yield). These include crosswalks, stop, and yield lines.
   */
  export interface Schema$GeostoreCrossingStripePatternProto {
    borderLine?: Schema$GeostorePhysicalLineProto;
    borderPattern?: string | null;
    /**
     * Colors found on this crossing.
     */
    color?: Schema$GeostorePaintedElementLogicalColorProto[];
    stripePattern?: string | null;
  }
  export interface Schema$GeostoreCurvatureProto {
    /**
     * Curvature values at points along the flowline. A linear interpolation between two successive points will yield the curvature value at intermediate points.
     */
    pointCurvature?: Schema$GeostorePointCurvatureProto[];
  }
  /**
   * Protocol buffer describing a curve that connects two externally specified endpoints.
   */
  export interface Schema$GeostoreCurveConnectionProto {
    bezierParams?: Schema$GeostoreCurveConnectionProtoBezierParams;
    circleParams?: Schema$GeostoreCurveConnectionProtoCircleParams;
    type?: string | null;
  }
  export interface Schema$GeostoreCurveConnectionProtoBezierParams {
    /**
     * Internal Bezier handles. One can be used for a quadratic curve, two for cubic Beziers.
     */
    controlPoint?: Schema$GeostoreCurveConnectionProtoBezierParamsControlPoint[];
  }
  export interface Schema$GeostoreCurveConnectionProtoBezierParamsControlPoint {
    /**
     * We use this parameterization to make curves change predictable when endpoints move. Each point P is defined in terms of the straight edge [S, E] between the start point of the curve S and its end point E. *P / / / S *------------* E Counter-clockwise angle between vector SE and vector SP.
     */
    angleDegrees?: number | null;
    /**
     * Distance(S, P) in units of Distance(S, E).
     */
    distanceMultiplier?: number | null;
  }
  export interface Schema$GeostoreCurveConnectionProtoCircleParams {
    /**
     * Arc radius. Must be greater than half-distance between two endpoints.
     */
    radius?: number | null;
  }
  /**
   * Every data source used to construct a data repository has an associated feature that provides more information about it. The standard feature properties have the following interpretations: bound - The bounds must includes all features that refer to this data source, so that bucketing MapReduce passes work correctly. name - The provider name associated with this data source. It is expected to remain constant from release to release, and between datasets. address - should be empty. point, polyline, polygon - should be empty. source_info - should not be set. child - should be empty.
   */
  export interface Schema$GeostoreDataSourceProto {
    /**
     * This is the URL of a website representing this DataSource as a whole. If this DataSource feature is specific to a particular dataset or product, the page may contain information relevant to that dataset or product or may be the main page of the organization.
     */
    attributionUrl?: Schema$GeostoreUrlProto[];
    /**
     * A UTF8 string that will be inserted in copyright messages to refer to this copyright owner, e.g. "Tele Atlas".
     */
    copyrightOwner?: string | null;
    /**
     * The copyright year of this data (which may be different than the year of the release date), e.g. 2005.
     */
    copyrightYear?: number | null;
    /**
     * A free-form description of this data source. Ideally the description should include: - Where the data was obtained (URL, company name, individual, etc). - Where to find detailed documentation. - A brief summary of the licensing terms. - As much internal and external contact information as possible (e.g. who to ask about licensing questions, interpreting the data, updating the data, fixing bugs in the importer, etc).
     */
    description?: string | null;
    /**
     * The build information of the importer binary used to generate this data source.
     */
    importerBuildInfo?: string | null;
    /**
     * The build target of the importer binary used to generate this data source.
     */
    importerBuildTarget?: string | null;
    /**
     * The Perforce client information of the importer binary used to generate this data source.
     */
    importerClientInfo?: string | null;
    /**
     * If the importer was built as an MPM, the version number can be stored in this field. As with build_info, this can be useful when tracking down issues that may be due to the use of a particular binary.
     */
    importerMpmVersion?: string | null;
    /**
     * The timestamp of the importer binary used to generate this data source.
     */
    importerTimestamp?: string | null;
    /**
     * The provider type of this data source.
     */
    provider?: string | null;
    /**
     * For every key that is used in raw_data from this source, there must be a corresponding entry in raw_metadata that describes this key.
     */
    rawMetadata?: Schema$GeostoreRawMetadataProto[];
    /**
     * A release string that doesn't have to be a date. This is provided so that we can preserve provider release strings that aren't based on dates. If you don't set it, the release_date will get formatted into this field for debugging purposes.
     */
    release?: string | null;
    /**
     * The release date of this data.
     */
    releaseDate?: Schema$GeostoreDateTimeProto;
    /**
     * A data provider defined string describing the source dataset from which the features of this data source were generated. For example, the MultiNet "fra" dataset produces features for both France and Monaco.
     */
    sourceDataset?: string | null;
  }
  /**
   * WARNING: Outside of FeatureProto, please avoid in favor of a standard civil time type. Direct usage is error-prone due to the conflation of physical time and civil time (go/httat). In a protocol buffer, please use google.type.Date, with an additional google.type.TimeOfDay for precision finer-grained than a day. (For google.type.DateTime, go/prototime#types cites go/httat#zoned_datetime as a caveat). In a programming language, see go/time-devguide/languages. Additionally in C++, google3/geostore/base/public/datetime.h has conversion functions between DateTimeProto and Abseil's civil time types.
   */
  export interface Schema$GeostoreDateTimeProto {
    /**
     * This attribute describes the precision of the date and time. It would be unusual for a data provider to provide a precision along with their date. It is more likely that the precision of a date will be inferred from the date format. For example "19th century" is likely to be correct to the century, while "1800" is probably correct to the year. The precision should be semantically interpreted as a cast, so a DateTimeProto object with a seconds value corresponding to 2018-03-28 18:40:00 UTC and a precision of MONTH should be interpreted as "March 2018". The enums above are only some of the possible precision levels for dates and times. Clients may wish to add more precision enums in the future. However, these enums must be ordered by decreasing duration. Clients should be able to write date formatting code that looks like this: if (datetime.precision() <= DateTimeProto::PRECISION_CENTURY) { date = FormatCenturyDate(proto.seconds()); \} else if (proto.precision() <= case DateTimeProto::PRECISION_DECADE) { date = FormatDecadeDate(proto.seconds()); \} else { ... \} See geostore/base/public/datetime.h for date formatting utility functions.
     */
    precision?: string | null;
    /**
     * Number of seconds since (or before) the UNIX epoch (January 1, 1970). This is also the standard epoch for Java and Python time representations. If it is important for this time be displayed correctly for different time zones, convert the time to Coordinated Universal Time (UTC).
     */
    seconds?: number | null;
  }
  /**
   * A dimension value tagged with a comparison operator. This can be used for height, width, or length.
   */
  export interface Schema$GeostoreDimensionComparisonProto {
    comparisonOperator?: string | null;
    dimensionWithUnit?: Schema$GeostoreDimensionProto;
  }
  /**
   * A dimension with a numerical value and unit. This can be a height, width, or length.
   */
  export interface Schema$GeostoreDimensionProto {
    dimension?: number | null;
    unit?: string | null;
  }
  /**
   * This holds data specific to rendering a POI on a map. It's derived from data already in MapFacts, e.g. containing features and the feature's point field. If empty, this proto should be ignored for rendering. See go/maps-render-alignment for motivation and more details.
   */
  export interface Schema$GeostoreDisplayDataProto {
    /**
     * The location where this feature should be rendered.
     */
    displayLocation?: Schema$GeostorePointProto;
  }
  /**
   * This protocol buffer holds the doodle-specific attributes for features of type TYPE_DOODLE.
   */
  export interface Schema$GeostoreDoodleProto {
    /**
     * The type of this feature -- see comments above.
     */
    type?: string | null;
  }
  /**
   * A single cost which will apply based on the duration of utilization. The cost may apply once, or repeatedly on some interval, to account for the total utilization. If the duration expressed by range_start_seconds and range_end_seconds do not cover the entire duration of the utilization (i.e. from 0 to some time greater than the total utilization time), this must be combined with other DurationBasedRateProtos such that the entire duration of the utilization is accounted for. See go/rate-schema for more details.
   */
  export interface Schema$GeostoreDurationBasedRateProto {
    /**
     * If true, represents that the rate is free; i.e. the price is 0 in any currency. If this is true, price must be empty.
     */
    isFree?: boolean | null;
    /**
     * The billable unit of the rate; i.e. after having utilized the service for exactly periodicity_seconds, the total cost should increase by ‘price’. For example, if the rate expresses a price per hour, then periodicity_seconds should be set to 3600. If this is unset, then the rate does not vary based on duration, and price represents a flat cost. May only be set if price is nonempty.
     */
    periodicitySeconds?: number | null;
    /**
     * The total price, in each applicable currency, of utilizing the service for periodicity_seconds, or for the entire duration expressed by range_start_seconds and range_end_seconds if periodicity_seconds is 0. Each entry should have an ID of /measurement_unit/money_value and consist of two properties: one with an ID of /measurement_unit/money_value/amount and a float value with the amount, and another with the ID /measurement_unit/money_value/currency and an ID value with the MID of the proper currency. May only be set if is_free is false.
     */
    price?: Schema$FreebaseTopic[];
    /**
     * Upper bound for durations to match, exclusive. Unset implies indefinite.
     */
    rangeEndSeconds?: number | null;
    /**
     * Lower bound for durations to match, inclusive. Required; a value of 0 expresses that the price applies from the start of the utilization period.
     */
    rangeStartSeconds?: number | null;
  }
  /**
   * Represents raster digital elevation model data.
   */
  export interface Schema$GeostoreElevationModelProto {
    /**
     * Defines the relative order in which terrain data should be rendered. Features with higher blend_order should be blended on top of features with lower blend_order. NOTE: this is backwards from the way BlendRank works in Magrathean.
     */
    blendOrder?: number | null;
    /**
     * The zoom level at which this data is defined. Level 0 is world level data, and each increase in zoom level corresponds to a factor of 2 increase in scale.
     */
    dataLevel?: number | null;
    /**
     * The maximum (finest) level at which this terrain data has sufficient resolution to be displayed.
     */
    dataMaxlevel?: number | null;
    /**
     * A place to store an elevation data protocol buffer. Currently, this must be a keyhole::AssetTileCompressed (see google3/keyhole/common/proto/magrathean.protodevel).
     */
    elevationData?: Schema$Proto2BridgeMessageSet;
    /**
     * If true, all of the data contained in this feature is available at the next highest (more detailed) level. If this is true, partial_child_data_available should also be true.
     */
    fullChildDataAvailable?: boolean | null;
    /**
     * If true, at least part of the data contained in this feature is available at the next highest (more detailed) level.
     */
    partialChildDataAvailable?: boolean | null;
  }
  /**
   * This protocol buffer holds elevation and related data.
   */
  export interface Schema$GeostoreElevationProto {
    /**
     * The average elevation of the feature in meters above the local mean sea level.
     */
    averageElevationMeters?: number | null;
    /**
     * Additional details for TYPE_PEAK and TYPE_VOLCANO features.
     */
    peak?: Schema$GeostorePeakProto;
  }
  /**
   * This protocol buffer holds entrance-specific attributes for features of type TYPE_ENTRANCE.
   */
  export interface Schema$GeostoreEntranceProto {
    allowance?: string | null;
    /**
     * DEPRECATED. Please use enter_or_exit instead.
     */
    canEnter?: boolean | null;
    /**
     * Whether the target can be entered through this entrance. Whether the target can be exited through this entrance.
     */
    canExit?: boolean | null;
  }
  /**
   * Models a relationship between a feature and its entrance or exit.
   */
  export interface Schema$GeostoreEntranceReferenceProto {
    /**
     * Feature ID of the related entrance. References should refer to TYPE_ENTRANCE or TYPE_COMPOUND features that are entrances or exits of the referencing feature.
     */
    featureId?: Schema$GeostoreFeatureIdProto;
  }
  /**
   * This protocol buffer holds establishment-specific attributes for features of type TYPE_ESTABLISHMENT.
   */
  export interface Schema$GeostoreEstablishmentProto {
    /**
     * Reference to BizBuilder data for this establishment. The bizbuilder_reference field indicates that a feature is claimed in CBDB (with the canonical state in MapFacts). The bizbuilder_reference is different from the social_reference's claimed_gaia_id because some BizBuilder clients will not have +Pages. All claimed businesses should have a bizbuilder_reference.
     */
    bizbuilderReference?: Schema$GeostoreBizBuilderReferenceProto;
    /**
     * Regular opening hours for the establishment (weekly schedule).
     */
    hours?: Schema$GeostoreTimeScheduleProto;
    /**
     * Opening hours for this establishment, including regular weekly hours and exceptional hours (e.g. on holidays). NOTE: in practice, only the exceptional hours are filled in this message. A schema migration for regular weekly hours was planned back in 2015 (see b/23105782) but was not completed and is (as of May 2018) not prioritized. Clients should continue getting regular opening hours from the `hours` field above. In openinghours.h there is a utility function `GetOpeningHoursFromFeature` that merges `EstablishmentProto.hours` into this proto.
     */
    openingHours?: Schema$GeostoreOpeningHoursProto;
    /**
     * Pricing for products and services offered. Example: menus for restaurants.
     */
    priceInfo?: Schema$GeostorePriceInfoProto;
    serviceArea?: Schema$GeostoreServiceAreaProto;
    /**
     * Telephone number and related information.
     */
    telephone?: Schema$GeostoreTelephoneProto[];
    /**
     * ** DEPRECATED ** This is deprecated in favor of the top-level (in FeatureProto) set of GConcepts. The type of establishment -- see comments above.
     */
    type?: string | null;
  }
  /**
   * An ExceptionalHoursProto holds information about exceptional (non-regular) hours for a business, such as holiday hours.
   */
  export interface Schema$GeostoreExceptionalHoursProto {
    /**
     * The weekly schedule to be applied for the dates that fall within the range. The schedule may contain hours only for days of the week that occur during the date range specified in the range field.
     */
    hours?: Schema$GeostoreBusinessHoursProto;
    /**
     * Field-level metadata for this exception.
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * The dates for which this exception applies, expressed as a half open interval. For example, an exception that applies for the entire month of December 2015 should have a range December 1, 2015 to January 1, 2016. Any regular hours that start on days in this range are ignored and replaced by the exceptional hours for that day. The TimeIntervalProto for the range must be a fully specified, non-empty, and non-inverted range of dates. Concretely, the requirements are: * the range must be a TYPE_RANGE interval * the interval may not be inverted * the endpoints of the interval must specify a year, month, and day * the day_type of each endpoint must be type DAY_OF_MONTH * the endpoints may not specify hour, minute, second, week, or week_type * the begin endpoint must predate the end endpoint
     */
    range?: Schema$GeostoreTimeIntervalProto;
  }
  export interface Schema$GeostoreExistenceProto {
    /**
     * Indicates whether the place is closed (permanently or temporarily), i.e., not operational in the present, but was at in the past and/or will be in the future. WARNING: New code should use Geo Schema's libraries instead, specifically the OpeningStatus APIs, available in: * C++ (cs/f:google3/geostore/base/public/feature.h%20function:ExistenceState) * Java (cs/f:google3/java/com/google/geostore/base/Existence.java%20function:OpeningStatus) * Python (cs/f:google3/geostore/base/public/python/feature.clif%20existence_state)
     */
    closed?: boolean | null;
    /**
     * Structured reason for the permanent closure (if any).
     */
    closeReason?: string | null;
    /**
     * RESERVED
     */
    endAsOfDate?: Schema$GeostoreDateTimeProto;
    endDate?: Schema$GeostoreDateTimeProto;
    /**
     * ** DEPRECATED ** This field is now deprecated (see b/22878252). Please use the Geo Schema GetFeatureBirthTimestamp() API to extract the birth timestamp of a feature. The timestamp in seconds since the UNIX epoch (January 1, 1970) when this feature becomes live in the Geo repository. Different from start_date in that this is the birth date of Google's representation of the place whereas start_date is the birth date of the place in the physical world.
     */
    featureBirthTimestampSeconds?: string | null;
    /**
     * Indicates whether the feature is marked as removed in the Geo repository. Removed features are still present in the Geo repository but are considered to be in an inactive state (not valid for lint purposes, not retrievable except explicitly by feature ID, etc.). NOTE: If you have access to a complete FeatureProto, do NOT read this bit directly to find out whether a feature is removed. Instead, rely on the IsFeatureRemoved() API, available in C++ (geostore/base/public/feature.h) and Java (geostore/base/Feature.java).
     */
    removed?: boolean | null;
    /**
     * Structured reason why the feature is marked as removed. Relevant only when removed == true.
     */
    removedReason?: string | null;
    /**
     * (Initial) opening and (permanent) closing dates of the establishment, such that start_date is the first day open and end_date is the first day closed. The only allowed precisions are PRECISION_DAY, PRECISION_MONTH, PRECISION_YEAR. DateTimeProto.seconds should have the lowest legal value for the desired date/time and precision. E.g. for PRECISION_MONTH, 2019-02-15 21:10:30 is not valid, it should be 2019-02-01 00:00:00 instead. NOTE: The start_date and end_date are stored in UTC but should be interpreted as being in the local timezone. So clients should convert the DateTimeProto to local (civil) time using UTC+0, and then treat the result as local to the feature.
     */
    startDate?: Schema$GeostoreDateTimeProto;
  }
  /**
   * Provenance information for sub-fields of this feature - go/subfield-provenance.
   */
  export interface Schema$GeostoreFeatureFieldMetadataProto {
    fieldProvenance?: Schema$GeostoreFeatureFieldMetadataProtoFieldProvenance[];
  }
  export interface Schema$GeostoreFeatureFieldMetadataProtoFieldProvenance {
    /**
     * Represents all fields for which this SourceInfo is valid. NOTE: Field paths are rooted at FeatureProto level.
     */
    fieldPath?: Schema$GeostoreStableFieldPathProto[];
    provenance?: Schema$GeostoreProvenanceProto;
  }
  /**
   * Metadata related to the history of a given feature in the Geo repository.
   */
  export interface Schema$GeostoreFeatureHistoryMetadataProto {
    /**
     * The timestamp (in microseconds since the UNIX epoch) when this feature first went live in the Geo repository. Note that this has no relation to the birth data of that geographical entity in the real world.
     */
    featureBirthTimestampUs?: string | null;
    /**
     * The timestamp (in microseconds since the UNIX epoch) of the last modification to the feature. Note this includes attachment modifications. The feature's initial creation is also considered as a modification. This is useful for those that consume features via both listening to notifications and reading from repository snapshots. This timestamp can be used to decide whether a feature in the snapshot was already seen in a more recent state through the notifications.
     */
    lastModificationTimestampUs?: string | null;
    /**
     * The timestamp (in microseconds since the UNIX epoch) of the deletion time of the feature. If the feature is currently removed, this field gets populated with the timestamp the feature first became removed after being live (or being removed from beginning). This field won't be set if the feature is live.
     */
    removalTimestampUs?: string | null;
  }
  /**
   * Feature ID forwardings. There are many different types of ID forwardings, some of which are attached to live features, others to removed features. This information is available in multiple forms (with different completeness guarantees): (1) in RPC responses to read requests to the live Geo repository; (2) on disk, as part of the metadata section of features found in the (inactive) features snapshots; (3) on disk, as part of a separate feature_id_forwardings side table.
   */
  export interface Schema$GeostoreFeatureIdForwardingsProto {
    /**
     * If the feature has been marked as a DUPLICATE of another feature, this is the feature ID of that other feature. Note that the other feature may itself be removed. This field is NOT set in (1).
     */
    duplicateOf?: Schema$GeostoreFeatureIdProto;
    /**
     * The feature ID of the forwarded feature. This field is only set in case (3).
     */
    forwardedId?: Schema$GeostoreFeatureIdProto;
    /**
     * If other features have been marked as DUPLICATE of this feature, this is the set of all such feature IDs. All feature IDs in this set should be for removed (aka inactive) features. Note that in the context of historical read requests against MapFacts (when ReadRequest.version_selection.timestamp is set), this field won't be set.
     */
    inactiveDuplicate?: Schema$GeostoreFeatureIdProto[];
    /**
     * DEPRECATED - Use feature.metadata.feature_replacement_info instead. This field was never populated.
     */
    replacedBy?: Schema$GeostoreFeatureIdListProto;
    /**
     * If the feature has been transitively marked as a DUPLICATE of another feature (via a chain of size \>= 1), this is the feature ID of that other feature which is the end of the chain. The field is always set even if the chain is of size 1. Note that the other feature may itself be removed. This field is only set in case (3).
     */
    transitivelyDuplicateOf?: Schema$GeostoreFeatureIdProto;
  }
  /**
   * A simple list of feature IDs.
   */
  export interface Schema$GeostoreFeatureIdListProto {
    /**
     * The list of feature IDs. While the exact semantics of these IDs are usage-dependent, the list should never be empty or contain duplicates.
     */
    id?: Schema$GeostoreFeatureIdProto[];
  }
  /**
   * A globally unique identifier associated with each feature. We use 128-bit identifiers so that we have lots of bits available to distinguish between features. The feature id currently consists of a 64-bit "cell id" that **sometimes** corresponds to the approximate centroid of the feature, plus a 64-bit fingerprint of other identifying information. See more on each respective field in its comments. Feature ids are first assigned when the data is created in MapFacts. After initial creation of the feature, they are immutable. This means that the only properties that you should rely on are that they are unique, and that cell_ids often - but not always - preserve spatial locality. The degree of locality varies as the feature undergoes geometry changes, and should not in general be considered a firm guarantee of the location of any particular feature. In fact, some locationless features have randomized cell IDs! Consumers of FeatureProtos from Mapfacts are guaranteed that fprints in the id field of features will be globally unique. Using the fprint allows consumers who don't need the spatial benefit of cell ids to uniquely identify features in a 64-bit address space. This property is not guaranteed for other sources of FeatureProtos.
   */
  export interface Schema$GeostoreFeatureIdProto {
    /**
     * The S2CellId corresponding to the approximate location of this feature as of when it was first created. This can be of variable accuracy, ranging from the exact centroid of the feature at creation, a very large S2 Cell, or even being completely randomized for locationless features. Cell ids have the nice property that they follow a space-filling curve over the surface of the earth. (See s2cellid.h for details.) WARNING: Clients should only use cell IDs to perform spatial locality optimizations. There is no strict guarantee that the cell ID of a feature is related to the current geometry of the feature in any way.
     */
    cellId?: string | null;
    /**
     * A 64-bit fingerprint used to identify features. Most clients should rely on MapFacts or OneRing to choose fingerprints. If creating new fprints, the strategy should be chosen so that the chance of collision is remote or non-existent, and the distribution should be reasonably uniform. For example, if the source data assigns unique ids to features, then a fingerprint of the provider name, version, and source id is sufficient.
     */
    fprint?: string | null;
    /**
     * A place for clients to attach arbitrary data to a feature ID. Never set in MapFacts.
     */
    temporaryData?: Schema$Proto2BridgeMessageSet;
  }
  /**
   * General metadata related to a given feature in the Geo repository.
   */
  export interface Schema$GeostoreFeatureMetadataProto {
    /**
     * This field indicates whether the feature is subject to bulk updates. Caution must be exercised while editing such features since the changes made by the edits will be overwritten by the bulk update (if the feature is bulk updated). See go/mapfacts-abu for more information.
     */
    bulkUpdatable?: string | null;
    /**
     * core_version_token is an opaque token representing the version of the core fields of the feature. This field is not updated when attachments are changed.
     */
    coreVersionToken?: string | null;
    /**
     * Metadata for tracking when a feature is derived from or replaced by another feature or set of features.
     */
    featureReplacementInfo?: Schema$GeostoreFeatureReplacementInfoProto;
    /**
     * Metadata about certain repeated fields and their subfields, for which field type is not granular enough.
     */
    fieldMetadata?: Schema$GeostoreFeatureFieldMetadataProto;
    /**
     * Feature ID forwardings, if applicable.
     */
    forwardings?: Schema$GeostoreFeatureIdForwardingsProto;
    /**
     * Metadata related to the history.
     */
    history?: Schema$GeostoreFeatureHistoryMetadataProto;
    /**
     * version_token is an opaque token representing the version of this feature. It can be used as a concurrency token when sending edits.
     */
    versionToken?: string | null;
  }
  /**
   * Message to represent a "feature property" as an abstract construct. Most feature properties are mapped one to one with the EditProto field types. However in some cases the EditProto field type granularity is too coarse to support use-cases that rely on feature properties (such as per-value rights tracking). When that is the case, the feature property is augmented with a secondary field.
   */
  export interface Schema$GeostoreFeaturePropertyIdProto {
    /**
     * Required when field_type == ATTACHMENT.
     */
    attachmentTypeId?: string | null;
    /**
     * Required when field_type == FEATURE_ATTRIBUTE.
     */
    attributeId?: string | null;
    fieldType?: string | null;
    /**
     * Required when field_type == KNOWLEDGE_GRAPH_PROPERTY.
     */
    kgPropertyId?: string | null;
    /**
     * RESERVED
     */
    nameLanguage?: string | null;
  }
  /**
   * Every entry in the GeoStore database is called a "feature". A feature is represented as a discriminated union of all the different feature types, where the actual feature type is specified by the "type" field. There are also various fields that are meaningful for most or all feature types, such as bounding regions and names. Every feature has a globally unique id that can be used to refer to it from other features.
   */
  export interface Schema$GeostoreFeatureProto {
    /**
     * Optional access point information. Access points hold detailed information about routing endpoints. For example, the main Google office is at "1600 Amphitheatre Parkway". The feature representing that office has a polygon, a center, and an address with components for the street number, route, locality, etc. The access point information, on the other hand, identifies the specific segment, the latitude/longitude of the driveway, and so forth.
     */
    accessPoint?: Schema$GeostoreAccessPointProto[];
    /**
     * Address for this feature. A Geo Schema address is designed to model a mailing address, so only features that have mailing addresses in the real world may have addresses. Each feature should have only one address. If you want to describe the geographic location of a feature which does not have a mailing address with respect to other well-known features, some other schema constructs should be used. Note that the field is defined as repeated though features that use this field with its intended semantics are constrained to have a single address even if they may have multiple mailing addresses in the real world. The “single address” rule is enforced by lint. Current exceptions to the single address rule and mailing address rule are described in the g3doc. Bear note that the schema team is actively working on eliminating these exceptions. http://go/geo-addresses Note the following conventions: - Addresses follow the postal hierarchy, not the political hierarchy. Addresses may have components that refer to political entities when those entities also appear in the postal hierarchy. - As stated previously, but it bears repeating, addresses on features are mailing addresses. In many cases the physical address and the mailing address are the same but the address stored on a feature represents the mailing address of the feature. An example of a non-physical mailing address would be a PO Box. - These addresses are commonly defined and verifiable by a governmental authority (e.g. the United States Postal Service in the United States, Royal Mail in the United Kingdom, Correios in Brazil, etc.) and should follow conventions and rules defined by those authorities.
     */
    address?: Schema$GeostoreAddressProto[];
    /**
     * Represents information about the feature’s anchored geometry.
     */
    anchoredGeometry?: Schema$GeostoreAnchoredGeometryProto;
    /**
     * The collection of attachments for this feature. Documentation: http://go/geo-attachments
     */
    attachment?: Schema$GeostoreAttachmentsAttachmentProto[];
    /**
     * ** DEPRECATED ** A list of attributes that describe defined aspects of this feature. An attribute must be a concrete, high quality, and editable piece of information about a feature, and must be used on some general consumer facing Google property. The data types used for attributes must be primitive types or reusable in a generic manner.
     */
    attribute?: Schema$GeostoreAttributeProto[];
    /**
     * Describes the best-match locale for this feature.
     */
    bestLocale?: Schema$GeostoreBestLocaleProto;
    border?: Schema$GeostoreBorderProto;
    /**
     * A latitude-longitude rectangle used by bucketing MapReduces. See the documentation on bucketing MapReduce for details. This field can be a source of confusion. Because it is called "bound", it is often assumed that it is a tight bound on the geometry but it can be (and often is) much larger. If a tight bound is needed then use the standard GetFeatureGeometryBound() function instead. To be more explicit, if you are using this field for *anything* else than a bucketing MapReduce, you are doing the wrong thing. Not all features are required to have bounding boxes. See geostore::IsBoundRequiredForFeatureType() for the list of feature types required to have a bounding box. This bound field will be updated when a feature changes in MapFacts to include its geometry. Also, a GeoSchema pipeline, go/geo-schema-pipelines-docs#expand-bounds runs periodically to update the field for strong references from other features. Therefore, most editors don't need to edit this field explicitly. See go/geo-changes:no-edit-for-feature-bound for the details.
     */
    bound?: Schema$GeostoreRectProto;
    building?: Schema$GeostoreBuildingProto;
    /**
     * Data specific to business chain features, e.g., Canonical GConcepts.
     */
    businessChain?: Schema$GeostoreBusinessChainProto;
    /**
     * The conceptual center of the feature, used for routing. For cities, this would be the center of the downtown, or maybe the location of city hall. For states and countries it might be the capital city. Most feature types will not have a conceptual center - by default, routing will use the centroid of the feature's geometry. If you need a feature center point consider using GetFeatureGeometryCenter() function from geostore/base/public/feature.h rather than reading from this field directly.
     */
    center?: Schema$GeostorePointProto;
    /**
     * Features can define themselves as a collection of other features. For example, a route is a collection of road segments, and a feature for the "Great Lakes" could be defined as lakes Superior, Michigan, Huron, Erie, and Ontario. It is not recommended to design a multi level tree using the child field to build up a feature because it requires fetching many features to see the details of the feature. In practice this is used to model archipelago, route, transit (agencies, lines, trips, departures), and river features. The geometry of a feature is implicitly defined by its children, so if a feature has children then it should not have any points, polylines, or polygons. In general, this field should not be used to represent political or postal hierarchies. For example, a county would not list its cities as children, because the county is not defined in terms of its cities (it also contains unincorporated areas, etc.).
     */
    child?: Schema$GeostoreFeatureIdProto[];
    /**
     * S2 cell coverings for this feature. See util/geometry/s2cell_union.h for more information about S2 cells. Coverings are useful for quick containment or intersection tests. S2 covering that consists of cells that intersect with the feature.
     */
    covering?: Schema$GeostoreCellCoveringProto;
    dataSource?: Schema$GeostoreDataSourceProto;
    /**
     * Data used to render this feature on a map.
     */
    displayData?: Schema$GeostoreDisplayDataProto;
    /**
     * ** DEPRECATED **
     */
    doodle?: Schema$GeostoreDoodleProto;
    elevation?: Schema$GeostoreElevationProto;
    /**
     * Captures elevation data used on TYPE_DIGITAL_ELEVATION_MODEL features.
     */
    elevationModel?: Schema$GeostoreElevationModelProto;
    entrance?: Schema$GeostoreEntranceProto;
    /**
     * Also allowed on TYPE_BUSINESS_CHAIN and TYPE_TRANSIT_AGENCY features, to model the feature's phone number(s). Other fields within EstablishmentProto are not permitted on non-TYPE_ESTABLISHMENT features.
     */
    establishment?: Schema$GeostoreEstablishmentProto;
    /**
     * A list of feature ids of polygon based restrictions that do not apply to this feature. This may only include features of TYPE_REGULATED_AREA that also have a feature.regulated_area.restriction field defined. Setting this field opts the feature out of all restrictions set on that regulated area.
     */
    exemptRegulatedArea?: Schema$GeostoreFeatureIdProto[];
    /**
     * Specifies the TYPE_FUTURE_GEOMETRY whose geometry will replace this feature's geometry. If this field is populated, the referenced future geometry must have a future_geometry_for referencing this feature.
     */
    futureGeometry?: Schema$GeostoreFeatureIdProto;
    /**
     * Specifies the feature that this feature's geometry will replace. If this field is populated, the referenced feature must have a future_geometry reference back to this feature. This field is only allowed (and required) for TYPE_FUTURE_GEOMETRY features.
     */
    futureGeometryFor?: Schema$GeostoreFeatureIdProto;
    /**
     * Geometry Store ID and materialized geometry representing the feature's physical shape in the world.
     */
    geometry3d?: Schema$GeostoreGeometryStoreReferenceProto;
    /**
     * If set, the feature's actual location can be assumed to be somewhere within a circle of this radius, centered on the feature's location. More information on this field at go/gpm-definition-update. NOTE: Only applicable to features with 'point' geometry. Please contact geo-schema-team@ if you have non-point use cases for which this field would be useful.
     */
    geometryPrecisionMeters?: number | null;
    /**
     * Geopolitical (unsimplified) polygons for a feature for different geopolitical use cases.
     */
    geopoliticalGeometry?: Schema$GeostoreGeopoliticalGeometryProto;
    /**
     * ** DEPRECATED ** Features can have zero or more HTML texts associated with them. These might be HTML balloons used by Google Earth, for example.
     */
    htmlText?: Schema$GeostoreHtmlTextProto[];
    /**
     * The globally unique id for this feature.
     */
    id?: Schema$GeostoreFeatureIdProto;
    inferredGeometry?: Schema$GeostoreInferredGeometryProto;
    /**
     * S2 interior covering that consists of cells completely enclosed within the feature's geometry (for features with polygonal geometry).
     */
    interiorCovering?: Schema$GeostoreCellCoveringProto;
    /**
     * Additional internal feature-level attributes that may be set by data providers to be used inside the Geo Data infrastructure. This field should never be present in the output of the Geo Data infrastructure that read-only clients consume.
     */
    internal?: Schema$GeostoreInternalFeatureProto;
    intersection?: Schema$GeostoreIntersectionProto;
    intersectionGroup?: Schema$GeostoreIntersectionGroupProto;
    /**
     * Properties that apply to this feature whose schema is defined in the Knowledge Graph schema (see https://hume.google.com/graph/schema). Not all properties that exist in the KG schema can be asserted via this mechanism. The set of properties that are allowed to be set on a feature depends on the feature's GConcepts (and feature type). For instance, only gcid:country features may have the /geo/type/country/president property (made up example, since that property doesn't actually exist in the KG schema). GConcept hierarchy is taken into account for deciding the set of allowed properties. Additionally, the specific properties allowed are further constrained by the list specified at go/kg-property-allowlist. NOTE: not all types of properties are allowed to appear in the Geo Schema. For now, we limit ourselves to properties whose value type is TYPE_BOOL, TYPE_COMPOUND, TYPE_DATETIME, TYPE_FLOAT, TYPE_ID, TYPE_INT, TYPE_NESTED_STRUCT, TYPE_TEXT, or TYPE_URI. NOTE(b/35039936): We are in the process of changing how a KG property with multiple values is stored in this field. Currently, such a KG property is stored in a single instance of the kg_property field. However, we will be changing this so that each value will be stored in its own instance of kg_property. Any client that wants to read from this field should be prepared to read data represented in either format. See b/35039936 or the announcement at http://g/geo-schema-announce/7IXR3Fex8to/7yFyT5UoAwAJ for an example and more details. The mechanism to assert that a KG property has no value is via the property_value_status field below. freebase.PropertyValue.value_status is not allowed be set here for consistency reason.
     */
    kgProperty?: Schema$FreebasePropertyValue[];
    /**
     * RESERVED
     */
    knowledgeGraphReference?: Schema$GeostoreKnowledgeGraphReferenceProto;
    laneMarker?: Schema$GeostoreLaneMarkerProto;
    /**
     * Represents information about TYPE_LEVEL features.
     */
    level?: Schema$GeostoreLevelProto;
    locale?: Schema$GeostoreLocaleProto;
    logicalBorder?: Schema$GeostoreLogicalBorderProto;
    /**
     * Metadata about this particular feature. Metadata is managed internally by the Geo Data Infrastructure and in general should not be set by clients. Features that don't ultimately come from the Geo repository (MapFacts) won't have any metadata set.
     */
    metadata?: Schema$GeostoreFeatureMetadataProto;
    /**
     * The name(s) of this feature. A feature may have different names in different languages, colloquial or "vanity" names, etc.
     */
    name?: Schema$GeostoreNameProto[];
    /**
     * Information about this feature's operations, e.g. when this feature is temporarily closed. NOTE: for legacy reasons, some closure-specifc information (e.g. permanent closure reason) lives in ExistenceProto instead. In the future, such information should move here in OperationsProto.
     */
    operations?: Schema$GeostoreOperationsProto;
    /**
     * This field is used internally by the pipeline for id stability. It should not be set by individual importers, nor should it be read by consumer clients. In particular, this field will not be present in features read or snapshotted from the Mapfacts Repository.
     */
    originalId?: Schema$GeostoreFeatureIdProto;
    parent?: Schema$GeostoreFeatureIdProto[];
    /**
     * Describes parking details for the feature.
     */
    parking?: Schema$GeostoreParkingProto;
    /**
     * Defines the geometry of the feature. The geometry may be specified as an arbitrary union of points, poses, polylines, tracks, and polygons. Points, poses, polylines, and tracks are assumed to represent regions of unspecified size or width rather than regions of zero area. Most features should have some sort of geometry. Geometry may be synthesized if none is available (e.g., polygons for postal codes). The synthetic_geometry flag should be set in that case. Point is currently enforced as a non-repeating field for all feature types, though it is defined as repeating in case future modeling requires multiple points. The number of allowed polylines, tracks, or polygons vary based on feature type. A feature can have at most one pose (it is an optional field).
     */
    point?: Schema$GeostorePointProto[];
    /**
     * ** DEPRECATED ** Detail discussion could be found at b/18611003.
     */
    political?: Schema$GeostorePoliticalProto;
    polygon?: Schema$GeostorePolygonProto[];
    /**
     * Provide version of the geometry suitable for display. This has been subject to water removal and (possibly) moderate simplification.
     */
    polygonForDisplay?: Schema$GeostorePolygonProto;
    polyline?: Schema$GeostorePolyLineProto[];
    /**
     * Defines the geometry of a feature as a 6D pose, including lat, lng, altitude, roll, pitch, and yaw along the WGS-84 ellipsoid. Only the lat and lng are strictly required.
     */
    pose?: Schema$GeostorePoseProto;
    /**
     * The preferred viewport for this feature. If present, this latitude-longitude rectangle holds the preferred viewport for the feature. For example, it might hold the bounds of the "central" portion of a large city. There are no aspect ratio requirements. This is an optional field: if no viewport is supplied, interested clients can use heuristics to determine a viewport. Calling the standard GetFeatureGeometryBound() function would be a good way to start but note that it can return an empty bounding box (e.g., if the feature has no geometry). The preferred viewport is not necessarily fully contained by the above bounding box.
     */
    preferredViewport?: Schema$GeostoreRectProto;
    /**
     * The value status of properties on this feature. For example, this specifies whether the feature is known to have no name (this is the value status of the 'FEATURE_NAME' property). Only property IDs which have no specific value are allowed to have a value status. Note: not all field types will be supported, please contact geo schema team if you want to enable this field for a field type that is not currently supported.
     */
    propertyValueStatus?: Schema$GeostorePropertyValueStatusProto[];
    /**
     * WARNING: Please do NOT introduce new uses of this field; treat it as if it were deprecated. For appropriate ranking contacts, see g3doc/company/teams/gdeng/geo-schema-reference/home/feature-properties/rank.md. A floating-point number between 0.0 and 1.0 indicating how "important" we think this feature is. This can be used to decide which features to render on maps, and how to rank results when the user does a search. The rank can depend on any number of factors such as the number of references to this feature in web pages, geographic size, population, number of referring geographic entities, "priority" information encoded in the source data, etc.
     */
    rank?: number | null;
    /**
     * The rank field is computed as a weighted sum of several signals. This field contains a protocol buffer whose fields give those signals and their weights. Clients should try very hard not to depend on these individual signals and use the single rank field instead. At some point in the future, this field will not be exposed anymore.
     */
    rankDetails?: Schema$GeostoreRankDetailsProto;
    /**
     * Geo Ontology GConcept Instances - Design doc linked off http://go/geo-ontology - In order to shield clients from changes in GConcept representation we provide an accessor library: geostore/base/public/gconcept_instance.h
     */
    rawGconceptInstanceContainer?: Schema$GeostoreOntologyRawGConceptInstanceContainerProto;
    regulatedArea?: Schema$GeostoreRegulatedAreaProto;
    /**
     * For TYPE_COUNTRY or TYPE_ADMINISTRATIVE_AREA1 features, this field defines the associated TYPE_BORDERs which reference this feature. The linked TYPE_BORDERs must have the feature.border set, pointing to this feature. TYPE_COUNTRY or TYPE_ADMINISTRATIVE_AREA1 features must have this field set for each TYPE_BORDER referencing them.
     */
    relatedBorder?: Schema$GeostoreFeatureIdProto[];
    /**
     * Logical relationship to other features that are entrances or exits to this feature.
     */
    relatedEntrance?: Schema$GeostoreEntranceReferenceProto[];
    /**
     * Geographic or logical relationships to other features. Importers don't need to fill a geographic relationship in - it is handled by related feature processing by a standalone pipeline. Adding "contained by" country relations is however encouraged (and required for TYPE_ROUTE features). WARNING: Updates to this field handled by standalone pipelines are NOT atomic with regard to updates to the features being referenced; we do not guarantee that a given MapFacts snapshot will be consistent between this field and the related features.
     */
    relatedFeature?: Schema$GeostoreRelationProto[];
    /**
     * Terminal points associated with this feature. For instance, an airport terminal may have specifically designated pickup and drop-off points.
     */
    relatedTerminalPoint?: Schema$GeostoreFeatureIdProto[];
    /**
     * Contains time zones known to be associated with a feature. Most features are associated with the single time zone that contains them. However, some larger features (countries, continents, etc.) are associated with all of the time zones they contain. Most features can have any number of related time zones, but TYPE_SEGMENT and TYPE_ESTABLISHMENT_POI features can have at most 1.
     */
    relatedTimezone?: Schema$GeostoreTimezoneProto[];
    restrictionGroup?: Schema$GeostoreRestrictionGroupProto;
    roadMonitor?: Schema$GeostoreRoadMonitorProto;
    /**
     * Additional details on the feature types below can be found in the individual protocol buffer definitions. These extensions capture data that is specific to a set of feature types and which makes no sense for other feature types.
     */
    route?: Schema$GeostoreRouteProto;
    schoolDistrict?: Schema$GeostoreSchoolDistrictProto;
    segment?: Schema$GeostoreSegmentProto;
    segmentPath?: Schema$GeostoreSegmentPathProto;
    sign?: Schema$GeostoreRoadSignProto;
    skiBoundary?: Schema$GeostoreSkiBoundaryProto;
    skiLift?: Schema$GeostoreSkiLiftProto;
    skiTrail?: Schema$GeostoreSkiTrailProto;
    /**
     * All establishments must have a social reference. WARNING: Aside from creating new establishments, please do NOT introduce new uses; treat social references as if they were deprecated. For alternatives and more, see g3doc/company/teams/gdeng/geo-schema-reference/home/feature-types/establishments/social-reference.md.
     */
    socialReference?: Schema$GeostoreSocialReferenceProto;
    /**
     * A list of the data sources that were used to construct this feature, together with optional "raw data" in the provider's format. Raw data should not be used by production clients but may be useful for exploring data that is not currently converted to a canonical form.
     */
    sourceInfo?: Schema$GeostoreSourceInfoProto[];
    /**
     * All features can have "existence" information associated with them.
     */
    status?: Schema$GeostoreExistenceProto;
    /**
     * Represents information about the store front geometry. Only TYPE_ESTABLISHMENT_POI should have this field set.
     */
    storefrontGeometry?: Schema$GeostoreAnchoredGeometryProto[];
    /**
     * We prefer features that have geometry over those that do not. In some cases we synthesize geometry (e.g., polygons for postal codes). This flag is set to indicate features that have such synthetic geometry.
     */
    syntheticGeometry?: boolean | null;
    /**
     * A place for clients to attach arbitrary data to a feature. Never set in MapFacts.
     */
    temporaryData?: Schema$Proto2BridgeMessageSet;
    /**
     * Captures full model representing the feature's 3D geometry. Should only be found on TYPE_COMPOUND_BUILDING features for now, but not part of the BuildingProto extension for possible future extensions.
     */
    threeDimModel?: Schema$GeostoreThreeDimensionalModelProto;
    /**
     * Represents information about TYPE_TOLL_CLUSTER features.
     */
    tollCluster?: Schema$GeostoreTollClusterProto;
    /**
     * Defines the geometry of a feature as a sequence of 6D poses, including lat, lng, altitude, roll, pitch, and yaw. Only lat and lng are typically required. Each track has an index so that they can be viewed in a stable order.
     */
    track?: Schema$GeostoreTrackProto[];
    transitLine?: Schema$GeostoreTransitLineProto;
    /**
     * RESERVED
     */
    transitLineVariant?: Schema$GeostoreTransitLineVariantProto;
    /**
     * RESERVED
     */
    transitStation?: Schema$GeostoreTransitStationProto;
    /**
     * The type of this feature -- see comments above.
     */
    type?: string | null;
    /**
     * Represents vertical ordering for this feature relative to other geometrically-overlaping features. See go/aboutgrades for more information about distinction among different levels.
     */
    verticalOrdering?: Schema$GeostoreVerticalOrderingProto;
    /**
     * Geometry Store ID and materialized geometry representing a tight bounding box of the feature's geometry (or the building/grounds a POI occupies), e.g. for generating flyover experiences.
     */
    visualizationArea?: Schema$GeostoreGeometryStoreReferenceProto;
    /**
     * A version of the geometry which has water removed but is not simplified (thus having equal or more vertices than polygon_for_display).
     */
    waterRemovedPolygon?: Schema$GeostorePolygonProto;
    /**
     * The official website of this feature. Stored as a repeated field to allow for multilingual official websites (see comments in url.proto).
     */
    website?: Schema$GeostoreUrlProto[];
  }
  /**
   * Metadata to track feature derivations and replacements. This is used to track feature provenance (particularly for road segments).
   */
  export interface Schema$GeostoreFeatureReplacementInfoProto {
    /**
     * This feature was created to replace other features that are referenced by this field.
     */
    derivedFrom?: Schema$GeostoreFeatureIdProto[];
    /**
     * This feature was replaced by other features that are referenced by this this field.
     */
    replacedBy?: Schema$GeostoreFeatureIdProto[];
  }
  /**
   * Internal field metadata. This part is not exposed to downstream consumers of the repository (read-only clients) but is available to upstream providers to the repository (read-write clients).
   */
  export interface Schema$GeostoreFieldMetadataProto {
    internal?: Schema$GeostoreInternalFieldMetadataProto;
  }
  /**
   * Proto used to represent rights for a field type. See go/geo-rights for more details. NOTE: Use google3/geostore/provenance/public/rights.h or google3/java/com/google/geostore/provenance/rights/Rights.java instead of accessing this proto directly.
   */
  export interface Schema$GeostoreFieldWithRightsProto {
    /**
     * ** DEPRECATED ** If field_type is set to FEATURE_ATTRIBUTE or KNOWLEDGE_GRAPH_PROPERTY, the attribute ID / KG property ID that makes this field with rights complete.
     */
    attributeId?: string | null;
    featurePropertyId?: Schema$GeostoreFeaturePropertyIdProto;
    /**
     * The field type for which the rights level are tracked on. The default value here has to match the value of fieldtype::NONE.
     */
    fieldType?: number | null;
    /**
     * The minimum rights level for all the current values on the field type.
     */
    minRightsLevel?: string | null;
  }
  /**
   * Wrapper to hold data related to a lane’s track, extendable for future data.
   */
  export interface Schema$GeostoreFlowLineProto {
    /**
     * RESERVED
     */
    curvature?: Schema$GeostoreCurvatureProto;
    track?: Schema$GeostoreTrackProto;
  }
  /**
   * Example: the choice of chicken, beef, or tofu for the Thai Basil dish. Each option would have its own name, price, allergen info, etc. Note: This proto stores both food and service items despite the name.
   */
  export interface Schema$GeostoreFoodMenuItemOptionProto {
    allergenAbsent?: string[] | null;
    allergenPresent?: string[] | null;
    calories?: number | null;
    /**
     * Ingredients of the food dish option.
     */
    ingredients?: Schema$GeostoreFoodMenuItemOptionProtoIngredient[];
    /**
     * Photos of the food dish option.
     */
    media?: Schema$GeostoreMediaItemProto[];
    /**
     * The repeated name_info field here is for item options with names or descriptions listed in multiple languages. When an item option has no names or descriptions, the size of the repeated field name_info may be 0. For example, when a food menu item does not have multiple options, the item option proto is used only to specify price and nutritional information, so it will not have a name_info field. There should be at most one name_info for any given language.
     */
    nameInfo?: Schema$GeostorePriceListNameInfoProto[];
    /**
     * Nutrition facts of the food dish option. Note that it also includes calories information with a finer defined unit information.
     */
    nutritionFacts?: Schema$GeostorePriceInfoFoodNutritionFacts;
    /**
     * Size of the order, represented in units of items. (e.g. 4 "skewers”, 6 "pieces”)
     */
    portionSize?: Schema$GeostoreFoodMenuItemOptionProtoPortionSize;
    /**
     * Methods on how the food dish option is prepared.
     */
    preparationMethods?: string[] | null;
    /**
     * We use PriceRangeProto here but we expect the lower_price and upper_price to be both set to equal numbers because an option should have a single price. This field is not required because food item prices may be variable depending on season.
     */
    price?: Schema$GeostorePriceRangeProto;
    restriction?: string[] | null;
    /**
     * Number of people can be served by this food dish option.
     */
    servesNumPeople?: number | null;
    spiciness?: string | null;
  }
  /**
   * This message denotes an ingredient information of a food dish.
   */
  export interface Schema$GeostoreFoodMenuItemOptionProtoIngredient {
    /**
     * The repeated name_info field is for the ingredient in multiple languages.
     */
    nameInfo?: Schema$GeostorePriceListNameInfoProto[];
  }
  /**
   * This message denotes the serving portion size of a food dish.
   */
  export interface Schema$GeostoreFoodMenuItemOptionProtoPortionSize {
    /**
     * Required.
     */
    quantity?: number | null;
    /**
     * Required. The repeated name_info field is for the unit in multiple languages.
     */
    unit?: Schema$GeostorePriceListNameInfoProto[];
  }
  /**
   * A food menu item must have a name although it can have multiple names in different languages. Example: Thai Basil. Price for this item is specified in the item_option field. Since the price of an item may be unknown, e.g. seasonal price, there is nothing that requires an item_option to be present in the FoodMenuItemProto.
   */
  export interface Schema$GeostoreFoodMenuItemProto {
    itemOption?: Schema$GeostoreFoodMenuItemOptionProto[];
    /**
     * The repeated name_info field is for items listed in multiple languages.
     */
    nameInfo?: Schema$GeostorePriceListNameInfoProto[];
  }
  /**
   * A GConceptInstanceProto contains a GConceptID (which is the unique identifier of a GConcept, a category in the Geo Ontology).
   */
  export interface Schema$GeostoreGConceptInstanceProto {
    /**
     * The unique identifier of a GConcept (e.g. "gcid:railway").
     */
    gconceptId?: string | null;
    /**
     * Field-level metadata for this GConcept.
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * The relative prominence of this category to this feature according to the data provider, as one of the values from the enum above. Prominence is a measure of how well the given GConcept describes the feature. An example is a gas station with convenience store and ATM. All three GConcepts are very relevant, but the gas_station GConcept is the most prominent. If the prominence of this GConcept is unknown, this field should not be set.
     */
    prominence?: string | null;
  }
  /**
   * Encapsulates all the features which, together, define the geometry of a feature. This happens by: 1. taking the union of all polygons of features referenced in includes_geometry_of 2. subtracting the polygons of all the features referenced in excludes_geometry_of
   */
  export interface Schema$GeostoreGeometryComposition {
    /**
     * Features whose geometry to exclude while composing the geometry of this feature.
     */
    excludesGeometryOf?: Schema$GeostoreFeatureIdProto[];
    /**
     * Features whose geometry to include while composing the geometry of this feature.
     */
    includesGeometryOf?: Schema$GeostoreFeatureIdProto[];
  }
  /**
   * A Geometry Store ID and, in some contexts, geometry materialized from the record associated with that ID.
   */
  export interface Schema$GeostoreGeometryStoreReferenceProto {
    /**
     * Geometry (in STGeography format) materialized from the footprint field of the Geometry Store record associated with the geometry_id referenced above.
     */
    footprint?: string | null;
    /**
     * Geometry materialized from the full_fidelity_proto field of the Geometry Store record associated with the geometry_id referenced above.
     */
    geometry?: Schema$GeostoreCityJsonProto;
    /**
     * The ID of a record in the Geometry Store.
     */
    geometryId?: string | null;
  }
  /**
   * Geopolitical (unsimplified) polygons for a feature for different geopolitical use cases. See go/unsimplified-poly.
   */
  export interface Schema$GeostoreGeopoliticalGeometryProto {
    /**
     * The unsimplified, water-subtracted polygon representing the feature's geometry as viewed by the rest of the world, which may differ from its default polygon, for example by excluding certain regions.
     */
    restOfWorldPolygon?: Schema$GeostorePolygonProto;
    /**
     * The unsimplified, water-subtracted polygon representing the feature's geometry as viewed by the country that administers it, which may differ from its default polygon, for example by including disputed areas.
     */
    selfPolygon?: Schema$GeostorePolygonProto;
  }
  /**
   * The grade level of a segment represents the relative altitude of the segment at a particular point along the segment. This level is in relation to other segments at the same point. For example, you might have a freeway at level = 0 and an overpass at level = 2. Vertical segments are represented by a polyline containing only 1 vertex and exactly two grade_level in segment.proto whose indices are 0. grade_level(0) represents the relative height at the start point of the segments, and grade_level(1) represents the one at the end point.
   */
  export interface Schema$GeostoreGradeLevelProto {
    /**
     * The index of the point along the segment, where 0 is the starting point. This means that the index of a point along a segment and its sibling will be different.
     */
    index?: number | null;
    /**
     * The grade level of the indexed point. The grade level can be thought of as a relative vertical ordering with respect to other segments at the same point, where larger/more positive numbers are "higher". Negative grade level values are allowed and are typically used for points below grade level (0 is a common choice to represent the level of points at the ground level). For vertical segments, the height, i.e. the vertical length, is represented by difference of levels in millimeters. For example, feature.segment().grade_level(0).level() == 0 and feature.segment().grade_level(1).level() == 5000, then the length of the vertical segment feature is 5000 millimeters (5 meters).
     */
    level?: number | null;
  }
  /**
   * Represents HTML text associated with a feature.
   */
  export interface Schema$GeostoreHtmlTextProto {
    /**
     * Zero or more texts of the specified type, in various languages. If this is a HTML_DESCRIPTION blob then these texts would hold the description in English, German, and so forth. The text is an HTML fragment, not a full page. The fragment should be suitable for including in a DIV. It must have balanced HTML tags. It may use HTML's "class" attributes to assign classes to HTML elements. This allows the HTML to be formatted by an (external) style sheet. The HTML should not have embedded style sheet definitions, nor should it have embedded JavaScript.
     */
    text?: Schema$GeostoreLanguageTaggedTextProto[];
    type?: string | null;
  }
  /**
   * Inferred geometry defines the geometry of a feature as the union or exclusion of the geometry of other features. For instance, the geometry of a timezone can be specified as the union of all the countries it applies to. In this scenario, the timezone will can be considered a "composite feature", while the countries are its "composing features". A composite feature must have a bidirectional reference between itself and all its composing features. A composite feature refers to its composing features via `geometry_composition`, while the composing features must refer back to the composing feature via `defines_geometry_for`. See: go/inferred-geometry and go/geo-schema:composite-geometry-editor for more details.
   */
  export interface Schema$GeostoreInferredGeometryProto {
    /**
     * Features whose geometry depends on this feature's geometry.
     */
    definesGeometryFor?: Schema$GeostoreFeatureIdProto[];
    /**
     * Features whose geometry defines the geometry of this feature (i.e. "composing features").
     */
    geometryComposition?: Schema$GeostoreGeometryComposition;
  }
  /**
   * Main proto for all internal fields to be stored at the feature level.
   */
  export interface Schema$GeostoreInternalFeatureProto {
    /**
     * A unique identifier for this feature's polygon data which is being held externally in Shapestore (see go/shapestore).
     */
    polygonShapeId?: string | null;
    /**
     * A unique identifier for this feature's rest-of-world view polygon data which is being held externally in Shapestore (see go/shapestore). This is part of the feature's geopolitical geometry.
     */
    restOfWorldPolygonShapeId?: string | null;
    /**
     * Per-field rights for this feature. See http://g3doc/geostore/g3doc/developers-guide/inputs/rights-tracking for more information.
     */
    rightsStatus?: Schema$GeostoreRightsStatusProto;
    /**
     * A unique identifier for this feature's self view polygon data which is being held externally in Shapestore (see go/shapestore). This is part of the feature's geopolitical geometry.
     */
    selfPolygonShapeId?: string | null;
    /**
     * Trust signals/annotations for the feature. In an input feature, these signals are computed at the beginning of the pipeline and are immutable during the processing. In output features, this proto may define the rules/criteria that a newer edit should meet, in order to be applied.
     */
    trust?: Schema$GeostoreTrustSignalsProto;
    /**
     * A unique identifier for this feature's water-removed polygon data which is being held externally in Shapestore (see go/shapestore).
     */
    waterRemovedPolygonShapeId?: string | null;
  }
  export interface Schema$GeostoreInternalFieldMetadataProto {
    /**
     * Whether or not the piece of data has been generated automatically (i.e., by a bot/automated process based on heuristics/algorithms rather than coming as a fact set by some human user or data provider based on their knowledge). Note that this does NOT imply that the value was set as a result of a bot operation on the repository, since it is conceivable to use a bot/automated process simply as a way of convenience to ingest large amount of canonical/ground truth data.
     */
    isAuto?: boolean | null;
    /**
     * Information about the source providing the piece of data this metadata is attached to.
     */
    sourceSummary?: Schema$GeostoreInternalSourceSummaryProto;
  }
  /**
   * Internal-only proto used to express additional information about segments. This is intended for communicating extra information between editing clients and the repository, and should not be used by or visible to clients. WARNING - if you add new fields to InternalSegmentProto, make sure that geostore/tools/internal/mr-mergesegments_test.cc is aware of them.
   */
  export interface Schema$GeostoreInternalSegmentProto {
    /**
     * RESERVED
     */
    disallowedConnections?: Schema$GeostoreInternalSegmentProtoLaneConnectionReference[];
    /**
     * RESERVED
     */
    disallowedPrimaryConnection?: Schema$GeostoreInternalSegmentProtoLaneConnectionReference[];
    /**
     * The set of restrictions that apply to this segment; these are actually *POSITIVE* restrictions, i.e. they are known to be allowed.
     */
    travelAllowance?: Schema$GeostoreRestrictionProto[];
  }
  /**
   * Specifies a single outgoing lane connection.
   */
  export interface Schema$GeostoreInternalSegmentProtoLaneConnectionReference {
    /**
     * The lane number on this segment.
     */
    fromLaneNumber?: number | null;
    /**
     * This reference to the other segment is weak, since strong would blow up bounds of all segments.
     */
    segment?: Schema$GeostoreFeatureIdProto;
    /**
     * This is the lane number on the target segment.
     */
    toLaneNumber?: number | null;
  }
  export interface Schema$GeostoreInternalSourceSummaryProto {
    /**
     * Within the above provider, the dataset from which this piece of data was generated. For fields that are auto-generated the "dataset" is likely to be some algorithm's or program's name. Similar to SourceInfoProto.dataset but with the difference that it is required to always be set. Providers that don't have a concept of dataset may use "default".
     */
    dataset?: string | null;
    /**
     * The data provider from which this piece of data was generated. Equivalent to SourceInfoProto.provider in the public schema.
     */
    provider?: string | null;
  }
  /**
   * Our TYPE_INTERSECTION features model the point where one or more segments terminate. This is topological definition: it may not match what a typical user would think of as an "intersection". Consider the intersections where Hayes, Market, Larkin, and 9th Street meet near (37.77765, -122.41638) in San Francisco. Most people would probably consider this a single feature, even though we model it as four separate TYPE_INTERSECTION features. The TYPE_INTERSECTION_GROUP is used to model the user's concept of a real-world intersection, which also includes turn lanes or a whole roundabout (a logical intersection). For the purposes of modeling turn restrictions and lane connections, a smaller grouping is needed to model the "core" part of the intersection where there are no lane markings. This is called a core or artifact group. An intersection group must contain at least two intersections or add some information (e.g. a name or a polygon) compared to the intersection itself, or else must not exist. The standard feature properties are interpreted as follows: name - Can be used to specify any "special" names associated with this intersection (e.g. Reads Corner intersection, PEI, Canada). Intersections that are named according to their cross streets do not need to specify this field, since this can be determined by looking at the routes associated with each segment. address - This should always be empty. point - Specifies the center of the intersection. This is basically the point where the intersection name should be rendered. Can be omitted in favor of a polygon. polyline - This should always be empty. polygon - Specifies the two-dimensional extent of the intersection. This may substitute to the point field, though having a center set is desirable in this case. child - This should always be empty.
   */
  export interface Schema$GeostoreIntersectionGroupProto {
    /**
     * All artifact intersection groups that are in this logical group.
     */
    childGroup?: Schema$GeostoreFeatureIdProto[];
    groupType?: string | null;
    /**
     * The list of TYPE_INTERSECTION features that form this intersection group, but are NOT in any of this group's child groups. This could be an empty list, though that is sub-optimal. Even an empty list would allow the paint team to draw a label for a named intersection, but a non-empty list would, for example, enable PathFinder to generate better directions. Each of the TYPE_INTERSECTION feature referred here must refer back to this feature in its IntersectionProto.
     */
    intersection?: Schema$GeostoreFeatureIdProto[];
    /**
     * Parent logical intersection group. An artifact group that does not have an associated parent logical group is assumed to be both an artifact and logical group.
     */
    parentGroup?: Schema$GeostoreFeatureIdProto;
  }
  /**
   * A TYPE_INTERSECTION feature represents a common endpoint of one or more segments in a transportation network at which the segments are connected. An intersection in the real world may be more complicated than that (e.g., comprise multiple segment endpoints or have extra attributes), which can be modeled with an additional TYPE_INTERSECTION_GROUP feature, if needed (see intersectiongroup.proto). The standard feature properties are interpreted as follows: name - This should always be empty. Intersections that have a "special" name (e.g. Reads Corner intersection, PEI, Canada) should point to a separate TYPE_INTERSECTION_GROUP feature that captures it. Intersections which are named according to their cross streets do not need this requirement, since their name can be determined by looking at the routes associated with each segment. address - This should always be empty. point - Specifies the center of the intersection. This should be the last vertex of all the segments which terminate at this intersection. polyline - This should always be empty. polygon - This should always be empty. child - This should always be empty.
   */
  export interface Schema$GeostoreIntersectionProto {
    /**
     * The artifact or logical intersection group to which this intersection belongs. If present, the intersection group must also refer back to the intersection. If an intersection is within both the artifact and logical group, then this reference should be to the artifact group.
     */
    intersectionGroup?: Schema$GeostoreFeatureIdProto;
    /**
     * RESERVED
     */
    outSegment?: Schema$GeostoreFeatureIdProto[];
    /**
     * The list of segments that terminate at this intersection, in any order. Note that all segments are directed towards the intersection, i.e. their endpoints indicate what sort of intersection this is. This should not be empty because an intersection with no associated segment is meaningless.
     */
    segment?: Schema$GeostoreFeatureIdProto[];
    /**
     * The toll cluster to which this intersection belongs. If present, the toll cluster must also refer back to the intersection.
     */
    tollClusterId?: Schema$GeostoreFeatureIdProto;
  }
  export interface Schema$GeostoreJobMetadata {
    /**
     * Describes how much time the service is going to take, e.g. how long it takes to do a haircut. Value of seconds must be from +60 (1 min) to +31,536,000 (365 days) inclusive. Value of nanos must be zero.
     */
    duration?: string | null;
    /**
     * Represents the name of a potential grouping of items. For TYPE_JOB, this is the category names of the categories that a user picked this job type from at the time of input.
     */
    jobRelatedCategories?: Schema$GeostoreJobRelatedCategory[];
    /**
     * Unique identifier for a job. This is required for standard jobs and blank for free-form jobs. Job type ids are prefixed with "job_type_id:". Notice this is a unique string representation of a job across languages. E.g., “job_type_id:air_duct_repair”. The existence of a job_type_id means the job type is a standard one, and has a corresponding entry in the Standard Jobs Taxonomy.
     */
    jobTypeId?: string | null;
    /**
     * Represents the MID corresponding to the job_category entity in the Knowledge Graph. For example, job_type_id="job_type_id:install_faucet", job_type_mid="/g/11hzzxjv3f".
     */
    jobTypeMid?: string | null;
  }
  /**
   * This is the category that a user picked this job type from at the time of input. The field serves two purposes: 1) The name is used in consumer surface similar to the heading name today (i.e., grouping jobs under the category. 2) The gcid is needed mainly for free-formed entries, for which GMB needs to map them to corresponding categories in the frontend, if applicable. Notice that the name and the id are both not expected to be in sync with gcid deprecation or location category change per product decision. In other words, they are not guaranteed to stay in sync, only guaranteed true at time of creation.
   */
  export interface Schema$GeostoreJobRelatedCategory {
    gcid?: string | null;
    language?: string | null;
    /**
     * Category name in the primary language of the feature. Generally intended to be used as a fallback when we are unable to fetch the name in the user's language.
     */
    name?: string | null;
  }
  /**
   * The reference to an entity in the KnowledgeGraph. For details on the KnowledgeGraph see http://goto/kg.
   */
  export interface Schema$GeostoreKnowledgeGraphReferenceProto {
    /**
     * KG Identifier (MID). For details, see http://go/ke-bg-knowledge-graph#mids.
     */
    id?: string | null;
  }
  /**
   * This protocol buffer represents the association between a segment and a landmark feature. Notes: - References to TYPE_SEGMENT features should always point to the even sibling. - Self-references are allowed but the referencing segment's sibling is required to have a self-reference as well (the above requirement to always reference the even sibling still applies).
   */
  export interface Schema$GeostoreLandmarkReferenceProto {
    /**
     * The type of the landmark feature. Allowed types: - TYPE_CARTOGRAPHIC e.g. a putting green or water hazard - TYPE_COMPOUND e.g. - the Empire state building (TYPE_COMPOUND_BUILDING) - a park (TYPE_COMPOUND_GROUNDS) - a section of a retail store (TYPE_COMPOUND_SECTION) - TYPE_ESTABLISHMENT e.g. - the Eiffel Tower (TYPE_ESTABLISHMENT_BUILDING) - a sports field (TYPE_ESTABLISHMENT_GROUNDS) - Starbucks (TYPE_ESTABLISHMENT_POI) - TYPE_INTERSECTION_GROUP e.g. a major intersection - TYPE_NATURAL_FEATURE e.g. a river - TYPE_SEGMENT e.g. a bike trail or train tracks
     */
    featureType?: number | null;
    /**
     * The feature ID of the landmark feature.
     */
    landmark?: Schema$GeostoreFeatureIdProto;
    /**
     * The mode(s) of travel for which this landmark is useful.
     */
    travelMode?: string[] | null;
  }
  /**
   * This proto contains attributes relevant to physical lane markers.
   */
  export interface Schema$GeostoreLaneMarkerProto {
    /**
     * If this is a physical barrier marker, represent materials found on the marker.
     */
    barrierMaterials?: Schema$GeostoreBarrierLogicalMaterialProto;
    /**
     * Pattern border and color for crossing markers. These include crosswalks, stop, and yield lines.
     */
    crossingPattern?: Schema$GeostoreCrossingStripePatternProto;
    /**
     * Stripe pattern, spacing, and color for longitudinal markers.
     */
    linearPattern?: Schema$GeostoreLinearStripePatternProto;
  }
  /**
   * Describes an individual road lane. Not only driving lanes, but also parking and biking lanes are covered by this. Note that we may eventually add curbs and walking to this schema. MOTIVATION/DESIGN DISCUSSION The intent of this schema is to model a schematic representation of the road for a bunch of use cases within GMM, navigation, map tiles. For rendering, we do not want to represent the geometry of each lane exactly, but do want to model types/width/gaps/lane markings so that a schematic rendering can be made. For navigation, we model lane connectivity and restrictions per lane, so that Pathfinder can potentially pick routes based on lanes, and definitely use the lanes to better describe the path to the driver. This schema is driven by the GT team, which is likely to be the only provider of this data. It is based on compromises that we are working out with other teams, based on what our operators can reasonably collect and what is useful. See docs here: https://docs.google.com/a/google.com/document/d/11XJ1WvqS5Sm7MxWXzzc3tnsk49VhrR3BYFjiRMAzYm0/edit?hl=en_US https://docs.google.com/a/google.com/document/d/1nzdupynTUKE8xY8JcfvQbU-KWtCJ6IwHiTaCxuq40EM/edit?hl=en_US Note: Some lane information (width, surface type, etc) may duplicate or contradict information stored at the segment level.
   */
  export interface Schema$GeostoreLaneProto {
    /**
     * References to any gcid:physical_lane_marker features that bound this lane.
     */
    boundingMarker?: Schema$GeostoreBoundingMarkerProto[];
    /**
     * If the current lane is part of a merge/split area, indicates the type (split or merge) and whether the current lane is on the left or right or in the middle of the merge/split area, as seen in the direction of traffic. See go/lane-split-merge-schema
     */
    conjoinedCategory?: string | null;
    /**
     * Gap between this lane and the next in meters. This is relevant when the divider is physical, or a wide painted area. For regular painted single or double lines, there is no gap. This distance is duplicated between the innermost lanes for each side. Note that this is not used to describe smallish islands - this is only for long-running gaps. In particular, this models the median width, the gap between HOV lanes/regular lanes on freeways, and the road verge between a curb and sidewalk. Note on split roads: We can model any split road with a median as a single sibling pair with this distance set to the width of the median, or as two one-way sibling pairs.
     */
    distanceToNextLane?: number | null;
    /**
     * The most logical path for the center of an object to travel along within the lane. Typically, this is the lane's center line, but doesn't have to be.
     */
    flow?: Schema$GeostoreFlowLineProto;
    /**
     * Connections to lanes of other segments at the end of this segment. These connections model the connectivity where you don't have to do a lane change maneuver. If any lane connection is present, assume that all others are forbidden. Also note that segment level restrictions do apply if present, and can disallow some turn even if the lanes are connected. For instance, this can happen with timed or vehicle type based restrictions on the segment. If lane connectivity implies a segment-level restriction (can't transition to some target segment), that restriction will also exist as a segment level restriction. In effect - PathFinder does not have to look at lane connectivity to figure out segment connectivity. Example: Typically, lanes are just connected to one other lane. Example: A splitting lane is connected to the two resulting lanes. Example: At an intersection, a lane is connected to crossing lanes according to how lanes are painted across the intersection. In the common case, the target segment will be connected to the same intersection as this segment. That will however NOT be true for complex intersections where there is an intersection group. The connections will be across the whole group, connecting to one of the outgoing segments from the group. This is analogous to how we do turn restrictions around intersection groups.
     */
    laneConnection?: Schema$GeostoreLaneProtoLaneConnection[];
    /**
     * clang-format on Whether the divider to the inside of this lane can be crossed. Note that we assume this is symmetric, and that this also describes whether someone in the next inside lane can cross to this one. The "inside" lane is the one with a lower lane_number. Note on lane markers: We do not model the painting, but only the resulting legality. There are many painted marker styles and colors that lead to the same legality. We expect Paint or Driveabout to render lanes stylized, with solid meaning "can't cross", and dashed meaning "can cross". Note on varying legality along segment: ALLOWED takes precedence - even if some small portion has a restriction (such as right before an intersection) , the lane change will be ALLOWED.
     */
    laneDividerCrossing?: string | null;
    /**
     * These indicate for what portion of the segment the lane's flowline exactly follows the segment, and the lane is of constant width. This will be set to not include the whole segment where there is a split/turn/merge at either end of the lane. The painting of the lane should completely synthesize the lane geometry outside of this portion, connecting it to neighboring lanes to make graphical nice.
     */
    laneFollowsSegmentBeginFraction?: number | null;
    laneFollowsSegmentEndFraction?: number | null;
    /**
     * Lanes are numbered from inside of the road outward, i.e. the lane next to the center line is lane 0. The lanes then stack outwards, towards the side that one drives on this segment (right or left). NOTE: do NOT use the lane_number as index for lookup. Lane_number is not guaranteed to match the segment.lane repeated field index.
     */
    laneNumber?: number | null;
    /**
     * A token that can be used to identify the version of the data about this lane.
     */
    laneToken?: string | null;
    /**
     * Field-level metadata for this lane.
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * Restrictions that apply to this lane only. Examples include HOV lanes. If a lane restriction implies a segment-level restriction (can't route on the segment at all), that restriction will also exist as a segment level restriction. In effect - PathFinder does not have to look at lane restrictions to figure out segment restrictions.
     */
    restriction?: Schema$GeostoreRestrictionProto[];
    /**
     * True if this lane is usable in both directions (left-turn lane, reversing lane, one-lane road, etc). To get the total number of lanes for a road, add up the lanes in each direction counting 0.5 for each shared lane.
     */
    shared?: boolean | null;
    /**
     * References to any gcid:physical_lane_marker features that intersect this lane, with the implication that a moving vehicle should stop there.
     */
    stopLine?: Schema$GeostoreFeatureIdProto[];
    /**
     * clang-format on LINT.ThenChange(//depot/google3/geostore/base/proto/segment.proto) Unlike the surface in SegmentProto, this field does not have a default value. This is because the lane-level surface overrides the segment-level surface. The lane's surface should be unset unless explicitly overriding the segment's surface.
     */
    surface?: string | null;
    /**
     * clang-format on
     */
    type?: string | null;
    /**
     * Width of this lane in meters. In many cases, we will collect this data by dividing the total road width by the number of lanes. On accuracy: This is a rough average width along this segment. If and when we wanted to be more accurate, we'd extend this schema to have full polygons for segments/lanes rather than just this average width.
     */
    width?: number | null;
  }
  export interface Schema$GeostoreLaneProtoLaneConnection {
    /**
     * References to any gcid:physical_lane_marker features that bound this lane connection.
     */
    boundingMarker?: Schema$GeostoreBoundingMarkerProto[];
    /**
     * A token that can be used to identify the version of the data about this lane connection.
     */
    connectionToken?: string | null;
    /**
     * Specifies how the flowline should be synthesized in this connection region. If unspecified, heuristics may be used to pick a sweep shape based on retraction values or neighboring curves.
     */
    curve?: Schema$GeostoreCurveConnectionProto;
    /**
     * The most logical path for the center of an object to travel along within the lane connection. Typically, this is the lane connection's center line, but doesn't have to be.
     */
    flow?: Schema$GeostoreFlowLineProto;
    /**
     * This is the lane number on the target segment. This field is not set if the target segment doesn't have lanes, or we don't know the exact connectivity.
     */
    laneNumber?: number | null;
    /**
     * True if this connects to the unique, natural continuation of the current lane. At most one LaneConnection per lane can have this field set true. This attribute is of interest to ADAS providers as a hint to which lane a vehicle is likely to follow, in the absence of other information about the vehicle's planned path.
     */
    primaryConnection?: boolean | null;
    /**
     * This reference to the other segment is weak, since strong would blow up bounds of all segments.
     */
    segment?: Schema$GeostoreFeatureIdProto;
    /**
     * The inverse of the primary connection bit that provides a hint that this connection is part of a merge and a vehicle following this connection should yield to vehicles following other incoming connections.
     */
    yieldToOtherConnections?: boolean | null;
  }
  /**
   * Represents a piece of text with an associated language.
   */
  export interface Schema$GeostoreLanguageTaggedTextProto {
    /**
     * The external form of a Google International Identifiers Initiative (III) LanguageCode object. See google3/i18n/identifiers/languagecode.h for details. We place extra restrictions on languages in addition to what the III library requires. See http://go/geo-schema-reference/feature-properties/languages.md
     */
    language?: string | null;
    /**
     * The text (UTF-8 encoding).
     */
    text?: string | null;
  }
  /**
   * A feature used to represent a logical level, e.g. floor. A feature belonging to a given level should point to the level feature using relation RELATION_ON_LEVEL. The standard feature properties are interpreted as follows: name - Levels should have names according to the following: * Short, elevator-style names, such as "L" for "Lobby" and "2" for "Second floor", must be included and must be tagged with FLAG_ABBREVIATED. There must be an unambiguous "best" abbreviated name. * Longer names such as "Ticketing" or "Upper Level" may be present when the level has a specific name. * Non-abbreviated names should only be added if they are known to meaningfully expand upon the abbreviated name. For example, the long name "Observation Deck 2" for the abbreviated name "OD2" is a good additional name. In contrast, the name "Level 2" for the abbreviated name "2" is not desired. address - This should always be empty. point, polyline, polygon, center - These should never be set (since we are representing a logical entity). preferred_viewport - This should be the approximate extent of the level. child - This should always be empty.
   */
  export interface Schema$GeostoreLevelProto {
    /**
     * The building(s) to which this level belongs. A level will typically belong to a single building, but it is valid for a single level to be shared by multiple buildings (for example, a large underground parking lot). These buildings refer back to the level via another strong reference (the BuildingProto.level field).
     */
    building?: Schema$GeostoreFeatureIdProto[];
    /**
     * The elevation of this level relative to the ground level, in levels. 0 = ground floor (even in locales that call the ground floor "1st floor"); 0.5 = between ground and first floor, eg mezzanine; 1 = first floor (one level above ground floor); -3 = three levels below ground floor.
     */
    number?: number | null;
  }
  export interface Schema$GeostoreLinearStripePatternProto {
    /**
     * A linear marker may consist of one or more parallel physical lines. These are ordered left to right along the direction of the marker core polyline.
     */
    line?: Schema$GeostorePhysicalLineProto[];
  }
  /**
   * This message describes the details of a single language within a locale.
   */
  export interface Schema$GeostoreLocaleLanguageProto {
    /**
     * The language associated with this preference. The external form of a Google International Identifiers Initiative (III) LanguageCode object. See google3/i18n/identifiers/languagecode.h for details. We place extra restrictions on languages in addition to what the III library requires. See http://go/geo-schema-reference/feature-properties/languages.md
     */
    language?: string | null;
    /**
     * Flag to indicate if the associated language is "official" within a locale.
     */
    official?: boolean | null;
    /**
     * This value represents the preference of the associated language within a locale. It must be between 0.0 and 1.0.
     */
    preference?: number | null;
    /**
     * Percentage of population that can speak the associated language within a locale. It must be between 0 and 100.
     */
    speakingPercent?: number | null;
    /**
     * Percentage of population that can write the associated language within a locale. It must be between 0 and 100.
     */
    writingPercent?: number | null;
  }
  /**
   * A locale is a meta-feature that describes the geographic extent of localization preferences such as the local language, and formatting conventions for numbers, dates and monetary values. Multilingual areas may be contained by multiple locales. We try to model locales fine-grained enough for deciding which languages are typically used within a city. For example, while French is an official language for all of Switzerland, we would prefer to have Zurich contained by a separate (more fine-grained) Swiss-German locale indicating that German, not French, is the predominantly spoken language in this city. Note that language borders are frequently considered a political question and often don't have clearly defined extents. For example, California has a significant Spanish-speaking population, but Spanish is not an official language of California.
   */
  export interface Schema$GeostoreLocaleProto {
    /**
     * This holds the list of languages spoken within a locale.
     */
    language?: Schema$GeostoreLocaleLanguageProto[];
    /**
     * The ID of the localization policy (from googledata/geostore/localization/localization_policies.textpb) to apply to features that have this locale as their best match locale. Localization policy IDs are arbitrary identifiers that uniquely distinguish a set of language-selection rules.
     */
    localizationPolicyId?: string | null;
  }
  /**
   * A logical border is a grouping of border features, which together model a divide between two regions. The borders within this grouping share common attributes, such as the regions they divide, and may represent a conceptual group of borders, of which may be wholly disputed, wholly undisputed, or a mixture of disputed and undisputed. Note that any borders within this group may be part of multiple logical borders. A logical border is required to have a name describing what the grouping represents (e.g. "US - Mexico Border", "Kosovo - Serbia Border (Disputed)").
   */
  export interface Schema$GeostoreLogicalBorderProto {
    /**
     * All the border segments which make up this logical border. Border segments must be TYPE_BORDER features which have the same left/right features. This is a many-to-many bidirectional relationship, so any border segment within this list might be part of another logical border.
     */
    borderSegment?: Schema$GeostoreFeatureIdProto[];
    /**
     * The logical border status identifies its legal status. This is similar to the BorderStatus present within border segments, but applies to the group as a whole.
     */
    status?: string | null;
  }
  /**
   * Media item attached to an element of price list.
   */
  export interface Schema$GeostoreMediaItemProto {
    /**
     * The FIFE url associated with the media. NOTE: This FIFE URL must be PII-free, see go/product-catalogue-photo-storage
     */
    googleUrl?: string | null;
    mediaFormat?: string | null;
    /**
     * The mediaKey associated with the media. NOTE: This media key must be PII-free, see go/product-catalogue-photo-storage
     */
    mediaKey?: string | null;
    mediaSize?: Schema$GeostoreMediaItemProtoMediaSize;
  }
  /**
   * Width and height of the original photo in pixels.
   */
  export interface Schema$GeostoreMediaItemProtoMediaSize {
    originalHeightPx?: number | null;
    originalWidthPx?: number | null;
  }
  /**
   * A name for a Feature (street name, point of interest, city, building, etc). We currently use NameProto for two essentially disjoint purposes: 1. Common names, which can be language-specific, or have other kinds of variations. 2. Opaque IDs, such as postal codes, which only have the `text` field set, and potentially some flags. This includes internal-only features like template ids. Each NameProto representing a common name corresponds to an assertion that a fluent speaker or writer of a language would recognize NameProto.text to name the given feature in that language. As such, NameProtos are stored in a repeated field, often having: 1. multiple names with the same text and varying languages, and 2. multiple names with the same language and varying texts.
   */
  export interface Schema$GeostoreNameProto {
    /**
     * clang-format on The set of flags that apply to this name.
     */
    flag?: string[] | null;
    /**
     * The external form of a Google International Identifiers Initiative (III) LanguageCode object. See google3/i18n/identifiers/languagecode.h for details. These strings should be treated as opaque blobs. You can use LanguageCodeConverter::FromOther to convert the string to a LanguageCode reference. You can then call methods on the LanguageCode class to extract language/script/region subtags (if any). See also http://g3doc/i18n/identifiers/g3doc/using-iii. We place extra restrictions on languages in addition to what the III library requires. See go/geo-schema-reference/feature-properties/languages. This field may be missing if the name does not have a concept of language but should be set if the language is unknown.
     */
    language?: string | null;
    /**
     * Field-level metadata for this name. NOTE: there are multiple NameProto fields in the Geo Schema. Metadata here is only expected to be present on FeatureProto.name[].
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * ** DEPRECATED ** The name text provided in the original source data (UTF-8 encoding). This is the text provided in the source data unmodified with the exception of being converted to UTF-8 and stripping extra leading, trailing and duplicate whitespaces (if necessary).
     */
    rawText?: string | null;
    /**
     * The short name text (UTF-8 encoding). Acronyms/abbreviations should be consistently used, for example "NE 57th St" rather than "Northeast 57th Street", "N.E 57th St." or some other variant. This field should be populated with the chosen canonical version of the shortened name, based on per-term transformations. For feature specific abbreviations (such as 'CA' for 'California'), one should define a separate name with FLAG_ABBREVIATED set. For other variants of the shortened name that are not the canonical one, devise client based logic (ex: query rewriting rules).
     */
    shortText?: string | null;
    /**
     * A place for clients to attach arbitrary data to a name. Never set in MapFacts.
     */
    temporaryData?: Schema$Proto2BridgeMessageSet;
    /**
     * The name text (UTF-8 encoding). Acronyms/abbreviations should be fully expanded, for example "Northeast 57th Street" rather than "NE 57th St". They can be shortened at display or geocode time. This decision prevents ambiguity over such issues as whether "St" represents "Street" or "Saint". However, it pushes language-specific knowledge into code. We will have libraries and data files to contract acronyms/abbreviations at run-time.
     */
    text?: string | null;
  }
  /**
   * The container for all GConceptInstances associated with a feature.
   */
  export interface Schema$GeostoreOntologyRawGConceptInstanceContainerProto {
    instance?: Schema$GeostoreOntologyRawGConceptInstanceProto[];
  }
  /**
   * A RawGConceptInstanceProto contains all data required by both internal and external clients. We store the 'public' data in a GConceptInstanceProto and the 'private' data inside of RawGConceptInstanceProto. NOTE: this doesn't really match the design we want anymore. Please talk to the Geo Schema team if you are planning to make use of the "private" fields below.
   */
  export interface Schema$GeostoreOntologyRawGConceptInstanceProto {
    /**
     * This is the 'public' section of the GConceptInstance.
     */
    instance?: Schema$GeostoreGConceptInstanceProto;
    /**
     * ** DEPRECATED ** Was this GConcept explicitly added by an edit? Examples of gconcepts not added by edits include those inferred through geo ontology and those mapped from legacy category forms by the feature updater. Note that it is possible for both is_added_by_edit and is_inferred to be true - it means this gconcept is added by an edit and there is also another more fine-grained gconcept added by an edit.
     */
    isAddedByEdit?: boolean | null;
    /**
     * RESERVED
     */
    isInferred?: boolean | null;
    /**
     * ** DEPRECATED ** These two fields combined describe the source of a GConceptInstance. They are based on geostore/base/proto/datasourceprovider.proto. Their use has been deprecated. Use the FieldMetadataProto inside instance instead.
     */
    provider?: string | null;
    sourceDataset?: string | null;
  }
  /**
   * Message to represent opening hours including regular weekly hours and a set of exceptions.
   */
  export interface Schema$GeostoreOpeningHoursProto {
    /**
     * Date delimited exceptions to the typical recurring opening hours. May only be present if regular weekly hours are also specified.
     */
    exception?: Schema$GeostoreExceptionalHoursProto[];
    /**
     * Typical recurring opening hours, expressed as a weekly schedule. NOTE: this field was introduced to have a more client-friendly format for representing weekly hours but, as of November 2018, it's not used for the main opening hours of TYPE_ESTABLISHMENT features (instead, the data is stored in the `EstablishmentProto.hours` field, see b/23105782 tracking the possible schema migration). It is however used in other contexts where `OpeningHoursProto` appears in the Geo Schema. In openinghours.h there is a utility function `GetOpeningHoursFromFeature` that merges `EstablishmentProto.hours` into this proto.
     */
    regularHours?: Schema$GeostoreBusinessHoursProto;
  }
  /**
   * Information about a feature's operations, e.g. when the feature is temporarily closed.
   */
  export interface Schema$GeostoreOperationsProto {
    /**
     * Records temporary status change of the feature, such as remodel, vacation, etc.: the feature is temporarily (but not permanently) unavailable. This prevents users from going to the feature. Supports an arbitrary number of past, present, and future temporary closures, with the feature's data owner choosing which range of past and future closures to permit or guarantee to keep. All start and end dates must be unique from each other. If two consecutive dates are a start and an end of a TemporaryClosureProto, then the two dates must be from the same TemporaryClosureProto. Otherwise, exact dates may be missing so long as there exist a possible sequence of temporary closures with both exact start_date and end_date that keeps any known exact start_date and end_date. The earliest temporary closure must begin after whenever initial operations begin. Likewise, the latest temporary closure must end before whenever the permanent closure begins. NOTE: does *not* guarantee chronological order.
     */
    temporaryClosure?: Schema$GeostoreTemporaryClosureProto[];
  }
  /**
   * This message captures a border status override. For instance, if the TYPE_BORDER feature between China and Hong Kong must be hidden on ditu.google.cn (the Chinese domain for Google Maps) but may be displayed on other domains, we will have a country override border status for "CN" set to STATUS_NEVER_DISPLAY. At least one override restriction must be defined. Currently the only supported restriction is by country code.
   */
  export interface Schema$GeostoreOverrideBorderStatusProto {
    /**
     * The two-letter ISO 3166-1 country code corresponding to the domain this status override applies to, when rendering the border polyline.
     */
    countryCode?: string | null;
    /**
     * The override status, from the BorderStatus enumeration. The value here must be different from the main status (otherwise there's no point in providing the override).
     */
    status?: string | null;
  }
  /**
   * Painted element logical color. Most legal definitions only specify a color category (like "yellow") and don't specify an exact hue, rather stating that the colors must be distinguishable from each other. We refer to this as the "logical" color.
   */
  export interface Schema$GeostorePaintedElementLogicalColorProto {
    color?: string | null;
  }
  /**
   * Describes the parking allowances for a feature, or the situations and requirements under which one may be permitted to park, such as certain vehicle types, valet parking, and permit parking. Also describes the cost of parking, which may vary based on the time and duration parked. Includes vehicle type, any other conditions for eligibility, and the cost of parking, which may vary based on the time and duration parked. If is_discount is set to true on a given allowance, that allowance represents a discount that can be applied to lower the cost of non-discount allowances specified on feature via parking_provider_feature. In this way, allowances can be 'layered,' i.e. appended, onto each other when denormalizing references via parking_provider_feature.
   */
  export interface Schema$GeostoreParkingAllowanceProto {
    /**
     * The type of parking for this allowance. Allowance details only apply to the type of parking specified.
     */
    allowanceType?: string | null;
    /**
     * If true, this allowance represents a discount rather than an individual rate; any rate values specified in this allowance describe a discount to be applied to the non-discount allowances in the ParkingProto.
     */
    isDiscount?: boolean | null;
    /**
     * If this rate requires validation, this expresses the minimum purchase required for validation in each applicable currency. Should have an ID of /measurement_unit/money_value and consist of two properties: one with an ID of /measurement_unit/money_value/amount and a float value with the amount, and another with the ID /measurement_unit/money_value/currency and an ID value with the MID of the proper currency (from the /finance/currency type). A value of 0 suggests that no purchase is required. If empty, this suggests that no validation is required for this rate.
     */
    minPurchaseForValidation?: Schema$FreebaseTopic[];
    /**
     * Any additional details about the permit type; e.g. “Zone A”. In any local languages. Should only be set if allowance_type is PERMIT.
     */
    permitType?: Schema$GeostoreLanguageTaggedTextProto[];
    /**
     * The types of services that this parking allowance applies to. For instance, some cities have streets that only allow traditional taxis to pick up passengers.
     */
    serviceType?: string[] | null;
    /**
     * Describes the rate structures. Each TimeBasedRateProto defines a rate which may apply based on a particular arrival, departure or utilization time; for example, one rate might apply if arriving before 9am, and another might apply regardless of arrival or departure time.
     */
    timeBasedRate?: Schema$GeostoreTimeBasedRateProto[];
    /**
     * Restrictions on which vehicle type(s) the allowance applies to. By default, the allowance applies to any vehicle types.
     */
    vehicleType?: string | null;
  }
  /**
   * Used to describe the parking facilities provided by or available to a feature. Features of TYPE_ROAD or TYPE_COMPOUND can have a ParkingProto (with parking_provider_feature unset) that describes the parking facilities provided by that feature. Features of TYPE_COMPOUND or TYPE_ESTABLISHMENT_POI can have a ParkingProto (with parking_provider_feature set) to indicate that the feature has dedicated parking and provide details about it, and defer some details of the parking facilities to the referent feature(s). ParkingProto is maintained by the Harbor Pilot team (go/harbor-pilot). Detailed modeling information is described at go/parking-schema.
   */
  export interface Schema$GeostoreParkingProto {
    /**
     * Describes the parking allowances for the feature, which are the situations and requirements under which one is permitted to park at the feature’s parking facilities, or discounts that a user may be eligible for.
     */
    allowance?: Schema$GeostoreParkingAllowanceProto[];
    /**
     * Hours in which the parking facility is open; that is, permits both arrivals and departures of the facility. Should only be set on compounds (i.e. parking lots or garages); roads are considered to always be “open,” though parking at certain times may be prohibited via restrictions. If unset on a compound, this suggests we don’t know the opening hours, or they are the same as the hours of the entity for which this feature offers parking facilities.
     */
    openingHours?: Schema$GeostoreOpeningHoursProto;
    /**
     * Indicates whether long-term parking is available at the feature; if true, long-term parking is available at the feature and parking allowances may be present on this feature, or parking_provider_feature may indicate deferred parking feature(s). If false, this is an explicit statement that there is no long-term parking associated with this feature. If unset, we don't know whether there is long-term parking associated with this feature. If false or unset, only additional restrictions or short-term allowances will be populated.
     */
    parkingAvailable?: boolean | null;
    /**
     * If empty, indicates that the feature containing this ParkingProto provides parking facilities, which are described by this proto. If nonempty, indicates that the feature with this ParkingProto does not contain parking facilities itself, but visitors of this feature may use the parking available to the referent feature(s). The referent feature(s) may themselves contain parking facilities or defer to other features. A ParkingProto may defer parking details to another feature, but still include its own data. This suggests that a visitor of the referrer feature is eligible for different rates or discounts. The data in these fields applies transitively, and any fields in a referrer may be applied to the referent (for a visitor of the referrer).
     */
    parkingProviderFeature?: Schema$GeostoreFeatureIdProto[];
    /**
     * Describes any parking restrictions that apply to this feature. Should only be set on road segments for which parking is explicitly prohibited for some or all times; for roads which do not prohibit parking and for all other facilities, the ability to park should be expressed using allowances. In the instance that both a restriction and an allowance applies at a given time, restrictions always have precedence over the same parking allowances. However, explicit short-term allowances (PICKUP_GOODS, PICKUP_PASSENGERS) take precedence over general NO_PARKING, NO_STANDING, or NO_STOPPING restrictions.
     */
    restriction?: Schema$GeostoreParkingRestrictionProto[];
  }
  /**
   * Expresses a parking restriction on a road; i.e. times at which parking on the road is prohibited.
   */
  export interface Schema$GeostoreParkingRestrictionProto {
    /**
     * Times at which parking is prohibited.
     */
    restrictedHours?: Schema$GeostoreTimeScheduleProto;
    /**
     * clang-format on The type of restriction that applies at this time.
     */
    restrictionType?: string | null;
    /**
     * The types of services that this parking restriction applies to. We expect most parking restrictions to apply to all services, but some airports have specific rideshare parking or taxi parking zones.
     */
    serviceType?: string[] | null;
    /**
     * The types of vehicles that this parking restriction applies to. For instance, some streets may allow motorcycles to park but not automobiles or trucks.
     */
    vehicleType?: string[] | null;
  }
  /**
   * This protocol buffer holds related data for features of type TYPE_PEAK and TYPE_VOLCANO.
   */
  export interface Schema$GeostorePeakProto {
    /**
     * Topographic prominence in meters: the height of the peak’s summit above the lowest contour line encircling it and no higher summit.
     */
    prominenceMeters?: number | null;
  }
  /**
   * A crossing describes a path from the end point of a segment to the start point of its sibling. Each individual crossing should uniquely represent a physically distinct crossing in the real world. Pedestrian crossings are bidirectional. This proto represents "simple" crossings. More complicated crossings (such as the diagonal crosswalk at Shibuya Station in Tokyo) will be represented using a separate pedestrian network. Example 1: Standard four way crossing. Assume each road (A/B/C) has a crosswalk (denoted by a '-') right before intersection X. Assume crossing at D is prohibited (denoted by a '%'). Assume "prime" roads (A',B',...) are OUT segments relative to X. A\\A' B//B' \\ // \\ // - - X - % // \\ // \\ C'//C D'\\D * A CROSSABLE PedestrianCrossing should be added to A, B and C. * An UNCROSSABLE PedestrianCrossing should be added to D. Example 2: Simple intersection with one crossing. Assume intersection X was added to accommodate the crosswalk (through X, denoted by '-'). Assume "prime" roads (A',B',...) are OUT segments relative to X. A\\A' \\ \\ -X- \\ \\ B'\\B * A CROSSABLE PedestrianCrossing must be added to either A or B, but not both because each real-world crossing should be represented exactly once. Duplicative crossings may be arbitrarily removed.
   */
  export interface Schema$GeostorePedestrianCrossingProto {
    /**
     * This value specifies the angle of the crosswalk. Zero degrees represents a crosswalk perpendicular to the direction of travel, towards the right side of the segment. The crosswalk angle, winds clockwise. Range [-90, 90]. The following crosswalk would have a 15 degree angle: / / <--/-------------------------------- / /
     */
    angleDegrees?: number | null;
    /**
     * This value enables crossing anywhere (not just at the segment’s endpoint), typically used on long, low-traffic residential streets. This attribute is only respected for trivial segment -\> sibling routes. All other routes can cross at a MapFacts intersection.
     */
    crossAnywhere?: boolean | null;
    /**
     * Crossing type is used as a restriction and can also be used for rendering.
     */
    crossingType?: string | null;
    /**
     * The crossing offset defines a fraction between the distance from the segment endpoint to the centerline of the crosswalk and the length of the segment. For example, the segment length is 20 meters and the distance from segment end to center of crosswalk is 2 meters, the value of offset will be 0.1.
     */
    offset?: number | null;
    /**
     * Restrictions for this crossing (such as constructions on the crosswalk). They must not have subpath or travel_mode.
     */
    restriction?: Schema$GeostoreRestrictionProto[];
    /**
     * This value defines the full width of the crossing in the direction perpendicular to the direction which pedestrians walk on the crossing (in meters). The crossing is allowed to "spill" into the next segment (0.5 * width can be greater than the offset). Cannot be a negative value.
     */
    width?: number | null;
  }
  /**
   * Describes a single physical marker line. NOTE: PhysicalLineProto could be compared against one another by canonicalizing them via GetCanonicalPhysicalLine() in google3/geostore/base/internal/lane_marker.cc. Any fields that don't contribute to the definition of a physical line in the real world should be bundled with the annotative fields near the bottom and excluded in GetCanonicalPhysicalLine(). LINT.IfChange
   */
  export interface Schema$GeostorePhysicalLineProto {
    /**
     * Applicable for DASHED and DOTTED_DASHED lines.
     */
    dashLengthMeters?: number | null;
    /**
     * This should be rarely needed, but can represent patterns of alternating colors.
     */
    gapColor?: Schema$GeostorePaintedElementLogicalColorProto;
    /**
     * Applicable for DASHED, DOTTED, and DOTTED_DASHED lines.
     */
    gapLengthMeters?: number | null;
    material?: string[] | null;
    /**
     * Color for the painted elements. Applicable to all types.
     */
    paintColor?: Schema$GeostorePaintedElementLogicalColorProto;
    pattern?: string | null;
    /**
     * A token that can be used to identify the version of the data about this marker line.
     */
    physicalLineToken?: string | null;
  }
  export interface Schema$GeostorePointCurvatureProto {
    curvatureStatus?: string | null;
    /**
     * Curvature in radians per meter. Negative is a curve to the left and positive is a curve to the right.
     */
    radiansPerMeter?: number | null;
    /**
     * How far along the line this curvature value starts to apply, in the format of decimal between 0 and 1.
     */
    startPointFraction?: number | null;
  }
  export interface Schema$GeostorePointProto {
    latE7?: number | null;
    lngE7?: number | null;
    /**
     * NOTE: If removing metadata, remove 'option objc_class_prefix = "GS";' together. See cl/189921100. Field-level metadata for this point. NOTE: there are multiple PointProto fields in the Geo Schema. Metadata here is only expected to be present on FeatureProto.point[] and FeatureProto.center.
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * A place for clients to attach arbitrary data to a point. Never set in MapFacts.
     */
    temporaryData?: Schema$Proto2BridgeMessageSet;
  }
  /**
   * PointWithHeightProto encodes lat/lng through PointProto and contains altitude information.
   */
  export interface Schema$GeostorePointWithHeightProto {
    /**
     * Altitude of this point is assumed to be relative to the ground level.
     */
    altitudeMeters?: number | null;
    point?: Schema$GeostorePointProto;
  }
  /**
   * This protocol buffer is included from feature.proto as an optional message. Political features represent the different ways that people are divided into geographical regions.
   */
  export interface Schema$GeostorePoliticalProto {
    /**
     * Many political regions have a conceptual center (capitals of a country or a top-level division are examples). If set, the target feature must be a TYPE_LOCALITY feature.
     */
    capital?: Schema$GeostoreFeatureIdProto;
    /**
     * The Gross Domestic Product of the political region measured in millions of current United States dollars. It must not be negative.
     */
    grossDomesticProductUsdMillions?: number | null;
    /**
     * Percentage of population that are literate within a political region. It must be between 0 and 100.
     */
    literacyPercent?: number | null;
    /**
     * The number of people in this political region. This field is intended to store accurate population, not an estimation such as representative value for population range. It must not be negative.
     */
    population?: string | null;
  }
  /**
   * A general non-self-intersecting spherical polygon, consisting of one or more loops defining multiple disconnected regions possibly with holes. All loops should be oriented CCW around the region they define. This applies to the exterior loop(s) as well as any holes. Within MapFacts (and underlying infrastructure) the data fields may be replaced by a single shape_id stored in internal_feature. Any such PolygonProtos shouldn't be expected to work with public functions in //geostore/base/public/polygon.h.
   */
  export interface Schema$GeostorePolygonProto {
    /**
     * The polygon loops above are basically flat: each point has a latitude and a longitude but no altitude. We don't want to build real 3D models here, but we do want to be able to generate 2.5D models. A 2.5D model is built by translating the flat polygon upward some distance (base) then extruding it upward some additional distance (height). The elevation of the bottom of the extruded polygon (above ground level).
     */
    baseMeters?: number | null;
    /**
     * ** DEPRECATED ** This is part of a splitting strategy for large polygons, which was never fully launched and we decided not to pursue. For features with very complex polygonal geometry, we break up the polygon into pieces that align with S2 cells at various levels. We do this for performance reasons as some geometry operations have quadratic complexity with regards to the total number of vertices. In these cases, we store the S2 cell ID corresponding to the piece of the overall polygon that is described by this specific PolygonProto message. Each polygon piece is expected to be fully contained by the S2 cell corresponding to this cell ID. However, note that the S2 cell ID is not required to correspond to the smallest S2 cell that fully contains the polygon (and often won't be). In addition, polygon pieces are required to not have any overlap (which translates to having entirely disjoint S2 cell IDs, i.e. one can not be parent (or grand parent, etc.) of another).
     */
    cellId?: string | null;
    /**
     * Encoding of the polygon using S2Polygon::Encode()'s compressed representation.
     */
    encoded?: string | null;
    /**
     * The distance from the bottom of the extruded polygon to the top.
     */
    heightMeters?: number | null;
    /**
     * ** DEPRECATED ** We have switched to using exclusively the encoded form in the wire format to and from MapFacts, so this field should never be populated there. See go/encoded-polygons for more info. "Classic" polygon representation, defined by one or more loops. The last vertex of each polyline is implicitly connected to the first vertex. All loops should be specified in CCW order.
     */
    loop?: Schema$GeostorePolyLineProto[];
    /**
     * Field-level metadata for this polygon.
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * A place for clients to attach arbitrary data to a polygon. Never set in MapFacts.
     */
    temporaryData?: Schema$Proto2BridgeMessageSet;
    /**
     * Some polygons are known to be rough proxies for a feature's "real" polygonal representation. Such polygons are generally unsuitable for display. Rendering clients should not show these in most cases. Polygons unsuitable for display do have other uses, such as user location or containment analysis, or as an input to learning algorithms. This is an orthogonal concept to FeatureProto.synthetic_geometry, which only pertains to the method by which a polygon was created, rather than its fidelity to ground truth. For features that have multiple polygons, this bit should be consistently set to the same value on all polygons.
     */
    unsuitableForDisplay?: boolean | null;
  }
  export interface Schema$GeostorePolyLineProto {
    /**
     * Field-level metadata for this polyline. NOTE: there are multiple PolyLineProto fields in the Geo Schema. Metadata here is only expected to be present on FeatureProto.polyline[].
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * A place for clients to attach arbitrary data to a polyline. Never set in MapFacts.
     */
    temporaryData?: Schema$Proto2BridgeMessageSet;
    /**
     * A sequence of vertices connected by geodesics (the equivalent of straight lines on the sphere). Adjacent vertices are connected by the shorter of the two geodesics that connect them, i.e. all edges are 180 degrees or less. Note that the edge definition becomes numerically unstable as the arc length approaches 180 degrees. Polylines are generally expected to be non-self-intersecting, but any such restriction is imposed by the user of the polyline rather than the polyline itself.
     */
    vertex?: Schema$GeostorePointProto[];
  }
  /**
   * A pose is an object's position in space, as well as its orientation. All fields except lat and lng are optional. All fields are in the WGS-84 ellipsoid, and rotations are right-hand rule (i.e. if the right hand thumb points along a vector, curled fingers indicate positive rotation direction). An un-rotated pose would be pointing due North, along the surface of the ellipsoid. Rotations are applied in the order: yaw, pitch, roll. Note that the rotation axes are rotated along with the model for each rotation step. WARNING: This proto is not meant to be used directly. Please use the provided libraries: //geostore/base/public/pose.h //java/com/google/geostore/base/Pose.java
   */
  export interface Schema$GeostorePoseProto {
    /**
     * The height of the pose. A positive height is above the WGS-84 ellipsoid in meters; negative is below.
     */
    altitude?: number | null;
    /**
     * The index of the PoseProto in a list of PoseProtos.
     */
    index?: number | null;
    /**
     * The latitude of the pose in degrees [-90, 90].
     */
    lat?: number | null;
    /**
     * The longitude of the pose in degrees (-180,180].
     */
    lng?: number | null;
    /**
     * The rotation around the longitude line East tangent in degrees [-90, 90].
     */
    pitch?: number | null;
    /**
     * The rotation around the latitude line North tangent in degrees (-180, 180].
     */
    roll?: number | null;
    /**
     * The rotation around the Up vector, from North, in degrees (-180, 180].
     */
    yaw?: number | null;
  }
  /**
   * This message represents nutrition facts for a food dish.
   */
  export interface Schema$GeostorePriceInfoFoodNutritionFacts {
    calories?: Schema$GeostorePriceInfoFoodNutritionFactsCaloriesFact;
    /**
     * Cholesterol information for a given food dish.
     */
    cholesterol?: Schema$GeostorePriceInfoFoodNutritionFactsNutritionFact;
    /**
     * Protein information for a given food dish.
     */
    protein?: Schema$GeostorePriceInfoFoodNutritionFactsNutritionFact;
    /**
     * Sodium information for a given food dish.
     */
    sodium?: Schema$GeostorePriceInfoFoodNutritionFactsNutritionFact;
    /**
     * Carbohydrate information for a given food dish.
     */
    totalCarbohydrate?: Schema$GeostorePriceInfoFoodNutritionFactsNutritionFact;
    /**
     * Fat information for a given food dish.
     */
    totalFat?: Schema$GeostorePriceInfoFoodNutritionFactsNutritionFact;
  }
  /**
   * This message denotes calories information with an upper bound and lower bound range.
   */
  export interface Schema$GeostorePriceInfoFoodNutritionFactsCaloriesFact {
    lowerAmount?: number | null;
    /**
     * Unit of the given calories information.
     */
    unit?: string | null;
    upperAmount?: number | null;
  }
  /**
   * This message denotes nutrition information with an upper bound and lower bound range and can be represented by mass unit.
   */
  export interface Schema$GeostorePriceInfoFoodNutritionFactsNutritionFact {
    lowerAmount?: number | null;
    /**
     * Unit of the given nutrition information.
     */
    unit?: string | null;
    upperAmount?: number | null;
  }
  export interface Schema$GeostorePriceInfoProto {
    /**
     * The actual food menus. This is a repeated field because a restaurant may offer multiple menus, e.g. for different language or for different available time, such as holidays vs non-holidays.
     */
    priceList?: Schema$GeostorePriceListProto[];
    /**
     * All URLs that give price list information for this establishment. For food menus, this would represent menu_urls. Note that this field is a repeated list of UrlListProtos. Each UrlListProto instance in the list is intended to hold lists of URLs that are translations of the same URL.
     */
    priceListUrl?: Schema$GeostoreUrlListProto[];
    /**
     * Message containing metadata about the verified status of the PriceInfo. Only verified listings should be displayed.
     */
    status?: Schema$GeostorePriceInfoStatus;
  }
  /**
   * Providers of PriceInfo (e.g. SinglePlatform, YEXT) send verified and unverified listings. PriceInfoStatus is used to encapsulate this information.
   */
  export interface Schema$GeostorePriceInfoStatus {
    isVerified?: boolean | null;
  }
  /**
   * A PriceListNameInfoProto is used by PriceListProto and fields and messages contained in it for storing names, descriptions, languages, and IDs. The name field and the description field must be in the same language, as specified by the language field. None of the fields in this proto is required, although it is not expected to have the language field set unless there is a name or description. When the language field is not set, it is understood to be the preferred language of the locale where the establishment is located. An empty string for any of the fields is not allowed (as enforced by lints).
   */
  export interface Schema$GeostorePriceListNameInfoProto {
    description?: string | null;
    /**
     * IDs are intended to be unique identifiers of PriceInfoLists, Sections, and Menu items. This is enforced by the ID_DUPLICATE_PRICE_LIST_ID lint.
     */
    id?: string | null;
    /**
     * The external form of a Google International Identifiers Initiative (III) LanguageCode object. See google3/i18n/identifiers/languagecode.h for details. We place extra restrictions on languages in addition to what the III library requires. See go/geo-schema-reference/feature-properties/languages.
     */
    language?: string | null;
    name?: string | null;
  }
  /**
   * A PriceListProto can be used to represent any type of price lists, one of which is a menu of food and drinks. It contains names and descriptions, together with its source URL list if it is extracted or attributed to that URL. The names and descriptions are represented using repeated PriceListNameInfo fields to allow versions in different languages. A PriceListProto may contain multiple sections; in the context of a food menu, this would be multiple menu sections, e.g. for breakfast, lunch, dinner, prix fixe, or dinner for two, etc. At least one menu section must be present. Each section contains a number of items; for food menus, it may be FoodMenuItems defined below. At least one item must be present in each section.
   */
  export interface Schema$GeostorePriceListProto {
    /**
     * For third party lists, represents the ID of the aggregator which provided this data. Optional.
     */
    aggregatorId?: string | null;
    /**
     * The time period when this price list is available. Establishments are not required to give available_time for any given price list, however, when this field is not set, the price list is understood as available any time the establishment is open.
     */
    availableTime?: Schema$GeostoreTimeScheduleProto;
    /**
     * Cuisine information if the location the price lists attached to is an eligible feature for a food menu price list. Cuisine information should also only show up in a food price list.
     */
    cuisines?: string[] | null;
    /**
     * The repeated name_info field is for price lists listed in multiple languages. When a price list has no names or descriptions, the size of the repeated field name_info may be 0. There should be at most one name_info for any given language.
     */
    nameInfo?: Schema$GeostorePriceListNameInfoProto[];
    /**
     * Each price list may have multiple sections. Note that these sections within the same price list should most times contain only the same type of items for sale, e.g. all sections should usually contain only food items if the enclosing price list is representing food menu. However, sometimes such a requirement may be wrong, for example, McDonald's may sell burgers as well as toys, and the toys may be in its own section. Thus we don't enforce any requirement that all sections contain only the same type of items.
     */
    section?: Schema$GeostorePriceListSectionProto[];
    /**
     * Where this price list comes from. If set, this must also be a member of the price_list_url field, and represents translations of a single URL.
     */
    sourceUrl?: Schema$GeostoreUrlListProto;
  }
  /**
   * A PriceListSectionProto is used to store a section of a PriceListProto. For example, for a PriceListProto representing a food menu, a PriceListSectionProto represents a menu section. Each PriceListSectionProto contains a repeated list of items for sale; these items can be products or services. Right now every section should contain items of one type.
   */
  export interface Schema$GeostorePriceListSectionProto {
    /**
     * Call to action for the section.
     */
    callToAction?: Schema$GeostoreCallToActionProto;
    /**
     * To store food and drink items when the containing PriceListSectionProto is a food menu section.
     */
    foodItem?: Schema$GeostoreFoodMenuItemProto[];
    /**
     * To store any items when the containing PriceListSectionProto is not food / legacy services.
     */
    item?: Schema$GeostoreComposableItemProto[];
    /**
     * This has to have at most one value.
     */
    itemType?: string[] | null;
    /**
     * The external form of a Google International Identifiers Initiative (III) LanguageCode object. See google3/i18n/identifiers/languagecode.h for details. We place extra restrictions on languages in addition to what the III library requires. See go/geo-schema-reference/feature-properties/languages. When set, represents the language of the section and its items. Any section and item level name infos must match this language. Optional.
     */
    language?: string | null;
    /**
     * One or more media items (photos, videos, etc.) describing this section / category.
     */
    media?: Schema$GeostoreMediaItemProto[];
    /**
     * The repeated name_info field is for price list sections listed in multiple languages. When a price list section has no names or descriptions, the size of the repeated field name_info may be 0. There should be at most one name_info for any given language.
     */
    nameInfo?: Schema$GeostorePriceListNameInfoProto[];
  }
  /**
   * This message represents a price range of an attribute. The meaning of the price bounds is domain specific. But mainly they are soft bounds for a normal usage. E.g. "restaurant prices" are subject to an higher level of "soft" bounds than "museum admission price"
   */
  export interface Schema$GeostorePriceRangeProto {
    /**
     * Currency code for the price range: a valid currency code from i18n/identifiers/currencycode.h. Lower and upper price are both assumed to use the same currency.
     */
    currency?: string | null;
    /**
     * This message allows unbounded price ranges. e.g. Lower_price is undefined. At least one of the two prices must be set for the price range to be meaningful.
     */
    lowerPrice?: number | null;
    /**
     * clang-format on
     */
    units?: string | null;
    upperPrice?: number | null;
  }
  /**
   * PropertyValueStatusProto specifies what we know about a field corresponding to FeaturePropertyId's value in the absence of any specific value. For now, it just indicates when we know that there is no value. Eventually it might also indicate that we know it has value, just not what it is, etc.
   */
  export interface Schema$GeostorePropertyValueStatusProto {
    /**
     * The property ID whose value status is defined by this proto.
     */
    propertyId?: Schema$GeostoreFeaturePropertyIdProto;
    /**
     * `value_status` specifies whether the feature has a value for the property. This should always be set to something other than the default value (`PROPERTY_VALUE_STATUS_UNSPECIFIED`).
     */
    valueStatus?: string | null;
  }
  /**
   * This is a minimal version of SourceInfoProto.
   */
  export interface Schema$GeostoreProvenanceProto {
    /**
     * The dataset from which this the referenced data was created. The content of this string will be determined by the data provider, and may encode extra information, such as data confidence.
     */
    dataset?: string | null;
    /**
     * The data provider from which the referenced data was generated.
     */
    provider?: string | null;
  }
  /**
   * This message is embedded within a FeatureProto. It has rank calculation details such as available rank signals and rank signal mixer used to compute final rank. For more details, see the Oyster Rank wiki page: http://wiki.corp.google.com/twiki/bin/view/Main/OysterRank
   */
  export interface Schema$GeostoreRankDetailsProto {
    /**
     * A list of signals. Each one is extracted separately by a SignalExtractor.
     */
    signal?: Schema$GeostoreRankSignalProto[];
    /**
     * The signal mixer that was used to calculate the rank.
     */
    signalMixerType?: string | null;
  }
  /**
   * This message is embedded in the RankDetailsProto (below). It represents one rank signal, which is a floating point value estimating the Oyster Rank of the feature.
   */
  export interface Schema$GeostoreRankSignalProto {
    /**
     * Field-level metadata for this signal.
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * A value in the range [0, 1] estimating Oyster Rank according to this signal. Non-provider specific signals (e.g. SIGNAL_POPULATION) are interpreted by some common code in the ranking pipeline. Because of that, data providers should leave this field empty when setting such signals (so that the rank assignment can be uniform across all features regardless of contributing data providers). On the other hand, provider-specific signals (e.g. SIGNAL_ZENRIN_CITY_CATEGORY) are required to specify the rank field (it is not optional for them). That is because no code other than that of the provider itself will be able to fill in a meaningful value later on. We don't want clients to be reading from the raw_scalar / raw_string fields to interpret the data.
     */
    rank?: number | null;
    /**
     * The raw scalar value that was used to compute 'rank' above. The meaning of this attribute changes depending on the signal type.
     */
    rawScalar?: number | null;
    /**
     * The raw string value that was used to compute 'rank' above. The meaning of this attribute changes depending on the signal type.
     */
    rawString?: string | null;
    type?: string | null;
  }
  /**
   * A RawDataProto is a key-value pair that represents arbitrary source data from a particular provider. Raw data can be attached to features using their source_info field.
   */
  export interface Schema$GeostoreRawDataProto {
    /**
     * The key associated with this data item. For source data in shape file format, this will typically be a column name. Keys need to be unique with respect to a particular data source (see DataSourceProto), but they do not need to be globally unique. You can look up the documentation for a key (e.g. a longer label and description) by following the source_id link of the parent SourceInfoProto, which takes you to a TYPE_DATA_SOURCE feature, and then looking up the corresponding RawMetadataProto object for this key in that feature's optional data_source field.
     */
    key?: string | null;
    /**
     * All data items are represented as strings, the logic being that it is easy to convert other data types to strings, and there is no need to access this data efficiently.
     */
    valueString?: string | null;
  }
  export interface Schema$GeostoreRawMetadataProto {
    /**
     * Method to use when conflating together RawDataProto values at the same key NB: If you add a new ConflationMethod, then you must add the corresponding logic to MergeRawData to conflate the RawDataProto values using this method.
     */
    conflationMethod?: string | null;
    /**
     * Self-contained documentation about what this field represents and how its values are encoded.
     */
    description?: string | null;
    /**
     * The key being described.
     */
    key?: string | null;
    /**
     * A longer, human-readable name associated with this key. The label might be used in a data explorer tool, for example.
     */
    label?: string | null;
  }
  /**
   * A latitude-longitude rectangle, represented as two diagonally opposite points "lo" and "hi". The rectangle is considered to be a closed region, i.e. it includes its boundary. The latitude bounds must be in the range -90 to 90 degrees inclusive, and the longitude bounds must be in the range -180 to 180 degrees inclusive. Various cases include: - If lo == hi, the rectangle consists of a single point. - If lo.longitude \> hi.longitude, the longitude range is "inverted" (the rectangle crosses the 180 degree longitude line). - If lo.longitude == -180 degrees and hi.longitude = 180 degrees, the rectangle includes all longitudes. - If lo.longitude = 180 degrees and hi.longitude = -180 degrees, the longitude range is empty. - If lo.latitude \> hi.latitude, the latitude range is empty.
   */
  export interface Schema$GeostoreRectProto {
    hi?: Schema$GeostorePointProto;
    lo?: Schema$GeostorePointProto;
  }
  /**
   * A collection of information that applies to a polygonal area.
   */
  export interface Schema$GeostoreRegulatedAreaProto {
    /**
     * The set of restrictions that apply to a zone. These restrictions may limit the routability of every segment contained within the defined feature.polygon. Repeated restrictions are treated collectively as an OR meaning that segments in the zone are only routable if none of the restrictions apply. If any segments within the defined polygon should not have these restrictions applied, they must list this regulated area's feature id in their feature.exempt_regulated_area field.
     */
    restriction?: Schema$GeostoreRestrictionProto[];
  }
  /**
   * This message is embedded within a FeatureProto, and represents a geographic or logical relationship of that feature to some other feature. Note that some relation types are there purely for the purpose of grouping together other relation types. They are noted as ABSTRACT in comments. Other relation types are no longer supported / in use. They are noted as DEPRECATED in comments (and marked with the standard deprecated option, too). Other relation types are reserved for future use or just not intended for use at all, for various internal reasons. They are noted as RESERVED in comments. WARNING: Updates to this proto within a FeatureProto's related_feature field handled by standalone pipelines and are NOT atomic with regard to updates to the features being referenced; we do not guarantee that a given MapFacts snapshot will be consistent between this field and the related features.
   */
  export interface Schema$GeostoreRelationProto {
    /**
     * Field-level metadata for this relation.
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * If and only if the other feature is of TYPE_COUNTRY, the 2-letter country code. This is the FLAG_COUNTRY_CODE_2 name of the country component.
     */
    otherFeatureCountryCode?: string | null;
    /**
     * The feature ID of the feature to which we're relating. WARNING: the related feature does not necessarily have a bound that encloses this feature, so in a bucketing MapReduce, you may not be able to follow all relationships. Relations that use strong references are annotated above but you can also refer to IsRelationStrong() in geostore/base/public/relation.h.
     */
    otherFeatureId?: Schema$GeostoreFeatureIdProto;
    /**
     * RESERVED
     */
    otherFeatureName?: Schema$GeostoreNameProto[];
    /**
     * If and only if the other feature is of TYPE_DISPUTED_AREA, the territorial administrator found in its GeopoliticalAttachmentProto.administered_by field, if any. Since this string is copied exactly, it may be a 2-letter country code or another type of descriptive string.
     */
    otherFeatureTerritorialAdministrator?: string | null;
    /**
     * The type of the feature to which we're relating.
     */
    otherFeatureType?: number | null;
    /**
     * ** DEPRECATED ** If relation is exactly RELATION_OVERLAPS but not any of its subcategories, overlap_fraction contains an estimate of the fraction of the geometry of this feature that intersects with the other feature, ranging from 0.0 to 1.0. Note that this is a rough estimate based on cell coverings, and may not be very accurate. In particular, values of 0.0 and 1.0 are possible, even though in principle they should not be.
     */
    overlapFraction?: number | null;
    /**
     * The relationship of the feature that contains this RelationProto to the feature other_feature_id. Note the relation_is_reversed field below. Some relations imply weak references, other strong ones. Strong references are annotated above but you can also refer to IsRelationStrong() in geostore/base/public/relation.h.
     */
    relation?: string | null;
    /**
     * RESERVED
     */
    relationIsReversed?: boolean | null;
    /**
     * A place for clients to attach arbitrary data to a relation. Never set in MapFacts.
     */
    temporaryData?: Schema$Proto2BridgeMessageSet;
  }
  /**
   * A restriction group represents common properties of a set of restrictions on segments that are associated with the same underlying cause across a geographic region. Every segment referenced by this restriction group should have at least one restriction that refers backs to this restriction group. The standard feature properties have the following interpretations: name - A name that represents the name for this restriction group. kg_property - A reference back to a KG event in case this restriction group belongs to an event in KG. /geo/type/restriction_group/associated_event contains a mid to the associated event.
   */
  export interface Schema$GeostoreRestrictionGroupProto {
    /**
     * Field-level metadata for this restriction group.
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * FeatureId of all segments that have a RestrictionProto referring back to this RestrictionGroup.
     */
    segment?: Schema$GeostoreFeatureIdProto[];
  }
  /**
   * A restriction is an expression that limits when an action can be taken. Each restriction has a set of conditions. If all of the conditions are true, then the restriction applies and the action cannot be taken. For example, the restriction "no turns 3-5pm except buses" would have two conditions: "time is 3-5pm" and "vehicle is not a bus". If both of these conditions apply, the restriction is true, and the turn is prohibited. Multiple restrictions may apply to the same action. Clients handle this by always declaring RestrictionProto as a "repeated" element. The semantics of having multiple restrictions are that if any restriction applies, then the action cannot be taken. In other words, restrictions are OR-ed together. Putting all of this together, a set of RestrictionProtos can be interpreted as an bool expression in disjunctive normal form: (A and B) or (D and E and F) or (G and H) The action is prohibited if this expression is true. Note that a restriction with no conditions is always true, i.e. its action is always prohibited. NOTE: RestrictionProtos are often compared against one another (e.g. to check for duplicate/redundant restrictions) by canonicalizing them via GetCanonicalRestriction() in google3/geostore/base/internal/restriction.cc. Any fields that don't contribute to the definition of a restriction in the real world should be bundled with the annotative fields near the bottom and excluded in GetCanonicalRestriction(). LINT.IfChange
   */
  export interface Schema$GeostoreRestrictionProto {
    /**
     * The restriction only applies in these specific autonomous driving product scenarios. NOTE: This should only be set on restrictions with TRAVEL_AUTONOMOUS_VEHICLE travel mode.
     */
    autonomousDrivingProducts?: string[] | null;
    /**
     * Actually *required* if style=STYLE_IN_OUT, otherwise forbidden. Typically the intersection group type is artifact, but either artifact or logical groups can be used for STYLE_IN_OUT restrictions.
     */
    intersectionGroup?: Schema$GeostoreFeatureIdProto;
    /**
     * Field-level metadata for this restriction.
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * Restriction group this restriction belongs to.
     */
    restrictionGroup?: Schema$GeostoreFeatureIdProto;
    /**
     * A token that can be used to identify the version of the data about this restriction.
     */
    restrictionToken?: string | null;
    /**
     * When specified, restriction applies only at particular times (operating hours or times of the year: reversing lanes, seasonal roads, no left turns from 3-5pm Mon-Fri except holidays). Otherwise, restriction is in effect at all times.
     */
    schedule?: Schema$GeostoreTimeScheduleProto;
    /**
     * The scope that the restriction applies to. - SCOPE_DIRECTION means the segment/sibling pair is restricted in the direction of the segment that contains this RestrictionProto. For segment/sibling pairs with pedestrian facilities (and thus side-of-road routing) the RestrictionProto restricts both facilities in the direction of the segment (assuming that the restriction applies to travel mode TRAVEL_PEDESTRIAN). - SCOPE_SIDE means the RestrictionProto applies only to the side of road that the containing segment represents. That sibling's pedestrian facility is restricted in both directions. Schema constraints: - SCOPE_SIDE must be set if and only if travel_mode == [TRAVEL_PEDESTRIAN] and the segment containing the restriction has the pedestrian_facility field set and is not set to PEDESTRIAN_FACILITY_UNKNOWN. Such restrictions must have no subpath. - All other restrictions must have this field set to SCOPE_DIRECTION (whether explicitly or implicitly). This distinction is necessary for cases such as pedestrian facility on one-way segment/sibling roads.
     */
    scope?: string | null;
    /**
     * Restriction Style defines the semantics of the subpath field, as defined above in the documentation of subpath.
     */
    style?: string | null;
    /**
     * "subpath" specifies the GeoStore segments that this restriction applies to, according to the restriction_style field below. Segments that are referenced by this subpath field also refer to this feature back via the same subpath field. For all styles of restriction, all segments in the subpath must have identical copies of the restriction. In other words, restrictions are duplicated along every segment in the subpath. Note that subpaths of length 1 do not have any purpose and are disallowed. Note that it is possible to represent restrictions either using STYLE_CONTIGUOUS, or depending on the length of the subpath, one of the more specific STYLE_SINGLE, STYLE_TURN, or STYLE_IN_OUT. New code should use the more specific alternatives if possible, as they support instant updates. For restriction_style == STYLE_CONTIGUOUS (the default): "subpath" can either be empty, for a single-segment restriction, or it specifies exactly the sequence of segments which this restriction applies to. The subpath may be used to specify a turn restriction (a subpath of length 2) or to prohibit more complex maneuvers. For example, when merging onto a road from the right-hand side it may not be possible to make an immediate left turn due to insufficient time to cross the intervening lanes or the presence of a physical barrier. This would be indicated by a subpath restriction of length 3 or more. For restriction_style == STYLE_SINGLE: The subpath field of the Restriction must be empty. The restriction applies only to the segment it is attached to. There must not be an intersection group specified. For restriction_style == STYLE_TURN: The subpath field of the Restriction must contain exactly two segments. The first is called the "in_segment", the second is the "out_segment". They must be contiguous, i.e. the end intersection of the in_segment is the start intersection of the out_segment. The restriction applies only to a direct maneuver from the in_segment to the out_segment. Other paths from the in_segment to the out_segment are not restricted. There must not be an intersection group specified. For restriction_style == STYLE_IN_OUT: The subpath field of the Restriction must contain exactly two segments. The first is called the "in_segment", the second is the "out_segment". Note that the two segments define paths, but may not actually be one. The end intersection of the in_segment must be in an intersection group which also contains the start intersection of the out_segment. The in- and out-segments are not required to be adjacent, but may be. Either way, the restriction applies to any path from the in_segment to the out_segment through the intersection group, not just direct turns. The intersection_group must be specified. Note that clients which read restrictions and need to know which paths are restricted by a given IN_OUT restriction must expand the IN_OUT restriction by finding all paths through the intersection group from the in_segment to the out_segment.
     */
    subpath?: Schema$GeostoreFeatureIdProto[];
    /**
     * A place for clients to attach arbitrary data to a restriction. Never set in MapFacts.
     */
    temporaryData?: Schema$Proto2BridgeMessageSet;
    /**
     * Restriction applies only to the given travel modes. This field should always be set, but may be missing in old data. WARNING: Restrictions with no travel modes are DEPRECATED. Historically, no travel modes has meant "all travel modes", except they didn't really even mean that, because Pathfinder would use a complex set of heuristics to interpret the "correct" travel modes. Pathfinder currently (last updated August 2013) has heuristics to cope with incomplete data that reduce or extend application of the specified restrictions to pedestrians or bicycles. We are actively working to remove these heuristics and replace them with explicit, correct travel modes in the data. See b/8746491.
     */
    travelMode?: string[] | null;
    /**
     * clang-format on The type of restriction. This is not a condition, but rather tells you what kind of restriction it is. This field should always be set.
     */
    type?: string | null;
    /**
     * The restriction only applies to vehicles that meet all of the attributes defined here. If this is empty, it does not affect the scope of the restriction.
     */
    vehicleAttributeFilter?: Schema$GeostoreVehicleAttributeFilterProto;
  }
  /**
   * Proto used to represent rights for FeatureProto. See go/geo-rights for more details. NOTE: Use google3/geostore/provenance/public/rights.h or google3/java/com/google/geostore/provenance/rights/Rights.java instead of accessing this proto directly.
   */
  export interface Schema$GeostoreRightsStatusProto {
    fieldWithRights?: Schema$GeostoreFieldWithRightsProto[];
  }
  /**
   * A RoadConditionalProto defines conditions that affect when the road traversal information is applicable.
   */
  export interface Schema$GeostoreRoadConditionalProto {
    /**
     * Specifies what times the information is applicable. This can be specific times (3-5 PM) or days of the week (Mon - Fri), as well as more general times like school hours, dusk to dawn, etc. If no value is set, the restriction is applicable at all times.
     */
    timeSchedule?: Schema$GeostoreTimeScheduleProto;
    /**
     * Additional attributes that apply to the applied vehicle types.
     */
    vehicleAttribute?: Schema$GeostoreVehicleAttributeFilterProto;
    /**
     * Restrictions applying to specific types of vehicles.
     */
    vehicleType?: string[] | null;
  }
  /**
   * A road monitor is a device that observes traffic for road violations like speeding or running a red light. These are modeled within MapFacts so that navigation services can warn users when they drive along road segments that are monitored.
   */
  export interface Schema$GeostoreRoadMonitorProto {
    /**
     * The TYPE_ROAD segment features that this road monitor may observe.
     */
    monitoredRoad?: Schema$GeostoreFeatureIdProto[];
  }
  /**
   * Below is some horrible ASCII art and a description of the components of a road sign. +-------------------+ | A11 E50 Paris | | Chartres | +-------------------+ This sign would be composed of four components (all of them text components, the only option we support for now). The three in the first row would all have a "major_position" of zero. Their "minor_position" values would be zero for "A11", one for "E50", and two for "Paris". The component in the second row would have "major_position" value of one. This message provides the details of a single component of a road sign. A component defines its position within a sign, its type, and its content.
   */
  export interface Schema$GeostoreRoadSignComponentProto {
    /**
     * The id of the feature referred to by this component, typically the route or locality feature this sign points towards. In the ASCII art example above, this field would contain the id for the routes A11 and E50 and the localities Chartres and Paris in the corresponding component.
     */
    featureId?: Schema$GeostoreFeatureIdProto;
    /**
     * The type of the feature referred to by this component. If feature_id is specified type of that feature should be the same as this field.
     */
    featureType?: number | null;
    /**
     * This is the "major" position of this component within the set of components that make up a sign. This number can be thought of as the "row" of the sign on which the component appears, but no guarantees are made that there is a one-to-one mapping between "major_position" and the rows of information on the actual sign being modeled. A "major_position" value of zero would indicate that the component is near the top of the sign.
     */
    majorPosition?: number | null;
    /**
     * This is the position of a component within the components of a sign that share a common "major_position". It can be though of as the "column" of the component, but like "major_position", no guarantees are made regarding its mapping to reality. For data sources that don't provide enough information to determine a component's major and minor positions, major position should be populated and minor position should not be present. A "minor_position" value of zero would indicate that the component is near the "beginning" of the sign. In countries where signs are read from left to right, "minor_position" zero would be near the left side of the sign.
     */
    minorPosition?: number | null;
    /**
     * The direction of traffic for the referenced TYPE_ROUTE feature.
     */
    routeDirection?: string | null;
    /**
     * The semantic type of sign.
     */
    semanticType?: string | null;
    /**
     * If this sign component is of type "TYPE_TEXT", this field contains the text of the component. A NameProto is used to allow language and flags to be associated with the text.
     */
    text?: Schema$GeostoreNameProto;
    /**
     * This type of content represented by this sign component.
     */
    type?: string | null;
  }
  /**
   * A RoadSignProto holds the details of a road sign. Currently this is simply a list of the items that appear on the sign and their relative position.
   */
  export interface Schema$GeostoreRoadSignProto {
    /**
     * The list of components for a single road sign. A sign may be composed of multiple components, each with its own position and content.
     */
    component?: Schema$GeostoreRoadSignComponentProto[];
  }
  /**
   * This protocol buffer holds metadata about the association between a segment and a route.
   */
  export interface Schema$GeostoreRouteAssociationProto {
    /**
     * clang-format on
     */
    displayPreference?: string | null;
    /**
     * Field-level metadata for the route association.
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * Identifies the route feature to which this metadata applies. This is one of the routes the segment refers to via the SegmentProto.route field.
     */
    route?: Schema$GeostoreFeatureIdProto;
    /**
     * The direction of the TYPE_ROUTE feature in this route association. A small number of countries (mostly just the United States, Mexico, and Canada) use directional routes. For example, in the United States highway US-1 is referred to as US-1 North or US-1 South on the sides where flow of traffic moves in those directions.
     */
    routeDirection?: string | null;
  }
  /**
   * A route is a collection of segments that forms a logical group - usually a named road or highway. Segments can belong to more than one route, and the segments of one route may be a subset of the segments of another route (e.g. I-5 N is a subset of I-5). Segments in the collection that define the route do not need to constitute a single uninterrupted line, there can be disconnects. The standard feature properties are interpreted as follows: name - Routes should have one or more names. (While unnamed roads certainly exist in the real world, we choose not to create route features for such roads. Instead, the unnamed segments are merely not part of any route.) address - This should always be empty. type - Specifies a particular route subtype, see feature.proto. point - This should always be empty. polyline - This should always be empty. polygon - This should always be empty. child - The pairs of segments that belong to this route (a given route should always reference segments in both travel directions).
   */
  export interface Schema$GeostoreRouteProto {
    /**
     * The feature type of the route children. Should be set if and only if all children are of the same feature type.
     */
    childType?: number | null;
  }
  /**
   * This protocol buffer holds school district specific attributes for features of TYPE_SCHOOL_DISTRICT.
   */
  export interface Schema$GeostoreSchoolDistrictProto {
    type?: string | null;
  }
  /**
   * A segment path describes a path through a short set of segments. The segment path can be used for any purpose. At the moment, only TYPE_ROAD_SIGN features can have associated segment paths: The segment path lists the segments that refer to the sign. These are the segments for which the sign is applicable. The sign's physical location is independent of the segments in the path.
   */
  export interface Schema$GeostoreSegmentPathProto {
    /**
     * Specifies a sequence of feature ids of GeoStore segments. The feature ids are ordered. The path "AB" is not the same as the path "BA". The segments along the path are assumed to be connected via the appropriate intersections. The segment features that are referenced by this subpath refer to this feature back via the road_sign field in segment proto extension.
     */
    subpath?: Schema$GeostoreFeatureIdProto[];
  }
  /**
   * --------------------------------------------------------------------------- WARNING - if you add new fields to SegmentProto (or to other protos used by SegmentProto), you need to: - ensure that the ShortSegmentsMerger class (in geostore/tools/internal/mr-mergesegments.cc) is aware of them, otherwise the new fields will be discarded randomly. - consider whether they should be cleared in the ClearFeature() function (in maps/render/process-high-priority-roads.cc) if they are irrelevant for rendering high priority roads at far-out zoom levels. - update the test cases that ensure these two packages know all the SegmentProto fields in both mr-mergesegments_test.cc and maps/render/process-high-priority-roads_test.cc or you will break the VersaTile build. ---------------------------------------------------------------------------
   */
  export interface Schema$GeostoreSegmentProto {
    advisoryMaximumSpeed?: Schema$GeostoreAppliedSpeedLimitProto[];
    /**
     * RESERVED
     */
    altitude?: number[] | null;
    /**
     * The average speed that should be expected along this route under normal conditions, in kilometers per hour. (Hopefully we'll replace this with something a lot more sophisticated.)
     */
    avgSpeedKph?: number | null;
    /**
     * Field-level metadata for the average speed.
     */
    avgSpeedKphMetadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * clang-format on
     */
    barrier?: string | null;
    /**
     * Field-level metadata for the barrier.
     */
    barrierMetadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * clang-format on
     */
    bicycleFacility?: string | null;
    bicycleSafety?: string | null;
    condition?: string | null;
    /**
     * Field-level metadata for the condition.
     */
    conditionMetadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * If known, the date that construction is scheduled to begin.
     */
    constructionBeginDate?: Schema$GeostoreDateTimeProto;
    /**
     * If known, the date that construction is scheduled to end.
     */
    constructionEndDate?: Schema$GeostoreDateTimeProto;
    constructionStatus?: string | null;
    /**
     * Field-level metadata for the construction status.
     */
    constructionStatusMetadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * Whether the segment is covered by a roof etc. If this field is missing, the status is unknown.
     */
    covered?: boolean | null;
    /**
     * Average distance between the segment's polyline and edge of the road on this side in meters. It need not be equal to the sum of width of all lanes in this direction. This width includes on-street bicycle lanes but excludes off-street lanes such as sidewalks. The edge of the road is the rightmost edge for segments in right side driving countries and leftmost edge for left side driving countries. Width of the road is sum of this and sibling's distance_to_edge.
     */
    distanceToEdge?: number | null;
    /**
     * Field-level metadata for distance_to_edge.
     */
    distanceToEdgeMetadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * These indicate for what portion of the segment does the outer curb of the segment follow the segment polyline - i.e., where do the sweep curves connect along the outer curb. If unspecified, may be assumed to be equal to lane retraction, preferring outermost lane.
     */
    edgeFollowsSegmentBeginFraction?: number | null;
    edgeFollowsSegmentEndFraction?: number | null;
    /**
     * clang-format on
     */
    elevation?: string | null;
    /**
     * Field-level metadata for the elevation.
     */
    elevationMetadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * clang-format on
     */
    endpoint?: string | null;
    /**
     * Field-level metadata for the endpoint.
     */
    endpointMetadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * Detailed information about grade levels along the segment. If a GradeLevelProto is not present for any point (index) along the segment, the default grade level is zero. In between two points (indexes), the grade level of the segment is taken to be the max of the grade levels on either side of it. See gradelevel.proto for semantics of repeated indexes.
     */
    gradeLevel?: Schema$GeostoreGradeLevelProto[];
    /**
     * Internal-only data.
     */
    internal?: Schema$GeostoreInternalSegmentProto;
    /**
     * If specified, the perpendicular offset in meters from a road segment to an interpolated address along that road segment. See go/synthetic-address-positions.
     */
    interpolationOffsetMeters?: number | null;
    /**
     * The intersection feature corresponding to the destination of this segment. Intersections are used to represent the connectivity between segments. Each intersection stores the segment ids of all the incoming and outgoing segments that meet at that intersection. Turns can be made from this segment to any of the outgoing segments of its intersection, unless there is a restriction that explicitly disallows the turn (see below). Every segment has an intersection object, even if there are no other segments to connect to (i.e., a cul-de-sac or dead end).
     */
    intersection?: Schema$GeostoreFeatureIdProto;
    /**
     * Specifies whether the max_permitted_speed_kph was derived from a heuristic as opposed to coming from an authoritative source.
     */
    isMaxPermittedSpeedDerived?: boolean | null;
    /**
     * Detailed information about each lane in this direction, if available. Lanes are numbered from inside of the road outward, i.e. the lane next to the center line has lane_number 0. Note that lanes that are valid for travel in both directions appear in both segments of a segment pair (left turn lanes, one-lane roads, some passing lanes, reversing lanes). Some lanes may not be usable by cars, such as bike lanes. Also, some lanes may not exist along the entire segment, e.g. left- or right-turn lanes that appear just before the intersection.
     */
    lane?: Schema$GeostoreLaneProto[];
    /**
     * The legal maximum, legal minimum, and advisory (recommended but non-legally binding) maximum speed limits that are permitted on this segment. These should be the segment's legal limits; however, note that it may contain estimated values based on country-wide defaults and other heuristics (see 'AppliedSpeedLimitProto.trust_level'). Before exposing these fields to users as the legal speed limit please consult with Google lawyers.
     */
    legalMaximumSpeed?: Schema$GeostoreAppliedSpeedLimitProto[];
    legalMinimumSpeed?: Schema$GeostoreAppliedSpeedLimitProto[];
    /**
     * The maximum speed that is permitted on this segment, in kilometers per hour. This should be the segment's legal speed limit; however, note that it may contain estimated values based on country-wide defaults and other heuristics (see 'is_max_permitted_speed_derived' below). Before exposing this field to users as the legal speed limit please consult with Google lawyers.
     */
    maxPermittedSpeedKph?: number | null;
    /**
     * Field-level metadata for the maximum permitted speed.
     */
    maxPermittedSpeedKphMetadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * Specifies whether this segment carries right-hand traffic (cars keep to the right side of the road) instead of left-hand traffic (cars keep to the left side). This is true for US roads and false for UK roads, for example. See go/wikip/Left-_and_right-hand_traffic.
     */
    onRight?: boolean | null;
    /**
     * Defines the pedestrian crossing(s) between the end point of this segment and the start point of this segment's sibling.
     */
    pedestrianCrossing?: Schema$GeostorePedestrianCrossingProto;
    /**
     * clang-format on
     */
    pedestrianFacility?: string | null;
    pedestrianGrade?: string | null;
    /**
     * LINT.ThenChange(//depot/google3/maps/pathfinder/pgraph/pgraph-segment-categories.cc)
     */
    priority?: string | null;
    /**
     * Field-level metadata for the priority.
     */
    priorityMetadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * The set of restrictions that apply to this segment. Restrictions may make a single segment, turn, or more complex maneuver along a set of segments unroutable for the specified travel modes, or may only add penalties or warnings, depending on the restriction type. Turn restrictions are one example of a restriction. By default, turns are allowed onto all outgoing segments from this segment's intersection (including the sibling of this segment, i.e. U-turns are allowed by default). If any of these turns are disallowed they will be listed as "subpath restrictions". A subpath restriction disallows travel on given sequence of segments. In the case of a disallowed turn, the subpath simply consists of the source and destination feature ids. There may also be restrictions that apply to all travel on this segment (e.g. chains required, or closed in winter), or restrictions that just apply to certain lanes (e.g. high occupancy vehicle lanes).
     */
    restriction?: Schema$GeostoreRestrictionProto[];
    /**
     * The road monitors that monitor this segment for traffic violations.
     */
    roadMonitor?: Schema$GeostoreFeatureIdProto[];
    /**
     * The road sign(s) which this segment refers to. These are features of TYPE_ROAD_SIGN that are applicable to this segment. For example, a sign that says "TO KIRKLAND" might apply to several segments on a freeway off-ramp (until the end of the ramp). Note that this field makes it easy to find the signs for a given road segment. The feature for the sign lists the segments that refer to it.
     */
    roadSign?: Schema$GeostoreFeatureIdProto[];
    /**
     * The route(s) to which this segment belongs.
     */
    route?: Schema$GeostoreFeatureIdProto[];
    /**
     * Holds metadata about the associations between this segment and the route features listed in the route field. This metadata need not be present; the only consistency requirement is that every feature ID that appears inside 'route_association' must also appear in the repeated 'route' field. If a route does not appear in route_association, consumers should assume that it has a default initialized RouteAssociationProto.
     */
    routeAssociation?: Schema$GeostoreRouteAssociationProto[];
    /**
     * Indicates whether the segment's opposing lanes of traffic are separated from this segment, and hence have been represented in a separate feature. This means that there are two pairs of siblings instead of one.
     */
    separatedRoadways?: boolean | null;
    /**
     * The other segment of this segment pair (see above). The segment that is referenced by the sibling field refers to this feature back via the same sibling field. Both segment and sibling should have the same properties such as geometry, country code, elevation, level relation, priority etc. Since routes are required to have segment and sibling at the same time, the set of routes on a segment is same to that of the sibling.
     */
    sibling?: Schema$GeostoreFeatureIdProto;
    /**
     * Each slope instance is tied to a point along the segment polyline (unrelated to the vertices in the segment's polyline) and represents the slope of the segment between that point and the point tied to the next slope istance, or the end of the segment if it's the last slope instance. A segment should have at least one slope.
     */
    slope?: Schema$GeostoreSlopeProto[];
    /**
     * clang-format on LINT.ThenChange(//depot/google3/geostore/base/proto/lane.proto) Specific lanes may override this segment-level surface type.
     */
    surface?: string | null;
    /**
     * Field-level metadata for the surface.
     */
    surfaceMetadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * The geometric sweeps between this segment and nearby segments, used for real road width rendering. A sweep describes the surface that connects to segments.
     */
    sweep?: Schema$GeostoreSweepProto[];
    /**
     * If this segment is part of a toll road. It would be nice to have data about the toll cost, locations of toll booths, and so forth. Sadly, we don't have this data at this time.
     */
    tollRoad?: boolean | null;
    /**
     * clang-format on LINT.ThenChange(//depot/google3/maps/pathfinder/pgraph/pgraph-segment-categories.cc)
     */
    usage?: string | null;
    /**
     * A collection of landmarks that are visible when traveling along this segment and useful for wayfinding to users following routes using this segment. The landmark need not be on the segment. Each segment in a pair of siblings specifies its landmarks independently. A landmark applicable to both appears in both.
     */
    visibleLandmark?: Schema$GeostoreLandmarkReferenceProto[];
  }
  /**
   * This proto represents the geographic area served by an establishment. WARNING: This proto is not meant to be used directly. Please use the provided libraries. http://google3/geostore/base/public/service_area.h http://google3/java/com/google/geostore/base/ServiceArea.java
   */
  export interface Schema$GeostoreServiceAreaProto {
    /**
     * The features that make up the service area for this establishment. These features are subject to the following constraints applied by editing middleware (notably, not strictly enforced by lints in storage): 1. The following feature types (and their subtypes) may be used: + TYPE_ISLAND + TYPE_POLITICAL, except the following prohibited subtypes: - TYPE_CONSTITUENCY - TYPE_LAND_PARCEL + TYPE_POSTAL 2. There is a maximum limit (currently 20) to the number of areas which may be provided. This is due to serving efficiency limitations. 3. There are no additional geometry requirements for these features beyond the requirements based on the feature types above. In practice this means that these features will either have polygonal or point-based geometries. 4. These referenced features are generally required to have names, though this is not strictly enforced.
     */
    servedFeature?: Schema$GeostoreFeatureIdProto[];
  }
  /**
   * Defines an ordered reference to a line variant’s stop.
   */
  export interface Schema$GeostoreServicedStopProto {
    /**
     * Reference to a Transit POI feature (gcid:transit_station) or platform compound section (gcid:railway_platform) serviced by the line variant.
     */
    id?: Schema$GeostoreFeatureIdProto;
    /**
     * An index representing the order in which the above station is serviced by the line variant.
     */
    index?: number | null;
  }
  /**
   * This protocol buffer holds attributes for features of TYPE_SKI_BOUNDARY.
   */
  export interface Schema$GeostoreSkiBoundaryProto {
    type?: string | null;
  }
  /**
   * This protocol buffer holds attributes for features of TYPE_SKI_LIFT.
   */
  export interface Schema$GeostoreSkiLiftProto {
    /**
     * clang-format on
     */
    type?: string | null;
  }
  /**
   * This protocol buffer holds attributes for features of TYPE_SKI_TRAIL.
   */
  export interface Schema$GeostoreSkiTrailProto {
    difficulty?: string | null;
    type?: string | null;
  }
  export interface Schema$GeostoreSlopeProto {
    /**
     * Slope value as elevation change divided by horizontal distance, in the format of decimal, e.g., ‘0.1234’ means a 12.34% slope. If a slope_value is unset, it indicates we don’t have enough information to compute slope at this location.
     */
    slopeValue?: number | null;
    /**
     * Indicates how far along the segment this slope value starts to apply, in the format of decimal between 0 and 1.
     */
    startPointFraction?: number | null;
  }
  /**
   * MapFacts GAIA ID assigned to this feature. These values are virtual GAIA IDs from MapFacts, and as such are not stored in Focus.
   */
  export interface Schema$GeostoreSocialReferenceProto {
    /**
     * WARNING: Please do NOT introduce new uses; treat this field as if it were deprecated.
     */
    baseGaiaId?: string | null;
    /**
     * GAIA ID used when a business has been claimed. This value is a robot GAIA ID. Robots are a special type of GAIA account used to denote identity for a user or a group of users, but are not logged-in directly by a user.
     */
    claimedGaiaId?: string | null;
    /**
     * WARNING: Please do NOT introduce new uses; treat this field as if it were deprecated.
     */
    gaiaIdForDisplay?: string | null;
  }
  /**
   * Source infos are the canonical way to establish data provenance. They can currently be set on features, edits, and issues. Every feature has a repeated list of SourceInfoProto messages to describe the source data that was used in building this feature. The data includes a feature id that points to additional data about the data source (version, copyright notice, etc), and optional "raw data" that is taken directly from the provider's format and has not been converted to a canonical form.
   */
  export interface Schema$GeostoreSourceInfoProto {
    /**
     * This is the URL of a page representing all the data from this source in this feature. It may have be the ultimate source of the data (in case of scraping) or merely the same data styled according the provider's taste. There is a similar field in DataSourceProto which is NOT cached in this field, since it has a different meaning.
     */
    attributionUrl?: Schema$GeostoreUrlProto[];
    /**
     * The time that this particular piece of data was collected. If different attributes were collected on different dates, this is the date of the most recent edit.
     */
    collectionDate?: Schema$GeostoreDateTimeProto;
    /**
     * A source info may have a magic cookie whose content and semantics are defined by the specific import process or third-party feed. For feeds that are processed by Distillery, the cookie, when set, should contain the unique identifier for the feature as provided by the feed.
     */
    cookie?: string | null;
    /**
     * The dataset from which this SourceInfoProto was created. The content of this string will be determined by the data provider (e.g. for MultiNet data, "fra" would indicate the dataset for France). This field is unnecessary for providers that deliver a single dataset per release (e.g. Basarsoft).
     */
    dataset?: string | null;
    /**
     * The Gaia ID of the user who provided us with this data. This field should never be set on source infos present on features, but may be set on source infos present on edits. DEPRECATED: Most clients should use the "user" field instead where Gaia IDs are encrypted.
     */
    gaiaId?: string | null;
    /**
     * Information about an internal user or system that is operating on behalf of `user` by way of impersonation.
     */
    impersonationUser?: Schema$GeostoreUserProto;
    /**
     * The name of the layer from which this SourceInfoProto was created.
     */
    layer?: string | null;
    /**
     * The OGR feature identifier from which this SourceInfoProto was created. This is an internal OGR record identifier and has nothing to do with any of the feature's fields or the FeatureIdProto for the FeatureProto containing this SourceInfoProto. This field is present only for debugging purposes and possible use in the match pattern of a FeatureChangeProto designed to fix bad source data very early in the importing process.
     */
    ogrFid?: string | null;
    /**
     * The data provider from which this source info was generated. The value must be equal to the one on the TYPE_DATA_SOURCE feature referenced by this source info via the source_id reference (see above).
     */
    provider?: number | null;
    /**
     * A source info may optionally have a set of key-value pairs that provide "raw data" specific to that source. The types of raw data available will vary from one provider to another and should not be used in production code. Instead, new fields and/or protocol buffers should be defined to represent this information in a canonical form, and the relevant importers should be modified to populate these new fields.
     */
    rawData?: Schema$GeostoreRawDataProto[];
    /**
     * The data release from which this SourceInfoProto was created. The format for this string is provider-dependent (e.g. a MultiNet release would look like "2008.01").
     */
    release?: string | null;
    /**
     * A source info may have a corresponding TYPE_DATA_SOURCE feature that describes it (provider, copyright information, date of release, etc). In the context of edits and issues, this field should not be set.
     */
    sourceId?: Schema$GeostoreFeatureIdProto;
    /**
     * A place for clients to attach arbitrary data to a source info. Never set in MapFacts.
     */
    temporaryData?: Schema$Proto2BridgeMessageSet;
    /**
     * RESERVED
     */
    user?: Schema$GeostoreUserProto;
  }
  /**
   * Trust related information about the input source (feed or user) to help feature summarization. Typically, the values in this proto are either based on source's previous observations (e.g., a blocked LBC user or a trusted feed) or their status (Google hired operator or admin user). The proto can later contain a more granular trust score or correctness probabilities. A higher enum value indicates a more trusted source. Leaving room in the value space for adding more granular enums, if they become necessary later.
   */
  export interface Schema$GeostoreSourceTrustProto {
    /**
     * The level of trust for the source of the observation.
     */
    level?: string | null;
  }
  /**
   * A speed limit, containing both the limit and the conditions in which it applies.
   */
  export interface Schema$GeostoreSpeedLimitProto {
    /**
     * The type of speed limit.
     */
    category?: string | null;
    /**
     * The conditions under which this speed limit is applicable. If multiple conditions are set, at least one of them must be true.
     */
    condition?: Schema$GeostoreRoadConditionalProto[];
    /**
     * The source of the speed limit.
     */
    sourceType?: string | null;
    /**
     * A constant speed limit.
     */
    speedWithUnit?: Schema$GeostoreSpeedProto;
    /**
     * A speed limit with no limit value. When there is no speed limit in place.
     */
    unlimitedSpeed?: Schema$GeostoreUnlimitedSpeedProto;
    /**
     * A dynamic speed limit that can vary within a range of values based on road conditions.
     */
    variableSpeed?: Schema$GeostoreVariableSpeedProto;
  }
  /**
   * A speed value and unit.
   */
  export interface Schema$GeostoreSpeedProto {
    /**
     * All speed values are stored in kilometers per hour.
     */
    speed?: number | null;
    /**
     * Mapfacts only allows unit to be KILOMETERS_PER_HOUR.
     */
    unit?: string | null;
  }
  /**
   * Represents a way to traverse nested fields by referencing their token fields. Everything starts relative to a known root message, specified externally. E.g., suppose we have a feature proto that has a lane with token 0x123 which in turn has a lane connection with token 0x456 for which we want to assert something about flowline altitudes. The field path in that case will look like: field_path: { field_num: 31 # segment \} field_path: { field_num: 6 # lane version_token: "0x123" \} field_path: { field_num: 8 # lane_connection version_token: "0x456" \} field_path: { field_num: 3 # flow \} field_path: { field_num: 1 # track \} field_path: { # Note: pose is repeated. By not specifying a token we refer to all poses # in a track. field_num: 2 # pose \} field_path: { field_num: 4 # altitude \} This path could also be represented succinctly in a more human-friendly form as something like: segment.lane[@0x123].lane_connection[@0x456].flow.track.pose[*].altitude
   */
  export interface Schema$GeostoreStableFieldPathProto {
    /**
     * A sequence of field selectors to be traversed starting from the root message.
     */
    fieldPath?: Schema$GeostoreStableFieldPathProtoStableFieldSelector[];
  }
  export interface Schema$GeostoreStableFieldPathProtoStableFieldSelector {
    /**
     * Field number to select.
     */
    fieldNum?: number | null;
    /**
     * Select repeated field entry by its version token. If this is used, then the message referenced by field_num must have a token field annotated with the (version_token) field option. Must be omitted for leaf non-repeated fields. If unset for a repeated field, we consider this selector to apply equally to all descendants.
     */
    versionToken?: string | null;
  }
  /**
   * This protocol buffer represents the 2D polygon connecting two segments at an intersection. Collectively, sweep polygons represent intersections for real road width rendering. Notes: - Sweeps represent geometry between the *end* of one segment and the *end* of the other segment (modulo retraction values). - Sweeps are strongly referenced, meaning geometry is stored on both segments involved in the sweep. For example, in the diagram below, the sweep between A and B would be stored on both segment A and segment B. | B | v --A--\> - Sweeps are not strictly stored on adjacent segments. Disconnected segments (e.g., segments separated by an intersection group) may also contain sweeps.
   */
  export interface Schema$GeostoreSweepProto {
    /**
     * The segment feature connected to this segment via the sweep geometry.
     */
    otherSegmentFeatureId?: Schema$GeostoreFeatureIdProto;
    /**
     * Polygonal geometry representing the area between this segment and the other segment.
     */
    polygon?: Schema$GeostorePolygonProto;
    /**
     * Describes parameters for generating the edge of this sweep that starts at edge_follows_segment_end_fraction. The other side of the sweep should be described on the sweep present on the sibling pair.
     */
    sweepCurve?: Schema$GeostoreCurveConnectionProto;
    /**
     * A token that can be used to identify the version of the data about this sweep.
     */
    sweepToken?: string | null;
  }
  /**
   * This protocol buffer is used to represent telephone numbers and related information.
   */
  export interface Schema$GeostoreTelephoneProto {
    /**
     * RESERVED
     */
    callRate?: Schema$GeostorePriceRangeProto[];
    /**
     * Disambiguates between the types of information or service a caller might seek when contacting this phone number.
     */
    contactCategory?: string | null;
    flag?: string[] | null;
    /**
     * True if this phone number is not unique to this establishment and might be shared with other features. In case an establishment shares a phone number with a business chain of which it is a member, and the number canonically belongs to that chain, it should be marked as shared for the establishment but not shared for the chain.
     */
    isSharedNumber?: boolean | null;
    /**
     * RESERVED
     */
    label?: Schema$GeostoreNameProto[];
    /**
     * RESERVED
     */
    language?: string[] | null;
    /**
     * Field-level metadata for this telephone number.
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * ** DEPRECATED ** This is deprecated in favor of phone_number below. An internationalized representation of a phone number. See //location/country/telephonenumber.proto
     */
    number?: Schema$TelephoneNumber;
    /**
     * An internationalized representation of a phone number. See //java/com/google/i18n/phonenumbers/phonenumber.proto
     */
    phoneNumber?: Schema$I18nPhonenumbersPhoneNumber;
    /**
     * The features from which this phone number can be called from. For instance, if a phone number can only be called from Europe, this field will contain a reference to the TYPE_CONTINENT feature of Europe. This field is analogous to http://kg/schema/common/phone_number/service_location. The only valid destination feature types are TYPE_CONTINENT and TYPE_POLITICAL. If empty, this phone number can be called from anywhere in Earth (this is the case for the majority of phones).
     */
    serviceLocationFeature?: Schema$GeostoreFeatureIdProto[];
    type?: string | null;
  }
  /**
   * This protocol buffer stores information related to temporary closure of a feature. The only allowed precisions for a date is PRECISION_DAY. DateTimeProto.seconds should have the lowest legal value for the desired date/time and precision. E.g. for PRECISION_MONTH, 2019-02-15 21:10:30 is not valid, it should be 2019-02-01 00:00:00 instead. NOTE: Each date is stored in UTC but should be interpreted as being in the local timezone. So clients should convert the DateTimeProto to local (civil) time using UTC+0, and then treat the result as local to the feature.
   */
  export interface Schema$GeostoreTemporaryClosureProto {
    /**
     * The latest when this closure may end, if the exact date is unknown. If set, the feature is operational again no later than this date.
     */
    endAsOfDate?: Schema$GeostoreDateTimeProto;
    /**
     * RESERVED
     */
    endDate?: Schema$GeostoreDateTimeProto;
    /**
     * The latest when this closure may start, if the exact date is unknown. If set, the feature is temporarily closed starting no later than this date.
     */
    startAsOfDate?: Schema$GeostoreDateTimeProto;
    /**
     * RESERVED
     */
    startDate?: Schema$GeostoreDateTimeProto;
  }
  /**
   * Represents text (with an associated language) that is affixed to the beginning and/or end of a primary text.
   */
  export interface Schema$GeostoreTextAffixProto {
    /**
     * The external form of a Google International Identifiers Initiative (III) LanguageCode object. See google3/i18n/identifiers/languagecode.h for details. These strings should be treated as opaque blobs. You can use LanguageCodeConverter::FromOther to convert the string to a LanguageCode reference. You can then call methods on the LanguageCode class to extract language/script/region subtags (if any). See also http://g3doc/i18n/identifiers/g3doc/using-iii. We place extra restrictions on languages in addition to what the III library requires. See http://go/geo-schema-reference/feature-properties/languages.md
     */
    language?: string | null;
    /**
     * Text to prepend to the primary text, including any necessary trailing whitespace. At least one of prefix or suffix is required.
     */
    prefix?: string | null;
    /**
     * Text to append to the end of the primary text, including any necessary leading whitespace. At least one of prefix or suffix is required.
     */
    suffix?: string | null;
  }
  export interface Schema$GeostoreThreeDimensionalModelProto {
    /**
     * Triangle vertex indices, each triple defines a triangle.
     */
    pointIndices?: number[] | null;
    /**
     * We store a triangular mesh in indexed format. Points array.
     */
    points?: Schema$GeostorePointWithHeightProto[];
  }
  /**
   * A rate which applies based on the precise times of utilization. Defines a rate, as well as restrictions on the start and end times which must be satisfied in order to be eligible for the rate. See go/rate-schema for more details.
   */
  export interface Schema$GeostoreTimeBasedRateProto {
    /**
     * The rates for this rule. Each duration_based_rate defines the costs associated with a particular duration of a stay. There must be at least one rate with range_start_seconds set to 0 and there cannot be gaps between durations (i.e. there should be no interval uncovered between 0 and the largest range_end_seconds of any duration-based rate).
     */
    durationBasedRate?: Schema$GeostoreDurationBasedRateProto[];
    /**
     * If true, tax is included in the prices in this rate. If false, additional taxes may apply.
     */
    taxIncluded?: boolean | null;
    validEndWithin?: Schema$GeostoreTimeScheduleProto;
    /**
     * Time period during which utilization of this rate must start in order to be eligible for the rate. If not set, there is no restriction on the time when the utilization starts.
     */
    validStartWithin?: Schema$GeostoreTimeScheduleProto;
  }
  export interface Schema$GeostoreTimeComponentProto {
    componentType?: string | null;
    /**
     * The time component is the intersection of these intervals
     */
    interval?: Schema$GeostoreTimeIntervalProto[];
  }
  /**
   * Not all combinations of optional fields in TimeEndpointProto are allowed. The granularity of time is a path along the directed graph with these edges: second -\> minute minute -\> hour hour -\> day of week hour -\> day of month hour -\> day of year day of week -\> week of month day of week -\> week of year day of month -\> month day of year -\> year week of month -\> month week of year -\> year month -\> year A TimeEndpointProto may not specify two fields that are unordered with respect to each other ("day of year" and "day of week", for instance). The absence of fields larger than any specified field indicates repetition (e.g. no year indicates that the interval occurs every year). The absence of units that are "smaller" than the largest specified unit indicates a default lowest value (no hour means midnight (0)). When intersecting time intervals, "smaller" units repeat within the "larger" unit as many times as necessary. For example, the intersection of the interval from hour 0 to hour 24 with the interval from second 0 to second 1 is equivalent to the union of the set of intervals which represents the first second of every minute of every hour of every day. ----------------------------------------------------------------------------- WARNING - if you add new fields to TimeEndpointProto you need to: - ensure AreTimeEndpointsEquivalent considers the new fields (and update the corresponding tests) -----------------------------------------------------------------------------
   */
  export interface Schema$GeostoreTimeEndpointProto {
    /**
     * Valid ranges are 0-7, 1-31, and 1-366 (see day_type below)
     */
    day?: number | null;
    dayType?: string | null;
    /**
     * Valid range is 0-24. Because it could be unclear what wrapping hours mean in relation to days, 24 is used to denote midnight at the end of a day.
     */
    hour?: number | null;
    /**
     * Valid range is 0-59, except when a repetitive minute interval ends at the end of an hour, in which case 60 is a legal end value.
     */
    minute?: number | null;
    month?: string | null;
    /**
     * Valid range is 0-59, except when a repetitive second interval ends at the end of a minute, in which case 60 is a legal end value.
     */
    second?: number | null;
    /**
     * Valid ranges are 0-5 and 1-53 (depending on the value of week_type, see below).
     */
    week?: number | null;
    weekType?: string | null;
    year?: number | null;
  }
  export interface Schema$GeostoreTimeIntervalProto {
    /**
     * Begin and end are used to specify a range of times: [begin, end). If one is present, the other must be present as well. Additionally, both must have matching time granularities - all fields specified in the begin TimeEndpointProto must be present in the end TimeEndpointProto and vice-versa. Hours are not allowed to wrap (begin.hour() <= end.hour()).
     */
    begin?: Schema$GeostoreTimeEndpointProto;
    end?: Schema$GeostoreTimeEndpointProto;
    /**
     * If true, then this interval actually encodes the complement of the specified occasion or range. For example, the following TimeIntervalProto encodes all times other than the month of May. TimeIntervalProto[ type = TYPE_RANGE inverted = true begin = TimeEndpointProto[ month = MAY ] end = TimeEndpointProto[ month = JUNE ] ]
     */
    inverted?: boolean | null;
    /**
     * clang-format on
     */
    occasion?: string | null;
    type?: string | null;
  }
  export interface Schema$GeostoreTimeScheduleProto {
    /**
     * The schedule is the union of these components.
     */
    component?: Schema$GeostoreTimeComponentProto[];
  }
  /**
   * A TimezoneProto holds information about a feature's related time zone.
   */
  export interface Schema$GeostoreTimezoneProto {
    /**
     * i18n recognized time zone identifier. For the full list of identifiers, see google3/i18n/identifiers/data/timezones.txt.
     */
    id?: string | null;
    /**
     * Field-level metadata for this relation.
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
  }
  /**
   * A collection of information that applies to a toll cluster.
   */
  export interface Schema$GeostoreTollClusterProto {
    /**
     * The list of TYPE_INTERSECTION features that are toll points and form this toll cluster. A toll cluster can consist of either a single or a group of intersection points called toll points at the end of various road segments in MapFacts that represent one or more lanes passing through a toll fixture that all go to the same routing destination. This relationship is reciprocal, as a toll point intersection also stores a reference to the toll cluster it belongs to. A toll cluster must have reference to one or more toll points i.e. toll_cluster.intersection should always be populated.
     */
    intersection?: Schema$GeostoreFeatureIdProto[];
  }
  export interface Schema$GeostoreTrackProto {
    /**
     * The index of this TrackProto in a list of TrackProtos.
     */
    index?: number | null;
    /**
     * The instantaneous pose of points along this track. The fields set inside each pose must be set consistently along the track.
     */
    pose?: Schema$GeostorePoseProto[];
  }
  /**
   * A transit line is a named set of transit trips that are advertised to passengers under a common name, and a number of attributes that are true for all those trips. There is no requirement for each trip to travel through the same list of stops or use the same legs, so a line can contain trips in opposite directions or with variations in the sequence of stops. See go/oysterpedia for an overview of the transit feature types. The standard feature properties are interpreted as follows: name - The names of this line, including both long and short names, if available. Short names like "10" or "Blue" should carry the FLAG_ABBREVIATED, long names like "Dublin/Pleasanton line" should not. The preferred name (one per language) for displaying the line on its own (e.g., as a search result for the line) should carry the FLAG_PREFERRED. website - The official web page describing this line. Repeated if multilingual. Line features have no geometry (neither points nor polylines nor polygons). Within Transit Oyster, geometry can be found in legs. Additional data only in Transit Oyster: child - The legs of this line, in no particular order. source_info - Specifies the GTFS routes that match this feature. Each is given as a PROVIDER_GOOGLE_TRANSIT source_info where dataset is the feed name and cookie is the route_id.
   */
  export interface Schema$GeostoreTransitLineProto {
    /**
     * The transit agencies responsible for operating this line. All lines should have at least one agency, and most will have exactly one. The following cases are reasons for multiple agencies: - Code share: Two or more agencies share trips - Alternations: Each trip is run by one of multiple agencies - Additional: All trips run by one agency, but a second one sells tickets In all cases the order has no meaning. Clarification comes from the trips.
     */
    agency?: Schema$GeostoreFeatureIdProto[];
    /**
     * The background color of labels for that transit line. The encoding is like in HTML or CSS, eg. 0x11ff00 means a bit of red, full green, no blue, in sRGB color space. The most significant byte must be zero, i.e. no transparency.
     */
    labelBackgroundColor?: number | null;
    /**
     * The text color of labels for that transit line. Encoding like label_background_color.
     */
    labelTextColor?: number | null;
    /**
     * The transit stations (establishment POIs with gcid:transit_station) which this transit line can go through, in no particular order. Usage note: The source of truth are the transit leg features in Transit Oyster. In MapFacts, that information is cached in two locations: in this field, and in transit station attachments on POIs. Do not assume these locations are always up to date and/or synchronized with each other.
     */
    stations?: Schema$GeostoreFeatureIdProto[];
    /**
     * The type of vehicle that applies to all trips that use this line.
     */
    vehicleType?: string | null;
  }
  /**
   * A line variant is a specific instantiation of a line concept, denoted by the ordered set of stops and collection of segments that it traverses. Line variants are modeled as TYPE_ROUTE features with gcid:transit_line_variant. This proto stores line-variant-specific information that is not generally applicable to all routes. Schema Design Doc: go/transit-line-concepts-and-variants
   */
  export interface Schema$GeostoreTransitLineVariantProto {
    /**
     * Reference to the line variant’s line concept.
     */
    lineConcept?: Schema$GeostoreFeatureIdProto;
    /**
     * Ordered list of stations or platforms serviced by this line variant. The order is captured by the ServicedStopProto.index field.
     */
    stops?: Schema$GeostoreServicedStopProto[];
  }
  /**
   * Encapsulates information related to an individual transit station.
   */
  export interface Schema$GeostoreTransitStationProto {
    /**
     * All the transit agencies which service this station. A station can be serviced by multiple stations. There may only be one agency association per transit agency. See go/transit-agency-relation-migration for more details.
     */
    agencyAssociations?: Schema$GeostoreTransitStationProtoTransitAgencyAssociationProto[];
  }
  /**
   * The association between this station and the agency which services this station.
   */
  export interface Schema$GeostoreTransitStationProtoTransitAgencyAssociationProto {
    /**
     * The transit agency which services this station.
     */
    agency?: Schema$GeostoreFeatureIdProto;
    /**
     * A station code uniquely identifies a transit station within the transit agency's network.
     */
    stationCode?: string | null;
  }
  export interface Schema$GeostoreTrustSignalsProto {
    /**
     * Trust signals for the source of a given observation, typically based on historical evidences or status (like internal Google operator).
     */
    sourceTrust?: Schema$GeostoreSourceTrustProto;
  }
  /**
   * A speed limit without a limit value. Used to indicate the absence of a speed limit.
   */
  export interface Schema$GeostoreUnlimitedSpeedProto {}
  /**
   * Hold a list of URLs, usually to contain translations of a single URL.
   */
  export interface Schema$GeostoreUrlListProto {
    url?: Schema$GeostoreUrlProto[];
  }
  /**
   * A web location for a Feature. URLs should always be stored in repeated fields because some objects (eg. transit schedules in Brussels) have different URLs for different languages.
   */
  export interface Schema$GeostoreUrlProto {
    /**
     * The external form of a Google International Identifiers Initiative (III) LanguageCode object. See google3/i18n/identifiers/languagecode.h for details. We place extra restrictions on languages in addition to what the III library requires. See http://go/geo-schema-reference/feature-properties/languages.md This field represents the language of the content of the web site. It may be missing if the web site is language-independent or if the language is unknown.
     */
    language?: string | null;
    /**
     * Field-level metadata for this URL. NOTE: there are multiple UrlProto fields in the Geo Schema. Metadata here is only expected to be present on FeatureProto.website[].
     */
    metadata?: Schema$GeostoreFieldMetadataProto;
    /**
     * ** DEPRECATED ** The pagerank of this URL. Valid values [0, 65535] See http://wiki/Main/NearestSeeds for more information.
     */
    pagerank?: number | null;
    /**
     * The URL.
     */
    url?: string | null;
  }
  /**
   * UserProto identifies a (human) user of Geo Data. Its primary use is in describing the source of pieces of data (e.g. edits). It could be a simple identifier, but isn't so that we can store it in the clear while still preventing correlation between a user's contribution.
   */
  export interface Schema$GeostoreUserProto {
    /**
     * The user Gaia ID in encrypted form. Wipeout ids take value of "" in bytes.
     */
    encryptedGaiaId?: string | null;
    /**
     * Required. The name of the key used to encrypt the Gaia ID.
     */
    encryptionKeyName?: string | null;
    /**
     * Required (valid default provided). The config ID of the owner of the above encryption_key_name. This field must be set if the encryption key name is *not* "mapfacts_gaia_id_encryption_key".
     */
    keystoreConfigId?: number | null;
    /**
     * If possible, writers should set this to a full user email, including the domain. Readers should not assume that this is a well-formed email address. This field may only be set by Atlas, Pushpin and OneRing because they are internal tools which have a PWG exception to store textual usernames in the clear.
     */
    username?: string | null;
  }
  /**
   * A speed limit whose value can change based on road, traffic, and weather conditions.
   */
  export interface Schema$GeostoreVariableSpeedProto {}
  /**
   * A set of vehicle attribute conditionals (ex: weight \>= 20T && num_trailers = 2) used to define a slice of all possible vehicles. This can be useful for filtering one or more vehicles by a predicate.
   */
  export interface Schema$GeostoreVehicleAttributeFilterProto {
    /**
     * A repeated value here is treated as an AND operation. This allows for ranges to be represented by two values (ex: "count < 4" AND "count \>= 2" means "2 <= count < 4").
     */
    axleCount?: Schema$GeostoreCountComparisonProto[];
    /**
     * Whether the applied vehicle types have a trailer attached to them.
     */
    hasTrailer?: boolean | null;
    /**
     * List of prohibited hazardous goods for a vehicle to carry. A repeated value here is treated as an OR operation, meaning that they may not carry ANY of the goods listed.
     */
    hazardousGoods?: string[] | null;
    /**
     * A repeated value here is treated as an AND operation. This allows for ranges to be represented by two values (ex: "count <= 4" AND "count \> 2" means "2 < count <= 4").
     */
    numTrailers?: Schema$GeostoreCountComparisonProto[];
    /**
     * A repeated value here is treated as an AND operation. This allows for ranges to be represented by two values (ex: "length <= 53ft" AND "length \> 48ft" means "48ft < length <= 53ft").
     */
    trailerLength?: Schema$GeostoreDimensionComparisonProto[];
    /**
     * A repeated value here is treated as an AND operation. This allows for ranges to be represented by two values (ex: "height \> 3m" AND "height <= 5m" means "3m < height <= 5m").
     */
    vehicleHeight?: Schema$GeostoreDimensionComparisonProto[];
    /**
     * A repeated value here is treated as an AND operation. This allows for ranges to be represented by two values (ex: "length <= 40m" AND "length \> 35m" means "35m < length <= 40m").
     */
    vehicleLength?: Schema$GeostoreDimensionComparisonProto[];
    /**
     * A repeated value here is treated as an AND operation. This allows for ranges to be represented by two values (ex: "weight < 8T" AND "weight \>= 3T" means "3T <= weight < 8T").
     */
    vehicleWeight?: Schema$GeostoreWeightComparisonProto[];
    /**
     * A repeated value here is treated as an AND operation. This allows for ranges to be represented by two values (ex: "width < 4m" AND "width \>= 2m" means "2m <= width < 4m").
     */
    vehicleWidth?: Schema$GeostoreDimensionComparisonProto[];
  }
  /**
   * A proto representing a vertical ordering of a feature. NOTE: This shouldn’t be used if a more specific field can be used instead. E.g., for TYPE_SEGMENT features grade_level field should be preferred. For indoor features RELATION_ON_LEVEL should be preferred. See go/aboutgrades for comparison of various types of levels available.
   */
  export interface Schema$GeostoreVerticalOrderingProto {
    /**
     * The level represents the relative vertical ordering of a feature among all overlapping features. For example, we may have features along freeway surface have level = 0, and features on an overpass have level = 1. NOTE: It’s assumed that all features have level 0 by default, so that it’s not necessary for all overlapping features to have this set.
     */
    level?: number | null;
  }
  /**
   * A weight value tagged with a comparison operator.
   */
  export interface Schema$GeostoreWeightComparisonProto {
    comparison?: string | null;
    comparisonOperator?: string | null;
    weightWithUnit?: Schema$GeostoreWeightProto;
  }
  /**
   * A weight with a numerical value and unit.
   */
  export interface Schema$GeostoreWeightProto {
    unit?: string | null;
    weight?: number | null;
  }
  /**
   * An anchor label can be attached to any element to give it a reference address. LogicalEntity links (see goodoc-semantics.proto) may use anchor labels to point to goodoc elements (they may also use indices to locate the element, but the indices could become invalid if the goodocs are allowed to mutate). Multiple elements may have the same anchor.
   */
  export interface Schema$GoodocAnchorLabel {
    /**
     * There is a generic method for composing such strings. Please take a look at GoodocUtils::GenerateUniqueAnchorName(...) in ocr/goodoc/goodoc-utils.h.
     */
    Anchor?: string | null;
    anchorScope?: number | null;
  }
  /**
   * Bounding box for page structural elements: pictures, paragraphs, characters, etc.
   */
  export interface Schema$GoodocBoundingBox {
    Height?: number | null;
    /**
     * Optional magic label, so objects can be sorted on bounding box dimensions easily
     */
    Label?: number | null;
    /**
     * BoundingBox coordinates and sizes are expressed in pixels
     */
    Left?: number | null;
    Top?: number | null;
    Width?: number | null;
  }
  /**
   * A way to specify a simple partitioning of a BoundingBox into a sequence of sub-boxes. +----------------------------------------------------+ | | | | | | | span(0) | (1) | (2) | (3) | (4) | | | | | | | +----------------------------------------------------+ This representation can, for example, be used to store coarse Symbol boundaries within a Word (see Word.CompactSymbolBoxes below) instead of per-Symbol BoundingBoxes, for saving space.
   */
  export interface Schema$GoodocBoxPartitions {
    direction?: number | null;
    /**
     * "span" is width or height, determined by "direction". If there are k partitions, then there are k - 1 "span" values, one for each except the last symbol (which is redundant).
     */
    span?: number[] | null;
  }
  /**
   * Break label
   */
  export interface Schema$GoodocBreakLabel {
    BreakLabelType?: number | null;
    /**
     * True if break prepends the element
     */
    isPrefix?: boolean | null;
  }
  /**
   * Font label
   */
  export interface Schema$GoodocCharLabel {
    /**
     * The shift of a character from the base line of the string in pixels
     */
    BaseLine?: number | null;
    /**
     * Height of small characters in pixels on the source image
     */
    CharacterHeight?: number | null;
    /**
     * The foreground color of the symbol; the default color is 0 (black)
     */
    Color?: number | null;
    /**
     * Symbol recognition confidence from OCR. Range depends upon OCR Engine.
     */
    Confidence?: number | null;
    /**
     * The font ID refers to the fonts table in the document header
     */
    FontId?: number | null;
    /**
     * Size in points (JFYI: point is 1/72"). This is rounded to the nearest whole number.
     */
    FontSize?: number | null;
    /**
     * Size in points represented as float.
     */
    FontSizeFloat?: number | null;
    FontType?: number | null;
    /**
     * If CharacterHeight is defined uncertainly
     */
    HasUncertainHeight?: boolean | null;
    /**
     * The horizontal scaling for a character, in percents. The default value for this property is 100, which corresponds to no scaling.
     */
    HorizontalScale?: number | null;
    IsBold?: boolean | null;
    IsItalic?: boolean | null;
    IsSmallCaps?: boolean | null;
    IsStrikeout?: boolean | null;
    IsSubscript?: boolean | null;
    IsSuperscript?: boolean | null;
    /**
     * If OCR Engine marked the character as "suspicious" (this character is likely to be recognized incorrectly).
     */
    IsSuspicious?: boolean | null;
    IsUnderlined?: boolean | null;
    /**
     * True if a QA operator has marked this as not OCRable. This is used for complex equations, scripts that the operator can't type, or handwriting.
     */
    NotOcrablePerQA?: boolean | null;
    /**
     * Symbol-level penalty from the garbage text detector. Lower is better; range = [0,100].
     */
    Penalty?: number | null;
    /**
     * The probability that a character is written with a Serif font
     */
    SerifProbability?: number | null;
  }
  /**
   * Top-level representation of OCRed document
   */
  export interface Schema$GoodocDocument {
    /**
     * Debug info, recording the history of any editing done through the interface in goodoc-editing.h. The strings look like "MoveParagraph(page_index = 0, source_block_index = 3, ...);
     */
    EditingHistory?: string[] | null;
    header?: Schema$GoodocDocumentHeader;
    /**
     * Logical entities are stored as blobs. Depending on the kind of thing this is a goodoc of, a separate .proto file is expected to define the logical entity structure. Hence we can still parse this as a goodoc for people who dont care about this, and people who care about this can parse it specifically. ocr/goodoc/logical-entity-utils.h has methods to read and write these. See Goodoc++ doc
     */
    LogicalEntity?: string[] | null;
    /**
     * The names of the proto messages serialized in LogicalEntity, one for each LogicalEntity. The repetitions should number 0 to leave this unspecified, or they should equal the number of LogicalEntity strings.
     */
    LogicalEntityMessageName?: string[] | null;
    page?: Schema$GoodocDocumentPage[];
    /**
     * For multi-goodoc documents
     */
    SubDocuments?: Schema$GoodocDocument[];
  }
  export interface Schema$GoodocDocumentHeader {
    font?: Schema$GoodocDocumentHeaderFont[];
    OcrEngineId?: string | null;
    OcrEngineVersion?: string | null;
  }
  export interface Schema$GoodocDocumentHeaderFont {
    FontId?: number | null;
    FontName?: string | null;
  }
  export interface Schema$GoodocDocumentPage {
    block?: Schema$GoodocDocumentPageBlock[];
    /**
     * If the garbage text detector was run, the changelist that the binary was sync'ed to (or -1 if unknown), and whether the settings had their production values (or false if unknown).
     */
    GarbageDetectorChangeList?: number | null;
    GarbageDetectorWasProduction?: boolean | null;
    /**
     * Height in pixels
     */
    Height?: number | null;
    /**
     * Horizontal resolution in DPI.
     */
    HorizontalDpi?: number | null;
    Label?: Schema$GoodocLabel;
    mergedpageinfo?: Schema$GoodocDocumentPageMergedPageInfo[];
    /**
     * Score of porn classifier from analyzing images on page. Note: This should be named porn_score, but we use PornScore as the name in order to be consistent with the rest of this proto.
     */
    PornScore?: number | null;
    /**
     * Whether page-level text confidences and other summary data were computed by PostOcrUtils instead of the now-obsolete GarbageTextDetector
     */
    postOcrConfidence?: boolean | null;
    /**
     * Page level stats (font size, line spacing, etc.)
     */
    stats?: Schema$GoodocSummaryStats;
    /**
     * Page text recognition confidence. Range depends on the algorithm but should be consistent in a given volume. 0 is bad, 100 is good.
     */
    TextConfidence?: number | null;
    /**
     * Vertical resolution in DPI.
     */
    VerticalDpi?: number | null;
    /**
     * Width in pixels
     */
    Width?: number | null;
  }
  export interface Schema$GoodocDocumentPageBlock {
    BlockType?: number | null;
    Box?: Schema$GoodocBoundingBox;
    Label?: Schema$GoodocLabel;
    /**
     * Which way is upright for this block, and what is the reading order (applicable if there is text here).
     */
    OrientationLabel?: Schema$GoodocOrientationLabel;
    Paragraph?: Schema$GoodocParagraph[];
    /**
     * If RotatedBox is set, Box must be set as well. See RotatedBoundingBox.
     */
    RotatedBox?: Schema$GoodocRotatedBoundingBox;
    /**
     * Block text recognition confidence. Range depends on the algorithm but should be consistent in a given volume. 0 is bad, 100 is good.
     */
    TextConfidence?: number | null;
  }
  /**
   * If we have merged text from another goodoc into this one (for example, from a PDF text layer goodoc into an OCR'd goodoc), we record some source goodoc info here.
   */
  export interface Schema$GoodocDocumentPageMergedPageInfo {
    OcrEngineId?: string | null;
    OcrEngineVersion?: string | null;
  }
  /**
   * Statistics about a particular font size (from CharLabel.FontSize) aggregated over a range of symbols
   */
  export interface Schema$GoodocFontSizeStats {
    /**
     * CharLabel.FontId and FontSize
     */
    fontId?: number | null;
    fontSize?: number | null;
    /**
     * The measurements are in pixels
     */
    medianHeight?: number | null;
    /**
     * top to bottom
     */
    medianLineHeight?: number | null;
    /**
     * bottom to next top in para
     */
    medianLineSpace?: number | null;
    /**
     * top to next top in para
     */
    medianLineSpan?: number | null;
    medianWidth?: number | null;
    /**
     * Line stats for this font. "top" corresponds to the highest ascender and "bottom" to the lowest descender. num_lines = # lines with \> 50% symbols having this font
     */
    numLines?: number | null;
    /**
     * Lines (out of num_lines) that have a successor line within their para
     */
    numLineSpaces?: number | null;
    numSymbols?: number | null;
  }
  /**
   * Label aggregates all kinds of optional characteristics of page elements.
   */
  export interface Schema$GoodocLabel {
    /**
     * AnchorLabel identifies a link target.
     */
    AnchorLabel?: Schema$GoodocAnchorLabel[];
    BreakLabel?: Schema$GoodocBreakLabel;
    /**
     * CharLabel is specifically intended for symbols
     */
    CharLabel?: Schema$GoodocCharLabel;
    /**
     * Languages used in the element (page, block, paragraph or word). Ordered by dominant-language first. Note: content scanjobs processed by the garbage_text_detector before CL 9223538 (Dec. 2008) have LanguageLabels in arbitrary order (within Page and Block elements) -- the confidence value should be inspected to find the dominant language guess for these, rather than just taking the first.
     */
    LanguageLabel?: Schema$GoodocLanguageLabel[];
    /**
     * SemanticLabel is defined in goodoc-semantics.proto, it allows rich annotation of content, identifying the nature of page elements.
     */
    SemanticLabel?: Schema$GoodocSemanticLabel;
  }
  /**
   * Weighted language
   */
  export interface Schema$GoodocLanguageCombinationLanguage {
    /**
     * Bcp47 language code. Note, this is not the same as OceanCode used by goodoc::Document.
     */
    bcp47Tag?: string | null;
    /**
     * Weight of language. This specifies how likely it is to see the language in the input text. The values don't have to add up to 1.
     */
    weight?: number | null;
  }
  /**
   * Language label
   */
  export interface Schema$GoodocLanguageLabel {
    /**
     * Closest id from i18n/languages/proto/languages.proto; caveat: may not accurately capture the language. GoodocLanguageCodeToLanguage() declared in ocr/goodoc/goodoc-utils.h may be used to convert a Language enum (i18n/languages/proto/languages.proto) to a string suitable for this field.
     */
    ClosestLanguageId?: number | null;
    /**
     * Confidence level on that language, between 0 and 100
     */
    Confidence?: number | null;
    /**
     * Old (Ocean) Language Code Usage: The language code is inferred during the running of the Garbage Text Detector and gets set at the paragraph, block and page level. Language code is a string of 3 or more characters. The first 3 letters specify the language, according to ISO 639. Optionally, the 3-letter code can be extended with an underscore and a language variant specifier. Specifiers exist for regional variants or for different forms of language spelling. The regional variants are specified as 2-letter country code, according to ISO 3166. Some examples: Standard "por" - Portuguese, standard "rus" - Russian, standard Regional variants: "por_br" - Portuguese, Brazilian "eng_us" - English, United States Variants of spelling: "rus_old" - Russian, old spelling "chi_tra" - Chinese, traditional "ger_new" - German, new spelling LanguageToGoodocLanguageCode() declared in ocr/goodoc/goodoc-utils.h may be used to convert a Language enum (i18n/languages/proto/languages.proto) to a string suitable for this field. New Language Code Usage: Most of the usages described above were standardized in BCP 47, and these codes are the new stanadard to be used in this field. To load either new or old language codes to form LanguageCode objects, use the function FromOceanCode() in ocr/quality/lang_util.h Note that the function ocr::FromOceanCode is capable of transforming either version of the LanguageCode to a C++ i18n_identifiers::LanguageCode.
     */
    LanguageCode?: string | null;
  }
  /**
   * A logical entity in the abstract is just a group of links to the goodoc. Depending on the kind of item, a separate proto file should extend this to define the logical structure for that kind. For example. newspapers.proto defines the logical entity for newspapers. LogicalEntity is also used within some SemanticLabels, for example, for a table-of-contents link.
   */
  export interface Schema$GoodocLogicalEntity {
    link?: Schema$GoodocLogicalEntityLink[];
    Metadata?: string | null;
  }
  /**
   * NOTE(gponcin) 2008/11 This is repeated for articles where we may have multiple links in one entity. From Vivek (Atlantis): "The block segmenter outputs a list of headlines on a page as a single logical entity that we attach to the logicalentity(1) for the goodoc."
   */
  export interface Schema$GoodocLogicalEntityLink {
    /**
     * The preferred way to link to an element is to create an AnchorLabel in the target element and name it here. Multiple elements may contain the same Anchor string.
     */
    Anchor?: string | null;
    BlockId?: number | null;
    /**
     * Links may also specifically locate the target element with the following indices. Note that during the course of layout analysis, goodoc elements may move around, so such hard links should be created only very late (or not at all -- Anchors would be more reliable target addresses).
     */
    DocId?: number | null;
    PageId?: number | null;
    ParagraphId?: number | null;
    RouteId?: number | null;
    SymbolId?: number | null;
    /**
     * If not defined, link points to the current doc
     */
    Url?: string | null;
    WordId?: number | null;
  }
  /**
   * An Ordinal message represents a single ordinal component of a page number. It encodes the printed or inferred numbering style (Roman, ASCII, etc.) and the ordinal value of the component. An optional set of variable is defined in order to express a sectioned ordinal. A sectioned ordinal may appear in certain page numbering styles, for example "12-1" where "12" identifies a chapter and "1" identifies the page within it. This case will be encoded with value 1 and section_value 12 both of type ASCII.
   */
  export interface Schema$GoodocOrdinal {
    implicit?: string | null;
    sectionStringValue?: string | null;
    sectionValue?: number | null;
    /**
     * The following vars describe the section component of an ordinal (if exists). They are used to express situation where a page number has a section component, usually denoating the chapter number. For example pages 5-14, 5-15 will both have the common section 5. (If exists). The semantcis of the section variables correspond to that of the primary part of the ordinal. (Described above).
     */
    sectionValueType?: string | null;
    /**
     * The string page value.
     */
    stringValue?: string | null;
    /**
     * The numeric page value.
     */
    value?: number | null;
    /**
     * The delta in which the value increases between pages.
     */
    valueDelta?: string | null;
    /**
     * A value type from the Type enum above.
     */
    valueType?: string | null;
  }
  /**
   * OrientationLabel groups the details about orientation and reading order.
   */
  export interface Schema$GoodocOrientationLabel {
    /**
     * After rotating so that the text orientation is upright, how many radians does one have to rotate the block anti-clockwise for it to be level? We guarantee: -Pi/4 <= deskew_angle <= Pi/4
     */
    deskewAngle?: number | null;
    /**
     * Whether a text line is mirrored (e.g. reflected in a shiny surface or seen through the opposite side of a storefront window). The intent is that this is a quality of the text line image. It needs to be reflected according to a vertical axis along the direction of upright characters to make it readable. This does not affect the shape of the bounding box. A mirrored line with top to bottom writing remains top to bottom. A mirrored horizontal line will flip left to right. However any child entities (symbols) will remain in the same order, and the writing direction imposed by the language (ltr or rtl) will remain the same.
     */
    mirrored?: boolean | null;
    orientation?: string | null;
    textlineOrder?: string | null;
    writingDirection?: string | null;
  }
  /**
   * This message specifies structure "overrides" to apply: it can be used to force certain kinds of GoodocToHTML renderings of elements.
   */
  export interface Schema$GoodocOverrides {
    /**
     * For text blocks only: do not allow this block to be turned into an image when rendering, even if your algorithms want to do so:
     */
    blockImagination?: string | null;
    /**
     * For graphic blocks, we often expand the block a bit for rendering, to compensate for bad image segmentation. do_not_expand_graphic_box forces this behavior to be turned off.
     */
    doNotExpandGraphicBox?: boolean | null;
    /**
     * For Pages only: explicitly specify whether or not this page should be rendered fully as an image
     */
    fullPageAsImage?: string | null;
    /**
     * For Pages only: explicitly specify whether or not all text on this page should be treated as "LINEATED"
     */
    fullPageLineated?: string | null;
    /**
     * For Pages only: explicitly specify whether or not this page should be skipped.
     */
    fullPageSkipped?: string | null;
    /**
     * This GRAPHIC block's image can be shown even when GoodocToHTMLOptions.suppress_photos_with_this is specified.
     */
    needNotSuppressPhoto?: boolean | null;
    /**
     * For blocks: explicitly specify whether or not this block should get a page-break before it.
     */
    pageBreakBefore?: string | null;
    style?: Schema$GoodocOverridesStyle[];
    /**
     * For Words only: replace the rendered HTML by this:
     */
    wordHtml?: string | null;
  }
  /**
   * Extra css styles to apply
   */
  export interface Schema$GoodocOverridesStyle {
    /**
     * css attribute name: "margin-left", for eg.
     */
    name?: string | null;
    /**
     * css attribute vale: "1em", for eg.
     */
    value?: string | null;
  }
  /**
   * Represents a paragraph of text in OCRed content.
   */
  export interface Schema$GoodocParagraph {
    alignment?: number | null;
    Box?: Schema$GoodocBoundingBox;
    droppedcap?: Schema$GoodocParagraphDroppedCap;
    FirstLineIndent?: number | null;
    Label?: Schema$GoodocLabel;
    LeftIndent?: number | null;
    LineSpacing?: number | null;
    /**
     * Which way is upright for this paragraph and what is the dominant reading order?
     */
    OrientationLabel?: Schema$GoodocOrientationLabel;
    RightIndent?: number | null;
    /**
     * If RotatedBox is set, Box must be set as well. See RotatedBoundingBox.
     */
    RotatedBox?: Schema$GoodocRotatedBoundingBox;
    route?: Schema$GoodocParagraphRoute[];
    SpaceAfter?: number | null;
    SpaceBefore?: number | null;
    /**
     * If we merge any paragraphs into this one (through the MergeParagraphWithNext() interface in goodoc-editing.h), then we append the properties of the merged paragraph here, for debugging and to avoid losing any info. Note that the SubsumedParagraphProperties Paragraphs do not contain Routes.
     */
    SubsumedParagraphProperties?: Schema$GoodocParagraph[];
    /**
     * Paragraph text recognition confidence. Range depends on the algorithm but should be consistent in a given volume. 0 is bad, 100 is good.
     */
    TextConfidence?: number | null;
    Width?: number | null;
  }
  /**
   * Information about the paragraph's dropped capital letter
   */
  export interface Schema$GoodocParagraphDroppedCap {
    Box?: Schema$GoodocBoundingBox;
    LettersCount?: number | null;
  }
  export interface Schema$GoodocParagraphRoute {
    /**
     * Route end point
     */
    EndPoint?: Schema$GoodocRoutePoint;
    /**
     * Route start point
     */
    StartPoint?: Schema$GoodocRoutePoint;
    /**
     * Route weight, i.e. route
     */
    Weight?: number | null;
    /**
     * The array of words on this route
     */
    Word?: Schema$GoodocWord[];
  }
  /**
   * Similar to goodoc.BoundingBox, but containing an angle of rotation, thus able to represent non-axis-aligned boxes. RotatedBoundingBox can be used in combination with BoundingBox to better represent non-axis-aligned page structural elements. In such case, two bounding boxes can be used per element. A RotatedBoundingBox that is rotated to tightly encompass the element; embedded (as tightly as possible) inside an axis-aligned BoundingBox. Note that there is some amount of ambiguity regarding what angle and vertex to use. Consider a square with axis-aligned diagonals: B / \ A C \ / D This can either be represented as a -45 degree rotation around A, a 45 degree rotation around B, a 135 degree rotation around C, or a -135 degree rotation around D. Which one you use depends on your use case, but one recommendation is to use the vertex that would be top left if the reader was reading it in the 'natural' orientation.
   */
  export interface Schema$GoodocRotatedBoundingBox {
    /**
     * Angle of rotation of the original non-rotated box around the top left corner of the original non-rotated box, in clockwise degrees from the horizontal.
     */
    Angle?: number | null;
    Height?: number | null;
    /**
     * Coordinates and sizes are expressed in pixels, where the top-left pixel is (0, 0). The coordinates refer to the corner of the top-left vertex of the unrotated version of the box.
     */
    Left?: number | null;
    Top?: number | null;
    Width?: number | null;
  }
  export interface Schema$GoodocRoutePoint {
    /**
     * The sequential route number, starts at 0
     */
    RouteIndex?: number | null;
    /**
     * The sequential word number, starts at 0
     */
    WordIndex?: number | null;
  }
  /**
   * Label identifying a logical part of the page content. This applies mostly at Block level or Paragraph level (but can apply to Words or to arbitrary spans if needed).
   */
  export interface Schema$GoodocSemanticLabel {
    /**
     * Alternate text for a sequence of the Goodoc, just for the element containing this label, or for a sequence starting from this element to the EndOfSpanningLabel. Typically this is inserted by automatic or manual OCR correction. We use text instead of editing the Goodoc directly since we dont usually have accurate symbol level bboxes for the alternate text. Also the original values from OCR are preserved. It is upto the application to do anything more intelligent like mapping words and finding potential symbol/word bboxes.
     */
    AlternateText?: string | null;
    appearance?: number | null;
    /**
     * Page elements can be given Attributes refining meaning/role. We keep this flexible by using strings instead of pre-determined enum values. But it is useful to list all such Attributes in use in ocr/goodoc/goodoc-semantics-attributes.h
     */
    Attribute?: string[] | null;
    /**
     * Blocks that are at the beginning of chapters have this set:
     */
    ChapterStart?: boolean | null;
    CleanupAnnotation?: number[] | null;
    columndetails?: Schema$GoodocSemanticLabelColumnDetails;
    contentlink?: Schema$GoodocSemanticLabelContentLink;
    ContinuesFromPreviousPage?: boolean | null;
    /**
     * When ContinuesFromPreviousPage=true, this bit can be set to note that the word fragment on the previous page ends in a hyphen.
     */
    ContinuesFromPreviousPageHyphenated?: boolean | null;
    /**
     * Paragraphs that span across pages can be identified with the following flags. Note that flows just connect Blocks across pages. These continuation flags imply something more specific -- the case of a single logical paragraph split over pages. Only the last Paragraph in the last Block within a given FlowThread() on a page can have ContinuesOnNextPage set. Similarly, only the first Paragraph in the first Block with a given FlowThread() on a page may have ContinuesFromPreviousPage set.
     */
    ContinuesOnNextPage?: boolean | null;
    editcorrectioncandidate?: Schema$GoodocSemanticLabelEditCorrectionCandidate[];
    /**
     * Normally, a SemanticLabel applies exactly to the goodoc element that it is contained in (usually Block or Paragraph, sometimes Word). Occasionally, we need a SemanticLabel to span across the boundary or end before the boundary. For example, a URL may just be a few words within a Paragraph. In such cases, the SemanticLabel is added to the first element of the span and contains this LogicalEntity pointing to the last element of the span:
     */
    EndOfSpanningLabel?: Schema$GoodocLogicalEntity;
    /**
     * Message set for experimental algorithm data. Use case: We keep a set of features that was computed for the unsupervised caption extraction and store it here. Agora question producer will consume this message set to be embedded in a question. The experimental feature set can then be used later to pair up with ground truth labels for designing a supervised algorithm. Currently holding: o ocean/analysis/content/caption_data.proto's TextualElement
     */
    ExperimentalData?: Schema$Proto2BridgeMessageSet;
    /**
     * Flow identifies a single sequential unit of text (or other content). It is only set on Blocks -- a flow identifies a sequence of Blocks. The default, main flow is just the empty string. The "FlowThread" of a block is the flow (if non-empty), suffixed with the block appearance. This is computed by GoodocUtils::FlowThread(). Paragraphs may be split over blocks in the same FlowThread, across pages. The following table shows how FlowThread gets computed: ## Flow Appearance FlowThread (empty) UNSPECIFIED "UNSPECIFIED" foo BODY "foo:BODY" Please use lower-case strings for flows (such as article-33-box). One useful way to think of flows is this: A logical unit of interest in a a Document (for example, an article) would be identified by a starting block, an ending block, and a list of flows of interest within the [start, end) span. message Article { (page#, block#): article_start; (page#, block#): article_end; repeated string flows; \} The reading order of blocks, paragraphs/etc within this article would be the same order as present in the goodoc itself. Some applications (such as rendering) may want to process the article by running over all the flows together, others (such as indexing) may want to deal with the FlowThreads one after the other.
     */
    Flow?: string | null;
    /**
     * This field can be used to record the steps by which AlternateText for a sequence of the Goodoc is generated.
     */
    ModificationRecord?: string | null;
    /**
     * Structure overrides: typically manual corrections to goodoc renderings.
     */
    overrides?: Schema$GoodocOverrides;
    /**
     * If Appearence is PAGE_NUMBER:
     */
    PageNumberOrdinal?: Schema$GoodocOrdinal;
    snippetfilter?: Schema$GoodocSemanticLabelSnippetFilter[];
    tablecelldetails?: Schema$GoodocSemanticLabelTableCellDetails;
    tabledetails?: Schema$GoodocSemanticLabelTableDetails;
  }
  /**
   * If Appearance is COLUMN:
   */
  export interface Schema$GoodocSemanticLabelColumnDetails {
    Column?: number | null;
    Columns?: number | null;
  }
  /**
   * If the label is for something that links to another piece of content (in this volume, outside, a url, a citation, etc.).
   */
  export interface Schema$GoodocSemanticLabelContentLink {
    citationtarget?: Schema$GoodocSemanticLabelContentLinkCitationTarget;
    involumetarget?: Schema$GoodocSemanticLabelContentLinkInVolumeTarget;
    /**
     * For URL labels, we note the url here directly (it's also available by grabbing all text symbols within the labeled span). SCHOLARLY_CITATION labels or even CAPTION labels may occasionally contain URLs.
     */
    UrlTarget?: string | null;
  }
  /**
   * For SCHOLARLY_CITATION labels:
   */
  export interface Schema$GoodocSemanticLabelContentLinkCitationTarget {
    /**
     * separated by semicolons
     */
    Authors?: string | null;
    BibKey?: string | null;
    Confidence?: number | null;
    Title?: string | null;
    Year?: number | null;
  }
  /**
   * For CAPTION or FOOTNOTE_POINTER or TOC_ENTRY or INDEX_ENTRY or CONTINUATION labels:
   */
  export interface Schema$GoodocSemanticLabelContentLinkInVolumeTarget {
    Confidence?: number | null;
    /**
     * The CAPTION label typically targets the previous or the next Block. The FOOTNOTE_POINTER label typically targets a paragraph in a FOOTNOTE Block. TOC_ENTRY and INDEX_ENTRY labels are links that point to a different page within the volume. CONTINUATION labels also are links that point to a different page within the volume, or maybe even a particular block or paragraph.
     */
    LogicalEntity?: Schema$GoodocLogicalEntity;
  }
  /**
   * If there is more than one edit correction candidate, store all the candidates here. This helps a manual correction utility fire the right kind of question with the relevant options.
   */
  export interface Schema$GoodocSemanticLabelEditCorrectionCandidate {
    EditedWord?: string | null;
    Probability?: number | null;
  }
  /**
   * Recording the output of the snippet filter. We run through a series of snippet filters and store all the conditions that this article passed. A condition is denoted by the "badword_fraction_allowed" in a running window of size - "window_size". If ARTICLE_SNIPPET_NOT_CLEAN annotation is set, this group has 0 items. It can be a part of article logicalentity, but keeping it here for consistency and coherence as SemanticLabel holds all other article metadata.
   */
  export interface Schema$GoodocSemanticLabelSnippetFilter {
    badwordFraction?: number | null;
    windowSize?: number | null;
  }
  /**
   * If Appearance is TABLE_CELL:
   */
  export interface Schema$GoodocSemanticLabelTableCellDetails {
    Column?: number | null;
    ColumnSpan?: number | null;
    /**
     * Row and Column are 0-based
     */
    Row?: number | null;
    RowSpan?: number | null;
  }
  /**
   * If Appearance is TABLE:
   */
  export interface Schema$GoodocSemanticLabelTableDetails {
    Columns?: number | null;
    Rows?: number | null;
  }
  /**
   * Goodoc stats for a range of elements, such as one page or a whole book. These stats can be computed using the SummaryStatsCollector class. Some range stats are pre-computed and stored in goodocs/volumes (eg., Page.stats below, and Ocean's CA_VolumeResult.goodoc_stats).
   */
  export interface Schema$GoodocSummaryStats {
    /**
     * This flag is set if the histogram above has been derived by estimating font sizes from CharLabel.CharacterHeight; that happens if the FontSize field is constant, as has happened with Abbyy 9.
     */
    estimatedFontSizes?: boolean | null;
    /**
     * Symbol counts (and other attributes) for each distinct CharLabel.FontId and FontSize; histogram is in decreasing order of symbol count
     */
    fontSizeHistogram?: Schema$GoodocFontSizeStats[];
    meanSymbolsPerBlock?: number | null;
    meanSymbolsPerLine?: number | null;
    meanSymbolsPerParagraph?: number | null;
    meanSymbolsPerWord?: number | null;
    meanWordsPerBlock?: number | null;
    meanWordsPerLine?: number | null;
    meanWordsPerParagraph?: number | null;
    /**
     * bottom to next top in flow on page
     */
    medianBlockSpace?: number | null;
    /**
     * 0,2,4..
     */
    medianEvenPrintedBox?: Schema$GoodocBoundingBox;
    medianFullEvenPrintedBox?: Schema$GoodocBoundingBox;
    medianFullOddPrintedBox?: Schema$GoodocBoundingBox;
    /**
     * Each median_full*_printed_box includes page header/footer but still excludes all graphic blocks
     */
    medianFullPrintedBox?: Schema$GoodocBoundingBox;
    medianHeight?: number | null;
    medianHorizontalDpi?: number | null;
    /**
     * top to bottom
     */
    medianLineHeight?: number | null;
    /**
     * bottom to next top in para
     */
    medianLineSpace?: number | null;
    /**
     * top to next top in para
     */
    medianLineSpan?: number | null;
    /**
     * 1,3,5..
     */
    medianOddPrintedBox?: Schema$GoodocBoundingBox;
    /**
     * leading space on first line
     */
    medianParagraphIndent?: number | null;
    /**
     * bottom to next top in block
     */
    medianParagraphSpace?: number | null;
    /**
     * Each median*_printed_box excludes page header/footer and all graphic blocks
     */
    medianPrintedBox?: Schema$GoodocBoundingBox;
    medianSymbolsPerBlock?: number | null;
    medianSymbolsPerLine?: number | null;
    medianSymbolsPerParagraph?: number | null;
    medianSymbolsPerWord?: number | null;
    medianVerticalDpi?: number | null;
    medianWidth?: number | null;
    medianWordsPerBlock?: number | null;
    medianWordsPerLine?: number | null;
    medianWordsPerParagraph?: number | null;
    /**
     * ------ Block stats Median symbols and words omit junk, header and footer blocks; they are intended to be a measure of the typical "content" block. There can still be substantial differences between means and medians; however, block values will generally exceed paragraph values (not the case when headers and footers are included).
     */
    numBlocks?: number | null;
    /**
     * blocks that have a successor block within their flow on their page
     */
    numBlockSpaces?: number | null;
    /**
     * ------ Line stats "top" corresponds to the highest ascender and "bottom" to the lowest descender.
     */
    numLines?: number | null;
    /**
     * Lines (out of num_lines) that have a successor line within their para
     */
    numLineSpaces?: number | null;
    numNonGraphicBlocks?: number | null;
    /**
     * ------ Page stats.
     */
    numPages?: number | null;
    /**
     * ------ Paragraph stats Median symbols and words omit junk, header and footer blocks; they are intended to be a measure of the typical "content" paragraph. There can still be substantial differences between means and medians, particularly if a table is present (every cell is a paragraph).
     */
    numParagraphs?: number | null;
    /**
     * paras that have a successor para within their block
     */
    numParagraphSpaces?: number | null;
    /**
     * ------ Symbol stats
     */
    numSymbols?: number | null;
    /**
     * ------ Word stats
     */
    numWords?: number | null;
  }
  /**
   * A single symbol representation
   */
  export interface Schema$GoodocSymbol {
    Box?: Schema$GoodocBoundingBox;
    /**
     * The unicode character code in UTF-32
     */
    Code?: number | null;
    Label?: Schema$GoodocLabel;
    /**
     * If RotatedBox is set, Box must be set as well. See RotatedBoundingBox.
     */
    RotatedBox?: Schema$GoodocRotatedBoundingBox;
    symbolvariant?: Schema$GoodocSymbolSymbolVariant[];
  }
  export interface Schema$GoodocSymbolSymbolVariant {
    Code?: number | null;
    Confidence?: number | null;
  }
  /**
   * A word representation
   */
  export interface Schema$GoodocWord {
    alternates?: Schema$GoodocWordAlternates;
    /**
     * The baseline's y-axis offset from the bottom of the word's bounding box, given in pixels. (A value of 2, for instance, indicates the baseline is 2px above the bottom of the box.)
     */
    Baseline?: number | null;
    Box?: Schema$GoodocBoundingBox;
    /**
     * The capline is the y-axis offset from the top of the word bounding box. A positive value n indicates that capline is n-pixels above the top of this word.
     */
    Capline?: number | null;
    /**
     * For space efficiency, we sometimes skip the detailed per-symbol bounding boxes in Symbol.Box, and use this coarser representation instead, where we just store Symbol boundaries within the Word box. Most client code should not have to worry directly about this, it should be handled in the deepest layers of writing/reading goodocs (for example, see Compress() and Uncompress() in ocean/goodoc/goovols-bigtable-volume.h). Note(viresh): I experimented with this compression, and here are some numbers for reference. If the zlib-compressed page goodoc string size was 100 to start with, then this compaction makes it 65. As a possible future relaxation to consider: if we add in, for each symbol, a "top" and "bottom" box offset then the size would be 75 (that's with "repeated int32 top/bottom_offset" fields inside BoxPartitions, instead of inside each symbol).
     */
    CompactSymbolBoxes?: Schema$GoodocBoxPartitions;
    /**
     * Word recognition confidence. Range depends upon OCR Engine.
     */
    Confidence?: number | null;
    /**
     * word. The meaning and range depends on the OCR engine or subsequent processing. Specifies whether the word was found
     */
    IsFromDictionary?: boolean | null;
    /**
     * a number True if word represents
     */
    IsIdentifier?: boolean | null;
    /**
     * True if the word is the last word in any sub-paragraph unit that functions at the same level of granularity as a sentence. Examples: "She hit the ball." (regular sentence) "Dewey defeats Truman" (heading) "The more, the merrier." (no verb) Note: not currently used. Code to set this was introduced in CL 7038338 and removed in OCL=10678722.
     */
    IsLastInSentence?: boolean | null;
    /**
     * in the dictionary True if the word represents
     */
    IsNumeric?: boolean | null;
    Label?: Schema$GoodocLabel;
    /**
     * Penalty for discordance of characters in a
     */
    Penalty?: number | null;
    /**
     * If RotatedBox is set, Box must be set as well. See RotatedBoundingBox.
     */
    RotatedBox?: Schema$GoodocRotatedBoundingBox;
    /**
     * Word characters, the text may
     */
    Symbol?: Schema$GoodocSymbol[];
    /**
     * As a shortcut, the content API provides the text of words instead of individual symbols (NOTE: this is experimental). This is UTF8. And the main font for the word is stored in Label.CharLabel.
     */
    text?: string | null;
    /**
     * Writing direction for this word.
     */
    writingDirection?: string | null;
  }
  /**
   * Alternate OCR words for Ptolemy OCR Correction. This is the output of the Ptolemy error estimator. See http://go/Ptolemy.
   */
  export interface Schema$GoodocWordAlternates {
    alternate?: Schema$GoodocWordAlternatesAlternate[];
    /**
     * The probability that the main OCR engine (Abbyy) string is incorrect; range is 0 (definitely correct) to 100 (definitely incorrect).
     */
    ErrorProbability?: number | null;
  }
  /**
   * An alternate word provided by another OCR engine, used for OCR Correction. This iteration only supports simple substitution errors (exhanging one word for another), but with minor modifications (e.g. adding a word count for each alternate), it could support repairing word segmentation and text detection errors.
   */
  export interface Schema$GoodocWordAlternatesAlternate {
    /**
     * See Document.Header
     */
    OcrEngineId?: string | null;
    /**
     * See Document.Header
     */
    OcrEngineVersion?: string | null;
    /**
     * In order to compile, this recursive message needs to be optional, even though it's within an optional group.
     */
    Word?: Schema$GoodocWord;
  }
  /**
   * Describes the billing configuration for a new tenant project.
   */
  export interface Schema$GoogleApiServiceconsumermanagementV1BillingConfig {
    /**
     * Name of the billing account. For example `billingAccounts/012345-567890-ABCDEF`.
     */
    billingAccount?: string | null;
  }
  /**
   * Translates to IAM Policy bindings (without auditing at this level)
   */
  export interface Schema$GoogleApiServiceconsumermanagementV1PolicyBinding {
    /**
     * Uses the same format as in IAM policy. `member` must include both a prefix and ID. For example, `user:{emailId\}`, `serviceAccount:{emailId\}`, `group:{emailId\}`.
     */
    members?: string[] | null;
    /**
     * Role. (https://cloud.google.com/iam/docs/understanding-roles) For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role?: string | null;
  }
  /**
   * Specifies the desired format for the server to use when it returns `audio_out` messages.
   */
  export interface Schema$GoogleAssistantAccessoryV1AudioOutConfig {
    /**
     * Current audio mode on the device while issuing the query.
     */
    audioMode?: string | null;
    /**
     * Current audio routing on the device while issuing the query.
     */
    audioRoutingMode?: string | null;
    /**
     * *Required* The encoding of audio data to be returned in all `audio_out` messages.
     */
    encoding?: string | null;
    /**
     * *Optional* Specifies preferred encoding bitrate (bits-per-second). Currently this is only implemented for OGG_OPUS for bitrates of 12000, 16000, 24000, 32000. If not specified, OGG_OPUS defaults to 32000.
     */
    preferredBitrateBps?: number | null;
  }
  /**
   * *Required* Fields that identify the device to the Assistant. See also: * [Register a Device - REST API](https: //developers.google.com/assistant/sdk/re // ference/device-registration/register-device-manual) * [Device Model and Instance Schemas](https: //developers.google.com/assistant/sdk/re // ference/device-registration/model-and-instance-schemas) * [Device Proto](https: //developers.google.com/assistant/sdk/re // ference/rpc/google.assistant.devices.v1#device)
   */
  export interface Schema$GoogleAssistantAccessoryV1DeviceConfig {
    /**
     * Device model capabilities from client to override capabilities in the primary device model.
     */
    deviceModelCapabilitiesOverride?: Schema$GoogleAssistantEmbeddedV1DeviceModelCapabilitiesOverride;
    /**
     * *Optional* An encrypted heterodyne_experiment_token containing the list of experiment_ids (go/ph-server-tokens).
     */
    heterodyneToken?: string | null;
    /**
     * *Required* Identifier for the device which sent the request.
     */
    surfaceIdentity?: Schema$GoogleAssistantEmbeddedV1SurfaceIdentity;
  }
  /**
   * Information about the state of the device. This contains any state that Assistant may need to know about in order to fulfill requests, for example which timers and alarms are set. Next ID: 11
   */
  export interface Schema$GoogleAssistantAccessoryV1DeviceState {
    /**
     * *Optional* Information about on-device alarms. For devices that support alarms, all on-device alarms must be sent up with the DeviceState in order for Assistant Server to be able to perform operations on them.
     */
    alarmState?: Schema$GoogleAssistantEmbeddedV1Alarms;
    /**
     * Other context params to be sent to Assistant. This is a assistant.embedded.v1.ContextParams message in serialized binary proto format.
     */
    contextParams?: string | null;
    /**
     * A timestamp of the current device time when the request was made. This field is required if your device supports alarms or timers. This ensures that requests are fulfilled relative to the current device time and regardless of any clock skew between the client and the server.
     */
    deviceTime?: string | null;
    /**
     * The time zone where the device is currently located. This helps the Assistant answer time-related queries relative to the device's time zone. Generally speaking, mobile devices that support alarms or timers should supply device_time_zone. This field is required if your device supports alarms or timers and the device's location cannot reliably be determined. (See the comment above google.assistant.embedded.v1.DeviceLocation for a description of how the device's location is determined.) If the time zone cannot be determined, some queries for creating or modifying timers or alarms may fail with a generic error such as, "Sorry, I don't know how to help with that."
     */
    deviceTimeZone?: Schema$GoogleTypeTimeZone;
    /**
     * Indicate whether do not disturb mode is turned on.
     */
    doNotDisturb?: boolean | null;
    /**
     * Information about on-device fitness activities. For devices that support fitness activities, all on-device fitness activities must be sent up with the DeviceState in order for Assistant Server to be able to perform operations on them.
     */
    fitnessActivitiesState?: Schema$GoogleAssistantEmbeddedV1FitnessActivities;
    /**
     * *Optional* Information about on-device timers. For devices that support timers, all on-device timers must be sent up with the DeviceState in order for Assistant Server to be able to perform operations on them.
     */
    timerState?: Schema$GoogleAssistantEmbeddedV1Timers;
    /**
     * This indicates which specific settings are currently unavailable for modification, despite being listed as a supported setting. Assistant can use this field to trigger unavailability messages, rather than claiming that a setting is entirely unsupported on device.
     */
    unavailableSettings?: string[] | null;
  }
  /**
   * Configuration for the response. Next Id: 11
   */
  export interface Schema$GoogleAssistantAccessoryV1ResponseConfig {
    /**
     * Specifies the current audio mode on the device.
     */
    audioOutConfig?: Schema$GoogleAssistantAccessoryV1AudioOutConfig;
    /**
     * Configuration related to a specific device.
     */
    deviceConfig?: Schema$GoogleAssistantAccessoryV1DeviceConfig;
    /**
     * The client interaction to be sent to Assistant. This is a assistant.embedded.v1.DeviceInteraction message in serialized binary proto format.
     */
    deviceInteraction?: string | null;
    /**
     * Device state to pass to the Assistant server to use in calculating the response.
     */
    deviceState?: Schema$GoogleAssistantAccessoryV1DeviceState;
    /**
     * Specifies the initial bytes of TTS audio to send.
     */
    initialAudioBytes?: number | null;
    /**
     * If true, the server will treat the request as a new conversation and not use state from the prior request. Set this field to true when the conversation should be restarted, such as after a device reboot, or after a significant lapse of time since the prior query.
     */
    isNewConversation?: boolean | null;
    /**
     * Specifies the desired audio sample rate of the output TTS stream in Hz.
     */
    outputSampleRateHz?: number | null;
    /**
     * Specifies the requested response type.
     */
    responseType?: string | null;
    /**
     * Specifies the desired format to use when server returns a visual screen response.
     */
    screenOutConfig?: Schema$GoogleAssistantAccessoryV1ScreenOutConfig;
  }
  /**
   * Specifies the desired format for the server to use when it returns `screen_out` response.
   */
  export interface Schema$GoogleAssistantAccessoryV1ScreenOutConfig {
    /**
     * Device dimensions.
     */
    dimensions?: Schema$GoogleAssistantAccessoryV1ScreenOutConfigDimensions;
    /**
     * The scale factor used to convert Scalable Pixel (SP) units to Density-independent Pixel (DP) units (DP = SP * scale factor). Fonts are measured in units of SP, and on some platforms such as Android the SP to DP scale factor can be affected by the font size a user selects in accessibility settings.
     */
    fontScaleFactor?: number | null;
  }
  /**
   * This contains physical and logical characteristics about the device (e.g. screen size and DPI, etc).
   */
  export interface Schema$GoogleAssistantAccessoryV1ScreenOutConfigDimensions {
    /**
     * Dots (pixels) per inch of the screen.
     */
    screenDpi?: number | null;
    /**
     * Height of the device's screen in pixels. If 0 or not specified, it's assumed to be the same as screen_width_px. For a square or round screen, it's recommended to leave this field empty as a bandwidth optimization.
     */
    screenHeightPx?: number | null;
    /**
     * The shape of the device's screen
     */
    screenShape?: string | null;
    /**
     * Width of the device's screen in pixels.
     */
    screenWidthPx?: number | null;
  }
  /**
   * Alarms are clocks that ring at a specified time on one or more days. The client schedules a time to ring based on the date/time pattern. When it rings, it may be rescheduled off the original time by snoozing or it may be replaced by the next occurrence.
   */
  export interface Schema$GoogleAssistantEmbeddedV1Alarm {
    /**
     * A string key used as an identifier to this alarm. This key needs to be unique amongst all alarms on the device. The client can choose a mechanism of its choice to ensure this. If the server suggests an alarm_id, the client can either use the suggestion or create a new unique alarm_id of its choosing.
     */
    alarmId?: string | null;
    /**
     * The entity that created this alarm. Note this may be different from the device that reported this alarm. In particular, this field is meant for remote alarms which have been synced to the current device by the Clock app. Synced alarms exist in each device's Clock app and can be managed by either device; this field indicates their origin.
     */
    alarmSource?: string | null;
    /**
     * For single alarms: the one date the alarm should next be scheduled for.
     */
    datePattern?: Schema$GoogleTypeDate;
    /**
     * A user-provided name for this alarm.
     */
    label?: string | null;
    /**
     * For recurring alarms: a description of the dates when the alarm should recur.
     */
    recurrencePattern?: Schema$GoogleAssistantEmbeddedV1AlarmRecurrence;
    /**
     * When SCHEDULED or SNOOZED, the absolute time the alarm will fire next. When SNOOZED, this time includes the additional time added by snoozing the alarm. When FIRING, the absolute time the alarm had been scheduled to fire. When DISABLED, this field is undefined and should be ignored.
     */
    scheduledTime?: string | null;
    /**
     * Describes the part of the lifecycle that an alarm is in.
     */
    status?: string | null;
    /**
     * The time of day the alarm should be scheduled for. This value does not change when an alarm enters the SNOOZED state; instead the scheduled_time field should be adjusted to the new alarm time.
     */
    timePattern?: Schema$GoogleTypeTimeOfDay;
  }
  /**
   * A description of the dates when an alarm should recur.
   */
  export interface Schema$GoogleAssistantEmbeddedV1AlarmRecurrence {
    /**
     * Specifies a weekly or daily recurrence. Constraint: The date falls on one of these days of the week, in 0...6 (Sunday...Saturday). Should not be empty.
     */
    dayOfWeek?: string[] | null;
  }
  /**
   * Contains information about on-device alarms for devices that support alarms.
   */
  export interface Schema$GoogleAssistantEmbeddedV1Alarms {
    /**
     * Information about all on-device alarms.
     */
    alarms?: Schema$GoogleAssistantEmbeddedV1Alarm[];
    /**
     * The amount of time for which alarms should be snoozed. If not specified, the productivity vertical applies a default snooze duration, which may be seen here: http://google3/assistant/verticals/productivity/utils/alarm_utils.cc;l=2734;rcl=415933085
     */
    snoozeDuration?: string | null;
    /**
     * Indicates if an error occurred while fetching alarm state. If this value is missing, it can be assumed that the state fetch was successful.
     */
    stateFetchError?: string | null;
  }
  /**
   * Device model capabilities override from client.
   */
  export interface Schema$GoogleAssistantEmbeddedV1DeviceModelCapabilitiesOverride {
    /**
     * Device model capabilities from client.
     */
    deviceModelCapabilities?: string | null;
    /**
     * If present, overrides only fields specified in the mask. When doing so, selected message and repeated fields will be replaced rather than merged. Performs a regular proto MergeFrom if no mask is specified.
     */
    updateMask?: string | null;
  }
  /**
   * Contains information about on-device fitness activities for devices that support fitness.
   */
  export interface Schema$GoogleAssistantEmbeddedV1FitnessActivities {
    /**
     * Information about all on-device activities.
     */
    fitnessActivities?: Schema$GoogleAssistantEmbeddedV1FitnessActivity[];
  }
  /**
   * Describes a particular fitness activity, its current state, and other data fields associated with that activity (e.g. elapsed time). LINT.IfChange
   */
  export interface Schema$GoogleAssistantEmbeddedV1FitnessActivity {
    /**
     * Required A string key used as an identifier for this activity. This key needs to be unique amongst all activities on the device. The client can choose a mechanism of its choice to ensure this. If the server suggests an activity_id, the client can either use the suggestion or create a new unique activity_id of its choosing.
     */
    activityId?: string | null;
    /**
     * DEPRECATED: The most recent time this activity was switched to the ACTIVE state.
     */
    mostRecentStartTime?: string | null;
    /**
     * DEPRECATED: The total amount of time this activity has spent in the ACTIVE state until the most recent start time. The total time spent active may be computed by summing (now - most_recent_start_time) with previously_accumulated_duration.
     */
    previouslyAccumulatedDuration?: string | null;
    /**
     * The current state of this activity.
     */
    state?: string | null;
    /**
     * The type of activity being done.
     */
    type?: string | null;
  }
  /**
   * Contains fields to identify the device which sent the request.
   */
  export interface Schema$GoogleAssistantEmbeddedV1SurfaceIdentity {
    /**
     * Surface type that the device identifies as.
     */
    surfaceType?: string | null;
    /**
     * * Fully formed user agent suffix string.
     */
    userAgentSuffix?: string | null;
  }
  /**
   * Conceptually, timers are clocks that count down from an initial duration and ring when they reach 0. In practice, as a timer is running, it holds a stable expiration time and computes the remaining duration using the current time. When a timer is paused, it holds a stable remaining duration.
   */
  export interface Schema$GoogleAssistantEmbeddedV1Timer {
    /**
     * The time the timer is scheduled to expire. google.protobuf.Timestamp is a Unix epoch time with a granularity of 1 nanosecond.
     */
    expireTime?: string | null;
    /**
     * A user-provided name for this timer.
     */
    label?: string | null;
    /**
     * The duration of the timer when it was started. For the ADD_TIME action, this field contains the amount of time to add to the timer with the given timer_id.
     */
    originalDuration?: string | null;
    /**
     * The remaining duration for the timer.
     */
    remainingDuration?: string | null;
    /**
     * Describes the part of the lifecycle a timer is in.
     */
    status?: string | null;
    /**
     * A string key used as an identifier to this timer. This key needs to be unique amongst all timers on the device. The client can choose a mechanism of its choice to ensure this. If the server suggests a timer_id, the client can either use the suggestion or create a new unique timer_id of its choosing.
     */
    timerId?: string | null;
  }
  /**
   * Contains information about on-device timers for devices that support timers.
   */
  export interface Schema$GoogleAssistantEmbeddedV1Timers {
    /**
     * Indicates if an error occurred while fetching timer state. If this value is missing, it can be assumed that the state fetch was successful.
     */
    stateFetchError?: string | null;
    /**
     * Information about all on-device timers.
     */
    timers?: Schema$GoogleAssistantEmbeddedV1Timer[];
  }
  /**
   * Represents the action responsible for access control list management operations.
   */
  export interface Schema$GoogleCloudContentwarehouseV1AccessControlAction {
    /**
     * Identifies the type of operation.
     */
    operationType?: string | null;
    /**
     * Represents the new policy from which bindings are added, removed or replaced based on the type of the operation. the policy is limited to a few 10s of KB.
     */
    policy?: Schema$GoogleIamV1Policy;
  }
  /**
   * Represents the action triggered by Rule Engine when the rule is true.
   */
  export interface Schema$GoogleCloudContentwarehouseV1Action {
    /**
     * Action triggering access control operations.
     */
    accessControl?: Schema$GoogleCloudContentwarehouseV1AccessControlAction;
    /**
     * ID of the action. Managed internally.
     */
    actionId?: string | null;
    /**
     * Action triggering create document link operation.
     */
    addToFolder?: Schema$GoogleCloudContentwarehouseV1AddToFolderAction;
    /**
     * Action triggering data update operations.
     */
    dataUpdate?: Schema$GoogleCloudContentwarehouseV1DataUpdateAction;
    /**
     * Action triggering data validation operations.
     */
    dataValidation?: Schema$GoogleCloudContentwarehouseV1DataValidationAction;
    /**
     * Action deleting the document.
     */
    deleteDocumentAction?: Schema$GoogleCloudContentwarehouseV1DeleteDocumentAction;
    /**
     * Action publish to Pub/Sub operation.
     */
    publishToPubSub?: Schema$GoogleCloudContentwarehouseV1PublishAction;
    /**
     * Action removing a document from a folder.
     */
    removeFromFolderAction?: Schema$GoogleCloudContentwarehouseV1RemoveFromFolderAction;
  }
  /**
   * Represents the output of the Action Executor.
   */
  export interface Schema$GoogleCloudContentwarehouseV1ActionExecutorOutput {
    /**
     * List of rule and corresponding actions result.
     */
    ruleActionsPairs?: Schema$GoogleCloudContentwarehouseV1RuleActionsPair[];
  }
  /**
   * Represents the result of executing an action.
   */
  export interface Schema$GoogleCloudContentwarehouseV1ActionOutput {
    /**
     * ID of the action.
     */
    actionId?: string | null;
    /**
     * State of an action.
     */
    actionState?: string | null;
    /**
     * Action execution output message.
     */
    outputMessage?: string | null;
  }
  /**
   * Represents the action responsible for adding document under a folder.
   */
  export interface Schema$GoogleCloudContentwarehouseV1AddToFolderAction {
    /**
     * Names of the folder under which new document is to be added. Format: projects/{project_number\}/locations/{location\}/documents/{document_id\}.
     */
    folders?: string[] | null;
  }
  /**
   * Metadata object for CreateDocument request (currently empty).
   */
  export interface Schema$GoogleCloudContentwarehouseV1beta1CreateDocumentMetadata {}
  /**
   * Response message for projectService.InitializeProject
   */
  export interface Schema$GoogleCloudContentwarehouseV1beta1InitializeProjectResponse {
    /**
     * The message of the project initialization process.
     */
    message?: string | null;
    /**
     * The state of the project initialization process.
     */
    state?: string | null;
  }
  /**
   * Metadata object for UpdateDocument request (currently empty).
   */
  export interface Schema$GoogleCloudContentwarehouseV1beta1UpdateDocumentMetadata {}
  /**
   * Request Option for processing Cloud AI Document in CW Document.
   */
  export interface Schema$GoogleCloudContentwarehouseV1CloudAIDocumentOption {
    /**
     * If set, only selected entities will be converted to properties.
     */
    customizedEntitiesPropertiesConversions?: {[key: string]: string} | null;
    /**
     * Whether to convert all the entities to properties.
     */
    enableEntitiesConversions?: boolean | null;
  }
  /**
   * Request message for DocumentLinkService.CreateDocumentLink.
   */
  export interface Schema$GoogleCloudContentwarehouseV1CreateDocumentLinkRequest {
    /**
     * Required. Document links associated with the source documents (source_document_id).
     */
    documentLink?: Schema$GoogleCloudContentwarehouseV1DocumentLink;
    /**
     * The meta information collected about the document creator, used to enforce access control for the service.
     */
    requestMetadata?: Schema$GoogleCloudContentwarehouseV1RequestMetadata;
  }
  /**
   * Metadata object for CreateDocument request (currently empty).
   */
  export interface Schema$GoogleCloudContentwarehouseV1CreateDocumentMetadata {}
  /**
   * Request message for DocumentService.CreateDocument.
   */
  export interface Schema$GoogleCloudContentwarehouseV1CreateDocumentRequest {
    /**
     * Request Option for processing Cloud AI Document in Document Warehouse. This field offers limited support for mapping entities from Cloud AI Document to Warehouse Document. Please consult with product team before using this field and other available options.
     */
    cloudAiDocumentOption?: Schema$GoogleCloudContentwarehouseV1CloudAIDocumentOption;
    /**
     * Field mask for creating Document fields. If mask path is empty, it means all fields are masked. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
     */
    createMask?: string | null;
    /**
     * Required. The document to create.
     */
    document?: Schema$GoogleCloudContentwarehouseV1Document;
    /**
     * Default document policy during creation. This refers to an Identity and Access (IAM) policy, which specifies access controls for the Document. Conditions defined in the policy will be ignored.
     */
    policy?: Schema$GoogleIamV1Policy;
    /**
     * The meta information collected about the end user, used to enforce access control for the service.
     */
    requestMetadata?: Schema$GoogleCloudContentwarehouseV1RequestMetadata;
  }
  /**
   * Response message for DocumentService.CreateDocument.
   */
  export interface Schema$GoogleCloudContentwarehouseV1CreateDocumentResponse {
    /**
     * Document created after executing create request.
     */
    document?: Schema$GoogleCloudContentwarehouseV1Document;
    /**
     * post-processing LROs
     */
    longRunningOperations?: Schema$GoogleLongrunningOperation[];
    /**
     * Additional information for the API invocation, such as the request tracking id.
     */
    metadata?: Schema$GoogleCloudContentwarehouseV1ResponseMetadata;
    /**
     * Output from Rule Engine recording the rule evaluator and action executor's output. Refer format in: google/cloud/contentwarehouse/v1/rule_engine.proto
     */
    ruleEngineOutput?: Schema$GoogleCloudContentwarehouseV1RuleEngineOutput;
  }
  /**
   * To support the custom weighting across document schemas.
   */
  export interface Schema$GoogleCloudContentwarehouseV1CustomWeightsMetadata {
    /**
     * List of schema and property name. Allows a maximum of 10 schemas to be specified for relevance boosting.
     */
    weightedSchemaProperties?: Schema$GoogleCloudContentwarehouseV1WeightedSchemaProperty[];
  }
  /**
   * Represents the action responsible for properties update operations.
   */
  export interface Schema$GoogleCloudContentwarehouseV1DataUpdateAction {
    /**
     * Map of (K, V) -\> (valid name of the field, new value of the field) E.g., ("age", "60") entry triggers update of field age with a value of 60. If the field is not present then new entry is added. During update action execution, value strings will be casted to appropriate types.
     */
    entries?: {[key: string]: string} | null;
  }
  /**
   * Represents the action responsible for data validation operations.
   */
  export interface Schema$GoogleCloudContentwarehouseV1DataValidationAction {
    /**
     * Map of (K, V) -\> (field, string condition to be evaluated on the field) E.g., ("age", "age \> 18 && age < 60") entry triggers validation of field age with the given condition. Map entries will be ANDed during validation.
     */
    conditions?: {[key: string]: string} | null;
  }
  /**
   * DateTime values.
   */
  export interface Schema$GoogleCloudContentwarehouseV1DateTimeArray {
    /**
     * List of datetime values. Both OffsetDateTime and ZonedDateTime are supported.
     */
    values?: Schema$GoogleTypeDateTime[];
  }
  /**
   * Configurations for a date time property.
   */
  export interface Schema$GoogleCloudContentwarehouseV1DateTimeTypeOptions {}
  /**
   * Represents the action responsible for deleting the document.
   */
  export interface Schema$GoogleCloudContentwarehouseV1DeleteDocumentAction {
    /**
     * Boolean field to select between hard vs soft delete options. Set 'true' for 'hard delete' and 'false' for 'soft delete'.
     */
    enableHardDelete?: boolean | null;
  }
  /**
   * Request message for DocumentLinkService.DeleteDocumentLink.
   */
  export interface Schema$GoogleCloudContentwarehouseV1DeleteDocumentLinkRequest {
    /**
     * The meta information collected about the document creator, used to enforce access control for the service.
     */
    requestMetadata?: Schema$GoogleCloudContentwarehouseV1RequestMetadata;
  }
  /**
   * Request message for DocumentService.DeleteDocument.
   */
  export interface Schema$GoogleCloudContentwarehouseV1DeleteDocumentRequest {
    /**
     * The meta information collected about the end user, used to enforce access control for the service.
     */
    requestMetadata?: Schema$GoogleCloudContentwarehouseV1RequestMetadata;
  }
  /**
   * Defines the structure for content warehouse document proto.
   */
  export interface Schema$GoogleCloudContentwarehouseV1Document {
    /**
     * Document AI format to save the structured content, including OCR.
     */
    cloudAiDocument?: Schema$GoogleCloudDocumentaiV1Document;
    /**
     * Indicates the category (image, audio, video etc.) of the original content.
     */
    contentCategory?: string | null;
    /**
     * Output only. The time when the document is created.
     */
    createTime?: string | null;
    /**
     * The user who creates the document.
     */
    creator?: string | null;
    /**
     * Required. Display name of the document given by the user. This name will be displayed in the UI. Customer can populate this field with the name of the document. This differs from the 'title' field as 'title' is optional and stores the top heading in the document.
     */
    displayName?: string | null;
    /**
     * Uri to display the document, for example, in the UI.
     */
    displayUri?: string | null;
    /**
     * Output only. If linked to a Collection with RetentionPolicy, the date when the document becomes mutable.
     */
    dispositionTime?: string | null;
    /**
     * The Document schema name. Format: projects/{project_number\}/locations/{location\}/documentSchemas/{document_schema_id\}.
     */
    documentSchemaName?: string | null;
    /**
     * Raw document content.
     */
    inlineRawDocument?: string | null;
    /**
     * Output only. Indicates if the document has a legal hold on it.
     */
    legalHold?: boolean | null;
    /**
     * The resource name of the document. Format: projects/{project_number\}/locations/{location\}/documents/{document_id\}. The name is ignored when creating a document.
     */
    name?: string | null;
    /**
     * Other document format, such as PPTX, XLXS
     */
    plainText?: string | null;
    /**
     * List of values that are user supplied metadata.
     */
    properties?: Schema$GoogleCloudContentwarehouseV1Property[];
    /**
     * This is used when DocAI was not used to load the document and parsing/ extracting is needed for the inline_raw_document. For example, if inline_raw_document is the byte representation of a PDF file, then this should be set to: RAW_DOCUMENT_FILE_TYPE_PDF.
     */
    rawDocumentFileType?: string | null;
    /**
     * Raw document file in Cloud Storage path.
     */
    rawDocumentPath?: string | null;
    /**
     * The reference ID set by customers. Must be unique per project and location.
     */
    referenceId?: string | null;
    /**
     * If true, text extraction will not be performed.
     */
    textExtractionDisabled?: boolean | null;
    /**
     * If true, text extraction will be performed.
     */
    textExtractionEnabled?: boolean | null;
    /**
     * Title that describes the document. This can be the top heading or text that describes the document.
     */
    title?: string | null;
    /**
     * The user who lastly updates the document.
     */
    updater?: string | null;
    /**
     * Output only. The time when the document is last updated.
     */
    updateTime?: string | null;
  }
  /**
   * A document-link between source and target document.
   */
  export interface Schema$GoogleCloudContentwarehouseV1DocumentLink {
    /**
     * Output only. The time when the documentLink is created.
     */
    createTime?: string | null;
    /**
     * Description of this document-link.
     */
    description?: string | null;
    /**
     * Name of this document-link. It is required that the parent derived form the name to be consistent with the source document reference. Otherwise an exception will be thrown. Format: projects/{project_number\}/locations/{location\}/documents/{source_document_id\}/documentLinks/{document_link_id\}.
     */
    name?: string | null;
    /**
     * Document references of the source document.
     */
    sourceDocumentReference?: Schema$GoogleCloudContentwarehouseV1DocumentReference;
    /**
     * The state of the documentlink. If target node has been deleted, the link is marked as invalid. Removing a source node will result in removal of all associated links.
     */
    state?: string | null;
    /**
     * Document references of the target document.
     */
    targetDocumentReference?: Schema$GoogleCloudContentwarehouseV1DocumentReference;
    /**
     * Output only. The time when the documentLink is last updated.
     */
    updateTime?: string | null;
  }
  export interface Schema$GoogleCloudContentwarehouseV1DocumentQuery {
    /**
     * This filter specifies a structured syntax to match against the [PropertyDefinition].is_filterable marked as `true`. The syntax for this expression is a subset of SQL syntax. Supported operators are: `=`, `!=`, `<`, `<=`, `\>`, and `\>=` where the left of the operator is a property name and the right of the operator is a number or a quoted string. You must escape backslash (\\) and quote (\") characters. Supported functions are `LOWER([property_name])` to perform a case insensitive match and `EMPTY([property_name])` to filter on the existence of a key. Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting (for example, "((A AND B AND C) OR NOT D) AND E"), a maximum of 100 comparisons or functions are allowed in the expression. The expression must be < 6000 bytes in length. Sample Query: `(LOWER(driving_license)="class \"a\"" OR EMPTY(driving_license)) AND driving_years \> 10`
     */
    customPropertyFilter?: string | null;
    /**
     * To support the custom weighting across document schemas, customers need to provide the properties to be used to boost the ranking in the search request. For a search query with CustomWeightsMetadata specified, only the RetrievalImportance for the properties in the CustomWeightsMetadata will be honored.
     */
    customWeightsMetadata?: Schema$GoogleCloudContentwarehouseV1CustomWeightsMetadata;
    /**
     * The exact creator(s) of the documents to search against. If a value isn't specified, documents within the search results are associated with any creator. If multiple values are specified, documents within the search results may be associated with any of the specified creators.
     */
    documentCreatorFilter?: string[] | null;
    /**
     * Search the documents in the list. Format: projects/{project_number\}/locations/{location\}/documents/{document_id\}.
     */
    documentNameFilter?: string[] | null;
    /**
     * This filter specifies the exact document schema Document.document_schema_name of the documents to search against. If a value isn't specified, documents within the search results are associated with any schema. If multiple values are specified, documents within the search results may be associated with any of the specified schemas. At most 20 document schema names are allowed.
     */
    documentSchemaNames?: string[] | null;
    /**
     * This filter specifies the types of files to return: ALL, FOLDER, or FILE. If FOLDER or FILE is specified, then only either folders or files will be returned, respectively. If ALL is specified, both folders and files will be returned. If no value is specified, ALL files will be returned.
     */
    fileTypeFilter?: Schema$GoogleCloudContentwarehouseV1FileTypeFilter;
    /**
     * Search all the documents under this specified folder. Format: projects/{project_number\}/locations/{location\}/documents/{document_id\}.
     */
    folderNameFilter?: string | null;
    /**
     * Experimental, do not use. If the query is a natural language question. False by default. If true, then the question-answering feature will be used instead of search, and `result_count` in SearchDocumentsRequest must be set. In addition, all other input fields related to search (pagination, histograms, etc.) will be ignored.
     */
    isNlQuery?: boolean | null;
    /**
     * This filter specifies a structured syntax to match against the PropertyDefinition.is_filterable marked as `true`. The relationship between the PropertyFilters is OR.
     */
    propertyFilter?: Schema$GoogleCloudContentwarehouseV1PropertyFilter[];
    /**
     * The query string that matches against the full text of the document and the searchable properties. The query partially supports [Google AIP style syntax](https://google.aip.dev/160). Specifically, the query supports literals, logical operators, negation operators, comparison operators, and functions. Literals: A bare literal value (examples: "42", "Hugo") is a value to be matched against. It searches over the full text of the document and the searchable properties. Logical operators: "AND", "and", "OR", and "or" are binary logical operators (example: "engineer OR developer"). Negation operators: "NOT" and "!" are negation operators (example: "NOT software"). Comparison operators: support the binary comparison operators =, !=, <, \>, <= and \>= for string, numeric, enum, boolean. Also support like operator `~~` for string. It provides semantic search functionality by parsing, stemming and doing synonyms expansion against the input query. To specify a property in the query, the left hand side expression in the comparison must be the property ID including the parent. The right hand side must be literals. For example: "\"projects/123/locations/us\".property_a < 1" matches results whose "property_a" is less than 1 in project 123 and us location. The literals and comparison expression can be connected in a single query (example: "software engineer \"projects/123/locations/us\".salary \> 100"). Functions: supported functions are `LOWER([property_name])` to perform a case insensitive match and `EMPTY([property_name])` to filter on the existence of a key. Support nested expressions connected using parenthesis and logical operators. The default logical operators is `AND` if there is no operators between expressions. The query can be used with other filters e.g. `time_filters` and `folder_name_filter`. They are connected with `AND` operator under the hood. The maximum number of allowed characters is 255.
     */
    query?: string | null;
    /**
     * For custom synonyms. Customers provide the synonyms based on context. One customer can provide multiple set of synonyms based on different context. The search query will be expanded based on the custom synonyms of the query context set. By default, no custom synonyms wll be applied if no query context is provided. It is not supported for CMEK compliant deployment.
     */
    queryContext?: string[] | null;
    /**
     * Documents created/updated within a range specified by this filter are searched against.
     */
    timeFilters?: Schema$GoogleCloudContentwarehouseV1TimeFilter[];
  }
  /**
   * References to the documents.
   */
  export interface Schema$GoogleCloudContentwarehouseV1DocumentReference {
    /**
     * Output only. The time when the document is created.
     */
    createTime?: string | null;
    /**
     * Output only. The time when the document is deleted.
     */
    deleteTime?: string | null;
    /**
     * display_name of the referenced document; this name does not need to be consistent to the display_name in the Document proto, depending on the ACL constraint.
     */
    displayName?: string | null;
    /**
     * The document type of the document being referenced.
     */
    documentIsFolder?: boolean | null;
    /**
     * Document is a folder with legal hold.
     */
    documentIsLegalHoldFolder?: boolean | null;
    /**
     * Document is a folder with retention policy.
     */
    documentIsRetentionFolder?: boolean | null;
    /**
     * Required. Name of the referenced document.
     */
    documentName?: string | null;
    /**
     * Stores the subset of the referenced document's content. This is useful to allow user peek the information of the referenced document.
     */
    snippet?: string | null;
    /**
     * Output only. The time when the document is last updated.
     */
    updateTime?: string | null;
  }
  /**
   * A document schema used to define document structure.
   */
  export interface Schema$GoogleCloudContentwarehouseV1DocumentSchema {
    /**
     * Output only. The time when the document schema is created.
     */
    createTime?: string | null;
    /**
     * Schema description.
     */
    description?: string | null;
    /**
     * Required. Name of the schema given by the user. Must be unique per project.
     */
    displayName?: string | null;
    /**
     * Document Type, true refers the document is a folder, otherwise it is a typical document.
     */
    documentIsFolder?: boolean | null;
    /**
     * The resource name of the document schema. Format: projects/{project_number\}/locations/{location\}/documentSchemas/{document_schema_id\}. The name is ignored when creating a document schema.
     */
    name?: string | null;
    /**
     * Document details.
     */
    propertyDefinitions?: Schema$GoogleCloudContentwarehouseV1PropertyDefinition[];
    /**
     * Output only. The time when the document schema is last updated.
     */
    updateTime?: string | null;
  }
  /**
   * Enum values.
   */
  export interface Schema$GoogleCloudContentwarehouseV1EnumArray {
    /**
     * List of enum values.
     */
    values?: string[] | null;
  }
  /**
   * Configurations for an enum/categorical property.
   */
  export interface Schema$GoogleCloudContentwarehouseV1EnumTypeOptions {
    /**
     * Required. List of possible enum values.
     */
    possibleValues?: string[] | null;
    /**
     * Make sure the Enum property value provided in the document is in the possile value list during document creation. The validation check runs by default.
     */
    validationCheckDisabled?: boolean | null;
  }
  /**
   * Represents the string value of the enum field.
   */
  export interface Schema$GoogleCloudContentwarehouseV1EnumValue {
    /**
     * String value of the enum field. This must match defined set of enums in document schema using EnumTypeOptions.
     */
    value?: string | null;
  }
  /**
   * The configuration of exporting documents from the Document Warehouse to CDW pipeline.
   */
  export interface Schema$GoogleCloudContentwarehouseV1ExportToCdwPipeline {
    /**
     * Optional. The CDW dataset resource name. This field is optional. If not set, the documents will be exported to Cloud Storage only. Format: projects/{project\}/locations/{location\}/processors/{processor\}/dataset
     */
    docAiDataset?: string | null;
    /**
     * The list of all the resource names of the documents to be processed. Format: projects/{project_number\}/locations/{location\}/documents/{document_id\}.
     */
    documents?: string[] | null;
    /**
     * The Cloud Storage folder path used to store the exported documents before being sent to CDW. Format: `gs:///`.
     */
    exportFolderPath?: string | null;
    /**
     * Ratio of training dataset split. When importing into Document AI Workbench, documents will be automatically split into training and test split category with the specified ratio. This field is required if doc_ai_dataset is set.
     */
    trainingSplitRatio?: number | null;
  }
  /**
   * Request message for DocumentService.FetchAcl
   */
  export interface Schema$GoogleCloudContentwarehouseV1FetchAclRequest {
    /**
     * For Get Project ACL only. Authorization check for end user will be ignored when project_owner=true.
     */
    projectOwner?: boolean | null;
    /**
     * The meta information collected about the end user, used to enforce access control for the service.
     */
    requestMetadata?: Schema$GoogleCloudContentwarehouseV1RequestMetadata;
  }
  /**
   * Response message for DocumentService.FetchAcl.
   */
  export interface Schema$GoogleCloudContentwarehouseV1FetchAclResponse {
    /**
     * Additional information for the API invocation, such as the request tracking id.
     */
    metadata?: Schema$GoogleCloudContentwarehouseV1ResponseMetadata;
    /**
     * The IAM policy.
     */
    policy?: Schema$GoogleIamV1Policy;
  }
  /**
   * Filter for the specific types of documents returned.
   */
  export interface Schema$GoogleCloudContentwarehouseV1FileTypeFilter {
    /**
     * The type of files to return.
     */
    fileType?: string | null;
  }
  /**
   * Float values.
   */
  export interface Schema$GoogleCloudContentwarehouseV1FloatArray {
    /**
     * List of float values.
     */
    values?: number[] | null;
  }
  /**
   * Configurations for a float property.
   */
  export interface Schema$GoogleCloudContentwarehouseV1FloatTypeOptions {}
  /**
   * The configuration of the Cloud Storage Ingestion pipeline.
   */
  export interface Schema$GoogleCloudContentwarehouseV1GcsIngestPipeline {
    /**
     * The input Cloud Storage folder. All files under this folder will be imported to Document Warehouse. Format: `gs:///`.
     */
    inputPath?: string | null;
    /**
     * Optional. The config for the Cloud Storage Ingestion pipeline. It provides additional customization options to run the pipeline and can be skipped if it is not applicable.
     */
    pipelineConfig?: Schema$GoogleCloudContentwarehouseV1IngestPipelineConfig;
    /**
     * The Doc AI processor type name. Only used when the format of ingested files is Doc AI Document proto format.
     */
    processorType?: string | null;
    /**
     * The Document Warehouse schema resource name. All documents processed by this pipeline will use this schema. Format: projects/{project_number\}/locations/{location\}/documentSchemas/{document_schema_id\}.
     */
    schemaName?: string | null;
    /**
     * The flag whether to skip ingested documents. If it is set to true, documents in Cloud Storage contains key "status" with value "status=ingested" in custom metadata will be skipped to ingest.
     */
    skipIngestedDocuments?: boolean | null;
  }
  /**
   * The configuration of the Cloud Storage Ingestion with DocAI Processors pipeline.
   */
  export interface Schema$GoogleCloudContentwarehouseV1GcsIngestWithDocAiProcessorsPipeline {
    /**
     * The extract processors information. One matched extract processor will be used to process documents based on the classify processor result. If no classify processor is specified, the first extract processor will be used.
     */
    extractProcessorInfos?: Schema$GoogleCloudContentwarehouseV1ProcessorInfo[];
    /**
     * The input Cloud Storage folder. All files under this folder will be imported to Document Warehouse. Format: `gs:///`.
     */
    inputPath?: string | null;
    /**
     * Optional. The config for the Cloud Storage Ingestion with DocAI Processors pipeline. It provides additional customization options to run the pipeline and can be skipped if it is not applicable.
     */
    pipelineConfig?: Schema$GoogleCloudContentwarehouseV1IngestPipelineConfig;
    /**
     * The Cloud Storage folder path used to store the raw results from processors. Format: `gs:///`.
     */
    processorResultsFolderPath?: string | null;
    /**
     * The flag whether to skip ingested documents. If it is set to true, documents in Cloud Storage contains key "status" with value "status=ingested" in custom metadata will be skipped to ingest.
     */
    skipIngestedDocuments?: boolean | null;
    /**
     * The split and classify processor information. The split and classify result will be used to find a matched extract processor.
     */
    splitClassifyProcessorInfo?: Schema$GoogleCloudContentwarehouseV1ProcessorInfo;
  }
  /**
   * Request message for DocumentService.GetDocument.
   */
  export interface Schema$GoogleCloudContentwarehouseV1GetDocumentRequest {
    /**
     * The meta information collected about the end user, used to enforce access control for the service.
     */
    requestMetadata?: Schema$GoogleCloudContentwarehouseV1RequestMetadata;
  }
  /**
   * The histogram request.
   */
  export interface Schema$GoogleCloudContentwarehouseV1HistogramQuery {
    /**
     * Optional. Filter the result of histogram query by the property names. It only works with histogram query count('FilterableProperties'). It is an optional. It will perform histogram on all the property names for all the document schemas. Setting this field will have a better performance.
     */
    filters?: Schema$GoogleCloudContentwarehouseV1HistogramQueryPropertyNameFilter;
    /**
     * An expression specifies a histogram request against matching documents for searches. See SearchDocumentsRequest.histogram_queries for details about syntax.
     */
    histogramQuery?: string | null;
    /**
     * Controls if the histogram query requires the return of a precise count. Enable this flag may adversely impact performance. Defaults to true.
     */
    requirePreciseResultSize?: boolean | null;
  }
  export interface Schema$GoogleCloudContentwarehouseV1HistogramQueryPropertyNameFilter {
    /**
     * This filter specifies the exact document schema(s) Document.document_schema_name to run histogram query against. It is optional. It will perform histogram for property names for all the document schemas if it is not set. At most 10 document schema names are allowed. Format: projects/{project_number\}/locations/{location\}/documentSchemas/{document_schema_id\}.
     */
    documentSchemas?: string[] | null;
    /**
     * It is optional. It will perform histogram for all the property names if it is not set. The properties need to be defined with the is_filterable flag set to true and the name of the property should be in the format: "schemaId.propertyName". The property needs to be defined in the schema. Example: the schema id is abc. Then the name of property for property MORTGAGE_TYPE will be "abc.MORTGAGE_TYPE".
     */
    propertyNames?: string[] | null;
    /**
     * By default, the y_axis is HISTOGRAM_YAXIS_DOCUMENT if this field is not set.
     */
    yAxis?: string | null;
  }
  /**
   * Histogram result that matches HistogramQuery specified in searches.
   */
  export interface Schema$GoogleCloudContentwarehouseV1HistogramQueryResult {
    /**
     * A map from the values of the facet associated with distinct values to the number of matching entries with corresponding value. The key format is: * (for string histogram) string values stored in the field.
     */
    histogram?: {[key: string]: string} | null;
    /**
     * Requested histogram expression.
     */
    histogramQuery?: string | null;
  }
  /**
   * The ingestion pipeline config.
   */
  export interface Schema$GoogleCloudContentwarehouseV1IngestPipelineConfig {
    /**
     * The document level acl policy config. This refers to an Identity and Access (IAM) policy, which specifies access controls for all documents ingested by the pipeline. The role and members under the policy needs to be specified. The following roles are supported for document level acl control: * roles/contentwarehouse.documentAdmin * roles/contentwarehouse.documentEditor * roles/contentwarehouse.documentViewer The following members are supported for document level acl control: * user:user-email@example.com * group:group-email@example.com Note that for documents searched with LLM, only single level user or group acl check is supported.
     */
    documentAclPolicy?: Schema$GoogleIamV1Policy;
    /**
     * The document text extraction enabled flag. If the flag is set to true, DWH will perform text extraction on the raw document.
     */
    enableDocumentTextExtraction?: boolean | null;
    /**
     * Optional. The name of the folder to which all ingested documents will be linked during ingestion process. Format is `projects/{project\}/locations/{location\}/documents/{folder_id\}`
     */
    folder?: string | null;
  }
  /**
   * Request message for projectService.InitializeProject
   */
  export interface Schema$GoogleCloudContentwarehouseV1InitializeProjectRequest {
    /**
     * Required. The access control mode for accessing the customer data
     */
    accessControlMode?: string | null;
    /**
     * Required. The type of database used to store customer data
     */
    databaseType?: string | null;
    /**
     * Optional. The default role for the person who create a document.
     */
    documentCreatorDefaultRole?: string | null;
    /**
     * Optional. Whether to enable CAL user email logging.
     */
    enableCalUserEmailLogging?: boolean | null;
    /**
     * Optional. The KMS key used for CMEK encryption. It is required that the kms key is in the same region as the endpoint. The same key will be used for all provisioned resources, if encryption is available. If the kms_key is left empty, no encryption will be enforced.
     */
    kmsKey?: string | null;
  }
  /**
   * Response message for projectService.InitializeProject
   */
  export interface Schema$GoogleCloudContentwarehouseV1InitializeProjectResponse {
    /**
     * The message of the project initialization process.
     */
    message?: string | null;
    /**
     * The state of the project initialization process.
     */
    state?: string | null;
  }
  /**
   * Integer values.
   */
  export interface Schema$GoogleCloudContentwarehouseV1IntegerArray {
    /**
     * List of integer values.
     */
    values?: number[] | null;
  }
  /**
   * Configurations for an integer property.
   */
  export interface Schema$GoogleCloudContentwarehouseV1IntegerTypeOptions {}
  /**
   * A triggered rule that failed the validation check(s) after parsing.
   */
  export interface Schema$GoogleCloudContentwarehouseV1InvalidRule {
    /**
     * Validation error on a parsed expression.
     */
    error?: string | null;
    /**
     * Triggered rule.
     */
    rule?: Schema$GoogleCloudContentwarehouseV1Rule;
  }
  /**
   * Response message for DocumentSchemaService.ListDocumentSchemas.
   */
  export interface Schema$GoogleCloudContentwarehouseV1ListDocumentSchemasResponse {
    /**
     * The document schemas from the specified parent.
     */
    documentSchemas?: Schema$GoogleCloudContentwarehouseV1DocumentSchema[];
    /**
     * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
     */
    nextPageToken?: string | null;
  }
  /**
   * Response message for DocumentLinkService.ListLinkedSources.
   */
  export interface Schema$GoogleCloudContentwarehouseV1ListLinkedSourcesRequest {
    /**
     * The maximum number of document-links to return. The service may return fewer than this value. If unspecified, at most 50 document-links will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
     */
    pageSize?: number | null;
    /**
     * A page token, received from a previous `ListLinkedSources` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListLinkedSources` must match the call that provided the page token.
     */
    pageToken?: string | null;
    /**
     * The meta information collected about the document creator, used to enforce access control for the service.
     */
    requestMetadata?: Schema$GoogleCloudContentwarehouseV1RequestMetadata;
  }
  /**
   * Response message for DocumentLinkService.ListLinkedSources.
   */
  export interface Schema$GoogleCloudContentwarehouseV1ListLinkedSourcesResponse {
    /**
     * Source document-links.
     */
    documentLinks?: Schema$GoogleCloudContentwarehouseV1DocumentLink[];
    /**
     * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
     */
    nextPageToken?: string | null;
  }
  /**
   * Request message for DocumentLinkService.ListLinkedTargets.
   */
  export interface Schema$GoogleCloudContentwarehouseV1ListLinkedTargetsRequest {
    /**
     * The meta information collected about the document creator, used to enforce access control for the service.
     */
    requestMetadata?: Schema$GoogleCloudContentwarehouseV1RequestMetadata;
  }
  /**
   * Response message for DocumentLinkService.ListLinkedTargets.
   */
  export interface Schema$GoogleCloudContentwarehouseV1ListLinkedTargetsResponse {
    /**
     * Target document-links.
     */
    documentLinks?: Schema$GoogleCloudContentwarehouseV1DocumentLink[];
    /**
     * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
     */
    nextPageToken?: string | null;
  }
  /**
   * Response message for RuleSetService.ListRuleSets.
   */
  export interface Schema$GoogleCloudContentwarehouseV1ListRuleSetsResponse {
    /**
     * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
     */
    nextPageToken?: string | null;
    /**
     * The rule sets from the specified parent.
     */
    ruleSets?: Schema$GoogleCloudContentwarehouseV1RuleSet[];
  }
  /**
   * Response message for SynonymSetService.ListSynonymSets.
   */
  export interface Schema$GoogleCloudContentwarehouseV1ListSynonymSetsResponse {
    /**
     * A page token, received from a previous `ListSynonymSets` call. Provide this to retrieve the subsequent page.
     */
    nextPageToken?: string | null;
    /**
     * The synonymSets from the specified parent.
     */
    synonymSets?: Schema$GoogleCloudContentwarehouseV1SynonymSet[];
  }
  /**
   * Request message for DocumentService.LockDocument.
   */
  export interface Schema$GoogleCloudContentwarehouseV1LockDocumentRequest {
    /**
     * The collection the document connects to.
     */
    collectionId?: string | null;
    /**
     * The user information who locks the document.
     */
    lockingUser?: Schema$GoogleCloudContentwarehouseV1UserInfo;
  }
  /**
   * Map property value. Represents a structured entries of key value pairs, consisting of field names which map to dynamically typed values.
   */
  export interface Schema$GoogleCloudContentwarehouseV1MapProperty {
    /**
     * Unordered map of dynamically typed values.
     */
    fields?: {[key: string]: Schema$GoogleCloudContentwarehouseV1Value} | null;
  }
  /**
   * Configurations for a Map property.
   */
  export interface Schema$GoogleCloudContentwarehouseV1MapTypeOptions {}
  /**
   * Options for merging updated fields.
   */
  export interface Schema$GoogleCloudContentwarehouseV1MergeFieldsOptions {
    /**
     * When merging message fields, the default behavior is to merge the content of two message fields together. If you instead want to use the field from the source message to replace the corresponding field in the destination message, set this flag to true. When this flag is set, specified submessage fields that are missing in source will be cleared in destination.
     */
    replaceMessageFields?: boolean | null;
    /**
     * When merging repeated fields, the default behavior is to append entries from the source repeated field to the destination repeated field. If you instead want to keep only the entries from the source repeated field, set this flag to true. If you want to replace a repeated field within a message field on the destination message, you must set both replace_repeated_fields and replace_message_fields to true, otherwise the repeated fields will be appended.
     */
    replaceRepeatedFields?: boolean | null;
  }
  /**
   * The DocAI processor information.
   */
  export interface Schema$GoogleCloudContentwarehouseV1ProcessorInfo {
    /**
     * The processor will process the documents with this document type.
     */
    documentType?: string | null;
    /**
     * The processor resource name. Format is `projects/{project\}/locations/{location\}/processors/{processor\}`, or `projects/{project\}/locations/{location\}/processors/{processor\}/processorVersions/{processorVersion\}`
     */
    processorName?: string | null;
    /**
     * The Document schema resource name. All documents processed by this processor will use this schema. Format: projects/{project_number\}/locations/{location\}/documentSchemas/{document_schema_id\}.
     */
    schemaName?: string | null;
  }
  /**
   * The configuration of processing documents in Document Warehouse with DocAi processors pipeline.
   */
  export interface Schema$GoogleCloudContentwarehouseV1ProcessWithDocAiPipeline {
    /**
     * The list of all the resource names of the documents to be processed. Format: projects/{project_number\}/locations/{location\}/documents/{document_id\}.
     */
    documents?: string[] | null;
    /**
     * The Cloud Storage folder path used to store the exported documents before being sent to CDW. Format: `gs:///`.
     */
    exportFolderPath?: string | null;
    /**
     * The CDW processor information.
     */
    processorInfo?: Schema$GoogleCloudContentwarehouseV1ProcessorInfo;
    /**
     * The Cloud Storage folder path used to store the raw results from processors. Format: `gs:///`.
     */
    processorResultsFolderPath?: string | null;
  }
  /**
   * Status of a project, including the project state, dbType, aclMode and etc.
   */
  export interface Schema$GoogleCloudContentwarehouseV1ProjectStatus {
    /**
     * Access control mode.
     */
    accessControlMode?: string | null;
    /**
     * Database type.
     */
    databaseType?: string | null;
    /**
     * The default role for the person who create a document.
     */
    documentCreatorDefaultRole?: string | null;
    /**
     * The location of the queried project.
     */
    location?: string | null;
    /**
     * If the qa is enabled on this project.
     */
    qaEnabled?: boolean | null;
    /**
     * State of the project.
     */
    state?: string | null;
  }
  /**
   * Property of a document.
   */
  export interface Schema$GoogleCloudContentwarehouseV1Property {
    /**
     * Date time property values. It is not supported by CMEK compliant deployment.
     */
    dateTimeValues?: Schema$GoogleCloudContentwarehouseV1DateTimeArray;
    /**
     * Enum property values.
     */
    enumValues?: Schema$GoogleCloudContentwarehouseV1EnumArray;
    /**
     * Float property values.
     */
    floatValues?: Schema$GoogleCloudContentwarehouseV1FloatArray;
    /**
     * Integer property values.
     */
    integerValues?: Schema$GoogleCloudContentwarehouseV1IntegerArray;
    /**
     * Map property values.
     */
    mapProperty?: Schema$GoogleCloudContentwarehouseV1MapProperty;
    /**
     * Required. Must match the name of a PropertyDefinition in the DocumentSchema.
     */
    name?: string | null;
    /**
     * Nested structured data property values.
     */
    propertyValues?: Schema$GoogleCloudContentwarehouseV1PropertyArray;
    /**
     * String/text property values.
     */
    textValues?: Schema$GoogleCloudContentwarehouseV1TextArray;
    /**
     * Timestamp property values. It is not supported by CMEK compliant deployment.
     */
    timestampValues?: Schema$GoogleCloudContentwarehouseV1TimestampArray;
  }
  /**
   * Property values.
   */
  export interface Schema$GoogleCloudContentwarehouseV1PropertyArray {
    /**
     * List of property values.
     */
    properties?: Schema$GoogleCloudContentwarehouseV1Property[];
  }
  /**
   * Defines the metadata for a schema property.
   */
  export interface Schema$GoogleCloudContentwarehouseV1PropertyDefinition {
    /**
     * Date time property. It is not supported by CMEK compliant deployment.
     */
    dateTimeTypeOptions?: Schema$GoogleCloudContentwarehouseV1DateTimeTypeOptions;
    /**
     * The display-name for the property, used for front-end.
     */
    displayName?: string | null;
    /**
     * Enum/categorical property.
     */
    enumTypeOptions?: Schema$GoogleCloudContentwarehouseV1EnumTypeOptions;
    /**
     * Float property.
     */
    floatTypeOptions?: Schema$GoogleCloudContentwarehouseV1FloatTypeOptions;
    /**
     * Integer property.
     */
    integerTypeOptions?: Schema$GoogleCloudContentwarehouseV1IntegerTypeOptions;
    /**
     * Whether the property can be filtered. If this is a sub-property, all the parent properties must be marked filterable.
     */
    isFilterable?: boolean | null;
    /**
     * Whether the property is user supplied metadata. This out-of-the box placeholder setting can be used to tag derived properties. Its value and interpretation logic should be implemented by API user.
     */
    isMetadata?: boolean | null;
    /**
     * Whether the property can have multiple values.
     */
    isRepeatable?: boolean | null;
    /**
     * Whether the property is mandatory. Default is 'false', i.e. populating property value can be skipped. If 'true' then user must populate the value for this property.
     */
    isRequired?: boolean | null;
    /**
     * Indicates that the property should be included in a global search.
     */
    isSearchable?: boolean | null;
    /**
     * Map property.
     */
    mapTypeOptions?: Schema$GoogleCloudContentwarehouseV1MapTypeOptions;
    /**
     * Required. The name of the metadata property. Must be unique within a document schema and is case insensitive. Names must be non-blank, start with a letter, and can contain alphanumeric characters and: /, :, -, _, and .
     */
    name?: string | null;
    /**
     * Nested structured data property.
     */
    propertyTypeOptions?: Schema$GoogleCloudContentwarehouseV1PropertyTypeOptions;
    /**
     * The retrieval importance of the property during search.
     */
    retrievalImportance?: string | null;
    /**
     * The mapping information between this property to another schema source.
     */
    schemaSources?: Schema$GoogleCloudContentwarehouseV1PropertyDefinitionSchemaSource[];
    /**
     * Text/string property.
     */
    textTypeOptions?: Schema$GoogleCloudContentwarehouseV1TextTypeOptions;
    /**
     * Timestamp property. It is not supported by CMEK compliant deployment.
     */
    timestampTypeOptions?: Schema$GoogleCloudContentwarehouseV1TimestampTypeOptions;
  }
  /**
   * The schema source information.
   */
  export interface Schema$GoogleCloudContentwarehouseV1PropertyDefinitionSchemaSource {
    /**
     * The schema name in the source.
     */
    name?: string | null;
    /**
     * The Doc AI processor type name.
     */
    processorType?: string | null;
  }
  export interface Schema$GoogleCloudContentwarehouseV1PropertyFilter {
    /**
     * The filter condition. The syntax for this expression is a subset of SQL syntax. Supported operators are: `=`, `!=`, `<`, `<=`, `\>`, `\>=`, and `~~` where the left of the operator is a property name and the right of the operator is a number or a quoted string. You must escape backslash (\\) and quote (\") characters. `~~` is the LIKE operator. The right of the operator must be a string. The only supported property data type for LIKE is text_values. It provides semantic search functionality by parsing, stemming and doing synonyms expansion against the input query. It matches if the property contains semantic similar content to the query. It is not regex matching or wildcard matching. For example, "property.company ~~ \"google\"" will match records whose property `property.compnay` have values like "Google Inc.", "Google LLC" or "Google Company". Supported functions are `LOWER([property_name])` to perform a case insensitive match and `EMPTY([property_name])` to filter on the existence of a key. Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting (for example, "((A AND B AND C) OR NOT D) AND E"), a maximum of 100 comparisons or functions are allowed in the expression. The expression must be < 6000 bytes in length. Only properties that are marked filterable are allowed (PropertyDefinition.is_filterable). Property names do not need to be prefixed by the document schema id (as is the case with histograms), however property names will need to be prefixed by its parent hierarchy, if any. For example: top_property_name.sub_property_name. Sample Query: `(LOWER(driving_license)="class \"a\"" OR EMPTY(driving_license)) AND driving_years \> 10` CMEK compliant deployment only supports: * Operators: `=`, `<`, `<=`, `\>`, and `\>=`. * Boolean expressions: AND and OR.
     */
    condition?: string | null;
    /**
     * The Document schema name Document.document_schema_name. Format: projects/{project_number\}/locations/{location\}/documentSchemas/{document_schema_id\}.
     */
    documentSchemaName?: string | null;
  }
  /**
   * Configurations for a nested structured data property.
   */
  export interface Schema$GoogleCloudContentwarehouseV1PropertyTypeOptions {
    /**
     * Required. List of property definitions.
     */
    propertyDefinitions?: Schema$GoogleCloudContentwarehouseV1PropertyDefinition[];
  }
  /**
   * Represents the action responsible for publishing messages to a Pub/Sub topic.
   */
  export interface Schema$GoogleCloudContentwarehouseV1PublishAction {
    /**
     * Messages to be published.
     */
    messages?: string[] | null;
    /**
     * The topic id in the Pub/Sub service for which messages will be published to.
     */
    topicId?: string | null;
  }
  /**
   * Additional result info for the question-answering feature.
   */
  export interface Schema$GoogleCloudContentwarehouseV1QAResult {
    /**
     * The calibrated confidence score for this document, in the range [0., 1.]. This represents the confidence level for whether the returned document and snippet answers the user's query.
     */
    confidenceScore?: number | null;
    /**
     * Highlighted sections in the snippet.
     */
    highlights?: Schema$GoogleCloudContentwarehouseV1QAResultHighlight[];
  }
  /**
   * A text span in the search text snippet that represents a highlighted section (answer context, highly relevant sentence, etc.).
   */
  export interface Schema$GoogleCloudContentwarehouseV1QAResultHighlight {
    /**
     * End index of the highlight, exclusive.
     */
    endIndex?: number | null;
    /**
     * Start index of the highlight.
     */
    startIndex?: number | null;
  }
  /**
   * Represents the action responsible for remove a document from a specific folder.
   */
  export interface Schema$GoogleCloudContentwarehouseV1RemoveFromFolderAction {
    /**
     * Condition of the action to be executed.
     */
    condition?: string | null;
    /**
     * Name of the folder under which new document is to be added. Format: projects/{project_number\}/locations/{location\}/documents/{document_id\}.
     */
    folder?: string | null;
  }
  /**
   * Meta information is used to improve the performance of the service.
   */
  export interface Schema$GoogleCloudContentwarehouseV1RequestMetadata {
    /**
     * Provides user unique identification and groups information.
     */
    userInfo?: Schema$GoogleCloudContentwarehouseV1UserInfo;
  }
  /**
   * Additional information returned to client, such as debugging information.
   */
  export interface Schema$GoogleCloudContentwarehouseV1ResponseMetadata {
    /**
     * A unique id associated with this call. This id is logged for tracking purpose.
     */
    requestId?: string | null;
  }
  /**
   * Represents the rule for a content warehouse trigger.
   */
  export interface Schema$GoogleCloudContentwarehouseV1Rule {
    /**
     * List of actions that are executed when the rule is satisfied.
     */
    actions?: Schema$GoogleCloudContentwarehouseV1Action[];
    /**
     * Represents the conditional expression to be evaluated. Expression should evaluate to a boolean result. When the condition is true actions are executed. Example: user_role = "hsbc_role_1" AND doc.salary \> 20000
     */
    condition?: string | null;
    /**
     * Short description of the rule and its context.
     */
    description?: string | null;
    /**
     * ID of the rule. It has to be unique across all the examples. This is managed internally.
     */
    ruleId?: string | null;
    /**
     * Identifies the trigger type for running the policy.
     */
    triggerType?: string | null;
  }
  /**
   * Represents a rule and outputs of associated actions.
   */
  export interface Schema$GoogleCloudContentwarehouseV1RuleActionsPair {
    /**
     * Outputs of executing the actions associated with the above rule.
     */
    actionOutputs?: Schema$GoogleCloudContentwarehouseV1ActionOutput[];
    /**
     * Represents the rule.
     */
    rule?: Schema$GoogleCloudContentwarehouseV1Rule;
  }
  /**
   * Records the output of Rule Engine including rule evaluation and actions result.
   */
  export interface Schema$GoogleCloudContentwarehouseV1RuleEngineOutput {
    /**
     * Output from Action Executor containing rule and corresponding actions execution result.
     */
    actionExecutorOutput?: Schema$GoogleCloudContentwarehouseV1ActionExecutorOutput;
    /**
     * Name of the document against which the rules and actions were evaluated.
     */
    documentName?: string | null;
    /**
     * Output from Rule Evaluator containing matched, unmatched and invalid rules.
     */
    ruleEvaluatorOutput?: Schema$GoogleCloudContentwarehouseV1RuleEvaluatorOutput;
  }
  /**
   * Represents the output of the Rule Evaluator.
   */
  export interface Schema$GoogleCloudContentwarehouseV1RuleEvaluatorOutput {
    /**
     * A subset of triggered rules that failed the validation check(s) after parsing.
     */
    invalidRules?: Schema$GoogleCloudContentwarehouseV1InvalidRule[];
    /**
     * A subset of triggered rules that are evaluated true for a given request.
     */
    matchedRules?: Schema$GoogleCloudContentwarehouseV1Rule[];
    /**
     * List of rules fetched from database for the given request trigger type.
     */
    triggeredRules?: Schema$GoogleCloudContentwarehouseV1Rule[];
  }
  /**
   * Represents a set of rules from a single customer.
   */
  export interface Schema$GoogleCloudContentwarehouseV1RuleSet {
    /**
     * Short description of the rule-set.
     */
    description?: string | null;
    /**
     * The resource name of the rule set. Managed internally. Format: projects/{project_number\}/locations/{location\}/ruleSet/{rule_set_id\}. The name is ignored when creating a rule set.
     */
    name?: string | null;
    /**
     * List of rules given by the customer.
     */
    rules?: Schema$GoogleCloudContentwarehouseV1Rule[];
    /**
     * Source of the rules i.e., customer name.
     */
    source?: string | null;
  }
  /**
   * Metadata message of RunPipeline method.
   */
  export interface Schema$GoogleCloudContentwarehouseV1RunPipelineMetadata {
    /**
     * The pipeline metadata for Export-to-CDW pipeline.
     */
    exportToCdwPipelineMetadata?: Schema$GoogleCloudContentwarehouseV1RunPipelineMetadataExportToCdwPipelineMetadata;
    /**
     * Number of files that have failed at some point in the pipeline.
     */
    failedFileCount?: number | null;
    /**
     * The pipeline metadata for GcsIngest pipeline.
     */
    gcsIngestPipelineMetadata?: Schema$GoogleCloudContentwarehouseV1RunPipelineMetadataGcsIngestPipelineMetadata;
    /**
     * The list of response details of each document.
     */
    individualDocumentStatuses?: Schema$GoogleCloudContentwarehouseV1RunPipelineMetadataIndividualDocumentStatus[];
    /**
     * The pipeline metadata for Process-with-DocAi pipeline.
     */
    processWithDocAiPipelineMetadata?: Schema$GoogleCloudContentwarehouseV1RunPipelineMetadataProcessWithDocAiPipelineMetadata;
    /**
     * Number of files that were processed by the pipeline.
     */
    totalFileCount?: number | null;
    /**
     * User unique identification and groups information.
     */
    userInfo?: Schema$GoogleCloudContentwarehouseV1UserInfo;
  }
  /**
   * The metadata message for Export-to-CDW pipeline.
   */
  export interface Schema$GoogleCloudContentwarehouseV1RunPipelineMetadataExportToCdwPipelineMetadata {
    /**
     * The output CDW dataset resource name.
     */
    docAiDataset?: string | null;
    /**
     * The input list of all the resource names of the documents to be exported.
     */
    documents?: string[] | null;
    /**
     * The output Cloud Storage folder in this pipeline.
     */
    outputPath?: string | null;
  }
  /**
   * The metadata message for GcsIngest pipeline.
   */
  export interface Schema$GoogleCloudContentwarehouseV1RunPipelineMetadataGcsIngestPipelineMetadata {
    /**
     * The input Cloud Storage folder in this pipeline. Format: `gs:///`.
     */
    inputPath?: string | null;
  }
  /**
   * The status of processing a document.
   */
  export interface Schema$GoogleCloudContentwarehouseV1RunPipelineMetadataIndividualDocumentStatus {
    /**
     * Document identifier of an existing document.
     */
    documentId?: string | null;
    /**
     * The status processing the document.
     */
    status?: Schema$GoogleRpcStatus;
  }
  /**
   * The metadata message for Process-with-DocAi pipeline.
   */
  export interface Schema$GoogleCloudContentwarehouseV1RunPipelineMetadataProcessWithDocAiPipelineMetadata {
    /**
     * The input list of all the resource names of the documents to be processed.
     */
    documents?: string[] | null;
    /**
     * The DocAI processor to process the documents with.
     */
    processorInfo?: Schema$GoogleCloudContentwarehouseV1ProcessorInfo;
  }
  /**
   * Request message for DocumentService.RunPipeline.
   */
  export interface Schema$GoogleCloudContentwarehouseV1RunPipelineRequest {
    /**
     * Export docuemnts from Document Warehouse to CDW for training purpose.
     */
    exportCdwPipeline?: Schema$GoogleCloudContentwarehouseV1ExportToCdwPipeline;
    /**
     * Cloud Storage ingestion pipeline.
     */
    gcsIngestPipeline?: Schema$GoogleCloudContentwarehouseV1GcsIngestPipeline;
    /**
     * Use DocAI processors to process documents in Cloud Storage and ingest them to Document Warehouse.
     */
    gcsIngestWithDocAiProcessorsPipeline?: Schema$GoogleCloudContentwarehouseV1GcsIngestWithDocAiProcessorsPipeline;
    /**
     * Use a DocAI processor to process documents in Document Warehouse, and re-ingest the updated results into Document Warehouse.
     */
    processWithDocAiPipeline?: Schema$GoogleCloudContentwarehouseV1ProcessWithDocAiPipeline;
    /**
     * The meta information collected about the end user, used to enforce access control for the service.
     */
    requestMetadata?: Schema$GoogleCloudContentwarehouseV1RequestMetadata;
  }
  /**
   * Request message for DocumentService.SearchDocuments.
   */
  export interface Schema$GoogleCloudContentwarehouseV1SearchDocumentsRequest {
    /**
     * Query used to search against documents (keyword, filters, etc.).
     */
    documentQuery?: Schema$GoogleCloudContentwarehouseV1DocumentQuery;
    /**
     * An expression specifying a histogram request against matching documents. Expression syntax is an aggregation function call with histogram facets and other options. The following aggregation functions are supported: * `count(string_histogram_facet)`: Count the number of matching entities for each distinct attribute value. Data types: * Histogram facet (aka filterable properties): Facet names with format <schema id\>.<facet\>. Facets will have the format of: `a-zA-Z`. If the facet is a child facet, then the parent hierarchy needs to be specified separated by dots in the prefix after the schema id. Thus, the format for a multi- level facet is: <schema id\>.<parent facet name\>. <child facet name\>. Example: schema123.root_parent_facet.middle_facet.child_facet * DocumentSchemaId: (with no schema id prefix) to get histograms for each document type (returns the schema id path, e.g. projects/12345/locations/us-west/documentSchemas/abc123). Example expression: * Document type counts: count('DocumentSchemaId') * For schema id, abc123, get the counts for MORTGAGE_TYPE: count('abc123.MORTGAGE_TYPE')
     */
    histogramQueries?: Schema$GoogleCloudContentwarehouseV1HistogramQuery[];
    /**
     * An integer that specifies the current offset (that is, starting result location, amongst the documents deemed by the API as relevant) in search results. This field is only considered if page_token is unset. The maximum allowed value is 5000. Otherwise an error is thrown. For example, 0 means to return results starting from the first matching document, and 10 means to return from the 11th document. This can be used for pagination, (for example, pageSize = 10 and offset = 10 means to return from the second page).
     */
    offset?: number | null;
    /**
     * The criteria determining how search results are sorted. For non-empty query, default is `"relevance desc"`. For empty query, default is `"upload_date desc"`. Supported options are: * `"relevance desc"`: By relevance descending, as determined by the API algorithms. * `"upload_date desc"`: By upload date descending. * `"upload_date"`: By upload date ascending. * `"update_date desc"`: By last updated date descending. * `"update_date"`: By last updated date ascending. * `"retrieval_importance desc"`: By retrieval importance of properties descending. This feature is still under development, please do not use unless otherwise instructed to do so.
     */
    orderBy?: string | null;
    /**
     * A limit on the number of documents returned in the search results. Increasing this value above the default value of 10 can increase search response time. The value can be between 1 and 100.
     */
    pageSize?: number | null;
    /**
     * The token specifying the current offset within search results. See SearchDocumentsResponse.next_page_token for an explanation of how to obtain the next set of query results.
     */
    pageToken?: string | null;
    /**
     * Experimental, do not use. The limit on the number of documents returned for the question-answering feature. To enable the question-answering feature, set [DocumentQuery].is_nl_query to true.
     */
    qaSizeLimit?: number | null;
    /**
     * The meta information collected about the end user, used to enforce access control and improve the search quality of the service.
     */
    requestMetadata?: Schema$GoogleCloudContentwarehouseV1RequestMetadata;
    /**
     * Controls if the search document request requires the return of a total size of matched documents. See SearchDocumentsResponse.total_size. Enabling this flag may adversely impact performance. Hint: If this is used with pagination, set this flag on the initial query but set this to false on subsequent page calls (keep the total count locally). Defaults to false.
     */
    requireTotalSize?: boolean | null;
    /**
     * Controls if the search document request requires the return of a total size of matched documents. See SearchDocumentsResponse.total_size.
     */
    totalResultSize?: string | null;
  }
  /**
   * Response message for DocumentService.SearchDocuments.
   */
  export interface Schema$GoogleCloudContentwarehouseV1SearchDocumentsResponse {
    /**
     * The histogram results that match with the specified SearchDocumentsRequest.histogram_queries.
     */
    histogramQueryResults?: Schema$GoogleCloudContentwarehouseV1HistogramQueryResult[];
    /**
     * The document entities that match the specified SearchDocumentsRequest.
     */
    matchingDocuments?: Schema$GoogleCloudContentwarehouseV1SearchDocumentsResponseMatchingDocument[];
    /**
     * Additional information for the API invocation, such as the request tracking id.
     */
    metadata?: Schema$GoogleCloudContentwarehouseV1ResponseMetadata;
    /**
     * The token that specifies the starting position of the next page of results. This field is empty if there are no more results.
     */
    nextPageToken?: string | null;
    /**
     * Experimental. Question answer from the query against the document.
     */
    questionAnswer?: string | null;
    /**
     * The total number of matched documents which is available only if the client set SearchDocumentsRequest.require_total_size to `true` or set SearchDocumentsRequest.total_result_size to `ESTIMATED_SIZE` or `ACTUAL_SIZE`. Otherwise, the value will be `-1`. Typically a UI would handle this condition by displaying "of many", for example: "Displaying 10 of many".
     */
    totalSize?: number | null;
  }
  /**
   * Document entry with metadata inside SearchDocumentsResponse
   */
  export interface Schema$GoogleCloudContentwarehouseV1SearchDocumentsResponseMatchingDocument {
    /**
     * Document that matches the specified SearchDocumentsRequest. This document only contains indexed metadata information.
     */
    document?: Schema$GoogleCloudContentwarehouseV1Document;
    /**
     * Experimental. Additional result info if the question-answering feature is enabled.
     */
    qaResult?: Schema$GoogleCloudContentwarehouseV1QAResult;
    /**
     * Contains snippets of text from the document full raw text that most closely match a search query's keywords, if available. All HTML tags in the original fields are stripped when returned in this field, and matching query keywords are enclosed in HTML bold tags. If the question-answering feature is enabled, this field will instead contain a snippet that answers the user's natural-language query. No HTML bold tags will be present, and highlights in the answer snippet can be found in QAResult.highlights.
     */
    searchTextSnippet?: string | null;
  }
  /**
   * Request message for DocumentService.SetAcl.
   */
  export interface Schema$GoogleCloudContentwarehouseV1SetAclRequest {
    /**
     * Required. REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. This refers to an Identity and Access (IAM) policy, which specifies access controls for the Document. You can set ACL with condition for projects only. Supported operators are: `=`, `!=`, `<`, `<=`, `\>`, and `\>=` where the left of the operator is `DocumentSchemaId` or property name and the right of the operator is a number or a quoted string. You must escape backslash (\\) and quote (\") characters. Boolean expressions (AND/OR) are supported up to 3 levels of nesting (for example, "((A AND B AND C) OR D) AND E"), a maximum of 10 comparisons are allowed in the expression. The expression must be < 6000 bytes in length. Sample condition: `"DocumentSchemaId = \"some schema id\" OR SchemaId.floatPropertyName \>= 10"`
     */
    policy?: Schema$GoogleIamV1Policy;
    /**
     * For Set Project ACL only. Authorization check for end user will be ignored when project_owner=true.
     */
    projectOwner?: boolean | null;
    /**
     * The meta information collected about the end user, used to enforce access control for the service.
     */
    requestMetadata?: Schema$GoogleCloudContentwarehouseV1RequestMetadata;
  }
  /**
   * Response message for DocumentService.SetAcl.
   */
  export interface Schema$GoogleCloudContentwarehouseV1SetAclResponse {
    /**
     * Additional information for the API invocation, such as the request tracking id.
     */
    metadata?: Schema$GoogleCloudContentwarehouseV1ResponseMetadata;
    /**
     * The policy will be attached to a resource (e.g. projecct, document).
     */
    policy?: Schema$GoogleIamV1Policy;
  }
  /**
   * Represents a list of synonyms for a given context. For example a context "sales" could contain: Synonym 1: sale, invoice, bill, order Synonym 2: money, credit, finance, payment Synonym 3: shipping, freight, transport Each SynonymSets should be disjoint
   */
  export interface Schema$GoogleCloudContentwarehouseV1SynonymSet {
    /**
     * This is a freeform field. Example contexts can be "sales," "engineering," "real estate," "accounting," etc. The context can be supplied during search requests.
     */
    context?: string | null;
    /**
     * The resource name of the SynonymSet This is mandatory for google.api.resource. Format: projects/{project_number\}/locations/{location\}/synonymSets/{context\}.
     */
    name?: string | null;
    /**
     * List of Synonyms for the context.
     */
    synonyms?: Schema$GoogleCloudContentwarehouseV1SynonymSetSynonym[];
  }
  /**
   * Represents a list of words given by the customer All these words are synonyms of each other.
   */
  export interface Schema$GoogleCloudContentwarehouseV1SynonymSetSynonym {
    /**
     * For example: sale, invoice, bill, order
     */
    words?: string[] | null;
  }
  /**
   * String/text values.
   */
  export interface Schema$GoogleCloudContentwarehouseV1TextArray {
    /**
     * List of text values.
     */
    values?: string[] | null;
  }
  /**
   * Configurations for a text property.
   */
  export interface Schema$GoogleCloudContentwarehouseV1TextTypeOptions {}
  /**
   * Filter on create timestamp or update timestamp of documents.
   */
  export interface Schema$GoogleCloudContentwarehouseV1TimeFilter {
    /**
     * Specifies which time field to filter documents on. Defaults to TimeField.UPLOAD_TIME.
     */
    timeField?: string | null;
    timeRange?: Schema$GoogleTypeInterval;
  }
  /**
   * Timestamp values.
   */
  export interface Schema$GoogleCloudContentwarehouseV1TimestampArray {
    /**
     * List of timestamp values.
     */
    values?: Schema$GoogleCloudContentwarehouseV1TimestampValue[];
  }
  /**
   * Configurations for a timestamp property.
   */
  export interface Schema$GoogleCloudContentwarehouseV1TimestampTypeOptions {}
  /**
   * Timestamp value type.
   */
  export interface Schema$GoogleCloudContentwarehouseV1TimestampValue {
    /**
     * The string must represent a valid instant in UTC and is parsed using java.time.format.DateTimeFormatter.ISO_INSTANT. e.g. "2013-09-29T18:46:19Z"
     */
    textValue?: string | null;
    /**
     * Timestamp value
     */
    timestampValue?: string | null;
  }
  /**
   * Metadata object for UpdateDocument request (currently empty).
   */
  export interface Schema$GoogleCloudContentwarehouseV1UpdateDocumentMetadata {}
  /**
   * Request message for DocumentService.UpdateDocument.
   */
  export interface Schema$GoogleCloudContentwarehouseV1UpdateDocumentRequest {
    /**
     * Request Option for processing Cloud AI Document in Document Warehouse. This field offers limited support for mapping entities from Cloud AI Document to Warehouse Document. Please consult with product team before using this field and other available options.
     */
    cloudAiDocumentOption?: Schema$GoogleCloudContentwarehouseV1CloudAIDocumentOption;
    /**
     * Required. The document to update.
     */
    document?: Schema$GoogleCloudContentwarehouseV1Document;
    /**
     * The meta information collected about the end user, used to enforce access control for the service.
     */
    requestMetadata?: Schema$GoogleCloudContentwarehouseV1RequestMetadata;
    /**
     * Options for the update operation.
     */
    updateOptions?: Schema$GoogleCloudContentwarehouseV1UpdateOptions;
  }
  /**
   * Response message for DocumentService.UpdateDocument.
   */
  export interface Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse {
    /**
     * Updated document after executing update request.
     */
    document?: Schema$GoogleCloudContentwarehouseV1Document;
    /**
     * Additional information for the API invocation, such as the request tracking id.
     */
    metadata?: Schema$GoogleCloudContentwarehouseV1ResponseMetadata;
    /**
     * Output from Rule Engine recording the rule evaluator and action executor's output. Refer format in: google/cloud/contentwarehouse/v1/rule_engine.proto
     */
    ruleEngineOutput?: Schema$GoogleCloudContentwarehouseV1RuleEngineOutput;
  }
  /**
   * Request message for DocumentSchemaService.UpdateDocumentSchema.
   */
  export interface Schema$GoogleCloudContentwarehouseV1UpdateDocumentSchemaRequest {
    /**
     * Required. The document schema to update with.
     */
    documentSchema?: Schema$GoogleCloudContentwarehouseV1DocumentSchema;
  }
  /**
   * Options for Update operations.
   */
  export interface Schema$GoogleCloudContentwarehouseV1UpdateOptions {
    /**
     * Options for merging.
     */
    mergeFieldsOptions?: Schema$GoogleCloudContentwarehouseV1MergeFieldsOptions;
    /**
     * Field mask for merging Document fields. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
     */
    updateMask?: string | null;
    /**
     * Type for update.
     */
    updateType?: string | null;
  }
  /**
   * Request message for RuleSetService.UpdateRuleSet.
   */
  export interface Schema$GoogleCloudContentwarehouseV1UpdateRuleSetRequest {
    /**
     * Required. The rule set to update.
     */
    ruleSet?: Schema$GoogleCloudContentwarehouseV1RuleSet;
  }
  /**
   * The user information.
   */
  export interface Schema$GoogleCloudContentwarehouseV1UserInfo {
    /**
     * The unique group identifications which the user is belong to. The format is "group:yyyy@example.com";
     */
    groupIds?: string[] | null;
    /**
     * A unique user identification string, as determined by the client. The maximum number of allowed characters is 255. Allowed characters include numbers 0 to 9, uppercase and lowercase letters, and restricted special symbols (:, @, +, -, _, ~) The format is "user:xxxx@example.com";
     */
    id?: string | null;
  }
  /**
   * `Value` represents a dynamically typed value which can be either be a float, a integer, a string, or a datetime value. A producer of value is expected to set one of these variants. Absence of any variant indicates an error.
   */
  export interface Schema$GoogleCloudContentwarehouseV1Value {
    /**
     * Represents a boolean value.
     */
    booleanValue?: boolean | null;
    /**
     * Represents a datetime value.
     */
    datetimeValue?: Schema$GoogleTypeDateTime;
    /**
     * Represents an enum value.
     */
    enumValue?: Schema$GoogleCloudContentwarehouseV1EnumValue;
    /**
     * Represents a float value.
     */
    floatValue?: number | null;
    /**
     * Represents a integer value.
     */
    intValue?: number | null;
    /**
     * Represents a string value.
     */
    stringValue?: string | null;
    /**
     * Represents a timestamp value.
     */
    timestampValue?: Schema$GoogleCloudContentwarehouseV1TimestampValue;
  }
  /**
   * Specifies the schema property name.
   */
  export interface Schema$GoogleCloudContentwarehouseV1WeightedSchemaProperty {
    /**
     * The document schema name.
     */
    documentSchemaName?: string | null;
    /**
     * The property definition names in the schema.
     */
    propertyNames?: string[] | null;
  }
  /**
   * Encodes the detailed information of a barcode.
   */
  export interface Schema$GoogleCloudDocumentaiV1Barcode {
    /**
     * Format of a barcode. The supported formats are: - `CODE_128`: Code 128 type. - `CODE_39`: Code 39 type. - `CODE_93`: Code 93 type. - `CODABAR`: Codabar type. - `DATA_MATRIX`: 2D Data Matrix type. - `ITF`: ITF type. - `EAN_13`: EAN-13 type. - `EAN_8`: EAN-8 type. - `QR_CODE`: 2D QR code type. - `UPC_A`: UPC-A type. - `UPC_E`: UPC-E type. - `PDF417`: PDF417 type. - `AZTEC`: 2D Aztec code type. - `DATABAR`: GS1 DataBar code type.
     */
    format?: string | null;
    /**
     * Raw value encoded in the barcode. For example: `'MEBKM:TITLE:Google;URL:https://www.google.com;;'`.
     */
    rawValue?: string | null;
    /**
     * Value format describes the format of the value that a barcode encodes. The supported formats are: - `CONTACT_INFO`: Contact information. - `EMAIL`: Email address. - `ISBN`: ISBN identifier. - `PHONE`: Phone number. - `PRODUCT`: Product. - `SMS`: SMS message. - `TEXT`: Text string. - `URL`: URL address. - `WIFI`: Wifi information. - `GEO`: Geo-localization. - `CALENDAR_EVENT`: Calendar event. - `DRIVER_LICENSE`: Driver's license.
     */
    valueFormat?: string | null;
  }
  /**
   * A bounding polygon for the detected image annotation.
   */
  export interface Schema$GoogleCloudDocumentaiV1BoundingPoly {
    /**
     * The bounding polygon normalized vertices.
     */
    normalizedVertices?: Schema$GoogleCloudDocumentaiV1NormalizedVertex[];
    /**
     * The bounding polygon vertices.
     */
    vertices?: Schema$GoogleCloudDocumentaiV1Vertex[];
  }
  /**
   * Document represents the canonical document resource in Document AI. It is an interchange format that provides insights into documents and allows for collaboration between users and Document AI to iterate and optimize for quality.
   */
  export interface Schema$GoogleCloudDocumentaiV1Document {
    /**
     * Optional. Inline document content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64.
     */
    content?: string | null;
    /**
     * A list of entities detected on Document.text. For document shards, entities in this list may cross shard boundaries.
     */
    entities?: Schema$GoogleCloudDocumentaiV1DocumentEntity[];
    /**
     * Placeholder. Relationship among Document.entities.
     */
    entityRelations?: Schema$GoogleCloudDocumentaiV1DocumentEntityRelation[];
    /**
     * Any error that occurred while processing this document.
     */
    error?: Schema$GoogleRpcStatus;
    /**
     * An IANA published [media type (MIME type)](https://www.iana.org/assignments/media-types/media-types.xhtml).
     */
    mimeType?: string | null;
    /**
     * Visual page layout for the Document.
     */
    pages?: Schema$GoogleCloudDocumentaiV1DocumentPage[];
    /**
     * Placeholder. Revision history of this document.
     */
    revisions?: Schema$GoogleCloudDocumentaiV1DocumentRevision[];
    /**
     * Information about the sharding if this document is sharded part of a larger document. If the document is not sharded, this message is not specified.
     */
    shardInfo?: Schema$GoogleCloudDocumentaiV1DocumentShardInfo;
    /**
     * Optional. UTF-8 encoded text in reading order from the document.
     */
    text?: string | null;
    /**
     * Placeholder. A list of text corrections made to Document.text. This is usually used for annotating corrections to OCR mistakes. Text changes for a given revision may not overlap with each other.
     */
    textChanges?: Schema$GoogleCloudDocumentaiV1DocumentTextChange[];
    /**
     * Styles for the Document.text.
     */
    textStyles?: Schema$GoogleCloudDocumentaiV1DocumentStyle[];
    /**
     * Optional. Currently supports Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. For more information, refer to [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris).
     */
    uri?: string | null;
  }
  /**
   * An entity that could be a phrase in the text or a property that belongs to the document. It is a known entity type, such as a person, an organization, or location.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentEntity {
    /**
     * Optional. Confidence of detected Schema entity. Range `[0, 1]`.
     */
    confidence?: number | null;
    /**
     * Optional. Canonical id. This will be a unique value in the entity list for this document.
     */
    id?: string | null;
    /**
     * Optional. Deprecated. Use `id` field instead.
     */
    mentionId?: string | null;
    /**
     * Optional. Text value of the entity e.g. `1600 Amphitheatre Pkwy`.
     */
    mentionText?: string | null;
    /**
     * Optional. Normalized entity value. Absent if the extracted value could not be converted or the type (e.g. address) is not supported for certain parsers. This field is also only populated for certain supported document types.
     */
    normalizedValue?: Schema$GoogleCloudDocumentaiV1DocumentEntityNormalizedValue;
    /**
     * Optional. Represents the provenance of this entity wrt. the location on the page where it was found.
     */
    pageAnchor?: Schema$GoogleCloudDocumentaiV1DocumentPageAnchor;
    /**
     * Optional. Entities can be nested to form a hierarchical data structure representing the content in the document.
     */
    properties?: Schema$GoogleCloudDocumentaiV1DocumentEntity[];
    /**
     * Optional. The history of this annotation.
     */
    provenance?: Schema$GoogleCloudDocumentaiV1DocumentProvenance;
    /**
     * Optional. Whether the entity will be redacted for de-identification purposes.
     */
    redacted?: boolean | null;
    /**
     * Optional. Provenance of the entity. Text anchor indexing into the Document.text.
     */
    textAnchor?: Schema$GoogleCloudDocumentaiV1DocumentTextAnchor;
    /**
     * Required. Entity type from a schema e.g. `Address`.
     */
    type?: string | null;
  }
  /**
   * Parsed and normalized entity value.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentEntityNormalizedValue {
    /**
     * Postal address. See also: https://github.com/googleapis/googleapis/blob/master/google/type/postal_address.proto
     */
    addressValue?: Schema$GoogleTypePostalAddress;
    /**
     * Boolean value. Can be used for entities with binary values, or for checkboxes.
     */
    booleanValue?: boolean | null;
    /**
     * DateTime value. Includes date, time, and timezone. See also: https://github.com/googleapis/googleapis/blob/master/google/type/datetime.proto
     */
    datetimeValue?: Schema$GoogleTypeDateTime;
    /**
     * Date value. Includes year, month, day. See also: https://github.com/googleapis/googleapis/blob/master/google/type/date.proto
     */
    dateValue?: Schema$GoogleTypeDate;
    /**
     * Float value.
     */
    floatValue?: number | null;
    /**
     * Integer value.
     */
    integerValue?: number | null;
    /**
     * Money value. See also: https://github.com/googleapis/googleapis/blob/master/google/type/money.proto
     */
    moneyValue?: Schema$GoogleTypeMoney;
    /**
     * Optional. An optional field to store a normalized string. For some entity types, one of respective `structured_value` fields may also be populated. Also not all the types of `structured_value` will be normalized. For example, some processors may not generate `float` or `integer` normalized text by default. Below are sample formats mapped to structured values. - Money/Currency type (`money_value`) is in the ISO 4217 text format. - Date type (`date_value`) is in the ISO 8601 text format. - Datetime type (`datetime_value`) is in the ISO 8601 text format.
     */
    text?: string | null;
  }
  /**
   * Relationship between Entities.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentEntityRelation {
    /**
     * Object entity id.
     */
    objectId?: string | null;
    /**
     * Relationship description.
     */
    relation?: string | null;
    /**
     * Subject entity id.
     */
    subjectId?: string | null;
  }
  /**
   * A page in a Document.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPage {
    /**
     * A list of visually detected text blocks on the page. A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.
     */
    blocks?: Schema$GoogleCloudDocumentaiV1DocumentPageBlock[];
    /**
     * A list of detected barcodes.
     */
    detectedBarcodes?: Schema$GoogleCloudDocumentaiV1DocumentPageDetectedBarcode[];
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages?: Schema$GoogleCloudDocumentaiV1DocumentPageDetectedLanguage[];
    /**
     * Physical dimension of the page.
     */
    dimension?: Schema$GoogleCloudDocumentaiV1DocumentPageDimension;
    /**
     * A list of visually detected form fields on the page.
     */
    formFields?: Schema$GoogleCloudDocumentaiV1DocumentPageFormField[];
    /**
     * Rendered image for this page. This image is preprocessed to remove any skew, rotation, and distortions such that the annotation bounding boxes can be upright and axis-aligned.
     */
    image?: Schema$GoogleCloudDocumentaiV1DocumentPageImage;
    /**
     * Image quality scores.
     */
    imageQualityScores?: Schema$GoogleCloudDocumentaiV1DocumentPageImageQualityScores;
    /**
     * Layout for the page.
     */
    layout?: Schema$GoogleCloudDocumentaiV1DocumentPageLayout;
    /**
     * A list of visually detected text lines on the page. A collection of tokens that a human would perceive as a line.
     */
    lines?: Schema$GoogleCloudDocumentaiV1DocumentPageLine[];
    /**
     * 1-based index for current Page in a parent Document. Useful when a page is taken out of a Document for individual processing.
     */
    pageNumber?: number | null;
    /**
     * A list of visually detected text paragraphs on the page. A collection of lines that a human would perceive as a paragraph.
     */
    paragraphs?: Schema$GoogleCloudDocumentaiV1DocumentPageParagraph[];
    /**
     * The history of this page.
     */
    provenance?: Schema$GoogleCloudDocumentaiV1DocumentProvenance;
    /**
     * A list of visually detected symbols on the page.
     */
    symbols?: Schema$GoogleCloudDocumentaiV1DocumentPageSymbol[];
    /**
     * A list of visually detected tables on the page.
     */
    tables?: Schema$GoogleCloudDocumentaiV1DocumentPageTable[];
    /**
     * A list of visually detected tokens on the page.
     */
    tokens?: Schema$GoogleCloudDocumentaiV1DocumentPageToken[];
    /**
     * Transformation matrices that were applied to the original document image to produce Page.image.
     */
    transforms?: Schema$GoogleCloudDocumentaiV1DocumentPageMatrix[];
    /**
     * A list of detected non-text visual elements e.g. checkbox, signature etc. on the page.
     */
    visualElements?: Schema$GoogleCloudDocumentaiV1DocumentPageVisualElement[];
  }
  /**
   * Referencing the visual context of the entity in the Document.pages. Page anchors can be cross-page, consist of multiple bounding polygons and optionally reference specific layout element types.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageAnchor {
    /**
     * One or more references to visual page elements
     */
    pageRefs?: Schema$GoogleCloudDocumentaiV1DocumentPageAnchorPageRef[];
  }
  /**
   * Represents a weak reference to a page element within a document.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageAnchorPageRef {
    /**
     * Optional. Identifies the bounding polygon of a layout element on the page.
     */
    boundingPoly?: Schema$GoogleCloudDocumentaiV1BoundingPoly;
    /**
     * Optional. Confidence of detected page element, if applicable. Range `[0, 1]`.
     */
    confidence?: number | null;
    /**
     * Optional. Deprecated. Use PageRef.bounding_poly instead.
     */
    layoutId?: string | null;
    /**
     * Optional. The type of the layout element that is being referenced if any.
     */
    layoutType?: string | null;
    /**
     * Required. Index into the Document.pages element, for example using `Document.pages` to locate the related page element. This field is skipped when its value is the default `0`. See https://developers.google.com/protocol-buffers/docs/proto3#json.
     */
    page?: string | null;
  }
  /**
   * A block has a set of lines (collected into paragraphs) that have a common line-spacing and orientation.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageBlock {
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages?: Schema$GoogleCloudDocumentaiV1DocumentPageDetectedLanguage[];
    /**
     * Layout for Block.
     */
    layout?: Schema$GoogleCloudDocumentaiV1DocumentPageLayout;
    /**
     * The history of this annotation.
     */
    provenance?: Schema$GoogleCloudDocumentaiV1DocumentProvenance;
  }
  /**
   * A detected barcode.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageDetectedBarcode {
    /**
     * Detailed barcode information of the DetectedBarcode.
     */
    barcode?: Schema$GoogleCloudDocumentaiV1Barcode;
    /**
     * Layout for DetectedBarcode.
     */
    layout?: Schema$GoogleCloudDocumentaiV1DocumentPageLayout;
  }
  /**
   * Detected language for a structural component.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageDetectedLanguage {
    /**
     * Confidence of detected language. Range `[0, 1]`.
     */
    confidence?: number | null;
    /**
     * The [BCP-47 language code](https://www.unicode.org/reports/tr35/#Unicode_locale_identifier), such as `en-US` or `sr-Latn`.
     */
    languageCode?: string | null;
  }
  /**
   * Dimension for the page.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageDimension {
    /**
     * Page height.
     */
    height?: number | null;
    /**
     * Dimension unit.
     */
    unit?: string | null;
    /**
     * Page width.
     */
    width?: number | null;
  }
  /**
   * A form field detected on the page.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageFormField {
    /**
     * Created for Labeling UI to export key text. If corrections were made to the text identified by the `field_name.text_anchor`, this field will contain the correction.
     */
    correctedKeyText?: string | null;
    /**
     * Created for Labeling UI to export value text. If corrections were made to the text identified by the `field_value.text_anchor`, this field will contain the correction.
     */
    correctedValueText?: string | null;
    /**
     * Layout for the FormField name. e.g. `Address`, `Email`, `Grand total`, `Phone number`, etc.
     */
    fieldName?: Schema$GoogleCloudDocumentaiV1DocumentPageLayout;
    /**
     * Layout for the FormField value.
     */
    fieldValue?: Schema$GoogleCloudDocumentaiV1DocumentPageLayout;
    /**
     * A list of detected languages for name together with confidence.
     */
    nameDetectedLanguages?: Schema$GoogleCloudDocumentaiV1DocumentPageDetectedLanguage[];
    /**
     * The history of this annotation.
     */
    provenance?: Schema$GoogleCloudDocumentaiV1DocumentProvenance;
    /**
     * A list of detected languages for value together with confidence.
     */
    valueDetectedLanguages?: Schema$GoogleCloudDocumentaiV1DocumentPageDetectedLanguage[];
    /**
     * If the value is non-textual, this field represents the type. Current valid values are: - blank (this indicates the `field_value` is normal text) - `unfilled_checkbox` - `filled_checkbox`
     */
    valueType?: string | null;
  }
  /**
   * Rendered image contents for this page.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageImage {
    /**
     * Raw byte content of the image.
     */
    content?: string | null;
    /**
     * Height of the image in pixels.
     */
    height?: number | null;
    /**
     * Encoding [media type (MIME type)](https://www.iana.org/assignments/media-types/media-types.xhtml) for the image.
     */
    mimeType?: string | null;
    /**
     * Width of the image in pixels.
     */
    width?: number | null;
  }
  /**
   * Image quality scores for the page image.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageImageQualityScores {
    /**
     * A list of detected defects.
     */
    detectedDefects?: Schema$GoogleCloudDocumentaiV1DocumentPageImageQualityScoresDetectedDefect[];
    /**
     * The overall quality score. Range `[0, 1]` where `1` is perfect quality.
     */
    qualityScore?: number | null;
  }
  /**
   * Image Quality Defects
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageImageQualityScoresDetectedDefect {
    /**
     * Confidence of detected defect. Range `[0, 1]` where `1` indicates strong confidence that the defect exists.
     */
    confidence?: number | null;
    /**
     * Name of the defect type. Supported values are: - `quality/defect_blurry` - `quality/defect_noisy` - `quality/defect_dark` - `quality/defect_faint` - `quality/defect_text_too_small` - `quality/defect_document_cutoff` - `quality/defect_text_cutoff` - `quality/defect_glare`
     */
    type?: string | null;
  }
  /**
   * Visual element describing a layout unit on a page.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageLayout {
    /**
     * The bounding polygon for the Layout.
     */
    boundingPoly?: Schema$GoogleCloudDocumentaiV1BoundingPoly;
    /**
     * Confidence of the current Layout within context of the object this layout is for. e.g. confidence can be for a single token, a table, a visual element, etc. depending on context. Range `[0, 1]`.
     */
    confidence?: number | null;
    /**
     * Detected orientation for the Layout.
     */
    orientation?: string | null;
    /**
     * Text anchor indexing into the Document.text.
     */
    textAnchor?: Schema$GoogleCloudDocumentaiV1DocumentTextAnchor;
  }
  /**
   * A collection of tokens that a human would perceive as a line. Does not cross column boundaries, can be horizontal, vertical, etc.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageLine {
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages?: Schema$GoogleCloudDocumentaiV1DocumentPageDetectedLanguage[];
    /**
     * Layout for Line.
     */
    layout?: Schema$GoogleCloudDocumentaiV1DocumentPageLayout;
    /**
     * The history of this annotation.
     */
    provenance?: Schema$GoogleCloudDocumentaiV1DocumentProvenance;
  }
  /**
   * Representation for transformation matrix, intended to be compatible and used with OpenCV format for image manipulation.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageMatrix {
    /**
     * Number of columns in the matrix.
     */
    cols?: number | null;
    /**
     * The matrix data.
     */
    data?: string | null;
    /**
     * Number of rows in the matrix.
     */
    rows?: number | null;
    /**
     * This encodes information about what data type the matrix uses. For example, 0 (CV_8U) is an unsigned 8-bit image. For the full list of OpenCV primitive data types, please refer to https://docs.opencv.org/4.3.0/d1/d1b/group__core__hal__interface.html
     */
    type?: number | null;
  }
  /**
   * A collection of lines that a human would perceive as a paragraph.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageParagraph {
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages?: Schema$GoogleCloudDocumentaiV1DocumentPageDetectedLanguage[];
    /**
     * Layout for Paragraph.
     */
    layout?: Schema$GoogleCloudDocumentaiV1DocumentPageLayout;
    /**
     * The history of this annotation.
     */
    provenance?: Schema$GoogleCloudDocumentaiV1DocumentProvenance;
  }
  /**
   * A detected symbol.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageSymbol {
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages?: Schema$GoogleCloudDocumentaiV1DocumentPageDetectedLanguage[];
    /**
     * Layout for Symbol.
     */
    layout?: Schema$GoogleCloudDocumentaiV1DocumentPageLayout;
  }
  /**
   * A table representation similar to HTML table structure.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageTable {
    /**
     * Body rows of the table.
     */
    bodyRows?: Schema$GoogleCloudDocumentaiV1DocumentPageTableTableRow[];
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages?: Schema$GoogleCloudDocumentaiV1DocumentPageDetectedLanguage[];
    /**
     * Header rows of the table.
     */
    headerRows?: Schema$GoogleCloudDocumentaiV1DocumentPageTableTableRow[];
    /**
     * Layout for Table.
     */
    layout?: Schema$GoogleCloudDocumentaiV1DocumentPageLayout;
    /**
     * The history of this table.
     */
    provenance?: Schema$GoogleCloudDocumentaiV1DocumentProvenance;
  }
  /**
   * A cell representation inside the table.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageTableTableCell {
    /**
     * How many columns this cell spans.
     */
    colSpan?: number | null;
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages?: Schema$GoogleCloudDocumentaiV1DocumentPageDetectedLanguage[];
    /**
     * Layout for TableCell.
     */
    layout?: Schema$GoogleCloudDocumentaiV1DocumentPageLayout;
    /**
     * How many rows this cell spans.
     */
    rowSpan?: number | null;
  }
  /**
   * A row of table cells.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageTableTableRow {
    /**
     * Cells that make up this row.
     */
    cells?: Schema$GoogleCloudDocumentaiV1DocumentPageTableTableCell[];
  }
  /**
   * A detected token.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageToken {
    /**
     * Detected break at the end of a Token.
     */
    detectedBreak?: Schema$GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreak;
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages?: Schema$GoogleCloudDocumentaiV1DocumentPageDetectedLanguage[];
    /**
     * Layout for Token.
     */
    layout?: Schema$GoogleCloudDocumentaiV1DocumentPageLayout;
    /**
     * The history of this annotation.
     */
    provenance?: Schema$GoogleCloudDocumentaiV1DocumentProvenance;
    /**
     * Text style attributes.
     */
    styleInfo?: Schema$GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo;
  }
  /**
   * Detected break at the end of a Token.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageTokenDetectedBreak {
    /**
     * Detected break type.
     */
    type?: string | null;
  }
  /**
   * Font and other text style attributes.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo {
    /**
     * Color of the background.
     */
    backgroundColor?: Schema$GoogleTypeColor;
    /**
     * Whether the text is bold (equivalent to font_weight is at least `700`).
     */
    bold?: boolean | null;
    /**
     * Font size in points (`1` point is `¹⁄₇₂` inches).
     */
    fontSize?: number | null;
    /**
     * Name or style of the font.
     */
    fontType?: string | null;
    /**
     * TrueType weight on a scale `100` (thin) to `1000` (ultra-heavy). Normal is `400`, bold is `700`.
     */
    fontWeight?: number | null;
    /**
     * Whether the text is handwritten.
     */
    handwritten?: boolean | null;
    /**
     * Whether the text is italic.
     */
    italic?: boolean | null;
    /**
     * Letter spacing in points.
     */
    letterSpacing?: number | null;
    /**
     * Font size in pixels, equal to _unrounded font_size_ * _resolution_ ÷ `72.0`.
     */
    pixelFontSize?: number | null;
    /**
     * Whether the text is in small caps.
     */
    smallcaps?: boolean | null;
    /**
     * Whether the text is strikethrough.
     */
    strikeout?: boolean | null;
    /**
     * Whether the text is a subscript.
     */
    subscript?: boolean | null;
    /**
     * Whether the text is a superscript.
     */
    superscript?: boolean | null;
    /**
     * Color of the text.
     */
    textColor?: Schema$GoogleTypeColor;
    /**
     * Whether the text is underlined.
     */
    underlined?: boolean | null;
  }
  /**
   * Detected non-text visual elements e.g. checkbox, signature etc. on the page.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentPageVisualElement {
    /**
     * A list of detected languages together with confidence.
     */
    detectedLanguages?: Schema$GoogleCloudDocumentaiV1DocumentPageDetectedLanguage[];
    /**
     * Layout for VisualElement.
     */
    layout?: Schema$GoogleCloudDocumentaiV1DocumentPageLayout;
    /**
     * Type of the VisualElement.
     */
    type?: string | null;
  }
  /**
   * Structure to identify provenance relationships between annotations in different revisions.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentProvenance {
    /**
     * The Id of this operation. Needs to be unique within the scope of the revision.
     */
    id?: number | null;
    /**
     * References to the original elements that are replaced.
     */
    parents?: Schema$GoogleCloudDocumentaiV1DocumentProvenanceParent[];
    /**
     * The index of the revision that produced this element.
     */
    revision?: number | null;
    /**
     * The type of provenance operation.
     */
    type?: string | null;
  }
  /**
   * The parent element the current element is based on. Used for referencing/aligning, removal and replacement operations.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentProvenanceParent {
    /**
     * The id of the parent provenance.
     */
    id?: number | null;
    /**
     * The index of the parent item in the corresponding item list (eg. list of entities, properties within entities, etc.) in the parent revision.
     */
    index?: number | null;
    /**
     * The index of the index into current revision's parent_ids list.
     */
    revision?: number | null;
  }
  /**
   * Contains past or forward revisions of this document.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentRevision {
    /**
     * If the change was made by a person specify the name or id of that person.
     */
    agent?: string | null;
    /**
     * The time that the revision was created, internally generated by doc proto storage at the time of create.
     */
    createTime?: string | null;
    /**
     * Human Review information of this revision.
     */
    humanReview?: Schema$GoogleCloudDocumentaiV1DocumentRevisionHumanReview;
    /**
     * Id of the revision, internally generated by doc proto storage. Unique within the context of the document.
     */
    id?: string | null;
    /**
     * The revisions that this revision is based on. This can include one or more parent (when documents are merged.) This field represents the index into the `revisions` field.
     */
    parent?: number[] | null;
    /**
     * The revisions that this revision is based on. Must include all the ids that have anything to do with this revision - eg. there are `provenance.parent.revision` fields that index into this field.
     */
    parentIds?: string[] | null;
    /**
     * If the annotation was made by processor identify the processor by its resource name.
     */
    processor?: string | null;
  }
  /**
   * Human Review information of the document.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentRevisionHumanReview {
    /**
     * Human review state. e.g. `requested`, `succeeded`, `rejected`.
     */
    state?: string | null;
    /**
     * A message providing more details about the current state of processing. For example, the rejection reason when the state is `rejected`.
     */
    stateMessage?: string | null;
  }
  /**
   * For a large document, sharding may be performed to produce several document shards. Each document shard contains this field to detail which shard it is.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentShardInfo {
    /**
     * Total number of shards.
     */
    shardCount?: string | null;
    /**
     * The 0-based index of this shard.
     */
    shardIndex?: string | null;
    /**
     * The index of the first character in Document.text in the overall document global text.
     */
    textOffset?: string | null;
  }
  /**
   * Annotation for common text style attributes. This adheres to CSS conventions as much as possible.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentStyle {
    /**
     * Text background color.
     */
    backgroundColor?: Schema$GoogleTypeColor;
    /**
     * Text color.
     */
    color?: Schema$GoogleTypeColor;
    /**
     * Font family such as `Arial`, `Times New Roman`. https://www.w3schools.com/cssref/pr_font_font-family.asp
     */
    fontFamily?: string | null;
    /**
     * Font size.
     */
    fontSize?: Schema$GoogleCloudDocumentaiV1DocumentStyleFontSize;
    /**
     * [Font weight](https://www.w3schools.com/cssref/pr_font_weight.asp). Possible values are `normal`, `bold`, `bolder`, and `lighter`.
     */
    fontWeight?: string | null;
    /**
     * Text anchor indexing into the Document.text.
     */
    textAnchor?: Schema$GoogleCloudDocumentaiV1DocumentTextAnchor;
    /**
     * [Text decoration](https://www.w3schools.com/cssref/pr_text_text-decoration.asp). Follows CSS standard.
     */
    textDecoration?: string | null;
    /**
     * [Text style](https://www.w3schools.com/cssref/pr_font_font-style.asp). Possible values are `normal`, `italic`, and `oblique`.
     */
    textStyle?: string | null;
  }
  /**
   * Font size with unit.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentStyleFontSize {
    /**
     * Font size for the text.
     */
    size?: number | null;
    /**
     * Unit for the font size. Follows CSS naming (such as `in`, `px`, and `pt`).
     */
    unit?: string | null;
  }
  /**
   * Text reference indexing into the Document.text.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentTextAnchor {
    /**
     * Contains the content of the text span so that users do not have to look it up in the text_segments. It is always populated for formFields.
     */
    content?: string | null;
    /**
     * The text segments from the Document.text.
     */
    textSegments?: Schema$GoogleCloudDocumentaiV1DocumentTextAnchorTextSegment[];
  }
  /**
   * A text segment in the Document.text. The indices may be out of bounds which indicate that the text extends into another document shard for large sharded documents. See ShardInfo.text_offset
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentTextAnchorTextSegment {
    /**
     * TextSegment half open end UTF-8 char index in the Document.text.
     */
    endIndex?: string | null;
    /**
     * TextSegment start UTF-8 char index in the Document.text.
     */
    startIndex?: string | null;
  }
  /**
   * This message is used for text changes aka. OCR corrections.
   */
  export interface Schema$GoogleCloudDocumentaiV1DocumentTextChange {
    /**
     * The text that replaces the text identified in the `text_anchor`.
     */
    changedText?: string | null;
    /**
     * The history of this annotation.
     */
    provenance?: Schema$GoogleCloudDocumentaiV1DocumentProvenance[];
    /**
     * Provenance of the correction. Text anchor indexing into the Document.text. There can only be a single `TextAnchor.text_segments` element. If the start and end index of the text segment are the same, the text change is inserted before that index.
     */
    textAnchor?: Schema$GoogleCloudDocumentaiV1DocumentTextAnchor;
  }
  /**
   * A vertex represents a 2D point in the image. NOTE: the normalized vertex coordinates are relative to the original image and range from 0 to 1.
   */
  export interface Schema$GoogleCloudDocumentaiV1NormalizedVertex {
    /**
     * X coordinate.
     */
    x?: number | null;
    /**
     * Y coordinate (starts from the top of the image).
     */
    y?: number | null;
  }
  /**
   * A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.
   */
  export interface Schema$GoogleCloudDocumentaiV1Vertex {
    /**
     * X coordinate.
     */
    x?: number | null;
    /**
     * Y coordinate (starts from the top of the image).
     */
    y?: number | null;
  }
  /**
   * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] \}, { "log_type": "DATA_WRITE" \}, { "log_type": "ADMIN_READ" \} ] \}, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" \}, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] \} ] \} ] \} For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
   */
  export interface Schema$GoogleIamV1AuditConfig {
    /**
     * The configuration for logging of each type of permission.
     */
    auditLogConfigs?: Schema$GoogleIamV1AuditLogConfig[];
    /**
     * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
     */
    service?: string | null;
  }
  /**
   * Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] \}, { "log_type": "DATA_WRITE" \} ] \} This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
   */
  export interface Schema$GoogleIamV1AuditLogConfig {
    /**
     * Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
     */
    exemptedMembers?: string[] | null;
    /**
     * The log type that this config enables.
     */
    logType?: string | null;
  }
  /**
   * Associates `members`, or principals, with a `role`.
   */
  export interface Schema$GoogleIamV1Binding {
    /**
     * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    condition?: Schema$GoogleTypeExpr;
    /**
     * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid\}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid\}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid\}.svc.id.goog[{namespace\}/{kubernetes-sa\}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid\}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain\}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid\}?uid={uniqueid\}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid\}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid\}?uid={uniqueid\}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid\}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid\}?uid={uniqueid\}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid\}` and the recovered group retains the role in the binding.
     */
    members?: string[] | null;
    /**
     * Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
     */
    role?: string | null;
  }
  /**
   * An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] \}, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", \} \} ], "etag": "BwWWja0YfJA=", "version": 3 \} ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
   */
  export interface Schema$GoogleIamV1Policy {
    /**
     * Specifies cloud audit logging configuration for this policy.
     */
    auditConfigs?: Schema$GoogleIamV1AuditConfig[];
    /**
     * Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
     */
    bindings?: Schema$GoogleIamV1Binding[];
    /**
     * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
     */
    etag?: string | null;
    /**
     * Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
     */
    version?: number | null;
  }
  /**
   * Represents the information about user's working hours during one day. Note that a period on Monday from 18:00 - 00:00 is represented as a triplet (1, 1080, 1440).
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaAvailabilityPeriod {
    /**
     * Day of week, 0 for Sunday, 1 for Monday, ...
     */
    dayOfWeek?: number | null;
    /**
     * Period end, in minutes from the start of the day, exclusive.
     */
    periodEndMinutes?: number | null;
    /**
     * Period start, in minutes from the start of the day, inclusive.
     */
    periodStartMinutes?: number | null;
  }
  /**
   * The status indicating the user is temporarily busy and there is not a more specific status derived from calendar that applies (e.g., InMeeting or DoNotDisturb).
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaCalendarBusy {
    /**
     * The time when the user will either stop being committed or change commitment type (i.e. InMeeting, DoNotDisturb, Busy or OutOfOffice < Xh). Note that the goal of this field is to provide information to help users decide how to communicate with a user (see also http://shortn/_wXYXtZScgh).
     */
    committedUntil?: string | null;
    /**
     * The summary of the corresponding event in Calendar.
     */
    eventSummary?: string | null;
    /**
     * The next time when the user will be available, i.e., when their status will be neither InMeeting, CalendarBusy, DoNotDisturb, OutsideWorkingHours, nor OutOfOffice.
     */
    nextAvailable?: string | null;
    /**
     * The time when the user will stop being occupied, i.e., when their status will be neither inMeeting, Busy nor DoNotDisturb.
     */
    occupiedUntil?: string | null;
  }
  /**
   * Custom location specified by the user.
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaCustomLocation {
    /**
     * Geographic location as geo coordinates.
     */
    geoCoordinates?: Schema$GoogleTypeLatLng;
    /**
     * The custom location label as a string entered manually by the user.
     */
    label?: string | null;
    /**
     * Geographic location as free-form text.
     */
    location?: string | null;
  }
  /**
   * The status indicating the user should not be disturbed.
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaDoNotDisturb {
    /**
     * The time when the user will either stop being committed or change commitment type (i.e. InMeeting, DoNotDisturb, Busy or OutOfOffice < Xh). Note that the goal of this field is to provide information to help users decide how to communicate with a user (see also http://shortn/_wXYXtZScgh).
     */
    committedUntil?: string | null;
    /**
     * The next time when the user will be available, i.e., when their status will be neither InMeeting, CalendarBusy, DoNotDisturb, OutsideWorkingHours, nor OutOfOffice.
     */
    nextAvailable?: string | null;
    /**
     * The time when the user will stop being occupied, i.e., when their status will be neither inMeeting, Busy nor DoNotDisturb.
     */
    occupiedUntil?: string | null;
  }
  /**
   * Home location.
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaHomeLocation {}
  /**
   * The status indicating that no other status applies.
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaInactive {}
  /**
   * The status indicating the user is in a meeting.
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaInMeeting {
    /**
     * The time when the user will either stop being committed or change commitment type (i.e. InMeeting, DoNotDisturb, Busy or OutOfOffice < Xh). Note that the goal of this field is to provide information to help users decide how to communicate with a user (see also http://shortn/_wXYXtZScgh).
     */
    committedUntil?: string | null;
    /**
     * The summary of the corresponding event in Calendar.
     */
    eventSummary?: string | null;
    /**
     * The time when the user will stop being in a meeting.
     */
    inMeetingsUntil?: string | null;
    /**
     * The next time when the user will be available, i.e., when their status will be neither InMeeting, CalendarBusy, DoNotDisturb, OutsideWorkingHours, nor OutOfOffice.
     */
    nextAvailable?: string | null;
    /**
     * The time when the user will stop being occupied, i.e., when their status will be neither InMeeting, Busy nor DoNotDisturb.
     */
    occupiedUntil?: string | null;
  }
  /**
   * Context which helps to determine the user's local time.
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaLocalTimeContext {
    /**
     * The current time zone of the user. Represented as a valid time zone ID from Olson database, like "Europe/Zurich" (see http://google3/i18n/identifiers/data/timezones.txt).
     */
    timeZone?: string | null;
  }
  /**
   * Office location.
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaOfficeLocation {
    /**
     * Experimental. Can change or disappear without warning or notice. References a building from http://google3/ccc/hosted/api/rosy/resources/calendar/building.proto For example "US-NYC-9TH".
     */
    experimentalBuildingId?: string | null;
    /**
     * Experimental. Can change or disappear without warning or notice. The desk id. For example "11E358K".
     */
    experimentalDeskId?: string | null;
    /**
     * Experimental. Can change or disappear without warning or notice. The floor id. For example "11".
     */
    experimentalFloorId?: string | null;
    /**
     * The display label of this office location. For example a building name.
     */
    label?: string | null;
  }
  /**
   * The status indicating the user is out of office.
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaOutOfOffice {
    /**
     * The closest time when the user will be available after this OOO block. This might be different from the end of the OOO block in Calendar, since the OOO block might end on Friday evening, and then the user is outside working hours.
     */
    comeBackTime?: string | null;
    /**
     * The time when the user will either stop being committed or change commitment type (i.e. InMeeting, DoNotDisturb, Busy or OutOfOffice < Xh). Note that the goal of this field is to provide information to help users decide how to communicate with a user (see also http://shortn/_wXYXtZScgh). Note that if this OOO block is large (\>=Xh), committed_until is not set.
     */
    committedUntil?: string | null;
    /**
     * The summary of the corresponding OOO block in Calendar. This is entered by the user, so we return it "as is" - no i18n.
     */
    eventSummary?: string | null;
  }
  /**
   * The status indicating the user doesn't work at this time.
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaOutsideWorkingHours {
    /**
     * The closest time when the user will be available after this block. This might be different from the start of the working hours in Calendar, because the given OutsideWorkingHours interval might be followed by OOO.
     */
    comeBackTime?: string | null;
  }
  /**
   * A time range, which includes the start and excludes the end.
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaTimeRange {
    /**
     * End point of the range, exclusive.
     */
    endTime?: string | null;
    /**
     * Starting point of the range, inclusive.
     */
    startTime?: string | null;
  }
  export interface Schema$GoogleInternalAppsWaldoV1alphaUpcomingCommitmentContext {
    /**
     * The status of the commitment above.
     */
    nextCommitmentStatus?: Schema$GoogleInternalAppsWaldoV1alphaUserStatus;
    /**
     * The most relevant upcoming commitment (InMeeting, DoNotDisturb, CalendarBusy or OutOfOffice). This context is set only if there is an upcoming commitment to show, and only on non commitments. Priority is given to the next closest commitment if its start is close enough to this event, otherwise the next large OOO if there is one.
     */
    nextCommitmentTime?: string | null;
  }
  /**
   * The context indicating the user's upcoming Out of Office event.
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaUpcomingOooContext {
    /**
     * The future period of absence. The start of this timerange is the start of the future Out of Office event. The end of this timerange represents the come back time of the user from that future OOO event. Note that the come back time might be different (greater) than the end of the corresponding future OOO event due to other non-working user status intervals that it may be followed by.
     */
    timeRange?: Schema$GoogleInternalAppsWaldoV1alphaTimeRange;
  }
  /**
   * The current and future availabilities of a user. The response contains a timeline, which starts before or at the request time, and the timeline is split into a set of disjoint intervals (without gaps), where the first range always contains the request time. Each range represents what should be displayed in the UI during this time range. The time range might be different from the actual time range of the underlying status. For example, if the user is OOO from 09:00 to 10:00, and a request is made at 8:00, the response might contain two intervals: [08:00, 09:00) - "User is INACTIVE, but leaving the office soon" [09:00, 10:00) - "User is OOO till 10:00" For intervals that don't have a clear availability signal coming from Calendar (e.g. OOO), we return INACTIVE. For more details, please see https://docs.google.com/presentation/d/1ADCTxGawjF9UqMnfuVrVNxGvdyjeiV8h4D7p0a9zYgw/edit#slide=id.g3e2824ac6c_12_94 The service returns availabilities for some short period of time - likely one day, but the client should stick to the "next_poll_time" to decide when to query the server again at the latest. Below there is an example response from the server. Let's assume the client calls the service at 17:59:45. The client receives the message and, assuming its current time is between [17:59:45, 18:00:00), it displays "inactive". When the current time becomes 18:00:00 it displays "outside working hours". At 18:00:40 the client issues another rpc which will return the availabilities for the next minute. The original response looks like availabilities { time_range { start_time: 17:59:45 end_time: 18:00:00 \} status { inactive {\} \} \} availabilities { time_range { start_time: 18:00:00 end_time: 18:00:45 \} status { outside_working_hours { \} \} \} next_poll_time: 18:00:40
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaUserAvailabilities {
    /**
     * A list of user availabilities having contiguous time ranges which are ordered chronologically. The first one starts at the time of the request or before, and is guaranteed to contain the request time. That means the first element always indicates the current status of a user. A client that wants to display a user's availability in real time should display the availability whose time range contains the current time.
     */
    availabilities?: Schema$GoogleInternalAppsWaldoV1alphaUserAvailability[];
    /**
     * The time at which the client should issue the next availability query for this user. This field should only be used to control the polling frequency. This time is always before the end of the time range of the last availability so that the client always knows the current availability.
     */
    nextPollTime?: string | null;
    /**
     * Information about the user's working hours. This will only be set in case working hours are enabled in their calendar settings.
     */
    workingHours?: Schema$GoogleInternalAppsWaldoV1alphaWorkingHours;
  }
  /**
   * A single availability range. The displayed status should be the same during the entire time range.
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaUserAvailability {
    /**
     * The contexts contain additional information about the current user's availability or its upcoming changes. The client doesn't need to extract certain bits to visualize the status or apply custom logic based on the content of this field: the status field should contain everything needed for the correct visualization.
     */
    contexts?: Schema$GoogleInternalAppsWaldoV1alphaUserContext;
    /**
     * The user status during the time range.
     */
    status?: Schema$GoogleInternalAppsWaldoV1alphaUserStatus;
    /**
     * The time range when this availability should be displayed.
     */
    timeRange?: Schema$GoogleInternalAppsWaldoV1alphaTimeRange;
  }
  /**
   * Additional context about the user's current and/or future availability to give a better understanding of the status ("Working from Zurich").
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaUserContext {
    /**
     * Helps to determine the user's local time by providing their current time zone.
     */
    localTime?: Schema$GoogleInternalAppsWaldoV1alphaLocalTimeContext;
    /**
     * Information about upcoming events.
     */
    upcomingCommitmentContext?: Schema$GoogleInternalAppsWaldoV1alphaUpcomingCommitmentContext;
    /**
     * Set if user has upcoming OOO.
     */
    upcomingOoo?: Schema$GoogleInternalAppsWaldoV1alphaUpcomingOooContext;
    /**
     * Set if the user has a working location. Not just elsewhere (legacy name).
     */
    workingElsewhere?: Schema$GoogleInternalAppsWaldoV1alphaWorkingElsewhereContext;
  }
  /**
   * Location of the user, which might be "home", for example, or an office building, as well as a custom location specified by the user.
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaUserLocation {
    /**
     * Indicates the user is working from some other location.
     */
    customLocation?: Schema$GoogleInternalAppsWaldoV1alphaCustomLocation;
    /**
     * Indicates the user is working from home.
     */
    homeLocation?: Schema$GoogleInternalAppsWaldoV1alphaHomeLocation;
    /**
     * Indicates the user is working from the office.
     */
    officeLocation?: Schema$GoogleInternalAppsWaldoV1alphaOfficeLocation;
  }
  /**
   * The actual status of the user. The message contains everything needed for visualisation of this status.
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaUserStatus {
    /**
     * Set if the user is temporarily busy and there is not a more specific status derived from calendar that applies (e.g., InMeeting or DoNotDisturb).
     */
    calendarBusy?: Schema$GoogleInternalAppsWaldoV1alphaCalendarBusy;
    /**
     * Set if the user is in a Focus Time block. Note that this is different than Chat's Do not disturb status, but they may coincide, see: go/focus-time-dnd.
     */
    doNotDisturb?: Schema$GoogleInternalAppsWaldoV1alphaDoNotDisturb;
    /**
     * Set if no other statuses apply.
     */
    inactive?: Schema$GoogleInternalAppsWaldoV1alphaInactive;
    /**
     * Set if the user is in a meeting.
     */
    inMeeting?: Schema$GoogleInternalAppsWaldoV1alphaInMeeting;
    /**
     * Set if the user is out of office.
     */
    outOfOffice?: Schema$GoogleInternalAppsWaldoV1alphaOutOfOffice;
    /**
     * Set if the user doesn't work at this time.
     */
    outsideWorkingHours?: Schema$GoogleInternalAppsWaldoV1alphaOutsideWorkingHours;
  }
  /**
   * The context providing the User Location (not just Elsewhere). This is a legacy name from when it was only set for users working remotely, now it is also set when the user is working from the office.
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaWorkingElsewhereContext {
    /**
     * The new location of the user. Might represent home, office, or a custom address on the map.
     */
    location?: Schema$GoogleInternalAppsWaldoV1alphaUserLocation;
  }
  /**
   * Information about the user's working hours.
   */
  export interface Schema$GoogleInternalAppsWaldoV1alphaWorkingHours {
    /**
     * A list of availability periods representing the user's working hours as configured in calendar.
     */
    availableTime?: Schema$GoogleInternalAppsWaldoV1alphaAvailabilityPeriod[];
  }
  /**
   * Id for message recipients, e.g. users, groups etc.
   */
  export interface Schema$GoogleInternalCommunicationsInstantmessagingV1Id {
    /**
     * app is the tachyon client application that generated or is to receive a message.
     */
    app?: string | null;
    /**
     * country_code is the E164_COUNTRY_CODE format country code for this id, used as a hint for its region. E.g, "+1" will be used for North America, "+86" will be used for China, etc. Should be filled only for RCS group id.
     */
    countryCode?: string | null;
    /**
     * id is a unique (for this type and app) identifier of a message source or recipient.
     */
    id?: string | null;
    /**
     * location_hint is used as a hint for the user's region.
     */
    locationHint?: Schema$GoogleInternalCommunicationsInstantmessagingV1LocationHint;
    /**
     * Raw byte array containing encoded routing information. Clients of Tachyon are expected to include the most recent routing_info_cookie that they have received from the server in the requests that they make. Its format is purposely opaque so that clients do not need to concern themselves with the content of this field. This field is expected to be used primarily by Tachygram clients for go/tachygram-groups to simplify the API contract for group operations while reducing the need for unnecessary lookups.
     */
    routingInfoToken?: string | null;
    /**
     * type defines what the id field contains, e.g. phone number, Fi-number, Gaia ID etc.
     */
    type?: string | null;
  }
  /**
   * LocationHint is used to specify a location as well as format.
   */
  export interface Schema$GoogleInternalCommunicationsInstantmessagingV1LocationHint {
    /**
     * the format of location.
     */
    format?: string | null;
    /**
     * Location is the location, provided in the format specified by format.
     */
    location?: string | null;
  }
  /**
   * This resource represents a long-running operation that is the result of a network API call.
   */
  export interface Schema$GoogleLongrunningOperation {
    /**
     * If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
     */
    done?: boolean | null;
    /**
     * The error result of the operation in case of failure or cancellation.
     */
    error?: Schema$GoogleRpcStatus;
    /**
     * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
     */
    metadata?: {[key: string]: any} | null;
    /**
     * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id\}`.
     */
    name?: string | null;
    /**
     * The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
     */
    response?: {[key: string]: any} | null;
  }
  /**
   * A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); \}
   */
  export interface Schema$GoogleProtobufEmpty {}
  /**
   * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
   */
  export interface Schema$GoogleRpcStatus {
    /**
     * The status code, which should be an enum value of google.rpc.Code.
     */
    code?: number | null;
    /**
     * A list of messages that carry the error details. There is a common set of message types for APIs to use.
     */
    details?: Array<{[key: string]: any}> | null;
    /**
     * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
     */
    message?: string | null;
  }
  /**
   * Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); \} public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); \} return resultBuilder.build(); \} // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; \} return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; \} static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; \} Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; \} [result autorelease]; return result; \} // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); \} var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); \}; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); \} resultBuilder.push(hexString); return resultBuilder.join(''); \}; // ...
   */
  export interface Schema$GoogleTypeColor {
    /**
     * The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).
     */
    alpha?: number | null;
    /**
     * The amount of blue in the color as a value in the interval [0, 1].
     */
    blue?: number | null;
    /**
     * The amount of green in the color as a value in the interval [0, 1].
     */
    green?: number | null;
    /**
     * The amount of red in the color as a value in the interval [0, 1].
     */
    red?: number | null;
  }
  /**
   * Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
   */
  export interface Schema$GoogleTypeDate {
    /**
     * Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
     */
    day?: number | null;
    /**
     * Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
     */
    month?: number | null;
    /**
     * Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
     */
    year?: number | null;
  }
  /**
   * Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.
   */
  export interface Schema$GoogleTypeDateTime {
    /**
     * Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.
     */
    day?: number | null;
    /**
     * Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value "24:00:00" for scenarios like business closing time.
     */
    hours?: number | null;
    /**
     * Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.
     */
    minutes?: number | null;
    /**
     * Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.
     */
    month?: number | null;
    /**
     * Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.
     */
    nanos?: number | null;
    /**
     * Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.
     */
    seconds?: number | null;
    /**
     * Time zone.
     */
    timeZone?: Schema$GoogleTypeTimeZone;
    /**
     * UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 \}.
     */
    utcOffset?: string | null;
    /**
     * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.
     */
    year?: number | null;
  }
  /**
   * Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
   */
  export interface Schema$GoogleTypeExpr {
    /**
     * Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
     */
    description?: string | null;
    /**
     * Textual representation of an expression in Common Expression Language syntax.
     */
    expression?: string | null;
    /**
     * Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
     */
    location?: string | null;
    /**
     * Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
     */
    title?: string | null;
  }
  /**
   * Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.
   */
  export interface Schema$GoogleTypeInterval {
    /**
     * Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.
     */
    endTime?: string | null;
    /**
     * Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.
     */
    startTime?: string | null;
  }
  /**
   * An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
   */
  export interface Schema$GoogleTypeLatLng {
    /**
     * The latitude in degrees. It must be in the range [-90.0, +90.0].
     */
    latitude?: number | null;
    /**
     * The longitude in degrees. It must be in the range [-180.0, +180.0].
     */
    longitude?: number | null;
  }
  /**
   * Represents an amount of money with its currency type.
   */
  export interface Schema$GoogleTypeMoney {
    /**
     * The three-letter currency code defined in ISO 4217.
     */
    currencyCode?: string | null;
    /**
     * Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
     */
    nanos?: number | null;
    /**
     * The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
     */
    units?: string | null;
  }
  /**
   * Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
   */
  export interface Schema$GoogleTypePostalAddress {
    /**
     * Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
     */
    addressLines?: string[] | null;
    /**
     * Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
     */
    administrativeArea?: string | null;
    /**
     * Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en".
     */
    languageCode?: string | null;
    /**
     * Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
     */
    locality?: string | null;
    /**
     * Optional. The name of the organization at the address.
     */
    organization?: string | null;
    /**
     * Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
     */
    postalCode?: string | null;
    /**
     * Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
     */
    recipients?: string[] | null;
    /**
     * Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
     */
    regionCode?: string | null;
    /**
     * The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.
     */
    revision?: number | null;
    /**
     * Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
     */
    sortingCode?: string | null;
    /**
     * Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
     */
    sublocality?: string | null;
  }
  /**
   * Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
   */
  export interface Schema$GoogleTypeTimeOfDay {
    /**
     * Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
     */
    hours?: number | null;
    /**
     * Minutes of hour of day. Must be from 0 to 59.
     */
    minutes?: number | null;
    /**
     * Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
     */
    nanos?: number | null;
    /**
     * Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
     */
    seconds?: number | null;
  }
  /**
   * Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
   */
  export interface Schema$GoogleTypeTimeZone {
    /**
     * IANA Time Zone Database time zone, e.g. "America/New_York".
     */
    id?: string | null;
    /**
     * Optional. IANA Time Zone Database version number, e.g. "2019a".
     */
    version?: string | null;
  }
  export interface Schema$GroupsPerDocData {
    AuthorId?: string | null;
    GroupGaiaId?: string | null;
    /**
     * Legacy group mysql id.
     */
    GroupId?: string | null;
    ThreadId?: string | null;
  }
  export interface Schema$HomeGraphCommonRoute {
    /**
     * The device ID defined by the agent.
     */
    agentDeviceId?: string | null;
    /**
     * The agent's ID. Generally it is the agent's Google cloud project id.
     */
    agentId?: string | null;
    /**
     * chip endpoint index (if the target is CHIP). Set packed = true to handle error caused by b/32953375 when exporting this data. Note that we should never change this to non-repeated: a packed field will not work properly if you change the field to non-repeated later.
     */
    chipEndpoint?: number[] | null;
    /**
     * Execution routing target.
     */
    targetType?: string | null;
  }
  /**
   * Defines execution routing information for Traits, which will be used to be mapped for each Trait as following: map traits_to_routing_table_map = X; We'll use this for CHIP first. And expect to migrate the existing routing logic to this gradually.
   */
  export interface Schema$HomeGraphCommonRoutingTable {
    /**
     * List of supported execution route.
     */
    supportedRoutes?: Schema$HomeGraphCommonRoute[];
  }
  /**
   * LINT.IfChange go/shed-per-trait-routing. Making it object to allow for extendible design, where we can add attributes in future.
   */
  export interface Schema$HomeGraphCommonTraitRoutingHints {
    /**
     * Set to true for a non-local trait.
     */
    cloudFulfillmentOnly?: boolean | null;
    /**
     * Trait name, e.g., "action.devices.traits.MediaInitiation". See [device traits](https://developers.home.google.com/cloud-to-cloud/traits). See java/com/google/home/graph/common/devices/config/protoconf.pi for the exhaustive list of trait-strings.
     */
    trait?: string | null;
  }
  /**
   * TimingStatPair message stores a timing period name and a time value. This is intentionally vague for doing fine level timing of rendering as what we measure is likely to change as we iterate. The intention is also that these values will just be dumped to varzs for evaluation purposed and not used programmatically.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoAnonTimingStatPair {
    name?: string | null;
    timeS?: number | null;
  }
  /**
   * A simple 2D box represented by an (x, y) coordinate, a width, and a height. Coordinates are in pixels.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoBox {
    height?: number | null;
    width?: number | null;
    /**
     * on horizontal axis
     */
    x?: number | null;
    /**
     * on vertical axis
     */
    y?: number | null;
  }
  /**
   * A message to describe the trace events returned by Chromium.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoChromiumTrace {
    chromiumTrace?: string | null;
  }
  /**
   * ConsoleLogEntry message stores messages logged by the renderer to the console. Typically error messages related to JS execution, parsing, any CSS errors, etc are logged by the renderer to the console. Next id: 7.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoConsoleLogEntry {
    /**
     * Line number of the document which caused an error.
     */
    lineNumber?: number | null;
    /**
     * Message which indicates the nature of the error. e.g. parse error, reference error (happens when javascript functions or variables are not resolvable) etc.
     */
    message?: string | null;
    /**
     * message level
     */
    messageLevel?: string | null;
    /**
     * The url of the document which has the error.
     */
    sourceUrl?: string | null;
    /**
     * Stack trace which functions were called when generating the console log. The first frame is the innermost one.
     */
    stackTrace?: Schema$HtmlrenderWebkitHeadlessProtoScriptStackFrame[];
    /**
     * Wall time (s) when the log entry was recorded
     */
    timestamp?: number | null;
  }
  export interface Schema$HtmlrenderWebkitHeadlessProtoCookie {
    domain?: string | null;
    expiration?: number | null;
    httpOnly?: boolean | null;
    name?: string | null;
    path?: string | null;
    sameSite?: string | null;
    secure?: boolean | null;
    value?: string | null;
  }
  /**
   * Next available tag: 24
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoDocument {
    /**
     * Document's base uri.
     */
    baseUri?: string | null;
    /**
     * Document's charset.
     */
    charset?: string | null;
    contentHeight?: number | null;
    /**
     * Document's language.
     */
    contentLanguage?: string | null;
    /**
     * These fields contain the actual width and height of the document content, which may exceed the size of the rendering viewport. *DEPRECATED* Use rendered_content_area instead. These two fields always assume the content area begins at viewport coordinates (0,0).
     */
    contentWidth?: number | null;
    /**
     * A flat list of all the DOMTreeNodes in the DOM. A flat list is preferred to a tree to avoid recursion and potential stack overflows. Note that the first node in this list will always be the root node.
     */
    domTreeNode?: Schema$HtmlrenderWebkitHeadlessProtoDOMTreeNode[];
    /**
     * A unique identifier for the frame (browser window of iframe) this document is loaded in. This identifier matches the identifiers used in the timeline data to identify frames and therefore only set if the record_timeline field of the RenderRequest message was set to true. frame_id is not supported on Chromium.
     */
    frameId?: string | null;
    /**
     * The name of the frame (browser window of iframe) this document is loaded in. May not be set if the frame name was empty.
     */
    frameName?: string | null;
    /**
     * -------------------------------------------------------------------------- Input context. These fields are copied from RenderRequest so that Document can be a self contained protobuf. We would've liked to place them in a ## nested InputContext message but it's too late now. ## Time specified to RenderRequest.JavaScriptOptions.time_of_day, if any. ## End of input context. Output-only fields below.
     */
    javascriptTimeOfDay?: number | null;
    /**
     * The chain of redirects (and redirect methods) used to get to the final resource for this Document. Deprecated: Use the redirect events in the render_event field instead.
     */
    redirectHop?: Schema$HtmlrenderWebkitHeadlessProtoRedirectHop[];
    /**
     * Contains a list of Resources which the renderer requested -- both those that were found and those that were not. Resources are returned in the order that they were requested.
     */
    referencedResource?: Schema$HtmlrenderWebkitHeadlessProtoReferencedResource[];
    /**
     * The bounding box which represents the whole area of rendered content, which may exceed the size of the rendering viewport. It doesn't include the body's margin.
     */
    renderedContentArea?: Schema$HtmlrenderWebkitHeadlessProtoBox;
    /**
     * Different types of events which happened during rendering. All events for this document's frame are included, so for example if a confirmation dialog is created before a client redirect to this document the ConfirmationDialogEvent will still be included even though the dialog was created by a different document. See render_event.proto for the types of events which are recorded. Note that this is present regardless of whether record_timeline was set in the RenderRequest.
     */
    renderEvent?: Schema$HtmlrenderWebkitHeadlessProtoRenderEvent[];
    /**
     * See htmlrender_webkit_headless_utils::SerializeRenderStyle() if a serialized css string is wanted.
     */
    renderStyle?: Schema$HtmlrenderWebkitHeadlessProtoStyle[];
    /**
     * A flat list of all the RenderTreeNodes from the render tree. A flat list is preferred to a tree to avoid recursion and potential stack overflows. Note that the first node in this list will always be the RenderTreeNode for the #document node (aka root).
     */
    renderTreeNode?: Schema$HtmlrenderWebkitHeadlessProtoRenderTreeNode[];
    /**
     * DEPRECATED - This field to be removed mid-2011. If you need this, use the library directly: //google3/htmlrender/webkit_headless/snapshot_quality Indicates how good or bad the rendering is from the perspective of the render tree. This is different from snapshot_quality_score in that the quality analysis examines everything that can be rendered, not just the portion within the document's viewport. It also ignores missing resouces with fixed width/height specified in the tag. A score of 1 (100%) implies the entire document can be rendered at the best quality and a score of 0 implies the entire document is unusable.
     */
    renderTreeQualityScore?: number | null;
    /**
     * Scroll offset of this document within the frame. Note that if expand_frame_to_content_height or expand_frame_to_content_width is true, this field reflects the final scroll offset after frame expansion.
     */
    scrollX?: number | null;
    scrollY?: number | null;
    /**
     * DEPRECATED - This field to be removed mid-2011. If you need this, use the library directly: //google3/htmlrender/webkit_headless/snapshot_quality Indicates how good or bad the rendered snapshot is within the rendered content area within the document's viewport. A score of 1 (100%) implies the snapshot is of best quality and a score of 0 implies the snapshot is unusable.
     */
    snapshotQualityScore?: number | null;
    /**
     * Document's title.
     */
    title?: string | null;
    /**
     * Document uri is the URL that this document was fetched from. The displayed URL and base URL may be different. If this document was not fetched from any URL (e.g. iframe with no src, populated by script) uri will be "about:blank".
     */
    uri?: string | null;
    /**
     * The page's layout size.
     */
    viewport?: Schema$HtmlrenderWebkitHeadlessProtoBox;
  }
  export interface Schema$HtmlrenderWebkitHeadlessProtoDOMStorageItem {
    key?: string | null;
    securityOrigin?: string | null;
    value?: string | null;
  }
  /**
   * DOMTreeNode Defines a DOM Node. An instance can contain references to one or more children (of type DOMTreeNode) and one or more attributes. The DOMTreeNode also encapsulates rendering information (if applicable) in the form of references to one or more RenderTreeNodes. Next tag available: 16
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoDOMTreeNode {
    attribute?: Schema$HtmlrenderWebkitHeadlessProtoDOMTreeNodeAttribute[];
    /**
     * An index per child. Indexes can be used to fetch the DOMTreeNodes from the list maintained by the Document.
     */
    childDomTreeNodeIndex?: number[] | null;
    /**
     * For elements, the actual url that was used to fetch the image. Note that this field is set only if it is different from the 'src' attribute value.
     */
    currentSourceUrl?: string | null;
    /**
     * If the node represents an iframe or a frame then document will be set.
     */
    document?: Schema$HtmlrenderWebkitHeadlessProtoDocument;
    /**
     * Identifies the HTML tag type (IMG, P, DIV, etc). Applicable only for DOM nodes that are representative of html elements. For a list of possible types refer HtmlTagEnum defined in webutil/html/htmltagenum.h.
     */
    htmlTagType?: number | null;
    /**
     * Whether this DOM node responds to mouse clicks. This includes e.g. nodes that have had click event listeners attached via JavaScript as well as e.g. anchor tags that naturally navigate when clicked.
     */
    isClickable?: boolean | null;
    /**
     * Name of the node (document, text, comment, div, etc).
     */
    name?: string | null;
    /**
     * URL of the script, if any, which created or populated this node.
     */
    originUrl?: string | null;
    /**
     * List of referenced resource indexes for any resources that this DOM tree node references.
     */
    referencedResourceIndex?: number[] | null;
    /**
     * RenderTreeNode can be looked up from the list of RenderTreeNodes stored in the Document using render_tree_node_index. RenderTreeNode gives rendering information (bounding box, style that was applied, etc). Note: 1. If a DOMTreeNode does not have a RenderTreeNode then it is safe to assume that the DOMTreeNode has no effect on the rendering. DOMTreeNodes for a ,
     */
    renderTreeNodeIndex?: number[] | null;
    type?: string | null;
    /**
     * The node value is applicable for TEXT_NODEs, DOCUMENT_TYPE_NODEs, and user input elements such as , and <option\>. For DOCUMENT_TYPE_NODEs, the value contains the publicId and SystemId. For input elements, the value reflects the current value in the element at the time the snapshot was taken.
     */
    value?: string | null;
  }
  /**
   * Zero or more attributes for the node.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoDOMTreeNodeAttribute {
    /**
     * Identifies the HTML attribute type (src, width, height, etc). For a list of possible types refer HtmlAttributeEnum defined in webutil/html/htmlattrenum.h.
     */
    htmlAttributeType?: number | null;
    name?: string | null;
    value?: string | null;
  }
  /**
   * Event for frame resize. Currently we only record resize events caused by automatic frame expansion.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoFrameResizeEvent {
    resizeType?: string | null;
    visibleRectAfterResize?: Schema$HtmlrenderWebkitHeadlessProtoBox;
    visibleRectBeforeResize?: Schema$HtmlrenderWebkitHeadlessProtoBox;
  }
  export interface Schema$HtmlrenderWebkitHeadlessProtoImage {
    /**
     * The binary image data, stored in a format decided by the application and a particular RenderService implementation.
     */
    data?: string | null;
    height?: number | null;
    /**
     * The page number if this is an image of a page from a print-mode rendering.
     */
    pageNumber?: number | null;
    /**
     * The viewport from which this image was generated. This is relative to the upper left of the page's document.
     */
    viewport?: Schema$HtmlrenderWebkitHeadlessProtoBox;
    /**
     * The width and height of the image stored in the data field.
     */
    width?: number | null;
  }
  /**
   * Event for the initial load of a frame, including main frame and subframes.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoInitialLoadEvent {
    url?: string | null;
  }
  /**
   * Event for a modal dialog created by one of window.confirm(), window.prompt(), or window.alert().
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoModalDialogEvent {
    /**
     * Whether a confirm() or prompt() dialog was confirmed. Will not be present for an alert() dialog.
     */
    confirmed?: boolean | null;
    message?: string | null;
    /**
     * For a prompt() dialog, the result of the prompt. Will not be present for other types of dialogs. If confirmed == false and the prompt had a default value, result will contain the default value.
     */
    result?: string | null;
    type?: string | null;
  }
  export interface Schema$HtmlrenderWebkitHeadlessProtoOffset {
    unit?: string | null;
    value?: number | null;
  }
  /**
   * PartialRenders can be created using the extension API to store the document state and/or create an image at points before the final render.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoPartialRender {
    /**
     * Cookies at the time of snapshot creation.
     */
    cookie?: Schema$HtmlrenderWebkitHeadlessProtoCookie[];
    /**
     * Current url as would appear in the web browser's address bar at the time of snapshot creation.
     */
    currentClientUrl?: string | null;
    /**
     * Snapshot of the document DOM + Render trees, if requested
     */
    document?: Schema$HtmlrenderWebkitHeadlessProtoDocument;
    /**
     * ID set by the render extension
     */
    id?: string | null;
    /**
     * Image of the render, if requested
     */
    image?: Schema$HtmlrenderWebkitHeadlessProtoImage;
  }
  export interface Schema$HtmlrenderWebkitHeadlessProtoPdf {
    /**
     * The binary PDF data.
     */
    data?: string | null;
  }
  export interface Schema$HtmlrenderWebkitHeadlessProtoRectangle {
    bottom?: Schema$HtmlrenderWebkitHeadlessProtoOffset;
    left?: Schema$HtmlrenderWebkitHeadlessProtoOffset;
    right?: Schema$HtmlrenderWebkitHeadlessProtoOffset;
    /**
     * A missing value for any field in this message means 'auto'.
     */
    top?: Schema$HtmlrenderWebkitHeadlessProtoOffset;
  }
  /**
   * A redirect event represents a change in the resource URL for a document. This includes HTTP redirects, as well things which trigger client navigations such as script changing window.location, tags, HTTP Refresh headers, etc.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoRedirectEvent {
    /**
     * The HTTP method of the request for the redirect target.
     */
    httpMethod?: string | null;
    /**
     * For HTTP redirects, the HTTP status code returned in the initial HTTP response.
     */
    httpStatusCode?: number | null;
    refreshType?: string | null;
    /**
     * True if the redirect led to a download instead of loading a new page. Note that such redirects can appear anywhere in the list of redirect events.
     */
    targetContentDownloaded?: boolean | null;
    targetUrl?: string | null;
    type?: string | null;
  }
  export interface Schema$HtmlrenderWebkitHeadlessProtoRedirectHop {
    type?: string | null;
    /**
     * The redirect target url.
     */
    url?: string | null;
  }
  /**
   * ReferencedResource contains an entry per url referenced by the browser while rendering a document. Next tag available: 20
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoReferencedResource {
    /**
     * True if this fetch was canceled due to render server policy. e.g. the page exceeded the fetch budget or an extension canceled the fetch.
     */
    canceled?: boolean | null;
    /**
     * Content type of this resource (webutil/http/content-type.h). The content type is from guess based on the file extension, any mime type in http headers at the beginning of the content, any content-disposition http header, and the content body itself. Note: the content type defined in webutil/http/content-type.proto is incomplete. If you are interested in missing types, please update the enum and the logic of content type detection.
     */
    contentType?: number | null;
    /**
     * DOMTreeNode index which has the url as one of its attributes specified using either src, href or background attributes. src attribute applies to img, script, frame and iframe nodes, href applies to link nodes and background applies to body node. It is possible for a url to be referenced by multiple DOM nodes. For e.g. an tag with the same src attribute can occur in multiple places within a document. It is possible for a url to not have any DOM node reference. For example, redirects don't have DOM tree nodes.
     */
    domTreeNodeIndex?: number[] | null;
    /**
     * True when a HTTP request succeeded but the resource was not made accessible to script due to a HTTP Access Control (CORS) failure. This field is not implemented on Chromium.
     */
    failedHttpAccessControlCheck?: boolean | null;
    /**
     * Where this resource comes from.
     */
    fetchSourceInfo?: Schema$WirelessTranscoderFetchFetchSourceInfo[];
    /**
     * The FetchStatus returned by the fetcher. Values are taken from wireless_transcoder_fetch.FetchConstants.FetchStatus in fetch_service.proto. The default value is SUCCESS(0).
     */
    fetchStatus?: string | null;
    /**
     * HTTP headers from the fetcher.
     */
    httpHeader?: Schema$HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeader[];
    /**
     * HTTP response code if we had tried to fetch the url. Absence of this field indicates either we have not tried to fetch the url or the fetcher never got back to us with any response.
     */
    httpResponseCode?: number | null;
    metadata?: Schema$WirelessTranscoderFetchFetchMetadata[];
    /**
     * The post_data field is only valid when the HTTP request method is POST.
     */
    postData?: string | null;
    /**
     * If the http_response_code is a HTTP redirect, the redirect target will be stored here.
     */
    redirectTarget?: string | null;
    /**
     * Indicates which referenced_resource_content (in RenderResponse) this RefencedResource points to. This field will be set only when there is referenced_resource_content for this RefencedResource in RenderResponse.
     */
    referencedResourceContentIndex?: number | null;
    /**
     * Only necessary headers are recorded. See google3/htmlrender/webkit_headless/resource_key.cc
     */
    requestHeader?: Schema$HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeader[];
    /**
     * The HTTP request method (GET, HEAD, POST, etc) used for this request. Values are taken from the HTTPHeaders::Protocol enum in webutil/http/httputils.h. HTTPHeaders::PROTO_GET
     */
    requestMethod?: number | null;
    /**
     * style index which has the url specified using either the background-image property or the list-style-image property.
     */
    styleIndex?: number[] | null;
    /**
     * Whether it is synchronously fetched.
     */
    synchronouslyFetched?: boolean | null;
    timing?: Schema$HtmlrenderWebkitHeadlessProtoReferencedResourceFetchTiming[];
    /**
     * Does not have a #fragment.
     */
    url?: string | null;
    /**
     * Additional information webkit about this resource. e.g. intended usage
     */
    webkitMetadata?: Schema$HtmlrenderWebkitHeadlessProtoWebKitFetchMetadata;
  }
  /**
   * Timing data produced by the fetcher.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoReferencedResourceFetchTiming {
    finishMsec?: string | null;
    /**
     * A string identifying the fetcher that added this timing information.
     */
    name?: string | null;
    /**
     * UNIX epoch timestamps in milliseconds.
     */
    startMsec?: string | null;
  }
  /**
   * HTTP Headers included with the resource request.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoReferencedResourceHttpHeader {
    name?: string | null;
    value?: string | null;
  }
  export interface Schema$HtmlrenderWebkitHeadlessProtoRenderEvent {
    frameResize?: Schema$HtmlrenderWebkitHeadlessProtoFrameResizeEvent;
    initialLoad?: Schema$HtmlrenderWebkitHeadlessProtoInitialLoadEvent;
    modalDialog?: Schema$HtmlrenderWebkitHeadlessProtoModalDialogEvent;
    redirect?: Schema$HtmlrenderWebkitHeadlessProtoRedirectEvent;
    /**
     * The URL of the script which caused this event, if any. Analogous to origin_url in DOMTreeNode.
     */
    scriptOriginUrl?: string | null;
    /**
     * Virtual time of the event, as an offset from the beginning of the render in seconds.
     */
    virtualTimeOffset?: number | null;
    windowOpen?: Schema$HtmlrenderWebkitHeadlessProtoWindowOpenEvent;
  }
  /**
   * Results returned by a render server extension. Next id: 3
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoRenderExtensionResult {
    /**
     * Log messages and errors generated by extension script.
     */
    consoleLogEntry?: Schema$HtmlrenderWebkitHeadlessProtoConsoleLogEntry[];
    result?: string | null;
  }
  /**
   * See go/wrs-render-quality for how to evaluate the results. Next id: 24
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoRenderResponse {
    /**
     * Contains chromium trace generated during page rendering. This is present if a chromium_trace_config was provided in the request.
     */
    chromiumTrace?: Schema$HtmlrenderWebkitHeadlessProtoChromiumTrace;
    /**
     * Contents of the browser's cookie jar. (if cookies_enabled was set to true in the RenderRequest).
     */
    cookie?: Schema$HtmlrenderWebkitHeadlessProtoCookie[];
    /**
     * Contains the DOM tree, render tree and more. For details consult document.proto.
     */
    document?: Schema$HtmlrenderWebkitHeadlessProtoDocument;
    /**
     * Provides extra debugging details when certain exception bits are set.
     */
    exceptionDetail?: string | null;
    /**
     * Exceptions (possibly serious conditions) that occurred during this rendering. 0 means none. Bitfield encoding. See the RenderingException enum above for an explanation.
     */
    exceptions?: string | null;
    /**
     * Render extension results (if `devtools_script` was provided with the request.)
     */
    extensionResult?: Schema$HtmlrenderWebkitHeadlessProtoRenderExtensionResult;
    /**
     * This field contains the final url as would appear in the web browser's address bar. Note that JavaScript can modify the contents of the location bar so this URL may not appear on the list of referenced resources. If we fail to follow a redirect this field will contain the URL that we failed to redirect to, not the last one we successfully loaded.
     */
    finalClientUrl?: string | null;
    /**
     * Contains the viewport images rendered by webkit (if generate_image was set to true in the RenderRequest). Will also contain the print-mode images (if generate_print_mode_images was set to true).
     */
    image?: Schema$HtmlrenderWebkitHeadlessProtoImage[];
    /**
     * Contents of the browser's local storage.
     */
    localStorage?: Schema$HtmlrenderWebkitHeadlessProtoDOMStorageItem[];
    /**
     * Partial render snapshots (if requested by a render extension)
     */
    partialRender?: Schema$HtmlrenderWebkitHeadlessProtoPartialRender[];
    /**
     * Contains the PDF document (if generate_pdf was set to true in the RenderRequest)
     */
    pdf?: Schema$HtmlrenderWebkitHeadlessProtoPdf;
    /**
     * Contents for all the urls fetched by the render server. This field is present only if generate_referenced_resource_content was set to true in the RenderRequest.
     */
    referencedResourceContent?: Schema$HtmlrenderWebkitHeadlessProtoResource[];
    /**
     * Time to render the url, total size of a document, number of referenced images, etc will be part of RenderStats.
     */
    renderStats?: Schema$HtmlrenderWebkitHeadlessProtoRenderStats;
    /**
     * Contents of the browser's session storage.
     */
    sessionStorage?: Schema$HtmlrenderWebkitHeadlessProtoDOMStorageItem[];
    /**
     * Contains the page title produced by webkit, in the UTF-8 encoding.
     */
    title?: string | null;
  }
  /**
   * Next id: 17.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoRenderStats {
    /**
     * Deliberately non-named fine timing stats. These are all related to each other and unrelated to other timing stats in this message.
     */
    anonRenderFineTimingStats?: Schema$HtmlrenderWebkitHeadlessProtoAnonTimingStatPair[];
    /**
     * Any messages logged by the renderer to the console. Note that we capture a subset of the messages logged by the renderer here to avoid explosion.
     */
    consoleLogEntry?: Schema$HtmlrenderWebkitHeadlessProtoConsoleLogEntry[];
    counter?: Schema$HtmlrenderWebkitHeadlessProtoRenderStatsCounter[];
    /**
     * Time to build document and render tree response data.
     */
    documentBuildTimeMsec?: number | null;
    /**
     * Number of dropped log messages. Since we capture only a subset of the messages in console_log_entry this field is included just so that the consumers can get an idea of how many actual attempts were made by the renderer.
     */
    droppedLogEntryCount?: number | null;
    /**
     * Image encoding (e.g. raw -\> PNG) time.
     */
    imageEncodingTimeMsec?: number | null;
    /**
     * Image scaling time.
     */
    imageScalingTimeMsec?: number | null;
    /**
     * Time from starting render to document finished loading. This includes all fetches, parsing, decoding, running JavaScript, etc.
     */
    layoutTimeMsec?: number | null;
    /**
     * Time required to paint a document into our buffer.
     */
    paintTimeMsec?: number | null;
    /**
     * Total cost this render spent running and RPC cost in milliGCUs.
     */
    renderCostMgcu?: number | null;
    /**
     * Render engine used to render this document.
     */
    renderEngine?: string | null;
    /**
     * Total CPU time this render spent running in milliseconds.
     */
    renderRunningTimeMsec?: number | null;
    /**
     * The CL from which the render engine was built.
     */
    renderServerBaselineCl?: string | null;
    /**
     * Total wall time taken to render a document in milliseconds.
     */
    renderTimeMsec?: number | null;
    /**
     * Total time spent in the sandbox in milliseconds. This time includes all phases measured individually below.
     */
    sandboxRenderTimeMsec?: number | null;
  }
  /**
   * Render event counters.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoRenderStatsCounter {
    count?: string | null;
    /**
     * By convention, counters may contain a "." which we use to separate a metric name from a counter name in streamz.
     */
    name?: string | null;
  }
  export interface Schema$HtmlrenderWebkitHeadlessProtoRenderTreeNode {
    /**
     * Box is set for render blocks ( , , etc). Box for any RenderTreeNode can be found either in the RenderTreeNode itself or by traversing up the ancestors until a RenderTreeNode with a Box is found.
     */
    box?: Schema$HtmlrenderWebkitHeadlessProtoBox;
    /**
     * child_render_tree_node_index is an index into the list of RenderTreeNodes stored in the Document. *** WARNING ***: Don't use this field. Applications should not rely on the structure of the render tree. This is an internal browser implementation detail and it changes from time to time. Generally, applications should obtain rendering information by starting with the relevant DOMTreeNode and following pointers from there to the relevant RenderTreeNodes.
     */
    childRenderTreeNodeIndex?: number[] | null;
    /**
     * Index of the DOMTreeNode for which this RenderTreeNode is applicable. This index can be used to lookup a DOMTreeNode from list of DOMTreeNodes stored in the Document.
     */
    domTreeNodeIndex?: number | null;
    inlineTextBox?: Schema$HtmlrenderWebkitHeadlessProtoRenderTreeNodeInlineTextBox[];
    /**
     * The actual text that was rendered. This is applicable only for text nodes.
     */
    renderedText?: string | null;
    /**
     * Style index is set for rendered nodes (text nodes, image nodes, widgets, etc). The style_index can be used to lookup the style from the list of styles stored in the Document.
     */
    styleIndex?: number | null;
  }
  /**
   * For text nodes, individual lines of text. This repeats rendered_text with more specific bounding boxes.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoRenderTreeNodeInlineTextBox {
    box?: Schema$HtmlrenderWebkitHeadlessProtoBox;
    renderedText?: string | null;
  }
  /**
   * Next id: 9.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoResource {
    /**
     * content contains a complete HTTP response message including the HTTP status line, headers and body. For example: HTTP/1.1 200 OK\r\n Content-Type: text/html\r\n \r\n ... content ... For inputs (RenderRequest.resource): Any HTTP content encoding (e.g. gzip) and transfer encoding (e.g. chunked) MUST be decoded. HTTP content and transfer encoding headers will be ignored if present. For outputs (RenderResponse.referenced_resource_content): The body will be decoded (no content or transfer encoding) however any content or transfer encoding headers present in the original fetch response will be passed through. Decoding this field requires a correct text encoding. The charset field of Document proto can be a good guess but is not guaranteed to be correct.
     */
    content?: string | null;
    /**
     * Where this resource comes from.
     */
    fetchSourceInfo?: Schema$WirelessTranscoderFetchFetchSourceInfo[];
    /**
     * The url that contributes the final content. Only existed when metadata contains FetchReplyData.
     */
    finalContentUrl?: string | null;
    metadata?: Schema$WirelessTranscoderFetchFetchMetadata[];
    /**
     * The HTTP request method (GET, HEAD, POST, etc) used for this request. Values are taken from the HTTPHeaders::Protocol enum in webutil/http/httputils.h. If it's not set, we will infer GET or POST based on the presence of post_data.
     */
    method?: number | null;
    postData?: string | null;
    /**
     * Only necessary headers are included in the resource key by default. See google3/htmlrender/webkit_headless/resource_key.cc
     */
    requestHeader?: Schema$HtmlrenderWebkitHeadlessProtoResourceHttpHeader[];
    url?: string | null;
  }
  export interface Schema$HtmlrenderWebkitHeadlessProtoResourceHttpHeader {
    name?: string | null;
    value?: string | null;
  }
  /**
   * Describes a script stack frame.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoScriptStackFrame {
    /**
     * The current column number for the stack frame.
     */
    columnNumber?: number | null;
    /**
     * The function name of the stack frame.
     */
    functionName?: string | null;
    /**
     * The current line number for the stack frame.
     */
    lineNumber?: number | null;
    /**
     * The URL of the script being executed.
     */
    url?: string | null;
  }
  /**
   * Next id: 54 Font and text decorations:
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoStyle {
    backgroundAttachment?: string | null;
    /**
     * Background color encoded as ARGB
     */
    backgroundColorArgb?: number | null;
    backgroundGradientColorStopArgb?: number[] | null;
    backgroundGradientRepeat?: boolean | null;
    backgroundGradientType?: string | null;
    backgroundImageRepeat?: string | null;
    /**
     * The url of the background image in the first layer.
     */
    backgroundImageUrl?: string | null;
    /**
     * Background image position (x, y).
     */
    backgroundImageXPos?: Schema$HtmlrenderWebkitHeadlessProtoOffset;
    backgroundImageYPos?: Schema$HtmlrenderWebkitHeadlessProtoOffset;
    backgroundSize?: string | null;
    backgroundSizeHeight?: Schema$HtmlrenderWebkitHeadlessProtoOffset;
    /**
     * Only present (but may be missing) if background_size == SIZE_LENGTH.
     */
    backgroundSizeWidth?: Schema$HtmlrenderWebkitHeadlessProtoOffset;
    borderColorArgbBottom?: number | null;
    borderColorArgbLeft?: number | null;
    borderColorArgbRight?: number | null;
    borderColorArgbTop?: number | null;
    borderPixelWidthBottom?: number | null;
    borderPixelWidthLeft?: number | null;
    borderPixelWidthRight?: number | null;
    borderPixelWidthTop?: number | null;
    borderStyleBottom?: string | null;
    borderStyleLeft?: string | null;
    borderStyleRight?: string | null;
    borderStyleTop?: string | null;
    /**
     * Default value for clip is "auto", which is represented here as !has_clip().
     */
    clip?: Schema$HtmlrenderWebkitHeadlessProtoRectangle;
    direction?: string | null;
    display?: string | null;
    /**
     * `font_family` is the `font-family` computed style, not necessarily the actual font. https://developer.mozilla.org/en-US/docs/Web/CSS/font-family. Note that it may contain multiple font families, not just one.
     */
    fontFamily?: string | null;
    fontSize?: number | null;
    fontStyle?: string | null;
    fontWeight?: number | null;
    /**
     * Foreground color encoded as ARGB
     */
    foregroundColorArgb?: number | null;
    /**
     * Starting from Chromium, has_background is set when there is a non-empty specification for background_image, whether it be a url, gradient or other cases, such as cross-fade. Besides setting this field, We additionally parse url and gradient cases and populate some of the following background fields.
     */
    hasBackground?: boolean | null;
    listStyleImageUrl?: string | null;
    listStyleType?: string | null;
    marginBottom?: Schema$HtmlrenderWebkitHeadlessProtoOffset;
    marginLeft?: Schema$HtmlrenderWebkitHeadlessProtoOffset;
    marginRight?: Schema$HtmlrenderWebkitHeadlessProtoOffset;
    /**
     * Margin
     */
    marginTop?: Schema$HtmlrenderWebkitHeadlessProtoOffset;
    opacity?: number | null;
    overflowX?: string | null;
    overflowY?: string | null;
    paddingBottom?: Schema$HtmlrenderWebkitHeadlessProtoOffset;
    paddingLeft?: Schema$HtmlrenderWebkitHeadlessProtoOffset;
    paddingRight?: Schema$HtmlrenderWebkitHeadlessProtoOffset;
    /**
     * Padding
     */
    paddingTop?: Schema$HtmlrenderWebkitHeadlessProtoOffset;
    position?: string | null;
    /**
     * List of referenced resource indexes for any resources that this style references. (e.g. background images.) (see document.proto)
     */
    referencedResourceIndex?: number[] | null;
    textAlign?: string | null;
    textDecoration?: string | null;
    textShadowColorArgb?: number | null;
    visibility?: string | null;
    /**
     * Default value for z-index is "auto" which means "inherit from parent".
     */
    zIndex?: number | null;
  }
  /**
   * WebkKitFetchMetadata holds additional webkit-specific information for a single resource fetch.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoWebKitFetchMetadata {
    /**
     * Chromium DevTools frame ID of the frame that initiated this fetch. Only populated in the streaming render service with FETCH_MODE_CLIENT.
     */
    devtoolsFrameId?: string | null;
    targetType?: string | null;
  }
  /**
   * Corresponds to a call to window.open(). Note that a WindowOpenEvent will be present whether or not the call was successful.
   */
  export interface Schema$HtmlrenderWebkitHeadlessProtoWindowOpenEvent {
    /**
     * Whether or not the window was allowed to be opened by the popup blocker. Unless user events are created with a render extension this should be false.
     */
    allowed?: boolean | null;
    /**
     * The URL for the new window. Note that this is the URL after it has been processed by WebKit, so, for example, relative links passed to window.create() will have been made absolute.
     */
    url?: string | null;
    /**
     * Window features passed to window.open().
     */
    windowFeatures?: string | null;
    /**
     * Window name passed to window.open(). If no name is provided this defaults to "_blank".
     */
    windowName?: string | null;
  }
  /**
   * The PhoneNumber object that is used by all LibPhoneNumber API's to fully represent a phone number.
   */
  export interface Schema$I18nPhonenumbersPhoneNumber {
    /**
     * The country calling code for this number, as defined by the International Telecommunication Union (ITU). For example, this would be 1 for NANPA countries, and 33 for France.
     */
    countryCode?: number | null;
    /**
     * The source from which the country_code is derived.
     */
    countryCodeSource?: string | null;
    /**
     * Extension is not standardized in ITU recommendations, except for being defined as a series of numbers with a maximum length of 40 digits. It is defined as a string here to accommodate for the possible use of a leading zero in the extension (organizations have complete freedom to do so, as there is no standard defined). Other than digits, some other dialling characters such as "," (indicating a wait) may be stored here.
     */
    extension?: string | null;
    /**
     * In some countries, the national (significant) number starts with one or more "0"s without this being a national prefix or trunk code of some kind. For example, the leading zero in the national (significant) number of an Italian phone number indicates the number is a fixed-line number. There have been plans to migrate fixed-line numbers to start with the digit two since December 2000, but it has not happened yet. See http://en.wikipedia.org/wiki/%2B39 for more details. These fields can be safely ignored (there is no need to set them) for most countries. Some limited number of countries behave like Italy - for these cases, if the leading zero(s) of a number would be retained even when dialling internationally, set this flag to true, and also set the number of leading zeros. Clients who use the parsing or conversion functionality of the i18n phone number libraries (go/phonenumbers) will have these fields set if necessary automatically.
     */
    italianLeadingZero?: boolean | null;
    /**
     * The National (significant) Number, as defined in International Telecommunication Union (ITU) Recommendation E.164, without any leading zero. The leading-zero is stored separately if required, since this is an uint64 and hence cannot store such information. Do not use this field directly: if you want the national significant number, call the getNationalSignificantNumber method of PhoneNumberUtil. For countries which have the concept of an "area code" or "national destination code", this is included in the National (significant) Number. Although the ITU says the maximum length should be 15, we have found longer numbers in some countries e.g. Germany. Note that the National (significant) Number does not contain the National (trunk) prefix. Obviously, as a uint64, it will never contain any formatting (hyphens, spaces, parentheses), nor any alphanumeric spellings.
     */
    nationalNumber?: string | null;
    /**
     * Full description of this field in the comment for italian_leading_zero since this field will only be set when italian_leading_zero is true.
     */
    numberOfLeadingZeros?: number | null;
    /**
     * The carrier selection code that is preferred when calling this phone number domestically. This also includes codes that need to be dialed in some countries when calling from landlines to mobiles or vice versa. For example, in Columbia, a "3" needs to be dialed before the phone number itself when calling from a mobile phone to a domestic landline phone and vice versa. Note this is the "preferred" code, which means other codes may work as well.
     */
    preferredDomesticCarrierCode?: string | null;
    /**
     * This field is used to store the raw input string containing phone numbers before it was canonicalized by the library. For example, it could be used to store alphanumerical numbers such as "1-800-GOOG-411".
     */
    rawInput?: string | null;
  }
  /**
   * Next ID: 15
   */
  export interface Schema$ImageBaseThumbnailMetadata {
    /**
     * the size of the stored thumbnail
     */
    byteSize?: number | null;
    /**
     * SmartCrop crop-hints By default, this field is not populated.
     */
    crops?: Schema$ContentAwareCropsIndexing;
    /**
     * DeepCrop crop-hints. Usage in thumbnails could be deprecated in favor or deep_crop_pixels (below). By default, this field is not populated.
     */
    deepCrop?: Schema$DeepCropIndexing;
    /**
     * DeepCrop signal in pixels, equivalent to deep_crop (above) but with pixels instead of percentages. By default, this field is not populated.
     */
    deepCropPixels?: Schema$DeepCropPixels;
    /**
     * the Amarna docid of the thumbnail
     */
    docid?: string | null;
    /**
     * encrypted version of docid
     */
    encryptedDocid?: string | null;
    /**
     * the fprint of the thumbnail
     */
    fprint?: string | null;
    /**
     * the height of the stored thumbnail
     */
    height?: number | null;
    /**
     * The mime_type of the thumbnail ("image/jpeg", "image/png", etc.).
     */
    mimeType?: string | null;
    originalHeight?: number | null;
    /**
     * Not populated by Amarna/image pipelines, ever. This was apparently introduced by a customer that wished to extend ThumbnailMetadata with this custom data.
     */
    originalWidth?: number | null;
    type?: string | null;
    /**
     * the width of the stored thumbnail
     */
    width?: number | null;
  }
  /**
   * This message is used internally in Amarna and is also used to store information in the VideoWebAttachment portion of the websearch index. Only the following fields will be used in the index: VideoPreviewType type int32 width int32 height byte byte_size If more fields are added, please update this list.
   */
  export interface Schema$ImageBaseVideoPreviewMetadata {
    /**
     * Size of the stored preview.
     */
    byteSize?: number | null;
    /**
     * 64 bit docid of the original video.
     */
    docid?: string | null;
    /**
     * TODO (yzliu): consider using duration_ms as field name since it is number of milliseconds. Duration of the preview in ms.
     */
    duration?: number | null;
    /**
     * Expiration timestamp of preview in microseconds since epoch.
     */
    expirationTimestampMicros?: string | null;
    /**
     * LINT.ThenChange(//depot/google3/video/crawl/indexing/signal_combiner.cc:video_preview) Fingerprint of the preview.
     */
    fprint?: string | null;
    /**
     * Height of the stored preview.
     */
    height?: number | null;
    /**
     * Mime type of the preview ("video/mp4").
     */
    mimeType?: string | null;
    /**
     * Indicates the state in Venom for this preview type.
     */
    state?: string | null;
    /**
     * Timestamp of start of preview in ms.
     */
    timestamp?: number | null;
    /**
     * LINT.IfChange
     */
    type?: string | null;
    /**
     * The end timestamp of the video segment in microseconds that this preview is generated from. Used for segmented video previews.
     */
    videoSegmentEndUs?: string | null;
    /**
     * The start timestamp of the video segment in microseconds that this preview is generated from. Used for segmented video previews.
     */
    videoSegmentStartUs?: string | null;
    /**
     * Width of the stored preview.
     */
    width?: number | null;
  }
  /**
   * The subset of FlowProto that we want to go into production AND be stored in ContentSignals.
   */
  export interface Schema$ImageContentFlowProtoProd {
    /**
     * Repeated so that multiple versions can exist in prod simultaneously.
     */
    starburst?: Schema$ImageContentStarburstVersionGroup[];
  }
  /**
   * Image content based multipliers. Current usage is in the pamir_section.
   */
  export interface Schema$ImageContentQueryBoost {
    queryboost?: Schema$ImageContentQueryBoostQueryBoost[];
  }
  export interface Schema$ImageContentQueryBoostQueryBoost {
    /**
     * Score multiplier (fully normalized 1 is nop).
     */
    boost?: number | null;
    /**
     * Canonicalized query string.
     */
    query?: string | null;
  }
  export interface Schema$ImageContentStarburstVersionGroup {
    /**
     * Raw dense float feature vector.
     */
    descriptorFloat?: number[] | null;
    /**
     * Short descriptor for image content features, e.g. compressed bytes. This is the compressed version of descriptor_float below. It can be can be decompressed to descriptor_float with a tiny bit of compression error (in most cases it should be totally fine).
     */
    descriptorShort?: string | null;
    enumVersion?: string | null;
    minorVersion?: string | null;
    /**
     * Starburst tokens.
     */
    starburstTokens?: number[] | null;
    /**
     * The following integers are currently used: Starburst V1: 1 Starburst V2: 2 Starburst V3: 3 Starburst V4: 4 Starburst Visual V4: 1004 This field is deprecated. Please try to use the 'enum_version' in future.
     */
    version?: number | null;
  }
  /**
   * This defines the per-doc data which is extracted from thumbnails and propagated over to indexing. It contains all information that can be used for restricts. Next tag id: 129
   */
  export interface Schema$ImageData {
    /**
     * Warning: adaboost_image_feature_porn* and imageFeaturePorn fields are DEPRECATED in favor of brain_porn_scores. Please do not use them. Contact safesearch@ for transition advice.
     */
    adaboostImageFeaturePorn?: number | null;
    adaboostImageFeaturePornMinorVersion?: number | null;
    adaboostImageFeaturePornVersion?: number | null;
    /**
     * Present for animated images only: additional animatated image perdoc data.
     */
    animatedImageData?: Schema$ImageRepositoryAnimatedImagePerdocData;
    /**
     * A [0..1] SafeSearch scores based on image pixels, using Google Brain: porn, csai, violence, medical, and spoof. For porn only, if available prefer final_porn_score as it should be more precise than brain_porn_scores.porn_score.
     */
    brainPornScores?: Schema$ImageSafesearchContentBrainPornAnnotation;
    /**
     * A string that indicates the version of SafeSearch classifier used to compute brain_porn_scores.
     */
    brainPornScoresVersion?: string | null;
    /**
     * This is the image docid used in image search. For ImageData protos coming from Alexandria/Freshdocs, this is a 'required' field that MUST be populated.
     */
    canonicalDocid?: string | null;
    /**
     * A score in (0, 1] to indicate how likely this image is considered as a click magnet based on clicks received from bad queries.
     */
    clickMagnetScore?: number | null;
    /**
     * Image content based classifier scores.
     */
    clipartDetectorScore?: number | null;
    clipartDetectorVersion?: number | null;
    /**
     * Superlabels generated cluster id.
     */
    clusterId?: string | null;
    /**
     * Like is_visible, this is a property of the (web-doc, img_url) pair not just the image. A high codomain_strength indicates high confidence based on collected stats that the image is hosted on a companion domain. If not enough stats are available for codomain strength, this field may be absent in ImageData, and hence the CompositeDoc. Do not place negative values here. Permitted values range between 0 and image_quality_codomain::kMaxCodomainStrength defined in //image/quality/codomain/codomain-stats-utils.h.
     */
    codomainStrength?: number | null;
    /**
     * Fraction of the image that contains pixels over a certain saturation threshold: can be used to determine if the image is grayscale or not.
     */
    coloredPixelsFrac?: number | null;
    /**
     * Colorness scores for the image. Each score represents the amount of a particular color in the image. At the current time, there are 12 colors, so there should always be 0 or 12 values in this array. The 12 colors are black, blue, brown, gray, green, orange, pink, purple, red, teal, white, yellow. The convention is that the scores are stored in alphabetical order, so the first score is black, and the last score is yellow.
     */
    colorScore?: number[] | null;
    colorScoreVersion?: number | null;
    /**
     * Earliest known crawl time among all neardups of this image (go/imagecontentage).
     */
    contentFirstCrawlTime?: number | null;
    /**
     * Corpus scoring info for images indexed through Amarna.
     */
    corpusSelectionInfo?: Schema$CorpusSelectionInfo[];
    /**
     * The content-aware cropping information.
     */
    crops?: Schema$ContentAwareCropsIndexing;
    /**
     * DeepCrop based cropping information. See go/creatism/deepcrop for details.
     */
    deepCrop?: Schema$DeepCropIndexing;
    /**
     * Productionized Deep Image Engagingness score.
     */
    deepImageEngagingness?: Schema$ImageRepositoryDeepImageEngagingnessOutput;
    /**
     * VSS generated deep tags for shopping images.
     */
    deepTags?: Schema$CommerceDatastoreImageDeepTags;
    /**
     * fingerprint(non-canonicalized absolute image url) This is *not* the image docid. Use canonical_docid instead. For ImageData protos coming from Alexandria/Freshdocs, this is a 'required' field that MUST be populated. But once again, this is very likely NOT something you need. Use canonical_docid instead.
     */
    docid?: string | null;
    /**
     * the EXIF/IPTC metadata
     */
    embeddedMetadata?: Schema$ImageExifImageEmbeddedMetadata;
    /**
     * The thumbnail is guaranteed to be kept in the serving system until the expiration timestamp has passed, in microseconds.
     */
    expirationTimestamp?: string | null;
    /**
     * The EXIF generated by photos backend team's (more specifically FIFE's) thumbnailer library. This exif model is more comprehensive since a dedicated team is constantly improving it and adding new fields over time. This is currently populated by moonshine for selected corpora.
     */
    extendedExif?: Schema$PhotosImageMetadata;
    /**
     * Properties used in featured imagesearch project. inspiration_score indicates how well an image is related to products, or how inspirational it is.
     */
    featuredImageProp?: Schema$ImageMonetizationFeaturedImageProperties;
    /**
     * True file format (not extension).
     */
    fileFormat?: string | null;
    /**
     * A [0..1] porn score based on some image-level features (like content score, referrer statistics, navboost queries, etc.). See class RiflePornScorer for more details.
     */
    finalPornScore?: number | null;
    /**
     * A string that indicates the version of SafeSearch classifier used to compute final_porn_score.
     */
    finalPornScoreVersion?: string | null;
    /**
     * Earliest known timestamp about this image. Today, this is the timestamp when the content key was generated for this image. The time is in seconds.
     */
    firstCrawlTime?: number | null;
    /**
     * The first time this image URL was seen on the containing web page. Only set during web indexing.
     */
    firstTimeSeenOnDocSec?: number | null;
    /**
     * Use image_perdoc.h to read/write 'flags'.
     */
    flags?: number | null;
    /**
     * The output of various features generated by the Flow framework, most importantly data from Starburst (go/starburst). Do NOT interact with the internals of this proto since they may change over time. Instead, use the existing interfaces that consume FlowProtoProd's directly, e.g., image/mustang/content/image_content_distance.h For more info, please contact image-content-core@.
     */
    flowOutput?: Schema$ImageContentFlowProtoProd;
    h2c?: number | null;
    /**
     * 'Hovers to Impressions' and 'Hovers to Clicks' ratios for an image.
     */
    h2i?: number | null;
    /**
     * Hate logo detections from the VSS logo_recognition module.
     */
    hateLogoDetection?: Schema$ImageUnderstandingIndexingAnnotationGroup;
    /**
     * Height
     */
    height?: number | null;
    /**
     * Image Content Scored per query boosts. Currently this is filled by the pamir algorithm and populates the pamir_section.
     */
    imageContentQueryBoost?: Schema$ImageContentQueryBoost;
    /**
     * A set of query fingerprints and confidence scores. There queries are supposed to be relevant to the image with high confidence.
     */
    imageExactBoost?: Schema$ImageExactBoost;
    /**
     * Indicates license info of this image, which will tell image search users how to use this image legally.
     */
    imageLicenseInfo?: Schema$ImageSearchImageLicenseInfo;
    imagerank?: number | null;
    /**
     * Regions detected within the image (go/images-region-search-edd). Regions contain bounding boxes circumscribing objects of interest in the image, along with object labels. Regions may overlap.
     */
    imageRegions?: Schema$ImageRegionsImageRegions;
    /**
     * IIP in scope signal (go/iip). Set to true if the image is annotated with any iip_in_scope entities (go/iukp-trust-v2).
     */
    isIipInScope?: boolean | null;
    /**
     * If this image was not selected for indexing by imagesearch, these fields say so and explain why.
     */
    isIndexedByImagesearch?: boolean | null;
    /**
     * True if the original image contains multiple frames (e.g., for animated or stereoscopic images).
     */
    isMultiframe?: boolean | null;
    /**
     * Field to indicate the image is unwanted for search index. The data is propagated from amarna to alexandria to be annotated in the cdoc. Refer to image/repository/proto/unwanted_content.proto for more info.
     */
    isUnwantedContent?: boolean | null;
    /**
     * True if the image is inlined on the page (typicially via ) or false if the image is linked to (via an href).
     */
    isVisible?: boolean | null;
    /**
     * Fraction of image covered by the largest face (should match largestFaceFraction, but without scaling). In perdocs, is set only if numberFaces \> 0.
     */
    largestFaceFrac?: number | null;
    /**
     * Fraction of image covered by the largest face, scaled by 1000. Warning: Is DEPRECATED in favor of largest_face_frac. Do not use.
     */
    largestFaceFraction?: number | null;
    /**
     * Most recent timestamp in seconds when this URL was crawled.
     */
    lastCrawlTime?: number | null;
    /**
     * Indicates the web-master opt-in state of this image, and will be used for Google products to decide usage rights like showing large previews.
     */
    licensedWebImagesOptInState?: string | null;
    lineartDetectorScore?: number | null;
    lineartDetectorVersion?: number | null;
    multibangKgEntities?: Schema$ImageDataMultibangEntities;
    nearDupFeatures?: string | null;
    nearDupFeaturesSmall?: string[] | null;
    /**
     * The following fields contain information about a smaller and less powerful version of the hash, needed for neardup retrieval. A compressed and an encoded version of the small hash are stored below. The smaller hash may have a few variants to increase recall. NOTE: This hash is generated by V2 hash computation. A compressed version of the small hash. Currently, a 4-byte fingerprint.
     */
    nearDupFeaturesSmallVersion?: number | null;
    /**
     * Image content derived data used for finding image near dups. NOTE: This hash is generated by V1 hash computation.
     */
    nearDupFeaturesVersion?: number | null;
    /**
     * Productionized Nima AVA score. Both this field and nima_vq were added on the top of nima_ava_score and nima_vq_score because the signals are already integrated with Batch Amarna in image/repository/schema/global_output_tags.h using NimaOutput.
     */
    nimaAva?: Schema$ImageRepositoryNimaOutput;
    /**
     * Productionized Nima VQ score.
     */
    nimaVq?: Schema$ImageRepositoryNimaOutput;
    noIndexReason?: string[] | null;
    /**
     * Number of faces detected in the image
     */
    numberFaces?: number | null;
    /**
     * Pruned OCR Goodoc see vss_aksara_ocr_util.h for the fields copied.
     */
    ocrGoodoc?: Schema$GoodocDocument;
    /**
     * Ocr detected by ocr_taser module.
     */
    ocrTaser?: Schema$GoodocDocument;
    /**
     * Text lines detected by OCR engine.
     */
    ocrTextboxes?: Schema$OcrPhotoTextBox[];
    /**
     * For an image not explicitly visible on this page, the following url is the one which most closely matches it.
     */
    onPageAlternateUrl?: string | null;
    /**
     * Encodes face number and largest face frac into a small package for storage in mustang. This is calculated directly from FaceDetectionResult.
     */
    packedFullFaceInfo?: Schema$FaceIndexing;
    /**
     * Contains person attributes from the LookNet-Person model and the Style AI Iconic Person Scorer for the most iconic person in a style image.
     */
    personAttributes?: Schema$LensDiscoveryStylePersonAttributes;
    /**
     * Contains person detection result.
     */
    personDetectionSignals?: Schema$LensDiscoveryStylePersonDetectionSignals;
    photoDetectorScore?: number | null;
    photoDetectorVersion?: number | null;
    /**
     * Used by the segindexer for combined www+image indices.
     */
    pornFlagData?: Schema$PornFlagData;
    /**
     * Restricts computed before building a Mustang index.
     */
    precomputedRestricts?: Schema$PrecomputedRestricts;
    /**
     * Rank in near-dup cluster (go/image-rank-in-neardup-cluster). The rank is 1-indexed: rank 1 is the best.
     */
    rankInNeardupCluster?: number | null;
    /**
     * A string representation of all the restricts associated with this image.
     */
    restrictStrings?: string[] | null;
    /**
     * CSV list of user agents for which this image should be considered roboted. Note: All images are crawled using googlebot-images, this exists for clients that require additional restrictions beyond googlebot-images such as news.
     */
    robotedAgents?: string | null;
    /**
     * The Shoppable Images product information to be annotated in the Cdoc. All fields will be populated except the product location bounding box.
     */
    shoppingProductInformation?: Schema$ImageRepositoryShoppingProductInformation;
    /**
     * Size in bytes of original (non-thumbnail)
     */
    size?: number | null;
    /**
     * Web docids that correspond to high ranked smeared landing pages for this image. Used for conditional retrieval of actionable landing pages for image search.
     */
    smearedTopWebLandingPageDocids?: string[] | null;
    smearedTopWebLandingPages?: Schema$SmearedWebLandingPageEntry[];
    /**
     * Aesthetics score of a style image.
     */
    styleAestheticsScore?: Schema$LensDiscoveryStyleAestheticsScoreSignals;
    /**
     * Prediction of a style image type: Stage, Stock, Street or Outfits.
     */
    styleImageType?: Schema$LensDiscoveryStyleStyleImageTypeSignals;
    /**
     * This field is for testing purposes, more information in go/media-dirt-2022.
     */
    testingScore?: number | null;
    thumbHeight?: number | null;
    thumbnail?: Schema$ImageDataThumbnail[];
    thumbSize?: number | null;
    /**
     * Thumbnail width.
     */
    thumbWidth?: number | null;
    /**
     * Time in seconds since epoch after which this image should be considered unavailable.
     */
    unavailableAfterSecs?: string | null;
    /**
     * Canonicalized absolute image url.
     */
    url?: string | null;
    whiteBackgroundScore?: number | null;
    /**
     * Image is likely an object on a white background (value on [0,1]).
     */
    whiteBackgroundScoreVersion?: number | null;
    width?: number | null;
  }
  /**
   * Multibang kg entities.
   */
  export interface Schema$ImageDataMultibangEntities {
    entity?: Schema$ImageDataMultibangEntitiesMultibangEntity[];
  }
  export interface Schema$ImageDataMultibangEntitiesMultibangEntity {
    /**
     * Entity ID.
     */
    entityId?: string | null;
    /**
     * Multibang score.
     */
    score?: number | null;
  }
  export interface Schema$ImageDataThumbnail {
    /**
     * The thumbnail is guaranteed to be kept in the serving system until the expiration timestamp has passed, in microseconds.
     */
    expirationTimestampMicros?: string | null;
    height?: number | null;
    mimeType?: string | null;
    size?: number | null;
    type?: string | null;
    width?: number | null;
  }
  export interface Schema$ImageExactBoost {
    navquery?: Schema$ImageExactBoostNavQuery[];
  }
  /**
   * Navboost query data.
   */
  export interface Schema$ImageExactBoostNavQuery {
    /**
     * Associated confidence scores for the image for the query.
     */
    confidence?: number | null;
    /**
     * Click-based rank of the image for this query.
     */
    imageClickRank?: number | null;
    /**
     * Query fingerprint.
     */
    navFp?: string | null;
    /**
     * The normalized raw query text.
     */
    navQuery?: string | null;
    /**
     * List of all referrers, sorted by their rank (stored in Moosedog).
     */
    referrerDocid?: string[] | null;
    /**
     * Rank of the current web doc referrer (stored in docjoins).
     */
    referrerRank?: number | null;
  }
  /**
   * This class holds the EXIf/IPTC meta data Next Id: 104
   */
  export interface Schema$ImageExifImageEmbeddedMetadata {
    altitude?: number | null;
    aperture?: number | null;
    /**
     * Text fields EXIF_TAG_ARTIST
     */
    author?: string | null;
    /**
     * EXIF_TAG_XP_AUTHOR
     */
    author2?: string | null;
    brightness?: number | null;
    /**
     * Device - Camera raw text without normalization
     */
    cameraMaker?: string | null;
    /**
     * raw text without normalization
     */
    cameraModel?: string | null;
    /**
     * This is the extracted serial number from EXIF (the source depends on camera, most of the cameras store it in makers note tag).
     */
    cameraSerialNumber?: string | null;
    /**
     * Capturing settings in time_t
     */
    captureTime?: string | null;
    colorSpace?: number | null;
    /**
     * EXIF_TAG_USER_COMMENT
     */
    comments?: string | null;
    /**
     * EXIF_TAG_XP_COMMENT
     */
    comments2?: string | null;
    continousDriveMode?: boolean | null;
    /**
     * EXIF_TAG_COPYRIGHT
     */
    copyright?: string | null;
    /**
     * Location from IPTC @deprecated: Use iptc.location instead.
     */
    deprecatedCity?: string | null;
    deprecatedCountry?: string | null;
    deprecatedState?: string | null;
    /**
     * EXIF_TAG_IMAGE_DESCRIPTION
     */
    description?: string | null;
    destBearing?: number | null;
    /**
     * Bearing and distance to destination point.
     */
    destBearingRef?: number | null;
    destDistance?: number | null;
    /**
     * GPS location of destination point.
     */
    destLatitude?: number | null;
    destLongitude?: number | null;
    digitalZoomRatio?: number | null;
    exposureBias?: number | null;
    /**
     * 1-8, see EXIF definition
     */
    exposureProgram?: number | null;
    exposureTime?: number | null;
    flashUsed?: boolean | null;
    focalLength?: number | null;
    /**
     * convert to match 35mm film camera
     */
    focalLength35mm?: number | null;
    focalPlaneResUnit?: number | null;
    focalPlaneXres?: number | null;
    focusMode?: string | null;
    /**
     * Dilution of precision. HDOP/PDOP depends on measure mode. Find out more at http://en.wikipedia.org/wiki/Dilution_of_precision_(GPS)
     */
    gpsDop?: number | null;
    gpsMeasureMode?: string | null;
    gpsStatus?: string | null;
    /**
     * in meters
     */
    hPositioningError?: number | null;
    imageHeight?: number | null;
    imageWidth?: number | null;
    /**
     * GPS Heading 0.00 to 359.99 degrees
     */
    imgDirection?: number | null;
    imgDirectionRef?: string | null;
    iptc?: Schema$ImageExifIPTCMetadata;
    iso?: number | null;
    /**
     * EXIF_TAG_XP_KEYWORDS
     */
    keywords?: string | null;
    /**
     * GPS location +/- 90 inclusive
     */
    latitude?: number | null;
    /**
     * Device - Lens We use this extended id to identify a lens uniquely. Canon: "%d %d %d"=.. Nikon: "%.2X %.2X %.2X %.2X %.2X %.2X %.2X %.2X" Don't change the format of the internal lens id because we use them to look up the lens names.
     */
    lensId?: string | null;
    lensMaker?: string | null;
    lightSource?: number | null;
    longFocal?: number | null;
    /**
     * +/- 180 inclusive
     */
    longitude?: number | null;
    maxApertureAtLongFocal?: number | null;
    maxApertureAtShortFocal?: number | null;
    /**
     * 1-6, see EXIF definition
     */
    meteringMode?: number | null;
    /**
     * in time_t
     */
    modificationTime?: string | null;
    orientation?: string | null;
    shortFocal?: number | null;
    /**
     * EXIF_TAG_SOFTWARE
     */
    software?: string | null;
    /**
     * EXIF_TAG_XP_SUBJECT
     */
    subject?: string | null;
    subjectDistance?: number | null;
    subjectLocationX?: number | null;
    subjectLocationY?: number | null;
    /**
     * EXIF_TAG_XP_TITLE
     */
    title?: string | null;
    /**
     * pixels per inch
     */
    xResolution?: number | null;
    /**
     * pixels per inch
     */
    yResolution?: number | null;
  }
  /**
   * This proto holds IPTC metadata. http://www.iptc.org/cms/site/index.html?channel=CH0099 Proto field name is same with IPTC property name except which is clearly stated. Next Id: 64
   */
  export interface Schema$ImageExifIPTCMetadata {
    /**
     * Page URL about how to acquire this licensable image.
     */
    acquireLicensePage?: string | null;
    artwork?: Schema$ImageExifIPTCMetadataArtwork[];
    contactinfo?: Schema$ImageExifIPTCMetadataContactInfo;
    copyrightNotice?: string | null;
    /**
     * IPTC authorship & copyright related fields.
     */
    creator?: string[] | null;
    creditLine?: string | null;
    /**
     * Time (in seconds)
     */
    dateCreated?: string | null;
    dateExpired?: string | null;
    dateReleased?: string | null;
    description?: string | null;
    /**
     * See go/gi-annotations-indexing for more information.
     */
    digitalSourceType?: string | null;
    event?: string | null;
    headline?: string | null;
    /**
     * PLUS field, not used.
     */
    imageSupplier?: string | null;
    instructions?: string | null;
    keywords?: string[] | null;
    /**
     * License URL about how to distribute the image.
     */
    licenseUrl?: string | null;
    location?: Schema$ImageExifIPTCMetadataLocation;
    /**
     * Location of the camera
     */
    locationCreated?: Schema$ImageExifIPTCMetadataLocationInfo;
    /**
     * Location shown on the image
     */
    locationShown?: Schema$ImageExifIPTCMetadataLocationInfo[];
    modelReleaseStatus?: string | null;
    propertyReleaseStatus?: string | null;
    rightsUsageTerms?: string | null;
    source?: string | null;
    supplementalCategories?: string[] | null;
    /**
     * IPTC description related fields.
     */
    title?: string | null;
  }
  /**
   * Artwork or Object in the Image Details
   */
  export interface Schema$ImageExifIPTCMetadataArtwork {
    /**
     * Other fields omitted.
     */
    title?: string | null;
  }
  export interface Schema$ImageExifIPTCMetadataContactInfo {
    address?: string | null;
    city?: string | null;
    country?: string | null;
    email?: string | null;
    phone?: string | null;
    postalCode?: string | null;
    state?: string | null;
    webUrl?: string | null;
  }
  /**
   * Location of the camera @deprecated: Use location_created instead.
   */
  export interface Schema$ImageExifIPTCMetadataLocation {
    city?: string | null;
    country?: string | null;
    countryCode?: string | null;
    state?: string | null;
    subLocation?: string | null;
    worldRegion?: string | null;
  }
  export interface Schema$ImageExifIPTCMetadataLocationInfo {
    city?: string | null;
    country?: string | null;
    countryCode?: string | null;
    state?: string | null;
    subLocation?: string | null;
    worldRegion?: string | null;
  }
  export interface Schema$ImageMonetizationFeaturedImageProperties {
    /**
     * How an image is inspirational, [0, 1].
     */
    inspirationScore?: number | null;
  }
  export interface Schema$ImageMoosedogCrawlState {
    code?: string | null;
    /**
     * Each of the above not_crawled_reason will have a set of detailed reason defined in crawler/trawler/trawler_enums.proto.
     */
    detailedReason?: number | null;
    /**
     * The status returned when RPCs are used to internally fetch the image (eg. from FIFE).
     */
    internalStatus?: Schema$UtilStatusProto;
    /**
     * Specifies if the current crawl state is terminal.
     */
    isTerminal?: boolean | null;
    /**
     * Time in seconds since epoch after which this image should be considered unavailable.
     */
    noIndexAfterTimestamp?: string | null;
    notCrawledReason?: string | null;
    /**
     * When true, it means that a non-terminal state has overwrote a terminal one.
     */
    overrodeTerminalState?: boolean | null;
    /**
     * The repid for the urls. This repid is the id given to the dupe cluster this url belongs to.
     */
    repid?: string | null;
    /**
     * A comma separated list of user agents for which this image should be considered roboted. All images are crawled using googlebot-images and this exists here purely for informative reasons.
     */
    robotedAgents?: string | null;
    /**
     * The url at which we crawled this content. With us starting to use repids the crawl table key no longer is suggestive of the url. In addition this is used in Amarna to detect race conditions between a reference changing its crawl directive and the original crawl job finishing.
     */
    url?: string | null;
    /**
     * Set to true if the url is taken down by clients. This indicates that this crawl state is used to fast remove the crawl result of the url instead of waiting for Multiverse crawl results. For more information, please refer to go/amarna-url-deletion.
     */
    urlDeleted?: boolean | null;
  }
  /**
   * For detailed info, please see go/naive-image-selection
   */
  export interface Schema$ImageMustangImageLinkSelectionInfo {
    /**
     * score calculated in image selection phase, higher imagelink_selection_score more relevant the link is related to the web page
     */
    webRelevanceScore?: number | null;
  }
  /**
   * A proto buffer to organize shopping offer info from Inventory & Policy Service.
   */
  export interface Schema$ImageMustangShoppingOffer {
    inferredImageTypes?: string[] | null;
    ipsOfferId?: string | null;
  }
  export interface Schema$ImagePerDocData {
    /**
     * entropy and color values for thumbnail (4 bytes consisting of R, G, B and entropy values)
     */
    DEPRECATEDEntropyColor?: number | null;
    /**
     * about 10 bytes
     */
    filename?: string | null;
    /**
     * image_perdoc.h
     */
    flags?: number | null;
    height?: number | null;
    width?: number | null;
  }
  /**
   * Used to store debug information of the overall classifier.
   */
  export interface Schema$ImagePornDebugInfo {
    info?: string | null;
  }
  /**
   * Goldmine annotation in the CDoc to store the hrid of the 5 entities with higher topicality in the document. Used by the Skin Tone Twiddler to determine if the result set shows mostly one specific KG entity. go/result-set-signal
   */
  export interface Schema$ImageQualitySensitiveMediaOrPeopleEntities {
    /**
     * Similar to above, but for media entities (movie name, fictional character, musical band)
     */
    mediaEntitiesId?: string[] | null;
    /**
     * hrid of the 5 people entities with higher topicality in the document
     */
    peopleEntitiesId?: string[] | null;
  }
  /**
   * A single region within an image. NEXT_ID: 11
   */
  export interface Schema$ImageRegionsImageRegion {
    /**
     * The bounding box of the region.
     */
    boundingBox?: Schema$PhotosVisionGroundtruthdbNormalizedBoundingBox;
    /**
     * The confidence score associated with the bounding box.
     */
    boundingBoxScore?: number | null;
    /**
     * A unique identifier for the region within the image. The id is unique only among other regions in the image.
     */
    id?: string | null;
    /**
     * Set true if the region represents a product, i.e., if any of its labels are on a product labels whitelist. See ImageRegionsConfig for details on the product whitelist.
     */
    isProduct?: boolean | null;
    /**
     * The score for this region based on how visually similar its neighbors are.
     */
    knnScore?: number | null;
    /**
     * The label group corresponding to the first LabelParams listed in ImageRegionsConfig.
     */
    labelGroup?: Schema$ImageUnderstandingIndexingLabelGroup;
    /**
     * The version string of the labels with which the region was processed.
     */
    labelVersion?: string | null;
    /**
     * The primary label associated with the region. Specifically, the highest-scored whitelisted label associated with the region. See ImageRegionsConfig for details on the whitelist.
     */
    primaryLabel?: Schema$ImageUnderstandingIndexingLabel;
    renderType?: string | null;
    /**
     * The starburst v4 features and tokens for the region.
     */
    starburstV4?: Schema$ImageUnderstandingIndexingFeature;
  }
  /**
   * An image with regions within it. NEXT_ID: 11
   */
  export interface Schema$ImageRegionsImageRegions {
    /**
     * The final_porn_score for the image.
     */
    finalPornScore?: number | null;
    /**
     * The final_violence_score for the image.
     */
    finalViolenceScore?: number | null;
    /**
     * The output of various features generated by the Flow framework, most importantly data from Starburst (go/starburst).
     */
    flowOutput?: Schema$ImageContentFlowProtoProd;
    /**
     * True if the image has a 300k thumb.
     */
    has300kThumb?: boolean | null;
    /**
     * True if the image has navboost.
     */
    hasNavboost?: boolean | null;
    /**
     * True if the image is iu-inappropriate.
     */
    isIuInappropriate?: boolean | null;
    /**
     * The pedo_score of the image.
     */
    pedoScore?: number | null;
    /**
     * The precomputed restricts for the image.
     */
    precomputedRestricts?: Schema$PrecomputedRestricts;
    /**
     * The racy_score of the image.
     */
    racyScore?: number | null;
    /**
     * The list of regions.
     */
    region?: Schema$ImageRegionsImageRegion[];
  }
  /**
   * Next Tag: 8
   */
  export interface Schema$ImageRepositoryAmarnaCloudSpeechSignals {
    /**
     * If this field is set to true, it means that Youtube already processed the ASR from S3 for the langID. Please find the ASR result from transcript_asr in google3/image/repository/proto/video_search.proto instead.
     */
    duplicateOfYtS3Asr?: boolean | null;
    /**
     * The language id input for creating this ASR without regional info. Same format as in go/ytlangid. This field is populated in Kronos Amarna Cloud Speech operator and passed to Amarna, but it is cleared before stored in Amarna's metadata table.
     */
    langWithoutLocale?: string | null;
    /**
     * Identifying which ASR models are used for the result
     */
    modelIdentifier?: string | null;
    /**
     * Raw results from Cloud Speech API
     */
    results?: Schema$ImageRepositorySpeechRecognitionResult[];
    /**
     * This field contains full (stitched) transcription, word-level time offset , and word-level byte offset. The value of this field is derived from the SpeechRecognitionResult field above.
     */
    transcriptAsr?: Schema$PseudoVideoData;
  }
  export interface Schema$ImageRepositoryAmarnaSignalsBlob {
    frameFeatures?: Schema$DrishtiFeatureSetDataSequence;
  }
  export interface Schema$ImageRepositoryAmarnaSignalsBlobInfo {
    /**
     * Blob id for AmarnaSignalsBlob (see `Blob proto` section of go/revisit-frame-level-signals-amarna).
     */
    signalsBlobId?: string | null;
    /**
     * Additional timestamp field for when the blob is written/updated, serving as the dirty field to help checksum-based update push (see `Dirty field` section in go/revisit-frame-level-signals-amarna).
     */
    signalsBlobUpdateTimestamp?: string | null;
  }
  /**
   * This message stores the status and reason why Amarna was unable to provide perdoc information for an image.
   */
  export interface Schema$ImageRepositoryAmarnaStatus {
    reason?: string | null;
    status?: string | null;
  }
  /**
   * Additional animated image data stored in perdoc (ImageData); will only be stored for animated images.
   */
  export interface Schema$ImageRepositoryAnimatedImagePerdocData {
    /**
     * Aggregated porn scores for animated images. Aggregated using max sampling rate / max duration. Note the plan is to fold these scores into existing summarized scores, for cases where these scores are available. See tracking bug b/63580795.
     */
    aggregatedPornScores?: Schema$ImageSafesearchContentBrainPornAnnotation;
    /**
     * Total duration of animation, in ms.
     */
    durationMs?: number | null;
  }
  /**
   * The metadata returned with each transcode. Next available field: 9
   */
  export interface Schema$ImageRepositoryApiItagSpecificMetadata {
    /**
     * Timestamp (measured in seconds since epoch) after which Amarna will delete the serving transcode.
     */
    expirationTimestampSec?: string | null;
    /**
     * The Venom Genus that this transcode was produced for.
     */
    genus?: string | null;
    /**
     * Indicates the state in Venom for this transcode type.
     */
    state?: string | null;
    /**
     * transcode type which are available for the video.
     */
    transcodeItag?: number | null;
    /**
     * The Venom ID that this transcode was produced for.
     */
    videoId?: Schema$VideoAssetsVenomVideoId;
    /**
     * Indicates xtags if present. Xtag makes the different transcode. For transcode "MP4_AVCBASE640_AAC/af=sq" (itag 18 with xtag), "af=sq" is the xtag part. This is a different transcode than "MP4_AVCBASE640_AAC" (itag 18).
     */
    xtagsList?: Schema$ImageRepositoryApiXtagList;
  }
  export interface Schema$ImageRepositoryApiXtag {
    /**
     * Names are all stored case-sensitive, and no case-folding is done for comparisons.
     */
    name?: string | null;
    /**
     * The value associated with this Xtag. Values are all stored case-sensitive, and no case-folding is done for comparisons.
     */
    value?: string | null;
  }
  /**
   * XtagList -- a collection of Xtag instances with unique names. This would be associated with one specific piece of content.
   */
  export interface Schema$ImageRepositoryApiXtagList {
    xtags?: Schema$ImageRepositoryApiXtag[];
  }
  /**
   * Next Tag: 51
   */
  export interface Schema$ImageRepositoryContentBasedVideoMetadata {
    /**
     * A hash of the video bytes used as a key to Amarna's video_metadata table.
     */
    amarnaDocid?: string | null;
    /**
     * Timestamp of the last successful Ares classification request.
     */
    aresClassificationRequestTimestamp?: string | null;
    /**
     * Both audio- and audio-video-files are treated as videos during indexing (whether they share a container format, like .mp4, or not, like .mp3). This bool indicates that there's no video track, just an audio track.
     */
    audioOnly?: boolean | null;
    /**
     * Transcript generated from Cloud Speech API
     */
    cloudSpeechSignals?: Schema$ImageRepositoryAmarnaCloudSpeechSignals;
    /**
     * Video Understanding Golden features. (go/amarna-video-signals#golden-signals) Note: Golden6 features (names matching "video_*") are DEPRECATED. Please migrate to Golden7 ("VideoFeatures.*"). For more context, see go/golden7/migrating-from-golden6 and go/amarna-golden-feature-tracker. Signals popluated in Raffia cdoc.doc_videos are configured in cs/symbol:AMARNA_EXPORTED_GOLDEN7_FEATURES.
     */
    featureSetData?: Schema$DrishtiFeatureSetData;
    /**
     * Golden7 video-level people features. (go/ypf-video-features)
     */
    golden7SoapboxSummary?: Schema$DrishtiFeatureSetData;
    /**
     * Information on frame-level people feature blob. (go/vpf-frame-features)
     */
    golden7SoapboxTracksBlobInfo?: Schema$ImageRepositoryAmarnaSignalsBlobInfo;
    /**
     * Metadata related to Inline playback on the Interest Feed. This field is filled by Hamilton.
     */
    inlinePlayback?: Schema$VideoCrawlVideoInlinePlaybackMetadata;
    languageIdentification?: Schema$VideoTimedtextS4ALIResults;
    /**
     * Legos results
     */
    legosAnnotationData?: Schema$VideoLegosLegosAnnotationsSets;
    /**
     * LMS preview frame perdocs. Timestamps of the frame perdocs are from the original video, not from the preview.
     */
    lmsPreviewFramePerdocs?: Schema$ImageRepositoryFramePerdocs;
    /**
     * When Transcode itag 140 is requested, MediaAnalyzer (as the part of Viper graph) generates audio info including loudness_data, which is then published to Streamer. For Audio news client, we extract this loudness data from Streamer to this field.
     */
    loudnessData?: Schema$VideoStorageLoudnessData;
    /**
     * Information about the media file, such as duration, resolution, and detail about each audio/video stream. Note that it contains no PII.
     */
    mediaInfo?: Schema$VideoMediaInfo;
    /**
     * multi_thumbnails_frame_perdocs contains perdocs(go/vss-signals#perdoc) for all frame thumbnails generated by multiple frames per minutes. See more details in go/multiple-thumbnails-per-minutes.
     */
    multiThumbnailsFramePerdocs?: Schema$ImageRepositoryFramePerdocs;
    representativeFrameData?: Schema$ImageData;
    /**
     * Trnascript generated through AMARNA_CLOUD_SPEECH asset in Venom. Note that AMARNA_CLOUD_SPEECH uses S3 as the speech engine backend, similar to YT caption's SPEECH_RECOGNIZER asset. However, they may use different S3 models.
     */
    s3Asr?: Schema$ImageRepositoryAmarnaCloudSpeechSignals;
    s3LanguageIdentification?: Schema$ImageRepositoryS3LangIdSignals;
    /**
     * Contains SafeSearch video classification outputs which are vertical_name/float pairs.
     */
    safesearchVideoContentSignals?: Schema$SafesearchVideoContentSignals;
    /**
     * 64 bit docid used for retrieving video previews.
     */
    searchDocid?: string | null;
    /**
     * Amarna signals blob that contains large-size signals like VCA frame-level signals.
     */
    signalsBlob?: Schema$ImageRepositoryAmarnaSignalsBlob;
    /**
     * Information for the amarna signals blob.
     */
    signalsBlobInfo?: Schema$ImageRepositoryAmarnaSignalsBlobInfo;
    speechProperties?: Schema$IndexingSpeechSpeechPropertiesProto;
    thumbnailerData?: Schema$VideoPipelineViperThumbnailerColumnData;
    /**
     * Thumbnail quality score predict how visual pleasing a thumbnail is, based on the model trained with deep neural networks.(go/thumb_features_dd) Note the signal currently only available for Youtube videos.
     */
    thumbnailQualityScore?: Schema$VideoThumbnailsThumbnailScore;
    /**
     * Metadata about each transcode requested.
     */
    transcodeMetadata?: Schema$ImageRepositoryApiItagSpecificMetadata[];
    /**
     * Speech related metadata The transcript_asr field is generated from the YT caption's SPEECH_RECOGNIZER asset.
     */
    transcriptAsr?: Schema$PseudoVideoData;
    /**
     * Data about whether or not the video was truncated.
     */
    truncationInfo?: Schema$ImageRepositoryFileTruncationInfo;
    /**
     * If set, video has been deleted using the deletion service (MediaDeletionService).
     */
    unwantedContent?: Schema$ImageRepositoryUnwantedContent;
    /**
     * The video id in the venom pipeline for STAMP purposes. DEPRECATED: Use transcode_metadata or venom_processing_info instead, which includes the ID and contains information for all clients.
     */
    venomId?: string | null;
    /**
     * Information about the video's status in Venom, including IDs and processing times.
     */
    venomProcessingInfo?: Schema$ImageRepositoryVenomProcessingInfo;
    /**
     * Video anchor sets hold set of anchors with multiple anchor types and sequence of VideoAnchor which contains metadata about the anchor, such as thumbnail, perdoc data.
     */
    videoAnchorSet?: Schema$VideoContentSearchVideoAnchorSets;
    /**
     * Set from the video header if truncated, or is the verified length if completely crawled.
     */
    videoDurationSec?: number | null;
    /**
     * The video porn confidence score extracted from Whisper featureSet: "video_labels:whisper_v3", with CR2 label: "/cr2/1".
     */
    videoPornScore?: number | null;
    /**
     * The video porn confidence score extracted from WhisperV4 featureSet: "VideoFeatures.whisper_v4_labels", with CR2 label: "/tns/porn".
     */
    videoPornScoreV4?: number | null;
    /**
     * video_preview_bytes is only exported as virtual dataset by IE VideoUnderstanding and should not be persisted. It will be used by downstream IE functions to push for serving.
     */
    videoPreviewBytes?: Schema$ImageRepositoryVideoPreviewsVideoPreview[];
    /**
     * video_previews contain the preview metadata but no bytes. It exits for IE and non-IE cases.
     */
    videoPreviews?: Schema$ImageBaseVideoPreviewMetadata[];
    /**
     * Deprecated, please use media_info.
     */
    videoStreamInfo?: Schema$VideoPipelineViperVSIColumnData;
    /**
     * VideoTranscriptAnnotations holds sentence segmented text and timing information to be used for VideoAnswers (go/video-answers). Note that only punctuated_transcript, timing_info, and lang field are filled, and other fields will be filled in the later stage.
     */
    videoTranscriptAnnotations?: Schema$QualityWebanswersVideoTranscriptAnnotations;
    /**
     * Contains lists of reasons why YT videos were filtered from specific processing.
     */
    youtubeProcessingFilter?: Schema$ImageRepositoryYoutubeProcessingFilter;
  }
  /**
   * Fields for crawl-status-related debugging information.
   */
  export interface Schema$ImageRepositoryCrawlStatusInfo {
    code?: string | null;
    notCrawledReason?: string | null;
  }
  export interface Schema$ImageRepositoryDeepImageEngagingnessOutput {
    /**
     * DeepImageEngagingness score.
     */
    score?: number | null;
  }
  /**
   * Describes our knowledge about whether a stored file is truncated with respect to its original file online.
   */
  export interface Schema$ImageRepositoryFileTruncationInfo {
    /**
     * A lower bound on the original file's size.
     */
    originalFileSizeLowerBoundBytes?: string | null;
    /**
     * Indicates whether the stored file is equal to the original file (COMPLETE), is only a prefix (TRUNCATED), or that we don't know (UNKNOWN, the default).
     */
    truncationState?: string | null;
  }
  /**
   * Identifier for frames associated with a video.
   */
  export interface Schema$ImageRepositoryFrameIdentifier {
    multiThumbnailVariant?: Schema$ImageRepositoryFrameIdentifierMultiThumbnailVariant;
    previewFrameZeroVariant?: Schema$ImageRepositoryFrameIdentifierPreviewFrameZeroVariant;
    thumbnailVariant?: Schema$ImageRepositoryFrameIdentifierThumbnailVariant;
    /**
     * Offset of the frame from the beginning of the video (in milliseconds).
     */
    timestampMs?: number | null;
  }
  /**
   * This variant defines the frame to be used as multiple thumbnails per miuntes.
   */
  export interface Schema$ImageRepositoryFrameIdentifierMultiThumbnailVariant {}
  /**
   * This variant defines the frame to be the first frame of the video's generated preview.
   */
  export interface Schema$ImageRepositoryFrameIdentifierPreviewFrameZeroVariant {
    previewLength?: string | null;
    /**
     * All xtags used in the generation of the preview. The same frame generated from the same preview with different xtags will likely have different bytes (such as, for example, resulting from a different aspect ratio).
     */
    xtagList?: Schema$ImageRepositoryApiXtagList;
  }
  /**
   * This variant defines the frame to be a thumbnail of the video.
   */
  export interface Schema$ImageRepositoryFrameIdentifierThumbnailVariant {}
  /**
   * Only one of timestamp_msec or frame_identifier should be set. timestamp_msec is the old identifier for frames, and is still used on thumbnail frames. frame_identifier should be used on other kinds of frames (e.g. preview frame zero).
   */
  export interface Schema$ImageRepositoryFramePerdoc {
    frameIdentifier?: Schema$ImageRepositoryFrameIdentifier;
    perdoc?: Schema$ImageData;
    /**
     * Timestamp (in msec) of the frame from the original video DEPRECATED: Use the timestamp_ms field in frame_identifier instead.
     */
    timestampMsec?: number | null;
  }
  /**
   * This proto stores perdocs extracted from video frames.
   */
  export interface Schema$ImageRepositoryFramePerdocs {
    framePerdoc?: Schema$ImageRepositoryFramePerdoc[];
  }
  export interface Schema$ImageRepositoryNimaOutput {
    /**
     * NIMA score.
     */
    score?: number | null;
  }
  /**
   * For debugging only.
   */
  export interface Schema$ImageRepositoryS3LangIdDebuggingInfo {
    /**
     * Audio input processing cap.
     */
    audioInputCap?: string | null;
    /**
     * Number of failed segments. Successful segments are stored in `langid_signals_for_segment`.
     */
    failedSegments?: number | null;
    /**
     * Number of processed segments.
     */
    processedSegments?: number | null;
    /**
     * Duration of each segment (except for the last one if capped).
     */
    segmentDuration?: string | null;
    /**
     * If \>1, every N segment is processed.
     */
    segmentStride?: number | null;
    /**
     * Wave header of the audio input.
     */
    waveHeader?: Schema$SpeechWaveHeader;
  }
  /**
   * Next Tag: 10
   */
  export interface Schema$ImageRepositoryS3LangIdSignals {
    /**
     * Whether this audio chunk has speech or not.
     */
    containsSpeech?: boolean | null;
    debuggingInfo?: Schema$ImageRepositoryS3LangIdDebuggingInfo;
    endSec?: string | null;
    /**
     * S3 langID result. We keep langid_result even if contains_speech = false.
     */
    langidResult?: Schema$SpeechS3LanguageIdentificationResult;
    /**
     * Converted version of the langid_result field, so that we have the YT compatible version of the langID result.
     */
    languageIdentification?: Schema$VideoTimedtextS4ALIResults;
    /**
     * The version of the model used for S3 LangID service.
     */
    modelVersion?: string | null;
    speechFrameCount?: number | null;
    /**
     * The audio chunk which corresponds to this langID result expressed as a start_sec and end_sec.
     */
    startSec?: string | null;
    /**
     * Count the number of total frames in the audio chunk as well as the number of speech frames.
     */
    totalFrameCount?: number | null;
  }
  /**
   * A message containing embedding information and localization scores using the VSS product recognition module.
   */
  export interface Schema$ImageRepositoryShoppingProductInformation {
    /**
     * Information about versioned product sets found. There will be at most two versions present. The results from the current version of the models used in VSS and the results from the previous version of the models used. Note that not all products may have two version since the model might detect the product in one version and not the other.
     */
    productSets?: Schema$ImageRepositoryShoppingProductInformationVersionedProductInformationSet[];
  }
  /**
   * Contains the coordinates of the normalized bounding box.
   */
  export interface Schema$ImageRepositoryShoppingProductInformationBoundingBox {
    /**
     * The vertical height of the bounding box (ymax - ymin + 1), normalized by image height with range [0,1].
     */
    h?: number | null;
    /**
     * The horizontal width of the bound box (xmax - xmin + 1), normalized by image width with range [0,1].
     */
    w?: number | null;
    /**
     * The x coordinate (xmin), normalized by image width with range [0,1).
     */
    x?: number | null;
    /**
     * The y coordinate (ymin), normalized by image height with range [0,1).
     */
    y?: number | null;
  }
  /**
   * The recognized entity.
   */
  export interface Schema$ImageRepositoryShoppingProductInformationEntity {
    id?: string | null;
    /**
     * The normalized recognition score between 0 and 1.
     */
    score?: number | null;
  }
  /**
   * Information about a single product. For ProductNet models, each product has one label with a detection score. The label is mapped to one or multiple category ids. For PRIMI generic feature models, each product can have multiple entities, and each entity has a score. The category_id and detection_score fields are not populated for PRIMI generic feature models.
   */
  export interface Schema$ImageRepositoryShoppingProductInformationProductInformation {
    /**
     * The possible Merlot ids for the item. There may be more than one if the product detector result corresponds to a collection of merlot ids, which can't be easily grouped up to a common ancestor, for which the detector would still make sense for all the children. E.g. a detected "chair" can be either an indoor chair or an outdoor one, however in Merlot the common ancestor of the two is furniture.
     */
    categoryId?: number[] | null;
    /**
     * The k-d tree clusters for retrieval. Will be deprecated, use the token_groups instead. To add tokens/cluster_ids from new tokenization model in the future, add it to the token_groups.
     */
    clusterIds?: number[] | null;
    /**
     * The localization detection score.
     */
    detectionScore?: number | null;
    /**
     * The serialized embedding values.
     */
    embedding?: string | null;
    /**
     * The recognized entities and scores.
     */
    entities?: Schema$ImageRepositoryShoppingProductInformationEntity[];
    /**
     * Feature type (different detectors and embedders) requested.
     */
    featureType?: string | null;
    /**
     * The bounding box.
     */
    productLocation?: Schema$ImageRepositoryShoppingProductInformationBoundingBox;
    tokenGroups?: Schema$ImageRepositoryShoppingProductInformationProductInformationTokenGroup[];
  }
  /**
   * The tokens for retrieval.
   */
  export interface Schema$ImageRepositoryShoppingProductInformationProductInformationTokenGroup {
    model?: string | null;
    tokens?: number[] | null;
  }
  /**
   * Store ProductInformation for a given version of the models used in VSS.
   */
  export interface Schema$ImageRepositoryShoppingProductInformationVersionedProductInformationSet {
    /**
     * The type of the model.
     */
    modelType?: string | null;
    /**
     * List of ProductInformation for this version.
     */
    products?: Schema$ImageRepositoryShoppingProductInformationProductInformation[];
    /**
     * The version of the models used in VSS. Newer version will have a higher version number.
     */
    version?: number | null;
  }
  /**
   * Alternative hypotheses (a.k.a. n-best list).
   */
  export interface Schema$ImageRepositorySpeechRecognitionAlternative {
    /**
     * The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. This field is set only for the top alternative of a non-streaming result or, of a streaming result where `is_final=true`. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating `confidence` was not set.
     */
    confidence?: number | null;
    /**
     * Transcript text representing the words that the user spoke.
     */
    transcript?: string | null;
    /**
     * A list of word-specific information for each recognized word. Note: When `enable_speaker_diarization` is true, you will see all the words from the beginning of the audio.
     */
    words?: Schema$ImageRepositoryWordInfo[];
  }
  /**
   * A speech recognition result corresponding to a portion of the audio. This field is copied from cloud/speech/v1p1beta1/cloud_speech.proto. Amarna needs to have a standalone version as v1p1beta1/cloud_speech.proto is in the for of versioned proto and it breaks other prod code depending on Amarna's video schema.
   */
  export interface Schema$ImageRepositorySpeechRecognitionResult {
    /**
     * May contain one or more recognition hypotheses (up to the maximum specified in `max_alternatives`). These alternatives are ordered in terms of accuracy, with the top (first) alternative being the most probable, as ranked by the recognizer.
     */
    alternatives?: Schema$ImageRepositorySpeechRecognitionAlternative[];
    /**
     * For multi-channel audio, this is the channel number corresponding to the recognized result for the audio from that channel. For audio_channel_count = N, its output values can range from '1' to 'N'.
     */
    channelTag?: number | null;
    /**
     * The [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag of the language in this result. This language code was detected to have the most likelihood of being spoken in the audio.
     */
    languageCode?: string | null;
    /**
     * Time offset of the end of this result relative to the beginning of the audio. This field is internal-only and is used to order results based on their timestamps.
     */
    resultEndTime?: string | null;
  }
  /**
   * To indicate whether the image or video is to be deleted from the repository due to legal reasons or hidden from search results.
   */
  export interface Schema$ImageRepositoryUnwantedContent {
    deletionReason?: string | null;
    hideReason?: string | null;
  }
  export interface Schema$ImageRepositoryVenomProcessingInfo {
    /**
     * Contains one status for each Genus that this video belongs to in Venom. For example, a video that is both 1) Found on the web, and 2) Opted-in by an Interest Feed partner would have two entries, one for GENUS_CRAWL and one for GENUS_VIDEO_INTEREST_FEED
     */
    venomStatus?: Schema$ImageRepositoryVenomStatus[];
  }
  export interface Schema$ImageRepositoryVenomStatus {
    /**
     * Venom ACL of the video. Used to check if other systems, such as Ares, are able to process the video.
     */
    acl?: Schema$VideoAssetsVenomACL;
    deletionTimestampUsec?: string | null;
    /**
     * The Genus (Venom's client ID) that this media belongs to.
     */
    genus?: string | null;
    /**
     * Time that VideoNotification result was received from Venom.
     */
    insertionResponseTimestampUsec?: string | null;
    insertionTimestampUsec?: string | null;
    /**
     * Record the attempts num of previous insertion. It's only updated when either the insertion succeeds or fails with reason INSERTION_ATTEMPTS_EXCEEDED, but it's always set so that we can easily construct venom_id with this attempts num for future insertions.
     */
    lastInsertionAttemptsNum?: number | null;
    reason?: string | null;
    /**
     * The Settings that were used to customize the Venom request for this media.
     */
    settings?: Schema$VideoAssetsVenomSettings[];
    state?: string | null;
    /**
     * Transition contains the Objective and Outcome of the latest Venom run.
     */
    transition?: Schema$VideoAssetsVenomTransition;
    /**
     * The media's unique identifier within Venom.
     */
    venomId?: Schema$VideoAssetsVenomVideoId;
    /**
     * The generation number returned by Venom.
     */
    venomMutationGeneration?: string | null;
    /**
     * This field is not persisted anywhere. It is only used in deletion service for converying the VideoVenomSetting when deleting Venom data.
     */
    videoVenomSetting?: string | null;
  }
  export interface Schema$ImageRepositoryVideoIndexingInfo {
    notIndexedVideoLink?: Schema$ImageRepositoryVideoLinkIndexingInfo[];
  }
  export interface Schema$ImageRepositoryVideoLinkIndexingInfo {
    /**
     * Fields for crawl-status-related debugging information.
     */
    crawlStatusInfo?: Schema$ImageRepositoryCrawlStatusInfo;
    /**
     * The video URL.
     */
    url?: string | null;
  }
  export interface Schema$ImageRepositoryVideoPreviewsDebuggingInfo {
    /**
     * Last Amarna processing timestamp.
     */
    lastAmarnaProcessingTime?: string | null;
    /**
     * The underlying processing engine, like 'viper' or 'kronos'.
     */
    processingEngine?: string | null;
  }
  export interface Schema$ImageRepositoryVideoPreviewsVideoPreview {
    /**
     * The actual video preview bytes generated for the video.
     */
    content?: string | null;
    /**
     * Used for debugging only.
     */
    debuggingInfo?: Schema$ImageRepositoryVideoPreviewsDebuggingInfo;
    /**
     * The metadata associated with the preview (i.e. the type: 8k, 90k, etc.)
     */
    metadata?: Schema$ImageBaseVideoPreviewMetadata;
    /**
     * 0th frame image of the preview. This frame has the same resolution as the associated preview video bytes, as it is taken directly from the preview bytes in Venom/Viper processing. Right now, we only populate preview_frame_zero only for the VPREVIEW_TYPE_540K_ORIGINAL_HQ_LICENSED preview type. Note that preview_frame_zero.thumbnails(0).timestamp_ms() is the timestamp from the full video, not from the preview.
     */
    previewFrameZero?: Schema$DrishtiVesperVideoThumbnail;
  }
  export interface Schema$ImageRepositoryVideoProperties {
    /**
     * Both audio- and audio-video-files are treated as videos during indexing (whether they share a container format, like .mp4, or not, like .mp3). This bool indicates that there's no video track, just an audio track.
     */
    audioOnly?: boolean | null;
    /**
     * Information derived from fetched video bytes.
     */
    contentBasedMetadata?: Schema$ImageRepositoryContentBasedVideoMetadata;
    /**
     * The raw crawl state.
     */
    crawlState?: Schema$ImageMoosedogCrawlState;
    /**
     * Timestamp of the first time that the video was successfully crawled.
     */
    firstCrawlTimestampSec?: string | null;
    /**
     * Timestamp when this video's videoProperties is populated for the first time, measured in seconds since epoch.
     */
    firstProcessingTimestampSec?: string | null;
    /**
     * DEPRECATED: please use content_based_metadata.inline_playback. Metadata related to Inline playback on the Interest Feed
     */
    inlinePlayback?: Schema$VideoCrawlVideoInlinePlaybackMetadata;
    /**
     * Timestamp when this video's last crawling is requested, measured in seconds since epoch.
     */
    lastCrawlRequestTimestampSec?: string | null;
    /**
     * Last timestamp when this video's videoProperties is populated, measured in seconds since epoch.
     */
    lastProcessingTimestampSec?: string | null;
    /**
     * This is the video url taken from the key of the Amarna references table row corresponding to this message.
     */
    url?: string | null;
  }
  /**
   * Word-specific information for recognized words.
   */
  export interface Schema$ImageRepositoryWordInfo {
    /**
     * The confidence estimate between 0.0 and 1.0. A higher number indicates an estimated greater likelihood that the recognized words are correct. This field is set only for the top alternative of a non-streaming result or, of a streaming result where `is_final=true`. This field is not guaranteed to be accurate and users should not rely on it to be always provided. The default of 0.0 is a sentinel value indicating `confidence` was not set.
     */
    confidence?: number | null;
    /**
     * Time offset relative to the beginning of the audio, and corresponding to the end of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.
     */
    endTime?: string | null;
    /**
     * A distinct integer value is assigned for every speaker within the audio. This field specifies which one of those speakers was detected to have spoken this word. Value ranges from '1' to diarization_speaker_count. speaker_tag is set if enable_speaker_diarization = 'true' and only in the top alternative.
     */
    speakerTag?: number | null;
    /**
     * Time offset relative to the beginning of the audio, and corresponding to the start of the spoken word. This field is only set if `enable_word_time_offsets=true` and only in the top hypothesis. This is an experimental feature and the accuracy of the time offset can vary.
     */
    startTime?: string | null;
    /**
     * The word corresponding to this set of information.
     */
    word?: string | null;
  }
  /**
   * Next available tag: 13
   */
  export interface Schema$ImageRepositoryYoutubeProcessingFilter {
    previewsFilteredReason?: string[] | null;
  }
  /**
   * Don't change the field names. The names are used as sparse feature labels in client projects.
   */
  export interface Schema$ImageSafesearchContentBrainPornAnnotation {
    /**
     * The probability that the youngest person in the image is a child.
     */
    childScore?: number | null;
    /**
     * This score correlates with potential child abuse. Google confidential!
     */
    csaiScore?: number | null;
    /**
     * Experimental score. Do not use. Google confidential!
     */
    csamA1Score?: number | null;
    /**
     * Experimental score. Do not use. Google confidential!
     */
    csamAgeIndeterminateScore?: number | null;
    /**
     * This field contains the probability that an image is inappropriate for Images Universal, according to this policy: go/iupolicy.
     */
    iuInappropriateScore?: number | null;
    medicalScore?: number | null;
    pedoScore?: number | null;
    pornScore?: number | null;
    /**
     * This score is related to an image being sexually suggestive.
     */
    racyScore?: number | null;
    /**
     * This score is related to racy/sexual images where scores have semantic meaning from 0 to 1.
     */
    semanticSexualizationScore?: number | null;
    spoofScore?: number | null;
    /**
     * This field is an experimental one with a quite vague meaning. Please contact safesearch@ before any meaningful use of it. There is no guarantee it will preserve its behavior in the future.
     */
    version?: string | null;
    violenceScore?: number | null;
    /**
     * Deprecated, use porn_score instead. The most recent model version does not produce this anymore.
     */
    ytPornScore?: number | null;
  }
  /**
   * A protocol buffer to store the OCR annotation. Next available tag id: 10.
   */
  export interface Schema$ImageSafesearchContentOCRAnnotation {
    /**
     * A string that indicates the version of SafeSearch OCR annotation.
     */
    ocrAnnotationVersion?: string | null;
    /**
     * The score produced by Aksara geometry and spoof score. Describes the 'visibility' or 'importance' of the text on the image [0, 1]
     */
    ocrProminenceScore?: number | null;
    /**
     * Image OCR racyness/pornyness, computed by porn query classifier.
     */
    pornScore?: number | null;
    /**
     * Same as offensive_score, but weighted by prominence.
     */
    prominentOffensiveScore?: number | null;
    /**
     * Same as vulgar_score, but weighted by prominence.
     */
    prominentVulgarScore?: number | null;
    /**
     * The score produced by offensive salient terms model.
     */
    qbstOffensiveScore?: number | null;
    /**
     * Presence of i18n-recognized vulgar term in the OCR.
     */
    vulgarI18nBit?: boolean | null;
    /**
     * Image OCR vulgarity, computed by vulgar query classifier.
     */
    vulgarScore?: number | null;
  }
  export interface Schema$ImageSafesearchContentOffensiveSymbolDetection {
    matches?: Schema$ImageSafesearchContentOffensiveSymbolMatch[];
  }
  /**
   * Each entry corresponds to an image containing an offensive symbol.
   */
  export interface Schema$ImageSafesearchContentOffensiveSymbolMatch {
    /**
     * Confidence score of the match. The higher, the more likely to match the symbol.
     */
    score?: number | null;
    type?: string | null;
  }
  export interface Schema$ImageSearchImageIndexingInfo {
    /**
     * Image Selection Info
     */
    imageLinkSelectionInfo?: Schema$ImageSearchImageSelectionInfo[];
    /**
     * URLs and Amarna status of images on the page for which image data is not yet available and weren't selected for indexing in image search. Used by consumers of docjoins that need a complete view of image urls on the page (i.e. Digdug).
     */
    rejectedNotIndexedImageLink?: Schema$ImageSearchUnindexedImageLink[];
    /**
     * URLs and Amarna status of images on the page for which image data is not yet available and were otherwise selected for indexing in image search. Used by consumers of docjoins that need a complete view of selected image urls on the page (i.e. Hearse, the index selection testbed).
     */
    selectedNotIndexedImageLink?: Schema$ImageSearchUnindexedImageLink[];
  }
  /**
   * The image license info for licensable images(go/Licensable-Images-PRD) This proto in design doc: go/licensable-images-edd
   */
  export interface Schema$ImageSearchImageLicenseInfo {
    /**
     * Records web page url about how to use the licensed image.
     */
    acquireLicensePage?: string | null;
    /**
     * Provides copyright info.
     */
    copyrightNotice?: string | null;
    /**
     * Source type for copyright_notice field.
     */
    copyrightNoticeSourceType?: string | null;
    /**
     * creator, authors.
     */
    creator?: string[] | null;
    /**
     * Source type for creator field.
     */
    creatorSourceType?: string | null;
    /**
     * Text for crediting persons or organizations.
     */
    creditText?: string | null;
    /**
     * Source type for credit_text field.
     */
    creditTextSourceType?: string | null;
    /**
     * Whether this license url is in retired license list, which is from: https://creativecommons.org/retiredlicenses/
     */
    isRetiredCcUrl?: boolean | null;
    licenseType?: string | null;
    /**
     * Records license URL.
     */
    licenseUrl?: string | null;
    /**
     * A bitwise-OR of SafeSearch filtering flags. If present, the flags will be a bitwise-AND between this value and all the classifier_porn::query::Vertical enums. If the value is -1, it indicates there is some error with SafeSearch classifier. The default value 0 means no filtering flags are set.
     */
    safesearchFlags?: number | null;
    sourceType?: string | null;
  }
  export interface Schema$ImageSearchImageSelectionInfo {
    /**
     * Image Selection Info.
     */
    imageLinkSelectionInfo?: Schema$ImageMustangImageLinkSelectionInfo;
    /**
     * The image URL.
     */
    url?: string | null;
  }
  export interface Schema$ImageSearchUnindexedImageLink {
    /**
     * Insight on why we do not have data for this imagelink.
     */
    amarnaStatus?: Schema$ImageRepositoryAmarnaStatus;
    /**
     * Fields for crawl-status-related debugging information.
     */
    crawlStatusInfo?: Schema$ImageRepositoryCrawlStatusInfo;
    /**
     * The image URL.
     */
    url?: string | null;
  }
  /**
   * Annotation packs various recognition, detection, embedding, and parsing results. One Annotation per bounding box detection.
   */
  export interface Schema$ImageUnderstandingIndexingAnnotation {
    /**
     * Multiple feature embeddings for this bounding box.
     */
    feature?: Schema$ImageUnderstandingIndexingFeature[];
    /**
     * Multiple label annotations for this bounding box.
     */
    labelGroup?: Schema$ImageUnderstandingIndexingLabelGroup[];
    /**
     * Detected bounding box. Leave it not set for whole image annotation.
     */
    roi?: Schema$ImageUnderstandingIndexingImageRegion;
  }
  export interface Schema$ImageUnderstandingIndexingAnnotationGroup {
    annotation?: Schema$ImageUnderstandingIndexingAnnotation[];
  }
  /**
   * Image feature embedding proto. It supports various embedding formats: raw bytes, floating point values, and tokens.
   */
  export interface Schema$ImageUnderstandingIndexingFeature {
    /**
     * Multiple fields can be set. For example for Starburst V3, they can be used to store compressed byte, raw float feature, and tokens, respectively.
     */
    bytesValue?: string | null;
    floatValue?: number[] | null;
    /**
     * Local features.
     */
    imageTemplate?: Schema$PhotosVisionObjectrecImageTemplate;
    int32Value?: number[] | null;
    version?: string | null;
  }
  /**
   * Image region produced by a detector.
   */
  export interface Schema$ImageUnderstandingIndexingImageRegion {
    /**
     * Bounding box normalized to [0,1] scale independent on the image size. For example if the original image has the size 1600x1200, the rectangle [200, 200, 800, 600] from the image would have a normalized bounding box [1/8, 1/6, 1/2, 1/2].
     */
    box?: Schema$PhotosVisionGroundtruthdbNormalizedBoundingBox;
    /**
     * Box confidence score. This is used to store the confidence of the box proposal, not the score associated with any specific labels. The box proposal confidence score is a float number per region between [0, 1] indicating how likely a box contains an "object".
     */
    score?: number | null;
    version?: string | null;
  }
  /**
   * A single label with score and meta data.
   */
  export interface Schema$ImageUnderstandingIndexingLabel {
    /**
     * Human readable text.
     */
    canonicalText?: string | null;
    /**
     * KG entity id.
     */
    entityId?: string | null;
    /**
     * Meta data for topicality, visible labels, attribute, etc.
     */
    metaData?: Schema$ImageUnderstandingIndexingMetaData[];
    /**
     * Confidence score.
     */
    score?: number | null;
  }
  /**
   * LabelGroup is a set of labels produced by a single model, or by multiple models that share the same versioning. It can be used to store results from ICA, box classifier, visible labels, noun+attribute, and so on.
   */
  export interface Schema$ImageUnderstandingIndexingLabelGroup {
    label?: Schema$ImageUnderstandingIndexingLabel[];
    version?: string | null;
  }
  /**
   * Meta data useful to annotation Label and Feature with extra information.
   */
  export interface Schema$ImageUnderstandingIndexingMetaData {
    floatValue?: number | null;
    name?: string | null;
    stringValue?: string | null;
  }
  /**
   * This protobuffer stores bad SSL certificate information for a canonical URL, and meant to be included in DocJoins and push to serving time.
   */
  export interface Schema$IndexingBadSSLCertificate {
    badSslCertificate?: Schema$TrawlerSSLCertificateInfo;
    /**
     * The URL where the bad SSL certificate really comes from. Present iff it is different from the source URL, i.e. a redirect target of the source URL).
     */
    urlWithBadSslCertificate?: string | null;
  }
  export interface Schema$IndexingConverterLocalizedAlternateName {
    annotationSource?: string | null;
    /**
     * Device match info calculated only by URL pattern.
     */
    deviceMatchInfo?: string | null;
    /**
     * Fp96 of webmirror ECN as of the last time the canonical was processed.
     */
    ecnFp?: string | null;
    /**
     * Populated if annotation_source is SITEMAP.
     */
    feedUrl?: string | null;
    language?: string | null;
    /**
     * Parsed language and region code from language field.
     */
    parsedLanguage?: string | null;
    parsedRegion?: number | null;
    url?: string | null;
    /**
     * see webutil/urlencoding
     */
    urlEncoding?: number | null;
  }
  /**
   * The proto to be stored in raw_redirect_info column of document table.
   */
  export interface Schema$IndexingConverterRawRedirectInfo {
    /**
     * Final redirect target found from rendering. It is the same as the last element of raw_redirect_chain_from_rendering. It is used as an input source for the indexable fragment detection pipeline and also downstream phases.
     */
    rawFinalTargetFromRendering?: string | null;
    /**
     * This is with-fragment version of redirect_with_contents. This field is populated only if there was a fragment. This field is used by indexing::mobile::GetRedirectTarget() defined in indexing/mobile/internal/smartphone-util.cc, which extracts the redirect target for smartphone optimized pages. The extracted target in turn is served in search results for smartphone users. We need with-fragment version because with-fragment url can return different content than fragment-stripped url. For example, http://www.example.com/m#article=11 and http://www.example.com/m can return different content. These cases are most typical for Ajaxy sites. This fragment does not have to be indexable.
     */
    rawFinalTargetFromTrawler?: string | null;
    /**
     * Redirect chain generated from redirect events in rendering. At the beginning of it, there could be some redirects from trawler (i.e. could be partial or entire trawler redirect chain), other redirects have their RedirectParams::is_redirect_from_rendering fields set to true. Redirects here have no RedirectChain::Hop::raw_target fields populated, and targets stored in RedirectChain::Hop::target fields are likely cleaned while keeping fragments (also sometimes they could be uncleaned ones because of cleaning failures), fragments could be indexable or non-indexable.
     */
    rawRedirectChainFromRendering?: Schema$IndexingConverterRedirectChain;
    /**
     * This is used to describe how many redirect hops from Webkit were kept in the raw_redirect_chain_from_rendering. If it is -1, it means it kept all the hops from Webkit in redirect chain.
     */
    renderingRedirectLimit?: number | null;
  }
  /**
   * Redirect_chain is present for redirects, and absent for the final target. It contains the chain from the current hop's target to the final target.
   */
  export interface Schema$IndexingConverterRedirectChain {
    hop?: Schema$IndexingConverterRedirectChainHop[];
  }
  /**
   * NOLINT
   */
  export interface Schema$IndexingConverterRedirectChainHop {
    params?: Schema$IndexingConverterRedirectParams;
    /**
     * Redirect target with fragment. This field is populated only if there was a fragment.
     */
    rawTarget?: string | null;
    /**
     * Redirect target URL and params of the current hop in the redirect chain.
     */
    target?: string | null;
  }
  /**
   * If we detect any server or content based redirect, we will store the characteristics in this message.
   */
  export interface Schema$IndexingConverterRedirectParams {
    /**
     * The time difference between page loading and redirect occurrence. When missing, it means the redirect happens immediately (i.e. delay = 0). In seconds.
     */
    delay?: number | null;
    /**
     * Populated for SINGLE_FRAME and SINGLE_IFRAME redirects only and indicates that the target url requested not to be framed, by virtue of using the "X-Frame-Options" HTTP header.
     */
    frameTargetDeniesFraming?: boolean | null;
    /**
     * Indicates corresponding redirect is a download. This field is only set when rendering redirect chain is used. This field represents the value of corresponding "RedirectEvent.target_content_downloaded" field.
     */
    isDownload?: boolean | null;
    /**
     * Indicates corresponding redirect is from rendering if set to true.
     */
    isRenderingRedirect?: boolean | null;
    /**
     * If set, it means that the redirect of type META was detected by Trawler (as opposed to the content processor.) Only makes sense when type is META.
     */
    metaRedirectFromTrawler?: boolean | null;
    type?: string | null;
  }
  /**
   * Contains information about 3 versions of the content of a document: 1. Original: the crawled content (possibly patched in ConversionFilters). 2. Processed: the final version of the content indexed in Web search. 3. Intermediate (no longer generated): intermediate version between the original and the processed content. All 3 versions of the content consist of HTTP headers (in unknown encoding) concatenated with the document body (in interchange valid UTF-8 encoding).
   */
  export interface Schema$IndexingConverterRichContentData {
    range?: Schema$IndexingConverterRichContentDataRange[];
  }
  /**
   * Stores an ordered list of ranges of content from the original, processed, and intermediate content, such that: 1. The original content can be reconstructed from the ranges of type ORIGINAL_AND_PROCESSED, ORIGINAL_ONLY, and ORIGINAL_AND_INTERMEDIATE. 2. The processed content can be reconstructed from the ranges of type ORIGINAL_AND_PROCESSED and PROCESSED_ONLY. 3. The intermediate content (if present) can be reconstructed from the ranges of type ORIGINAL_AND_INTERMEDIATE and INTERMEDIATE_ONLY.
   */
  export interface Schema$IndexingConverterRichContentDataRange {
    rangeType?: string | null;
    /**
     * Range size when uncompressed, in bytes.
     */
    size?: number | null;
    /**
     * The source of this range of content. Present iff 'type' is PROCESSED_ONLY or INTERMEDIATE_ONLY. Note: 'source_type' is not present for ORIGINAL_AND_PROCESSED, ORIGINAL_ONLY, and ORIGINAL_AND_INTERMEDIATE because for those range types the source of their content is the original crawled content.
     */
    sourceType?: string | null;
    /**
     * The source URL of this range of content. Present iff 'source_type' is present and 'source_type' is FRAME or FLASH or IFRAME.
     */
    sourceUrl?: string | null;
    /**
     * The content of the range, compressed with 'text_compression_method'. Present iff 'type' is ORIGINAL_ONLY or ORIGINAL_AND_INTERMEDIATE or INTERMEDIATE_ONLY. Useful to reconstruct the original content or the intermediate content. Note: 'text' is not present for ORIGINAL_AND_PROCESSED and PROCESSED_ONLY because the processed content is already stored separately (in the contents column, and in CompositeDoc.doc.Content.Representation).
     */
    text?: string | null;
    /**
     * Method used to compress the 'text' field. May be present only when the 'text' is present.
     */
    textCompressionMethod?: string | null;
  }
  /**
   * Robots Info encapsulates all robots.txt or related information that we know about the Document collected from multiple sources such as HTTP headers, meta robots tags etc.
   */
  export interface Schema$IndexingConverterRobotsInfo {
    /**
     * time in unix time format after which this content should not be shown in the results. This in inferred from the X-Robots-Tag HTTP header with unavailable_after: Do not use this field directly. There is a column called content_expiration in Alexandria that includes this and other signals.
     */
    contentExpiry?: number | null;
    convertToRobotedReason?: string | null;
    disallowedReason?: number | null;
    /**
     * IMPORTANT: if you add a new field here, update the MergeRobotsInfo() function to merge the new field.
     */
    indexifembeddedReason?: number | null;
    /**
     * Max image preview restriction applied to this data. A value of THUMBNAIL_UNSPECIFIED can be treated as though there is no restriction.
     */
    maxImagePreview?: string | null;
    /**
     * Max snippet preview restriction applied to this data. If this field is zero, it indicates that no snippet data can be displayed, therefore this field should be checked using has_max_snippet_length to determine if it was set.
     */
    maxSnippetLength?: string | null;
    noarchiveReason?: number | null;
    nofollowReason?: number | null;
    noimageframeoverlayReason?: number | null;
    noimageindexReason?: number | null;
    /**
     * Bit map of RobotedReasons values. When set to a non-zero value, the document should not be indexed or archived etc. based on the name of the tag.
     */
    noindexReason?: number | null;
    nopreviewReason?: number | null;
    nosnippetReason?: number | null;
    notranslateReason?: number | null;
  }
  /**
   * Used for storing fingerprints, along with meta-data that expresses how the fingerprint was computed. The metadata can be anything that fits in an uint64.
   */
  export interface Schema$IndexingConverterShingleFingerprint {
    metadata?: string | null;
    /**
     * Repeated to allow for fingerprints larger than 64-bits.
     */
    value?: string[] | null;
  }
  export interface Schema$IndexingCrawlerIdServingDocumentIdentifier {
    /**
     * Only for double indexing experiments. This field is set for duplicated documents so that docjoin users will not see duplicated docs.
     */
    doubleIndexingExperimentId?: string | null;
    /**
     * Only for Experimental clusters, not relevant for production serving data: Index-Dups can run experiments in Quality Clusters where different versions of the same document (e.g. with different signals) are serving in parallel. They are uniquely identified by the dup-experiment-IDs. This is for experimental clusters only. In prod-versions the member will not be set.
     */
    dupExperimentId?: string | null;
    /**
     * The primary identifier of a production document is the document key, which is the same as the row-key in Alexandria, and represents a URL and its crawling context. The document key is the unique identifier for each document, but multiple document keys can cover the same URL (e.g. crawled with different device types). In your production code, please always assume that the document key is the only way to uniquely identify a document. Link for more background information: http://go/url The document key is populated for all docs in indexing since 2014-03. ## Recommended way of reading: const string& doc_key = cdoc.doc().id().key(); ## CHECK(!doc_key.empty()); Note: For older DocJoins (e.g. historical DocJoins), the field is not populated. In those scenarios it is recommended to use the function 'GetDocumentKeyFromCompositeDoc' in '//indexing/crawler_id/utils/compositedoc/compositedoc_util.h' instead.
     */
    key?: string | null;
  }
  /**
   * Following signals identify spike of spammy anchor phrases. Anchors created during the spike are tagged with LINK_SPAM_PHRASE_SPIKE.
   */
  export interface Schema$IndexingDocjoinerAnchorPhraseSpamInfo {
    /**
     * How many spam phrases found in the anchors among unique domains.
     */
    phraseAnchorSpamCount?: number | null;
    /**
     * Over how many days 80% of these phrases were discovered.
     */
    phraseAnchorSpamDays?: number | null;
    /**
     * Total number of demoted anchors.
     */
    phraseAnchorSpamDemoted?: number | null;
    /**
     * Time when anchor spam spike ended with padding.
     */
    phraseAnchorSpamEnd?: number | null;
    /**
     * Spam phrases fraction of all anchors of the document.
     */
    phraseAnchorSpamFraq?: number | null;
    /**
     * Combined penalty for anchor demotion.
     */
    phraseAnchorSpamPenalty?: number | null;
    /**
     * Total number of observed anchors.
     */
    phraseAnchorSpamProcessed?: number | null;
    /**
     * Average daily rate of spam anchor discovery.
     */
    phraseAnchorSpamRate?: number | null;
    /**
     * Time when anchor spam spike started with padding.
     */
    phraseAnchorSpamStart?: number | null;
  }
  /**
   * Following structure summarizes output of AnchorSpamPenalizer. Spammy anchors are tagged with LINK_SPAM_PHRASE_PENALIZER and demoted to SPAM locality in anchor-localizer.cc
   */
  export interface Schema$IndexingDocjoinerAnchorSpamInfo {
    /**
     * End date of the last anchor of the document.
     */
    anchorEnd?: number | null;
    /**
     * Ratio of spam demoted period to all anchor period.
     */
    anchorFraq?: number | null;
    /**
     * Start date of the first anchor of the document.
     */
    anchorStart?: number | null;
    /**
     * Following field record details of anchor demotion in action. How many anchors were demoted.
     */
    demoted?: number | null;
    /**
     * Demoted all anchors in the period or only anchors classified as spam.
     */
    demotedAll?: boolean | null;
    /**
     * End date of the demotion period.
     */
    demotedEnd?: number | null;
    /**
     * Start date of the demotion period.
     */
    demotedStart?: number | null;
    /**
     * Following fields record signals used in anchor spam classification. How many spam phrases found in the anchors among unique domains.
     */
    phraseCount?: number | null;
    /**
     * Over how many days 80% of these phrases were discovered.
     */
    phraseDays?: number | null;
    /**
     * Spam phrases fraction of all anchors of the document.
     */
    phraseFraq?: number | null;
    /**
     * Average daily rate of spam anchor discovery.
     */
    phraseRate?: number | null;
    /**
     * Total number of processed anchors.
     */
    processed?: number | null;
    /**
     * True if anchors were sampled during observation phrase.
     */
    sampled?: boolean | null;
    /**
     * Detailed information about trusted sources and match computation. Populated only when --anchorspam_penalizer_debug=true.
     */
    sources?: Schema$IndexingDocjoinerAnchorTrustedInfo[];
    /**
     * Additional debug information about computation of spam probability.
     */
    spamDebugInfo?: string | null;
    /**
     * Combined penalty for anchor demotion.
     */
    spamPenalty?: number | null;
    /**
     * Predicted probability of spam.
     */
    spamProbability?: number | null;
    /**
     * Number of trusted anchors used in computation of spam probability.
     */
    trustedDemoted?: number | null;
    /**
     * Examples of trusted sources.
     */
    trustedExamples?: string | null;
    /**
     * Number of trusted anchors with anchor text matching spam terms.
     */
    trustedMatching?: number | null;
    /**
     * Following fields record details about trusted anchors True if is this URL is on trusted source.
     */
    trustedTarget?: boolean | null;
    /**
     * Total number of trusted sources for this URL.
     */
    trustedTotal?: number | null;
  }
  /**
   * Statistics of the anchors in a docjoin. Next available tag ID: 63.
   */
  export interface Schema$IndexingDocjoinerAnchorStatistics {
    anchorCount?: number | null;
    /**
     * The number of unique anchor phrases. Capped by the constant kMaxAnchorPhraseCountInStats (=5000) defined in indexing/docjoiner/anchors/anchor-manager.cc.
     */
    anchorPhraseCount?: number | null;
    /**
     * This structure contains signals and penalties of AnchorSpamPenalizer. It replaces phrase_anchor_spam_info above, that is deprecated.
     */
    anchorSpamInfo?: Schema$IndexingDocjoinerAnchorSpamInfo;
    /**
     * The number of anchors for which some ImprovAnchors phrases have been removed due to duplication within source org.
     */
    anchorsWithDedupedImprovanchors?: number | null;
    /**
     * Whether this doc is penalized by BadBackLinks, in which case we should not use improvanchor score in mustang ascorer.
     */
    badbacklinksPenalized?: boolean | null;
    baseAnchorCount?: number | null;
    baseOffdomainAnchorCount?: number | null;
    droppedHomepageAnchorCount?: number | null;
    droppedLocalAnchorCount?: number | null;
    droppedNonLocalAnchorCount?: number | null;
    /**
     * Sum of anchors_dropped in the repeated group RedundantAnchorInfo, but can go higher if the latter reaches the cap of kMaxRecordsToKeep. (indexing/docjoiner/anchors/anchor-loader.cc), currently 10,000
     */
    droppedRedundantAnchorCount?: number | null;
    fakeAnchorCount?: number | null;
    forwardedAnchorCount?: number | null;
    forwardedOffdomainAnchorCount?: number | null;
    /**
     * Metric of number of changed global anchors computed as, size(union(previous, new) - intersection(previous, new)).
     */
    globalAnchorDelta?: number | null;
    linkBeforeSitechangeTaggedAnchors?: number | null;
    localAnchorCount?: number | null;
    lowCorpusAnchorCount?: number | null;
    lowCorpusOffdomainAnchorCount?: number | null;
    mediumCorpusAnchorCount?: number | null;
    mediumCorpusOffdomainAnchorCount?: number | null;
    /**
     * Minimum local outdegree of all anchor sources that are domain home pages as well as on the same domain as the current target URL.
     */
    minDomainHomePageLocalOutdegree?: number | null;
    /**
     * Minimum local outdegree of all anchor sources that are host home pages as well as on the same host as the current target URL.
     */
    minHostHomePageLocalOutdegree?: number | null;
    nonLocalAnchorCount?: number | null;
    offdomainAnchorCount?: number | null;
    ondomainAnchorCount?: number | null;
    onsiteAnchorCount?: number | null;
    /**
     * Set in SignalPenalizer::FillInAnchorStatistics.
     */
    pageFromExpiredTaggedAnchors?: number | null;
    pageMismatchTaggedAnchors?: number | null;
    /**
     * Doc is protected by goodness of early anchors.
     */
    penguinEarlyAnchorProtected?: boolean | null;
    /**
     * BEGIN: Penguin related fields. Timestamp when penguin scores were last updated. Measured in days since Jan. 1st 1995.
     */
    penguinLastUpdate?: number | null;
    /**
     * Page-level penguin penalty (0 = good, 1 = bad).
     */
    penguinPenalty?: number | null;
    /**
     * Doc not scored because it has too many anchor sources. END: Penguin related fields.
     */
    penguinTooManySources?: boolean | null;
    perdupstats?: Schema$IndexingDocjoinerAnchorStatisticsPerDupStats[];
    /**
     * Following signals identify spike of spammy anchor phrases. Anchors created during the spike are tagged with LINK_SPAM_PHRASE_SPIKE.
     */
    phraseAnchorSpamInfo?: Schema$IndexingDocjoinerAnchorPhraseSpamInfo;
    /**
     * Total anchor dropped due to exceed per domain phrase cap. Equals to sum of anchors_dropped in the repeated group RedundantAnchorInfoForPhraseCap, but can go higher if the latter reaches the cap of kMaxDomainsToKeepForPhraseCap (indexing/docjoiner/anchors/anchor-loader.h), currently 1000.
     */
    redundantAnchorForPhraseCapCount?: number | null;
    redundantanchorinfo?: Schema$IndexingDocjoinerAnchorStatisticsRedundantAnchorInfo[];
    redundantanchorinfoforphrasecap?: Schema$IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoForPhraseCap[];
    /**
     * The total number of anchors being scanned from storage.
     */
    scannedAnchorCount?: number | null;
    /**
     * A count of the number of times anchor accumulation has been skipped for this document. Note: Only used when canonical.
     */
    skippedAccumulate?: number | null;
    /**
     * Reason to skip accumulate, when skipped, or Reason for reprocessing when not skipped.
     */
    skippedOrReusedReason?: string | null;
    /**
     * The log base 10 odds that this set of anchors exhibits spammy behavior. Computed in the AnchorLocalizer.
     */
    spamLog10Odds?: number | null;
    /**
     * Walltime of when anchors were accumulated last.
     */
    timestamp?: number | null;
    topPrOffdomainAnchorCount?: number | null;
    topPrOndomainAnchorCount?: number | null;
    /**
     * According to anchor quality bucket, anchor with pagrank \> 51000 is the best anchor. anchors with pagerank < 47000 are all same.
     */
    topPrOnsiteAnchorCount?: number | null;
    /**
     * The following should be equal to the size of the following repeated group, except that it can go higher than 10,000.
     */
    totalDomainPhrasePairsAboveLimit?: number | null;
    /**
     * Number of domain/phrase pairs in total -- i.e. how many anchors we would have if the domain/phrase cutoff was set to 1 instead of 200. This is "approx" for large anchor clusters because there can be double counting when the LRU cache forgets about rare domain/phrase pairs.
     */
    totalDomainPhrasePairsSeenApprox?: number | null;
    /**
     * Number of domains above per domain phrase cap. We see too many phrases in the domains.
     */
    totalDomainsAbovePhraseCap?: number | null;
    /**
     * Number of domains seen in total.
     */
    totalDomainsSeen?: number | null;
  }
  /**
   * ------------------------------------------------------------------------- The total number of anchors collected per dupforwarding (including the canonical itself). Includes additional data about redundant and offdomain counts and the last timestamp it was collected from.
   */
  export interface Schema$IndexingDocjoinerAnchorStatisticsPerDupStats {
    /**
     * Count of anchors kept from forwarding.
     */
    anchorCount?: number | null;
    /**
     * This is EcnCollectType in anchor-ecn-matcher.h for the latest ECN of this dup: - kCollectNormal = 0, // Normal collection. - kCollectUnforwarded = 1, // Forwarding leader docid match only. - kCollectWhitelisted = 2, // Collected anchors matching whitelist. - kCollectNone = 4 // Skipped ECN anchor cluster.
     */
    collectType?: number | null;
    /**
     * If missing, the same as the canonical.
     */
    dupUrl?: string | null;
    /**
     * Count of offdomain anchors.
     */
    offdomainAnchorCount?: number | null;
    /**
     * Count of redundant anchors.
     */
    redundantAnchorCount?: number | null;
    /**
     * The number of anchors being scanned from storage per dupforwarding.
     */
    scannedAnchorCount?: number | null;
    /**
     * Walltime when this was scanned last.
     */
    timestamp?: number | null;
  }
  /**
   * ------------------------------------------------------------------------- The total number of redundant anchors dropped per (domain, text). If we receive a large number of anchors from a particular domain, then we'll throw out all but 200 of them from that domain. The data is sorted by the (domain, text) pairs. This is capped at 10,000 entries (if less, it will have the same number of elements as the above_limit count).
   */
  export interface Schema$IndexingDocjoinerAnchorStatisticsRedundantAnchorInfo {
    anchorsDropped?: string | null;
    domain?: string | null;
    text?: string | null;
  }
  export interface Schema$IndexingDocjoinerAnchorStatisticsRedundantAnchorInfoForPhraseCap {
    anchorsDropped?: number | null;
    domain?: string | null;
  }
  /**
   * This message summarized anchors of one trusted site.
   */
  export interface Schema$IndexingDocjoinerAnchorTrustedInfo {
    /**
     * Difference in KL-divergence from spam and non-spam anchors. Value \>0 indicate that anchor text from this trusted source is similar to anchors classified as spam which means that spammy anchors are legitimate.
     */
    matchedScore?: number | null;
    /**
     * Detailed debug information about computation of trusted anchors match. Populated only when --anchorspam_penalizer_debug=true
     */
    matchedScoreInfo?: string[] | null;
    /**
     * Count of anchors classified as spam using anchor text.
     */
    phrasesScore?: number | null;
    /**
     * Site name from anchor.source().site().
     */
    site?: string | null;
    /**
     * Tokenized text of all anchors from the site.
     */
    text?: string[] | null;
    /**
     * Fraction of pages with newsy anchors on the site, \>0 for trusted sites.
     */
    trustedScore?: number | null;
  }
  /**
   * Holds extra info except annotations and raw cdoc for buildint the final cdoc.
   */
  export interface Schema$IndexingDocjoinerCDocBuildInfo {
    extraMessage?: Schema$Proto2BridgeMessageSet;
  }
  /**
   * DataVersion tracks the version of data in CompositeDoc. The notion of "data" here is loose and people can define the name of their own. For example, a signal generated by Index Signals or an annotation generated by Goldmine (and other components) can all be considered as data here. Each field in this proto represents the human readable version string and the timestamp of one particular data. We choose to explicitly list out all of the data here for better understanding about which data are tracked. NOTE that human_readable_version is not intended for comparison, use timestamp_micros. In addition, we have an annotation about the field paths of each data. With proto reflection (using google3/net/proto2/util/public/field_path.h), downstream systems can take advantage of this annotation to automatically handle newly introduced data without modifying their code. Please also see the comment of FieldProjector above. There are also some fields in DataInfo that annotate who generates the data, the Index Signals or Goldmine annotator name for the fields already onboarded or being onboarded to FDP. Fields without annotation of signal_names or goldmine_annotator_names are not onboarded. Next ID: 538
   */
  export interface Schema$IndexingDocjoinerDataVersion {
    acceleratedShoppingSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    adsAdsaiMagicApfelApfelRegionFinderAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    adsAdsaiMagicMagicPageTypeAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    adsShoppingWebpxRawShoppingAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    amphtmlSignedExchangeErrorDetails?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    amphtmlSignedExchangeValidationPayload?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    analyticsSiteidAnalyticsPropertyAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    analyticsSiteidAnalyticsRenderedOutput?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    authenticSiteRankData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    babelEncoderBabelEncodings?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    badurlsBadurlsForceSelectionSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    boilerplateAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    boilerplateVisibleBytesEstimates?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    chromeCounts?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    commerceDataqualityOrganicCrawledSellerData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    commerceDataqualityOrganicShoppingAnnotationSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    commerceDataqualityOrganicShoppingSiteQuality?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    commonsenseQueriosityGoldmineQnaAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    commonsenseScoredCompoundReferenceAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    commonsenseStoneSoupProtoRaffiaInstructionsSeq?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    contraContentReviewAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    contraCuratedContent?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    countryCountryAttachment?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    crawzallSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    creator?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    datacommonsDatacommonsTriplesSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    dateAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    dateAnnotationTags?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    dateRangeAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    dateTimeAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    discoverSource?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    discussion?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    documentIntent?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    dotsGaramondSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    dotsNewsstandSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    emailAddressAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    extractedBookInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    fatcatCompactDocClassification?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    fatcatSiteVerticalsAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    firstseen?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    fontsAnalysisAnnotatorFontsAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    forumRankingForumPostsSafeSearchAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    foundationSplinterSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    freshboxFreshboxArticleAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    geoPointAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    geoPointResolution?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    geostoreAddressProto?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    i2eV2ImageEntitiesInfos?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageContentAnnotationLabels?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageContentColorSearchColorDetectionResults?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageDataList?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    /**
     * END DATA FIELDS
     */
    imageembed?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageExtraImageExtraTerms?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageMonetizationFeaturedDocumentProperties?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageMustangFaviconInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageMustangWebsearchImageSnippetResponse?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageQualityLabelmakerDocMediaLabels?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageQualityLandingPageProtoLandingPageSalientTextSet?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageQualityLayoutDocument?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageQualityRichdataProtoImageAnchor?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageQualityRichdataProtoRichdata?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageQualitySalientTermsImageQuerySmearingList?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageQualitySalientTermsImageSalientTermSetMap?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageQualitySensitiveFaceSkinToneSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageQualitySensitiveMediaOrPeopleEntities?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageRepositoryGeolocation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageRepositoryPicasaGeoData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageSearchRejectedImageInfoList?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    imageStockStockImageAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsAnnotationMeta?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsAppMarketAppMarketAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsAppsCacheColonAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsAppsDocRestrictionsDocPreviewRestrictionsAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsAutomobileVinAnnotatorAutomobileVinAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsCanonicalUrl?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsCleanTextProto?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsCollectionsDocCollections?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsCommentBlockGroups?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsDatasetModelAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsDatesDateTimes?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsDocImportance?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsDocRestrictionsInDocRestrictionsAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsEntityPage?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsFeedbackSet?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsIBertEmbeddingAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsImageRepositoryImageLicenseInfoAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsPcuAmpError?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsPcuSignedExchangeInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsPersonPersonAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsSduPageTypeAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsSocialLinksSocialLinksAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsSubscribewithgoogleSwgAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsTwitterEmbeddedTweetsAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsTypedNumberTypedNumberAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsWaPassagesQueryToPassageAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAnnotationsWaPassagesTrimmedQueryToPassageAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAppsAffiliatedInstantAppInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingAppsMergedAppInfoAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingBadpagesBadPageParseResult?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingBadpagesCollapserInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingBadpagesIndexSelectionRemoval?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingBadpagesLoginPageResult?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingBadpagesUnifiedModelFeatures?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingBeringPublisherOnPageAdsAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingCenterpieceCenterPieceAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingCenterpieceCenterpieceChecksums?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingCenterpieceComponentLearningSource?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingCenterpieceSectionTitleAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingConverterContentGenerationInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingConverterContentParserResults?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingConverterFileMetaInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingConverterLinkRelOutlinks?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingConverterMetaDetectorsResultsProto?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingConverterPdfFileMetaInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingConverterPdfPageAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingCustomCorpusCdmAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingDeepwebStoreListAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingDocjoinerServingTimeClusterIds?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingDocjoinerWikiInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingDocskeletonRepeatedPatternRepeatedPatternAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingDupsLocalizedLocalizedCluster?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingFreshSchedulerFreshSchedulerDoubleInstantExtension?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingFreshSchedulerOutlinkDiscoveryHistoricalHubsSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingImagesRelatedImageSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingInstantActiveClusterScorerSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingInstantBaseReindexWhitelistData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingInstantClusterScorerArticle?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingInstantClusterScorerSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingInstantHistoricalContentSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingInstantNewsHighlyCitedDocumentSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingInstantNewsImagesInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingInstantSignalSourceTagsExtension?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingLatticeLatticeAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingMetricsUrlIndexingProps?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingMlDomNodeSegments?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingMlEntityInfoboxes?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingMlPageStructure?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingMlSemanticArticle?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingMlShoppingUniverseAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingMlVerticalVerticalClassificationResult?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingMlVerticalVerticalClassificationV2?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingMobileClientDependentInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingMobileInterstitialsProtoDesktopInterstitials?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingMobileObelixInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingMobileSmartphoneContentAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingMobileSmartphonePatternClassification?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingMobileSpeedPageSpeedFieldData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingPlusonePlusOneSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingPlusoneSocialScoreSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingRaffiaDataRecoveryInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingRaffiaIndexingIntermediate?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingRaffiaMediaProcessingMetadata?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingRaffiaOverlayCDocAttachment?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingSelectionAcquisitionMetadataAttachment?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingSelectionDoubleIndexingExtension?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingSelectionFastServingPush?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingSelectionFreshdocsPassthroughExtension?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingSelectionImageImageSelectionAttachment?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingSelectionLanguageExtension?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingSelectionPriorScorerParameterSet?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingSelectionProcessingPriorityExtension?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingSelectionProtoBasePromotionInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingSelectionTensorFlowExtension?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingSignalAggregatorUrlPatternSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingSignalsAccumulatedOnlineSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingSignalsImpressionsPerDayContainer?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingSocialCountsSocialWidgetsIndicator?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingSpeechGoldminePodcastAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingSpeechSpeechPagePropertiesProto?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingThirdpartyThirdPartyInputs?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingUgcPageParamInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingUnionKeyData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingUrlPatternUrlTreeUrlPatternAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingVideosVideoAnchorSourceInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingVideosVideoPlaylistAnchorSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    indexingWebChannelsWebChannelAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    infoextractionPinpointPinpointAnnotationSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    infoextractionPinpointPinpointSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    instantChromeViews?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    instantNavboost?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeGraphAcquisitionFeedsQuotesQuotesAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningFactsDocumentSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningFactsFactEvaluationSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningFactsHtmlTableSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningFactsKatsSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningFactsLocalizedFact?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningFactsObjectAnnotationsSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningFactsProductCompositionSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningFactsServingData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningFactsShoppingSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningFactsStructuredSnippetsSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningFactsUdrExtraFactData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningFactsUdrExtraFactMentionData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningFactsUniversalFactMetadata?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningFactsUniversalFactScores?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningFactsUniversalTableSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningFactsWebKvSiteGroupSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningShoppingBrowseonomyData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMiningShoppingTwdModelVersions?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMumStoryTeaserAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMumStorytimeStampEngagementAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeMumStorytimeStampQualityAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeTablesTableInternalData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeTablesUniversalTableAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeTasksUniversalTaskAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    knowledgeTpfHowtodoHowtoVideoAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    langIdLangReasonerDocumentLanguages?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    lensVsaiDatasets?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    localsearchAuthoritySiteAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    localyp?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    mapsSyntheticsGeoDocFetchKey?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    measurementAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    metawebExtractionDocumentEvidence?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    modernFormatContent?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    /**
     * BEGIN DATA FIELDS
     */
    navboost?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    navBoostDocument?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsAnnotationsContentAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsCorpusHubPageAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsCorpusLeafPageAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsCorpusNewsAggregateSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsCorpusNewsCorpusAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsCorpusNewsCorpusRootAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsCorpusNewsCorpusStatusAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsCorpusNewsinessAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsCorpusPositionRankAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsCrawlFilterNewsLinkCrawlSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsExtractionNewsPbeAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsNarIndexingMetadata?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsNarRow?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsNarRowContainer?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsNearDupsInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsNewromanIndexingNewRomanSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsNewsArticleChecksum?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsNewsClassifications?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsNewsContentSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsNewsForEducationReadingStatistics?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsVideosNewsAnchorSourceInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    newsVideosNewsVideoAnnotationSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    nlpAtcClaraAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    nlpSaftDocument?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    nlpSaftNlxDocAnnotatorMigration?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    nlpSaftRodinClassification?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    nlpSentimentSentimentAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    nlxDocAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    noindexedImageDataList?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    numberAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanLibrarianBookMetadata?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanLibrarianPopulatorData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanLibrarianPopulatorPageData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataAllItemSpecificBibdatas?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataAvailabilityInfoComponent?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataAvailabilitySnapshot?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataAvailabilitySnapshotHolder?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataBibkeyComponent?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataClusterHorizontalReference?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataClusteringSeriesSeriesInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataClusteringTomeHorizontalLinkDescriptor?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataClusterRecord?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataClusterVolumes?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataContributorLinks?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataItemSpecificBibdataComponent?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataKgTopicLinks?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataLanguageInfoComponent?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataMaterialInfoComponent?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataParsedAccessTerms?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataParsedSuDoc?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataPatentPublicationDetails?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataPhysicalMeasurementsComponent?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataPublicationDetailsComponent?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataPublicDomainInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataRightsComponent?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataSeriesInfoComponent?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataTomeDetailsComponent?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataTomeMembersComponent?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanMetadataTomePriceInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanReviewsForWork?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    oceanRightsOptOutRequest?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    officialPagesQuerySet?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    perDocLangidData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    personalizationGameWebeventsConsolidatedEvents?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    personalizationGameWebeventsEvent?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    personalizationGameWebeventsEvents?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    photosGeoAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    predictedAuthenticity?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    priceAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityAnchorsOutdegreeOutdegreeInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityAnimaLivewebLivewebAttachment?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityAnimaRoutinesRoutinesPropertiesProto?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityAuthorityTopicEmbeddings?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityAuthorshipAuthorAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityBreadcrumbsBreadcrumbAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityCalypsoAppsLink?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityChardDocument?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityChardPredictedQueryFringeScore?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityChardPredictedXlq?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityContraSelectedAttributions?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityCopiaFireflySiteInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityDiscoverUgcScatScatEmbeddingAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityDniNewsstandPcu?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityDniPcuAuxiliaryData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityDniPcuMetaAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityDniPcuParsedData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityDniPcuRawData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityExploreQueryableFeedEcsAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityExploreQueryableFeedHashtagAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityExploreQueryableFeedHashtagListAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityExploreQueryableFeedTopicFeedScoringSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityFreshnessAbacusInstantNegativeClicksInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityFringeFringeQueryPrior?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityGeoBrainlocGoldmineBrainlocAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityGeoLoglocGoldmineDocumentLocationAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityHistoricalContentAge?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityHorizonProtoHorizonEmbeddings?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityHorizonRecordInfoAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityImprovDocToQueries?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityImprovImprovAnchors?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityLisztomaniaDocument?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityNavboostCrapsCrapsData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityNavboostCrapsCrapsPatternSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityNegativeClicksNegativeClicksInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityNlqStructuredSearchAnnotationAnalysisAutomaticExtractionAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityNlqStructuredSearchListingPagesListingPageAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityNsrDokiAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityNsrNsrData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityNsrNsrSitechunksAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityNsrPairwiseqPairwiseQData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityNsrPqData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityNsrSiteAuthority?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityNsrUvSitechunksAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityOrbitAsteroidBeltIntermediateDocumentIntentScores?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityPagemasterPagemasterAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityPanopticIndexingDiscoverCorpusAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityPanopticIndexingDiscoverDocumentSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityPanopticIndexingPanopticAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityPanopticStorytimeAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityPanopticStorytimeScoringSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityPanopticVoiceUgcAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityPeoplesearchNamedetectorNameOccurrenceAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityPopfeedsChromeBackgroundAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityPopfeedsHubDataAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityPopfeedsUrlPredictionAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityPopfeedsUrlSourceAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityPricedetectorKefirPriceAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityPricedetectorProductBlockAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityProseJsonLdAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityProseThumbnailSelection?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityQ2QualityBoost?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityQ2SiteQualityFeatures?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityRealtimeBoostRealtimeBoostEvent?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityRealtimeBoostRealtimeBoostResponse?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityRealtimeBoostSeismographEventAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityRealtimeRealtimeResultInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityRealtimeRtFactAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityResultFilteringIndexingClusterAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityRichsnippetsAppsProtosApplicationInformationAttachment?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityRodinRodinSiteSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualitySalientCountriesSalientCountrySet?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualitySalientStructuresSalientStructureSet?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualitySalientStuffSalientStuffSet?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualitySalientTermsQuerySmearingModel?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualitySalientTermsSalientTermSet?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualitySearchoversiteAnnotatorStructuredResultsAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualitySherlockKnexAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityShoppingProductReview?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityShoppingProductReviewPage?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityShoppingShoppingProductReviewAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualitySimilarpagesRelatedInfoSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualitySitemapDocument?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualitySitemapThirdPartyCarouselsItemLists?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualitySixfaceSixfaceUrlData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualitySnippetsHiddenTextHiddenSpanAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualitySnippetsListSnippetsAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualitySnippetsMetadescriptionDuplicateMetaSiteSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualitySnippetsSnippetSpansInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualitySosGoldmineSosAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualitySummarySummary?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityTangramInformationTypes?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityTimebasedTimeSensitivityTimeSensitivityAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityTitlesAlternativeTitlesInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityTitlesSitelinksTargetTitleInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityTwiddlerDomainClassification?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityViewsAnswersAnswerAnnotationInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityVisualwebVisualWebAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityVisualwebVisualWebModelsAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityWebanswersAltTitleSaftDoc?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityWebanswersTranscriptAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityWebfeederDocEmbedding?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    qualityWebshineDocResources?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    rankBoostDocAttachment?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    rankembed?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    relativeDateAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsAddressAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsAmenitiesAmenitiesAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsCrawzallAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsDiscussionThreadDiscussionViewProto?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsLicensedResources?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsListFilterAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsListSummaryAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsMicrodataMicrodataAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsMicroformatsHproduct?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsMicroformatsMicroformatAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsPhoneTypePhoneTypeAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsRdfaRdfaAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsRodinArticleAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsSectionHeadingAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsSnippetSegmentSnippetSegmentAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsSporeAuthoritySignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsSporeDeeplinkAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsSporeExtractorTopicAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsSporeExtractorTripleAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsSporeSporeEtlAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsSporeSporeEtlInputAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsStorehoursStoreHoursAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsVerseAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryAnnotationsWebanswersContextItemAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryProtiumEncyclojoinsEncycloJoin?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryProtiumGoldmineTriplificationResult?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryProtiumGoldmineTypeAssertionOutput?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryProtiumWebkvWebKv?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryProtiumWikiaWikiaInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryUpdaterIndexSelectionAttachment?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefEntityJoin?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefExperimentalWebrefEntitiesAttachment?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefGraphMention?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefJuggernautIndices?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefPageClassificationAnchorSignalsSet?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefPageClassificationSignalsSet?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefPiannoDocumentIntents?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefPiannoTvSeasonEpisode?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefPreprocessingReferencePageCandidateList?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefReconcileResponse?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefRefconJugglerReferencePageMappings?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefReferencePagesClassifierScoredPage?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefSalientEntitySet?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefUndermergedEntities?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefUniversalEmbeddingRetrievalDebug?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefWebitIntermediaryMids?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefWebitScopeFprint?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefWebitScopeSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefWebitTripleSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefWebrefEntities?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebrefWebrefStatus?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebtablesDataTableAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebtablesDataTableMidAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWebtablesTranslationMessage?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWikipediaAliasList?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWikipediaAnnotatorWikipediaPageComponentAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWikipediaSentenceCompressionAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWikipediaWikibaseEntity?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWikipediaWikidataOrgTripleSet?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWikipediaWikiJoin?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWikipediaWikiMapperTripleSet?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    repositoryWikipediaWikitrustWikiTrustInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    researchCoauthorOpinionAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    researchStructuredDataInadvertentAnchorScoreAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    researchStructuredDataKnowledgeExplorationAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    researchStructuredDataNewsEmbeddingAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    richsnippetsDataObject?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    richsnippetsFeedPageMap?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    richsnippetsPageMap?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    richsnippetsPageMapAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    richsnippetsSchemaThing?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    rosettaLanguage?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    safesearchPageClassifierOutput?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    safesearchSafeSearchInternalPageSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    scienceIndexSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    searcharSearchArPipelineSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    searchEngagementHighlightSharedHighlightSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    shoppingQualityShoppingSiteClassifier?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    shoppingQualityShoppingSiteClassifierShopfab?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    shoppingWebentityShoppingAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    sitemapsSitemapsSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    smearingSmearedTerms?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    socialPersonalizationKnexAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamBrainSpamBrainData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamBrainSpamBrainPageClassifierAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamContentAnchorDist?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamContentAuthenticAuthenticTextAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamContentImageMapPb?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamContentSiteAgeStats?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamCookbookCookbookAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamCookbookCookbookSitechunkAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamFatpingIndexFeed?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamGodclusterAffIdAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamGodclusterServerHeaderAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamGooglebombsGooglebombsAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamHackedSitesDocSpamInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamHackedSitesGpgbGpgbNgramStats?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamHackedSitesWordFrequencies?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamJsJsInfo?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamScamScamness?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamScamUnauthoritativeSite?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    spamTokensSpamTokensAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    tableTalkStrideOfferPagePriceAnnotation?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    tasksTabaTabaDocSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    telephoneNumberAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    timeAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    timeAnnotationTags?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    timeRangeAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    travelAssistantTravelDocClassification?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    ucpSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    udrConverterDocumentShoppingData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    udrConverterOffer?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    udrConverterProductBlockData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    udrProtoDetailedEntityScores?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    udrProtoOverlay?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    udrProtoWebrefMention?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    universalFacts?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    unwantedImageDataList?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    uriAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    utilStatusProto?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    verticalsDiscussionDiscussionAnnotationTag?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    videoCrawlAutomatedAudioExtractionSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    videoCrawlAutomatedExtractionSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    videoCrawlDomainVideoClickData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    videoCrawlVideoClickData?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    videoCrawlVideoSalientTermSet?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    videoCrawlVideoScoringSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    videoCrawlWatchPagePatternClassification?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    videoCrawlYoutubeEmbedSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    videoScoringSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    videoWebGallery?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    videoYoutubeLiveCardioCardioStats?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    volt?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    watchpageLanguageWatchPageLanguageResult?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    websitetoolsFeedsAnnotationsFeedContentAnnotations?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    websitetoolsFeedsLinkedFeedLinkedFeed?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    websitetoolsFeedsPodcastPodcastSignals?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    websitetoolsFeedsSporeFeedsSporeTriples?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    whatshappStrideExtractions?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    youtubeAlexandriaYoutubeBody?: Schema$IndexingDocjoinerDataVersionVersionInfo;
    youtubeAlexandriaYoutubeSignal?: Schema$IndexingDocjoinerDataVersionVersionInfo;
  }
  export interface Schema$IndexingDocjoinerDataVersionVersionInfo {
    humanReadableVersion?: string | null;
    timestampMicros?: string | null;
  }
  /**
   * The serving cluster id metadata. Why we cluster the documents. The default value is UNKNOWN. Serving-Side Clustering is used for pages which represent the same content but are not identical (e.g. translated pages, or paginated content). Those documents are not dup-clustered in Alexandria so that all documents (and their tokens) are available to search queries. However, those documents are assigned the same Serving-Time-Cluster-ID (on the same reasontype), which during serving guarantees that only one of them is shown to the user.
   */
  export interface Schema$IndexingDocjoinerServingTimeClusterId {
    /**
     * The unique id to distinguish members in cluster. It could be generated in different ways according to reason, e.g. LINK_REL_NEXT_PREVIOUS: it is the fingerprint of the URL of index 0; PAGE_PARAMETER_INFO: it is the fingerprint of pagination pattern (pagination_pattern_fp field in PageParamInfo message).
     */
    clusterId?: string | null;
    /**
     * The member index of this document in cluster. Starts from "0". Note that indices of pages in a cluster may not be consistent with each other, because we may update them at different points in time. Currently only used for debugging.
     */
    indexForDebugging?: number | null;
    /**
     * The reason why this document is clustered into this cluster.
     */
    reason?: string | null;
  }
  /**
   * This message contains a set of cluster ids used to de-dup at serving time. A document could be clustered into different clusters according to different properties.
   */
  export interface Schema$IndexingDocjoinerServingTimeClusterIds {
    /**
     * The exact cluster metadata for each individual cluster if any.
     */
    clusterId?: Schema$IndexingDocjoinerServingTimeClusterId[];
  }
  export interface Schema$IndexingDupsComputedLocalizedAlternateNamesLocaleEntry {
    /**
     * Cluster-ID of that locale entry. Not Populated if the message is part of a Cluster-Proto (e.g. when loaded as a signal). The data is being populated when the proto is used outside of the cluster context. For instance, when being used as a dups-computed-localized-alternate-name.
     */
    clusterId?: string | null;
    /**
     * Device match info calculated only by URL pattern.
     */
    deviceMatchInfo?: string | null;
    /**
     * Language/Region code. E.g. "en-US" or "de". Allowed values are language-region codes based on the W3C recommendation http://www.w3.org/TR/html401/struct/dirlang.html#langcodes
     */
    language?: string | null;
    /**
     * The alternate url representing the content for a specific language and region (or language only).
     */
    url?: string | null;
    /**
     * see webutil/urlencoding
     */
    urlEncoding?: number | null;
    /**
     * The region code that was extracted from the URL, either by the TLD or via a pattern (like 'en-ca' as a path element).. Always filled in if known, unlike the sometimes left out region part of the language field. Unknown Region Code
     */
    urlRegionCode?: number | null;
  }
  export interface Schema$IndexingDupsLocalizedLocalizedCluster {
    /**
     * Defined as a source-blocker, a result which can be a boost target but should itself not be boosted (e.g. roboted documents). For more details on source and target blocking, please read through the code for quality/twiddler/impls/PROTECTED/local_result_twiddler_v2.cc
     */
    boostSourceBlocker?: boolean | null;
    cluster?: Schema$IndexingDupsLocalizedLocalizedClusterCluster[];
    /**
     * Since July 2014 those two fiels are no longer populated, the data is stored in the TargetLinkSets instead. The deprecated fields contain values only for docs which have not been processed since July 2014.
     */
    deprecatedHreflangInfo?: Schema$IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfo;
    deprecatedOutlinksInfo?: Schema$IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfo;
    /**
     * The language of this document (as detected by on-page language detection, not influenced by external anchor signals or other indirect conclusions).
     */
    documentLanguage?: string | null;
    hreflangTargetLink?: Schema$IndexingDupsLocalizedLocalizedClusterTargetLinkSets;
    inbodyTargetLink?: Schema$IndexingDupsLocalizedLocalizedClusterTargetLinkSets;
    outlinksTargetLink?: Schema$IndexingDupsLocalizedLocalizedClusterTargetLinkSets;
    /**
     * The list of Sitedup rule IDs for this specific URL. The value is only populated if the URL has at least one localized cluster fulfilling the following conditions: - spans more than one host - does not have filtering enabled due to other input (e.g. due to being a hreflang cluster).
     */
    sitedupRuleId?: string[] | null;
    /**
     * A warning indicator that a problem has occurred, e.g. cross-domain links being filtered early. The warning is just presented for debugging purposes.
     */
    warningMessage?: string[] | null;
  }
  export interface Schema$IndexingDupsLocalizedLocalizedClusterCluster {
    /**
     * The cluster id, a unique int64 id for the cluster.
     */
    clusterId?: string | null;
    clusterType?: string | null;
    /**
     * Debug Info being attached to each cluster, to understand how it was created. That info is stored in Alexandria, but not available during serving.
     */
    deprecatedDebugInfo?: string[] | null;
    /**
     * Indicates that filtering can be applied on the category (if many results of one cluster show up on the SERP, only one should be kept).
     */
    filteringEnabled?: boolean | null;
    /**
     * The language as represented by the URL, e.g. 'use this document on the cluster for German queries'.
     */
    language?: string | null;
    /**
     * Same as language, except for the country. This is the Stable Region Code. This value may be UNKNOWN even though the URL region code is known, namely when the known region code was the main region for the language and for that language no other region is specified (e.g. de-DE being the only german variation). Unknown Region Code
     */
    regionCode?: number | null;
    /**
     * Similar to region_code, but always has the value filled in if known. Unknown Region Code
     */
    urlRegionCode?: number | null;
  }
  /**
   * ClusterInfo no longer being populated (they are the 'old' version of storing meta-information only available in old not-reprocessed documents, all documents processed since July 2014 use the 'TargetLinkSet' instead.
   */
  export interface Schema$IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfo {
    /**
     * A fingerprint of all outlink-URLs of this document that have been used as algorithmic input.
     */
    fpOutlinks?: string | null;
    /**
     * The last time the set of outgoing links of this document was modified. This is the input for our calculation.
     */
    lastModifiedInputTimestampMs?: string | null;
    /**
     * The last time the cross-validation of the links was done. Between that last timestamp and now, only cached results have been used.
     */
    lastProcessedOutputTimestampMs?: string | null;
    /**
     * All verified members of the cluster (including recursive inclusions).
     */
    linkMember?: Schema$IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkMember[];
    unvalidatedOutlink?: Schema$IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkData[];
  }
  export interface Schema$IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkData {
    annotationSource?: string | null;
    /**
     * If set, represents the crawl timestamp. If not set, there is no known crawl timestamp for that url.
     */
    crawlTimestamp?: number | null;
    url?: string | null;
  }
  export interface Schema$IndexingDupsLocalizedLocalizedClusterLinkBasedClusterInfoLinkMember {
    annotationSource?: string | null;
    languageCode?: string[] | null;
    url?: string | null;
  }
  /**
   * Message containing information about the localized URL linked to from this document in a localized-variation-context.
   */
  export interface Schema$IndexingDupsLocalizedLocalizedClusterTargetLink {
    linkData?: Schema$IndexingDupsLocalizedLocalizedClusterTargetLinkLink;
    metaData?: Schema$IndexingDupsLocalizedLocalizedClusterTargetLinkMetadata;
    targetDocData?: Schema$IndexingDupsLocalizedLocalizedClusterTargetLinkTargetDocData;
    validationStatus?: string | null;
  }
  /**
   * Basic information about the link target, i.e. the URL or the language code it's believed to represent.
   */
  export interface Schema$IndexingDupsLocalizedLocalizedClusterTargetLinkLink {
    annotationSourceInfo?: Schema$IndexingDupsLocalizedLocalizedClusterTargetLinkLinkAnnotationSourceInfo[];
    /**
     * For a link A-\>B where B is represented by this proto, cross_domain := Host(A) != Host(B).
     */
    crossDomain?: boolean | null;
    /**
     * The URL the information in TargetLink refers to.
     */
    url?: string | null;
  }
  /**
   * Message describing where was the link discovered and with what language annotation.
   */
  export interface Schema$IndexingDupsLocalizedLocalizedClusterTargetLinkLinkAnnotationSourceInfo {
    /**
     * Optional field for storing the anchor text the language code was extracted from. Applies to outlinks only.
     */
    anchorText?: string | null;
    /**
     * Information about where the language code was extracted from.
     */
    annotationSource?: string | null;
    /**
     * Language code extracted from the URL (hreflang or outlink). One URL can represent multiple language codes, like e.g. de-at and de-ch
     */
    languageCode?: string | null;
    /**
     * Optional field that stores the feed URL where a Sitemap annotation was discovered. Only populated if annotation_source is SITEMAP.
     */
    sourceFeedUrl?: string | null;
  }
  /**
   * Information derived from alexandria when processing the cross-link validation (e.g. when this was done the last time, or when we started to see the outlink for the first time).
   */
  export interface Schema$IndexingDupsLocalizedLocalizedClusterTargetLinkMetadata {
    /**
     * When was the first time a link seen. Defaults to last crawled timestamp.
     */
    firstSeenMs?: string | null;
    /**
     * When was the last time a link validated. Validation is the process of (re)reading the relevant information for a linked document from its respective row in the document table. Data needed for understanding the correctness of the cluster is copied over to have it available locally.
     */
    lastVerifiedMs?: string | null;
  }
  export interface Schema$IndexingDupsLocalizedLocalizedClusterTargetLinkSets {
    /**
     * Direct links are the simplest scenarios where A simply links to B.
     */
    directTargetLink?: Schema$IndexingDupsLocalizedLocalizedClusterTargetLink[];
    /**
     * Repeated field for URLs that are not directly linking to the document TargetLink refers to. We can encounter the following scenario: A -\> Links to B -\> links to C (i.e. without (A) linking to (C)). In the context of B, indirect_inclusion would include the link to 'C' but not the link back to 'A'.
     */
    indirectTargetLink?: Schema$IndexingDupsLocalizedLocalizedClusterTargetLink[];
  }
  /**
   * Information about the URLs being validated.
   */
  export interface Schema$IndexingDupsLocalizedLocalizedClusterTargetLinkTargetDocData {
    /**
     * The detected on-page content language of the document.
     */
    contentLanguage?: string | null;
    crawlStatus?: string | null;
    /**
     * The timestamp of the last crawl attempt from crawl_timestamp column.
     */
    crawlTimestampSeconds?: number | null;
    /**
     * Whether the URL being validated is canonical at the time of processing.
     */
    isCanonical?: boolean | null;
    /**
     * Repeated field for data about the outgoing hreflang links that appear in the document that the currently processed URL refers to.
     */
    outgoingLinkData?: Schema$IndexingDupsLocalizedLocalizedClusterTargetLinkLink[];
  }
  /**
   * This protobuf is used (1) To pass data between EmbeddedExporter and the publisher, and (2) As a member of CompositeDoc, to stick embedded content output into the docjoins. Next tag available: 21
   */
  export interface Schema$IndexingEmbeddedContentEmbeddedContentInfo {
    /**
     * The document's DOM and render tree produced by WebKit as a side effect of rendering the page. It might be compressed or not. Thus, use indexing::embedded_content::UncompressWebkitDocument to decode it.
     */
    compressedDocumentTrees?: string | null;
    /**
     * The converted contents, as produced by the same DocumentUpdater transaction that generated the render tree. Useful whenever one of our users wants to experiment with deriving an annotation from the render tree.
     */
    convertedContents?: string | null;
    /**
     * Information about all external resources needed to render this page, a.k.a. embedded links. This includes .css files, images embedded in a page, external javascripts, iframes etc.
     */
    embeddedLinksInfo?: Schema$IndexingEmbeddedContentEmbeddedLinksInfo;
    /**
     * The headless response for rendering the document.
     */
    headlessResponse?: Schema$HtmlrenderWebkitHeadlessProtoRenderResponse;
    /**
     * Indicate if the snapshot is generated from alternate snapshot. If true, the snapshot will be exported even if the snapshot quality score is low.
     */
    isAlternateSnapshot?: boolean | null;
    /**
     * The original encoding of the content crawled from trawler. It's the value of enum i18n::encodings::encoding. We put a int32 here instead of encoding proto to maintain the compatibility of "py_api_version = 1"
     */
    originalEncoding?: number | null;
    /**
     * *** DEPRECATED *** This field is only populated in fresh_doc which is shutting down.
     */
    rawRedirectInfo?: Schema$IndexingConverterRawRedirectInfo;
    /**
     * Information about all external resources used to render this page, a.k.a. embedded links. This includes .css files, images embedded in a page, external javascripts, iframes etc.
     */
    referencedResource?: Schema$HtmlrenderWebkitHeadlessProtoReferencedResource[];
    /**
     * Only exist in dry run mode.
     */
    renderedSnapshot?: Schema$HtmlrenderWebkitHeadlessProtoImage;
    /**
     * Snapshot image of a rendered html document (possibly encoded as png, jpeg, or webp).
     */
    renderedSnapshotImage?: string | null;
    /**
     * A collection of values which are needed by the users of the Kodachrome bigtable.
     */
    renderedSnapshotMetadata?: Schema$SnapshotSnapshotMetadata;
    /**
     * The quality of the image, 0.0 is the worst, 1.0 is the best. If all dependencies are successfully crawled, the quality should be 1.0. If one or more of the dependencies are unknown, the quality will be lower.
     */
    renderedSnapshotQualityScore?: number | null;
    renderingOutputMetadata?: Schema$IndexingEmbeddedContentRenderingOutputMetadata;
    /**
     * The rich content data to recover the original contents from the converted_contents. Useful for offline content analysis.
     */
    richcontentData?: Schema$IndexingConverterRichContentData;
  }
  export interface Schema$IndexingEmbeddedContentEmbeddedLinksInfo {
    /**
     * This field is optional only because we're adding it late and want to support records written before that. For newly produced records, this field should always be set.
     */
    embedderInfo?: Schema$IndexingEmbeddedContentEmbedderInfo;
    link?: Schema$IndexingEmbeddedContentLinkInfo[];
    /**
     * Page download size.
     */
    pageSizeInfo?: Schema$IndexingEmbeddedContentPageSizeInfo;
    /**
     * This field is the sum of http_response_length for the embedder and all embedded resources. This is expected to be set only in the docjoins, not in the pinax tables or the exported bigtable.
     */
    sumHttpResponseLength?: number | null;
    uncrawledLinkUrl?: string[] | null;
  }
  export interface Schema$IndexingEmbeddedContentEmbedderInfo {
    importanceAsEmbedder?: number | null;
    linkInfo?: Schema$IndexingEmbeddedContentLinkInfo;
  }
  /**
   * Log how many urls finally goes to trawler on a host in rendering.
   */
  export interface Schema$IndexingEmbeddedContentFetchHostCount {
    counter?: Schema$IndexingEmbeddedContentFetchHostCountCounter[];
    host?: string | null;
    num?: number | null;
  }
  export interface Schema$IndexingEmbeddedContentFetchHostCountCounter {
    name?: string | null;
    num?: number | null;
  }
  /**
   * Capsulate all metadata annotated from fetch server. This message will typically go through: - EmbeddedContentFetcher, or - EmbeddedLinkGetter-\> DenormalizedContent -\> ContentStore. And finally deposit in referenced_resources and link_info.
   */
  export interface Schema$IndexingEmbeddedContentFetchUrlResponseMetadata {
    adsResourceType?: string | null;
    /**
     * The field always exists, and has four options: UNKNOWN, CONTENT, ROBOTED and ERROR, which are defined in indexing.converter.CrawlStatus.
     */
    crawlStatus?: number | null;
    criticalResourceType?: string | null;
    /**
     * True if the response is fetched with SMARTPHONE user agent.
     */
    fetchWithSmartphoneUa?: boolean | null;
    isAdsResource?: boolean | null;
    isCriticalResource?: boolean | null;
    isTrivialResource?: boolean | null;
    /**
     * Number of trawler fetches while fetching this URL. In most cases, this number will be 0 or 1.
     */
    numTrawlerFetches?: number | null;
    /**
     * Used for logging purposes only here.
     */
    rewriteMethod?: string | null;
    /**
     * Note that this robots_info should only be used for noindex_reason and will only be present for TARGET_MAIN_FRAME / TARGET_SUBFRAME fetches.
     */
    robotsInfo?: Schema$IndexingConverterRobotsInfo;
  }
  /**
   * Information about one embedded link. Next tag: 18
   */
  export interface Schema$IndexingEmbeddedContentLinkInfo {
    /**
     * Size of the HTTP body (payload of the HTTP response, excluding headers), pre-decompression. Equal to the value of the Content-Length header if any. NOTE: if this proto is converted to from ReferencedResource, we have to use the size of the full HTTP response (i.e. http_response_length) as an approximation, as we could not get the size of HTTP headers.
     */
    contentLength?: number | null;
    contentType?: number | null;
    /**
     * Time spent downloading this resource, in milliseconds. Not a timestamp!
     */
    crawlDuration?: number | null;
    /**
     * Enum values for crawl_status are defined in indexing/converter/proto/converter.proto
     */
    crawlStatus?: number | null;
    crawlTimestamp?: number | null;
    deprecatedRedirect?: string[] | null;
    /**
     * Where this resource comes from.
     */
    fetchSourceInfo?: Schema$WirelessTranscoderFetchFetchSourceInfo[];
    /**
     * Fetch status from trawler.
     */
    fetchStatus?: Schema$TrawlerFetchStatus;
    /**
     * Populated from embedded-content fetch server.
     */
    fetchUrlResponseMetadata?: Schema$IndexingEmbeddedContentFetchUrlResponseMetadata;
    /**
     * FetchReplyData from trawler.
     */
    frd?: Schema$TrawlerFetchReplyData;
    /**
     * Size of the full HTTP response (headers and body pre-decompression). Semantically equal to content_length plus size of the HTTP headers.
     */
    httpResponseLength?: number | null;
    isCacheable?: boolean | null;
    isRobotedContentFromFastnet?: boolean | null;
    /**
     * Size of the HTTP body (payload of the HTTP response, excluding headers), post-decompression. Equal to content_length if the body was not compressed to begin with. NOTE: if this proto is converted to from ReferencedResource, we have to use the size of the full HTTP response as an approximation, as we could not get the size of HTTP headers.
     */
    uncompressedContentLength?: number | null;
    url?: string | null;
    webkitFetchMetadata?: Schema$HtmlrenderWebkitHeadlessProtoWebKitFetchMetadata;
  }
  /**
   * For each of the output fields generated by the embedded content system, the Unix timestamp of when it was most recently generated. Used for controlling the frequency of generation (and thus exporting) of the fields which are expensive to generate and/or the consumers of which are not able to handle the high load of daily/hourly updates. If a timestamp corresponding to an output field is missing, it means the last attempt to generate this field failed (which could be mean that the document was not important enough for this field to be generated, or that we hit a bug in WebKit). In case we choose not to regenerate the field (because the latest generation timestamp is too fresh) the corresponding timestamp doesn't change. Next tag available: 8
   */
  export interface Schema$IndexingEmbeddedContentOutputGenerationTimestamps {
    documentData?: number | null;
    renderedSnapshot?: number | null;
  }
  /**
   * Page download size information.
   */
  export interface Schema$IndexingEmbeddedContentPageSizeInfo {
    /**
     * Images are also resources. num_images <= num_resources.
     */
    numImages?: number | null;
    /**
     * Number of images whose crawl status is CONTENT.
     */
    numImagesWithContent?: number | null;
    /**
     * Numbers below don't include embedder.
     */
    numResources?: number | null;
    /**
     * Number of resources whose crawl status is CONTENT.
     */
    numResourcesWithContent?: number | null;
    /**
     * Sum of embedder and all referenced resources.
     */
    sumHttpResponseLength?: number | null;
  }
  /**
   * Fields used to track cache use in the rendering microservice. Next tag available: 6
   */
  export interface Schema$IndexingEmbeddedContentRenderCacheStats {
    /**
     * When the rendered content would expire from the cache in microseconds.
     */
    cacheExpireTimestampUsec?: string | null;
    crawledSimhashDistance?: number | null;
    /**
     * The last time the document was rendered, in microseconds. Does not update in case of cache use.
     */
    lastRenderedTimestampUsec?: string | null;
    renderCache?: string | null;
    renderedSimhashDistance?: number | null;
  }
  /**
   * Fetch stats during rendering.
   */
  export interface Schema$IndexingEmbeddedContentRenderingFetchStats {
    /**
     * A host-\>count mapping to log how many embedded_links in each host finally goes to trawler during rendering.
     */
    fetchHostCount?: Schema$IndexingEmbeddedContentFetchHostCount[];
  }
  /**
   * Small values from rendering output. It's stored as a column in alexandria document table. Next tag available: 30
   */
  export interface Schema$IndexingEmbeddedContentRenderingOutputMetadata {
    configParams?: Schema$IndexingEmbeddedContentRenderRequestConfigConfigParams;
    /**
     * The exceptions observed during the rendering. In bit-field encoding of enum values of RenderResponse.RenderingException.
     */
    exceptions?: string | null;
    /**
     * Total GCU time for rendering the document in millisecond. This data is from render_stats.render_cost_mgcu in RenderResponse proto. Note that this is *experimental* field. Please check with rendering-infra@ if you want to use.
     */
    experimentalRenderTimeMsec?: number | null;
    generationTimestamps?: Schema$IndexingEmbeddedContentOutputGenerationTimestamps;
    /**
     * The importance value of the rendered document.
     */
    importance?: number | null;
    /**
     * The timestamp of last new content probing.
     */
    lastNewContentProbingTimestamp?: number | null;
    /**
     * Percentage of new tokens in the rendered the document content.
     */
    newTokensPercentageAfterRendering?: number | null;
    numNewTokensFoundInRendering?: number | null;
    refresh?: boolean | null;
    /**
     * A collection of fields to track stats on cache use in the Rendering microservice.
     */
    renderCacheStats?: Schema$IndexingEmbeddedContentRenderCacheStats;
    /**
     * Short signature (usually less than 1 KB) which captures a perceptual hash on the rendered image. This is used to determine whether successive renderings should be output. See the library in googlen/snapshot/shared/similarity.* for more info about how this value is interpreted and used.
     */
    renderedSnapshotSignature?: string | null;
    /**
     * Current time in microseconds the document is going through rendering system. This field is set regardless of whether the document is being rendered or if we are skipping rendering by using a cache.
     */
    renderedTimeUsec?: string | null;
    renderEngine?: string | null;
    /**
     * Different types of events which happened during rendering.
     */
    renderEvent?: Schema$HtmlrenderWebkitHeadlessProtoRenderEvent[];
    renderingFetchStats?: Schema$IndexingEmbeddedContentRenderingFetchStats;
    /**
     * The CL from which the render engine was built.
     */
    renderServerCl?: string | null;
    renderTreeQualityScore?: number | null;
    /**
     * The corpus selection result. Can be used for offline analysis.
     */
    selectionResult?: Schema$IndexingEmbeddedContentSelectionResult;
    /**
     * These scores are copied from htmlrender_webkit_headless_proto.Document.
     */
    snapshotQualityScore?: number | null;
    /**
     * True if there were any missing resources during the rendering.
     */
    withMissingResources?: boolean | null;
  }
  export interface Schema$IndexingEmbeddedContentRenderRequestConfigConfigParams {
    virtualTime?: number | null;
  }
  /**
   * Output that indicates a url should be in our corpus.
   */
  export interface Schema$IndexingEmbeddedContentSelectionResult {
    renderEffort?: string | null;
    /**
     * Indicate which selector has made the decision.
     */
    selectorId?: string | null;
  }
  export interface Schema$IndexingMlVerticalVerticalItem {
    /**
     * Unique ID.
     */
    id?: number | null;
    /**
     * The description name.
     */
    name?: string | null;
    /**
     * The corresponding Petacat ID.
     */
    petacatId?: number | null;
    /**
     * The probability of the vertical, whose value is in [0.0, 1.0].
     */
    probability?: number | null;
  }
  /**
   * Desktop interstitials signal. The message contains both fields for site-level signal lookup in Index Signals (go/index-signals) and fields for final attachment in DocJoin.
   */
  export interface Schema$IndexingMobileInterstitialsProtoDesktopInterstitials {
    details?: Schema$IndexingMobileInterstitialsProtoDesktopInterstitialsDetails[];
    /**
     * Epoch of the interstitial offline pipeline generating this signal.
     */
    pipelineEpoch?: string | null;
    /**
     * If present, pipeline_pattern identifies the cluster of URLs for which the signal value was smeared.
     */
    pipelinePattern?: string | null;
    /**
     * URL tree of interstitial patterns belong to the host, to be used as site-level signal in Index Signals. A pattern may contain a payload InterstitialPatternPayload, which will indicate the violated interstitial types of this pattern.
     */
    urlTree?: Schema$IndexingUrlPatternUrlTreeUrlTree;
    /**
     * Overall policy violation status. If this is true, at least one of the InterstitialSignal below indicates a violation.
     */
    violatesDesktopInterstitialPolicy?: boolean | null;
  }
  /**
   * An optional message that may contain details of the signals computation.
   */
  export interface Schema$IndexingMobileInterstitialsProtoDesktopInterstitialsDetails {
    basicInfo?: Schema$IndexingMobileInterstitialsProtoInterstitialBasicInfo;
    /**
     * Indicates whether the signal value is "smeared", e.g. extrapolated from other URLs.
     */
    isSmearedSignal?: boolean | null;
  }
  /**
   * Basic interstitial info, shared by all layout types. This message can be used to quickly iterate through detected interstitials, if layout type specific details are not required. Note: this message stores info for one primary interstitial as detected by a particular layout codepath. Some codepaths, e.g. overlay interstitial detection, may find multiple interstitial candidates; such details can be found in codepath-specific messages below.
   */
  export interface Schema$IndexingMobileInterstitialsProtoInterstitialBasicInfo {
    /**
     * Stores the geometry of detected interstitial in absolute page pixels.
     */
    absoluteBox?: Schema$HtmlrenderWebkitHeadlessProtoBox;
    contentType?: string | null;
    detectionMode?: string | null;
    layoutType?: string | null;
  }
  /**
   * Core Web Vitals (https://web.dev/vitals/) carried in VoltSignal: the field data metrics extracted from UKM aggregated 75-percentile data.
   */
  export interface Schema$IndexingMobileVoltCoreWebVitals {
    /**
     * Cumulative Layout Shift.
     */
    cls?: string | null;
    /**
     * First Input Delay.
     */
    fid?: string | null;
    inp?: string | null;
    /**
     * Largest Contentful Paint.
     */
    lcp?: string | null;
  }
  /**
   * The protocol buffer stored in the legacyperdocdata muppet attachment for VOLT (go/volt). The data is used for ranking changes. Only CWV signals and secure signal are stored. MobileFriendliness is stored separately in the legacyperdocdata. Safe browsing and BAS/AER conditions are not used for ranking.
   */
  export interface Schema$IndexingMobileVoltVoltPerDocData {
    /**
     * Desktop Core Wev Vital metrics. NOTE(yunchengz): This field will not be populated in Muppet.
     */
    desktopCwv?: Schema$IndexingMobileVoltCoreWebVitals;
    desktopDisplayUrlIsHttps?: boolean | null;
    displayUrlIsHttps?: boolean | null;
    /**
     * Mobile Core Web Vital metrics. NOTE(yunchengz): This field will not be populated in Muppet.
     */
    mobileCwv?: Schema$IndexingMobileVoltCoreWebVitals;
  }
  export interface Schema$IndexingPrivacyAccessAccessRequirements {
    restrictionCategories?: string[] | null;
  }
  /**
   * State data for AdaptiveFrequencyEstimator
   */
  export interface Schema$IndexingSignalAggregatorAdaptiveIntervalData {
    clicksGoodInterval?: number | null;
    clicksGoodPriorWeight?: number | null;
    clicksTotalInterval?: number | null;
    clicksTotalPriorWeight?: number | null;
    ctrwiInterval?: number | null;
    ctrwiPriorWeight?: number | null;
    dwellsInterval?: number | null;
    dwellsPriorWeight?: number | null;
    luDwellsInterval?: number | null;
    luDwellsPriorWeight?: number | null;
  }
  /**
   * Accumulated coverage data for an url using a constant half-life time. Next tag: 28
   */
  export interface Schema$IndexingSignalAggregatorAgeWeightedCoverageData {
    /**
     * Weighted averged timestamps of the decayed chances.
     */
    averageChanceTime?: number | null;
    /**
     * Numbers below are all total in the decayed manner. To get rate of impression/clicks, divide by chances.
     */
    chances?: number | null;
    clicksBad?: number | null;
    clicksGood?: number | null;
    clicksImage?: number | null;
    clicksTotal?: number | null;
    clicksUnclassified?: number | null;
    /**
     * Epoch seconds at which this weighted coverage data was calculated.
     */
    coverageTimestamp?: string | null;
    ctrWeightedImpressions?: number | null;
    /**
     * Dwells from KnowledgePanel and WebAnswers.
     */
    dwells?: number | null;
    /**
     * Epoch seconds at which this url first gets coverage in BASE.
     */
    firstBaseCoverageTimestamp?: string | null;
    /**
     * The pagerank when the url was serving for the first time.
     */
    firstCoveragePagerankNs?: number | null;
    /**
     * Epoch seconds at which this url first gets coverage data.
     */
    firstCoverageTimestamp?: string | null;
    firstseen?: string | null;
    impressions?: number | null;
    /**
     * Interval Data to track the average time between clicks_total, clicks_good, and ctr_weighted_impression.
     */
    intervalData?: Schema$IndexingSignalAggregatorAdaptiveIntervalData;
    language?: number | null;
    /**
     * Indicates the date when this document received the last KnowledgePanel or WebAnswer dwell. Note: The date is identified in terms of number of days since Epoch.
     */
    lastDwellDateInDays?: number | null;
    /**
     * Indicates the date when this document received the last good click. Note: The date is identified in terms of number of days since Epoch.
     */
    lastGoodClickDateInDays?: number | null;
    /**
     * Indicates the date when this document received the last impression. Note: The date is identified in terms of number of days since Epoch.
     */
    lastImpressionDateInDays?: number | null;
    /**
     * Indicates the date when this document received the last LocalUniversal dwell. Note: The date is identified in terms of number of days since Epoch.
     */
    lastLuDwellDateInDays?: number | null;
    /**
     * Indicates the date when this document received the last pseudo-impression. I.e., when it was retrieved as a result but GWS would not show it because of the document's age in the index. Note: The date is identified in terms of number of days since Epoch.
     */
    lastPseudoImpressionsDateInDays?: number | null;
    /**
     * Dwells from LocalUniversal.
     */
    luDwells?: number | null;
    /**
     * Repid in Alexandria pipeline.
     */
    repid?: string | null;
    /**
     * Total number of chances on this urls (not decayed).
     */
    totalChances?: string | null;
    url?: string | null;
    /**
     * Temporary variable, only used during mapreduce.
     */
    urlfp?: string | null;
  }
  /**
   * Aggregated signal used by NumericSignalAggregator. Next field id: 25
   */
  export interface Schema$IndexingSignalAggregatorAggregatedScore {
    /**
     * A number reflecting the deviation of Url scores.
     */
    deviation?: number | null;
    /**
     * State variables for West & Chan variance algorithm used to be stored here directly. Now they are stored inside RunningMeanAndVarianceInternalState.
     */
    m2?: number | null;
    /**
     * Input UrlScore with max score.
     */
    maxScoreUrl?: Schema$IndexingSignalAggregatorUrlScore;
    mean?: number | null;
    /**
     * Overall stats that are only available in final aggregation results. The aggregated score.
     */
    meanScore?: number | null;
    /**
     * Input UrlScore with min score.
     */
    minScoreUrl?: Schema$IndexingSignalAggregatorUrlScore;
    numImportantUrls?: string | null;
    /**
     * Final Stats that are also available in intermediate output. Number of Urls matching the class.
     */
    numUrlsMatched?: string | null;
    /**
     * Not every matching url has a signal.
     */
    numUrlsWithSignal?: string | null;
    /**
     * Experimental layer of the corresponding pattern.
     */
    patternLayer?: string | null;
    /**
     * Optionally populated in mediators. A list of patterns that actually contributed to the final mediated signal.
     */
    patternsUsedInMediation?: string[] | null;
    /**
     * Score percentile of matching urls. If present, it has N entries for buckets of roughly equal number of urls. N is specified the aggregation. The value is the min score in that bucket.
     */
    percentile?: number[] | null;
    runningMeanAndVarianceInternalState?: Schema$IndexingSignalAggregatorRunningMeanAndVarianceInternalState;
    /**
     * Random samples.
     */
    samples?: Schema$IndexingSignalAggregatorUrlScore[];
    /**
     * for calculating percentile
     */
    scores?: number[] | null;
    /**
     * For debugging purposes, this is an id of the signal associated with this AggregatedScore. For pattern score, this may be the length of the pattern.
     */
    signalId?: number | null;
    /**
     * If this field presents, it is for a single url. No other field should appear.
     */
    singleUrlScore?: Schema$IndexingSignalAggregatorUrlScore;
    /**
     * summation varaible used to get mean
     */
    totalScore?: number | null;
    /**
     * low-order part of total_score
     */
    totalScoreLow?: number | null;
    /**
     * summation variable for calculating deviation note, these are now only used for legacy and debugging purposes
     */
    totalScoreSqr?: number | null;
    /**
     * low order part of total_score_sq
     */
    totalScoreSqrLow?: number | null;
    /**
     * for calculating weighted mean/dev
     */
    totalWeight?: number | null;
    /**
     * low order part of total_weight
     */
    totalWeightLow?: number | null;
  }
  /**
   * Internal state of the West & Chan running variance algorithm. Fields of this proto should not be accessed directly; instead, please use RunningMeanAndVarianceUtil. The fields of this message only have meaning in the context of the West & Chan algorithm, which is documented (or Wikipedia-linked) in the doc comments of RunningMeanAndVarianceUtil. We do however give some explanation of the meanings of these fields in the context of the algorithm (i.e. if you have the Wikipedia page open and are ready to do some math). Also see the file doc of RunningMeanAndVarianceUtil for a specification and more info about the algorithm. Notation: The data set is X = {(x_1, w_1), ..., (x_n, w_n)\}. It consists of n weighted data points. The ith data point has value x_i and weight w_i. REQUIRES: x_i is finite for each i. w_i is finite for each i. w_i \>= 0 for each i.
   */
  export interface Schema$IndexingSignalAggregatorRunningMeanAndVarianceInternalState {
    /**
     * The variable which in the Wikipedia page is referred to as M_2: m2 = w_1 * (x_1 - mean)^2 + ... + w_n * (x_n - mean)^2. The algorithm implemented in RunningMeanAndVarianceUtil provides a way to update m2 in a numerically stable way when the data set grows. If total_weight = 0, then m2 is meaningless, and its value is unspecified, except that it must be finite and \>= 0.
     */
    m2?: number | null;
    /**
     * Mean of the data set, mean = (w_1 * x_1 + ... + w_n * x_n) / total_weight. The algorithm implemented in RunningMeanAndVarianceUtil provides a way to update this mean in a numerically stable way when the data set grows. If total_weight = 0, then mean is meaningless, and its value is unspecified, except that it must be finite.
     */
    mean?: number | null;
    /**
     * Total weight of the data set, total_weight = w_1 + ... + w_n.
     */
    totalWeight?: number | null;
  }
  export interface Schema$IndexingSignalAggregatorSccData {
    parentPattern?: Schema$IndexingSignalAggregatorSccSignal;
    /**
     * The most immediate pattern data.
     */
    pattern?: Schema$IndexingSignalAggregatorSccSignal;
  }
  export interface Schema$IndexingSignalAggregatorSccSignal {
    clicksBad?: number | null;
    clicksImage?: number | null;
    clicksTotal?: number | null;
    /**
     * For debugging purpose only.
     */
    debugInfo?: string[] | null;
    /**
     * This represents the number of urls with image clicks. A url can have both image and non-image clicks, in which case we set num_image_urls to be the ratio of image_clicks vs total clicks. For example, if a url has 10 total clicks and 7 image clicks, num_image_urls will be set to 0.7.
     */
    numImageUrls?: number | null;
    numUrls?: string | null;
    /**
     * For debugging purpose only.
     */
    pattern?: string | null;
  }
  /**
   * Contains only the signals necessary to perform per-URL click prediction. Used by Index Selection for scoring. NEXT ID TO USE: 7
   */
  export interface Schema$IndexingSignalAggregatorUrlPatternSignals {
    coverage?: Schema$IndexingSignalAggregatorAgeWeightedCoverageData;
    pagerankScore?: Schema$IndexingSignalAggregatorAggregatedScore;
    patternScore?: Schema$IndexingSignalAggregatorAggregatedScore;
    priorSignal?: Schema$IndexingSignalAggregatorUrlPatternSignalsPriorSignal[];
    regexpPatternScore?: Schema$IndexingSignalAggregatorAggregatedScore;
    sccData?: Schema$IndexingSignalAggregatorSccData;
  }
  /**
   * This message provides a container for any signal used in scoring, and allows UrlPatternSignals to extend beyond (regexp_)pattern_score and pagerank_score.
   */
  export interface Schema$IndexingSignalAggregatorUrlPatternSignalsPriorSignal {
    aggregatedScore?: Schema$IndexingSignalAggregatorAggregatedScore;
    priorSignalId?: string | null;
  }
  /**
   * Representation of numeric signal of a url.
   */
  export interface Schema$IndexingSignalAggregatorUrlScore {
    /**
     * The number of weekly performance records if the UrlScore is extracted from the DSAC data. It should be used in case a URL is no longer served. As of 2014-10-14, this field is for the evaluation purpose only.
     */
    dsacNumWeeklyPerfRecords?: number | null;
    /**
     * If this field is set, it indicates the url is eligible to be aggregated to one of the experimental layers.
     */
    eligibleExperimentalLayer?: string | null;
    /**
     * The timestamp of the first time this document is served anywhere.
     */
    firstServedTimestamp?: string | null;
    /**
     * Whether this url has important signal. Used for keeping patterns that match too few URLs but some of them have good clicks.
     */
    isImportant?: boolean | null;
    /**
     * score might be missing if the url does not have signal.
     */
    score?: number | null;
    /**
     * url might be missing if we can get it from sstable key.
     */
    url?: string | null;
    /**
     * weight for this url.
     */
    weight?: number | null;
  }
  /**
   * The information about spoken content that's based on purely the media resource contents (and not the embedding page or context, etc).
   */
  export interface Schema$IndexingSpeechSpeechPropertiesProto {
    /**
     * Duration of audio in processed fragment (including non-speech), in seconds.
     */
    audioDuration?: number | null;
    /**
     * If true, the media file is audio-only. If false, also has video track(s).
     */
    audioOnly?: boolean | null;
    /**
     * Estimated duration of audio in the whole file (including non-speech), in seconds. If this is greater than 0, then it will either be equal to audio_duration (when truncated_file is false), or to the length of the content (audio or video) according to the file header (when truncated_file is true).
     */
    estimatedAudioDuration?: number | null;
    /**
     * Our confidence in the duration estimate, on a scale from 0 (not confident) to 1 (very confident). An estimate should have a confidence of at least 0.5 if it is to be shown to users.
     */
    estimatedAudioDurationConfidence?: number | null;
    /**
     * The spoken language, see i18n/identifiers/languagecode.h and go/gl2014. This may or may not match the language of the written page. (Examples: "en", "sv", "zh-CN").
     */
    languageCode?: string | null;
    /**
     * Total number of recognized words in processed fragment.
     */
    numWords?: number | null;
    /**
     * Measure of the estimated output accuracy from the speech recognition code, from 0 to 1. Based on word-level confidence and possibly other factors.
     */
    recognizerAccuracy?: number | null;
    /**
     * Duration of speech in processed fragment, in seconds.
     */
    speechDuration?: number | null;
    /**
     * If true, we may have processed a truncated file (most likely due to a size-cutoff when crawling). As a result, the audio duration is a lower bound and the other fields reflect only the processed prefix of the file.
     */
    truncatedFile?: boolean | null;
  }
  /**
   * Representing a dominating branch of the URL tree.
   */
  export interface Schema$IndexingUrlPatternUrlTreeBigTreeBranch {
    features?: Schema$IndexingUrlPatternUrlTreeUrlFeatures;
    /**
     * The fingerprint of the features string.
     */
    patternId?: string | null;
    payload?: Schema$Proto2BridgeMessageSet;
  }
  export interface Schema$IndexingUrlPatternUrlTreeUrlFeature {
    fingerprint?: string | null;
    /**
     * If consider position when calculating fingerprint of url feature.
     */
    fingerprintWithGroupInType?: boolean | null;
    /**
     * Used together w/ type field to group features, for finding features with too many possible values.
     */
    groupInType?: string | null;
    type?: string | null;
    value?: string | null;
  }
  export interface Schema$IndexingUrlPatternUrlTreeUrlFeatures {
    feature?: Schema$IndexingUrlPatternUrlTreeUrlFeature[];
  }
  export interface Schema$IndexingUrlPatternUrlTreeUrlTree {
    /**
     * Keeping information for dominating branches separately, to prevent docs on smaller branches from being dropping during sampling.
     */
    bigBranch?: Schema$IndexingUrlPatternUrlTreeBigTreeBranch[];
    debugInfo?: Schema$IndexingUrlPatternUrlTreeUrlTreeDebugInfo;
    key?: Schema$IndexingUrlPatternUrlTreeUrlTreeKey;
    /**
     * node(0) is root.
     */
    node?: Schema$IndexingUrlPatternUrlTreeUrlTreeNode[];
    /**
     * Used in url pattern matcher for cache invalidation.
     */
    retrievalTimestamp?: number | null;
    /**
     * The key for this UrlTree, also will be the key in sstable. The old format is site, while the new format will be UrlTreeKey. Only one field can be set in the same time for site and key.
     */
    site?: string | null;
    /**
     * The time when this UrlTree is built, encoded as seconds past the epoch (Jan 1, 1970).
     */
    timestamp?: number | null;
    /**
     * Any additional information.
     */
    treeInfo?: Schema$Proto2BridgeMessageSet;
  }
  export interface Schema$IndexingUrlPatternUrlTreeUrlTreeDebugInfo {
    innerSimilarity?: number | null;
  }
  /**
   * A UID of URL Tree. There is a hash function and a equality function for UrlTreeKey in //indexing/url_pattern/url_tree/util/url-tree-key-util.h. When adding or deprecating a field in this proto, please also update the hash function and the equality function. LINT.IfChange
   */
  export interface Schema$IndexingUrlPatternUrlTreeUrlTreeKey {
    crawlerId?: string | null;
    domain?: string | null;
    hostname?: string | null;
  }
  export interface Schema$IndexingUrlPatternUrlTreeUrlTreeNode {
    indexOfSubTreeWithoutSplittingFeature?: number | null;
    indexOfSubTreeWithSplittingFeature?: number | null;
    parent?: number | null;
    /**
     * The path from root to current node. This is only used for debugging.
     */
    pathFromRoot?: string | null;
    /**
     * This is only used in leaf nodes which represents a url pattern. It is the fingerprint of the splitting url features from root to the leaf.
     */
    patternId?: string | null;
    payload?: Schema$Proto2BridgeMessageSet;
    splittingFeature?: Schema$IndexingUrlPatternUrlTreeUrlFeature;
    /**
     * The information gain of content features when selecting this splitting feature to split the node.
     */
    splittingFeatureScore?: number | null;
  }
  /**
   * This proto captures the output of analyses that ran on Automatic Speech Recogntion produced by the recognizer.
   */
  export interface Schema$IndexingVideosAsrTranscriptRepairAnnotation {
    gibberishResult?: string | null;
    /**
     * The number of the above segments that were classified as gibberish.
     */
    numGibberishSegments?: number | null;
    /**
     * The number of ASR segments that were sent for classification.
     */
    numSegmentsClassified?: number | null;
  }
  export interface Schema$KaltixPerDocData {
    /**
     * approx. 2 bytes for top 1B
     */
    KaltixRank?: number | null;
    /**
     * empty for now
     */
    LocalKaltixRank?: number | null;
    /**
     * empty for now
     */
    SiteKaltixRank?: number | null;
  }
  /**
   * Wrapper message containing list of regions and their corresponding type of region signal to use in data governance.
   */
  export interface Schema$KeGovernanceTypedRegions {
    /**
     * Values are go/iii RegionCode in capital case. It is a good practice to keep elements in this list unique, although not enforced. In case of duplicated entries, they'll be treated as if there were only one entry of the same value.
     */
    regions?: string[] | null;
    /**
     * The particular type of region should be explicitly set to disambiguate.
     */
    regionType?: string | null;
  }
  /**
   * Accepts any non-empty value. This is meant for special cases allowing any value or any composition to be valid in a slot. If you are thinking of using this, please contact mrf-team@.
   */
  export interface Schema$KnowledgeAnswersAnyType {
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
  }
  /**
   * An attribute type configures a value whose type is intended to be a attribute defined in the schema.
   */
  export interface Schema$KnowledgeAnswersAttributeType {
    /**
     * Use in parsing: the value filled with must be in the list of this. If no attribute ids are specified, this value can be filled with any attribute.
     */
    attribute?: string[] | null;
    /**
     * If exist, the attribute will be applied on the given pivot slot. This helps type checking when qrewrite constructs function calls with an attribute-typed slot.
     */
    pivotEntitySlot?: string | null;
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
  }
  /**
   * A BooleanType configures a yes/no value.
   */
  export interface Schema$KnowledgeAnswersBooleanType {
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
  }
  /**
   * A CollectionType configures a value whose type is intended to be a collection.
   */
  export interface Schema$KnowledgeAnswersCollectionType {
    /**
     * The collection this value is filled with must be one of these collections (denoted by a /collection/x id). If no collections are specified, this value can be filled with any collection.
     */
    collection?: string[] | null;
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
  }
  /**
   * A CompoundType configures a value composed of multiple answer values.
   */
  export interface Schema$KnowledgeAnswersCompoundType {
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
  }
  export interface Schema$KnowledgeAnswersContainerType {
    slotNames?: string[] | null;
  }
  /**
   * A DateType configures a value whose type is intended to be a date. LINT.IfChange Next id: 16
   */
  export interface Schema$KnowledgeAnswersDateType {
    /**
     * If true, will allow all resolutions that are ranges.
     */
    allowAllRangeResolutions?: boolean | null;
    /**
     * If true, overrides all other options in this message and allows any kind of DateTime annotation.
     */
    allowAllResolutions?: boolean | null;
    /**
     * If true, will allow all resolutions except holidays.
     */
    allowAllResolutionsExceptHolidays?: boolean | null;
    /**
     * If true, will allow resolutions that aren't contiguous sequences of 4 digits annotated as 24-hr times. These are often mis-interpreted years or postcodes.
     */
    allowAllResolutionsWithout4digit24hrTime?: boolean | null;
    /**
     * If true, will allow resolutions without an explicit hour. Symbolic ranges such as [this evening] are not considered as explicit hour, but the range [1-3pm] is considered as explicit.
     */
    allowAllResolutionsWithoutTime?: boolean | null;
    /**
     * If true, will parse a mention to DateTime of resolution day. This allows parsing strings like "August 30th", "2012-12-25";
     */
    allowDayResolution?: boolean | null;
    /**
     * If true, will allow day resolutions except holidays or ordinal numbers, such as "today", "December 13", but "Christmas", "first" are not allowed.
     */
    allowDayResolutionExceptHolidaysOrOrdinal?: boolean | null;
    /**
     * If true, will allow resolutions with an explicit hour such as "8am", "5pm".
     */
    allowHourResolution?: boolean | null;
    /**
     * If true, will parse a mention to DateTime of resolution month. This allows parsing strings like "this August", "2012-12";
     */
    allowMonthResolution?: boolean | null;
    /**
     * If true, will allow "now" resolutions, but not any other time
     */
    allowNowResolution?: boolean | null;
    /**
     * If true, will allow symbolic time resolutions such as "tonight".
     */
    allowSymbolicTime?: boolean | null;
    /**
     * If true, will allow time resolutions without an explicit timezone.
     */
    allowTimeResolutionsWithoutExplicitTimezone?: boolean | null;
    /**
     * If true, will parse a mention to DateTime of resolution year. This allows parsing strings like "Next year ", "2010";
     */
    allowYearResolution?: boolean | null;
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
    subType?: string | null;
  }
  export interface Schema$KnowledgeAnswersDependencyType {
    containerType?: Schema$KnowledgeAnswersContainerType;
    intersectType?: Schema$KnowledgeAnswersIntersectType;
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
    sameType?: Schema$KnowledgeAnswersSameType;
    unionType?: Schema$KnowledgeAnswersUnionType;
  }
  /**
   * How a piece of data was resolved through external data (either elsewhere in the query, or from a previous query). Examples: [obama and his age] -\> "his" is resolved from the Obama entity obama -\> "he" is resolved from the Obama entity starbucks -\> Q2 is resolved from the list of shops
   */
  export interface Schema$KnowledgeAnswersDialogReferentialResolution {
    /**
     * True iff this ReferentialResolution is part of an intent and refers to the full MRF subtree (rather than just the intent).
     */
    refersToFullMrf?: boolean | null;
    resolutionType?: string | null;
  }
  /**
   * A DurationType configures a value whose type is a duration.
   */
  export interface Schema$KnowledgeAnswersDurationType {
    /**
     * Range constraint limits the set of durations accepted. The values of the range are in milliseconds. Currently, this constraint is only enforced in Loose Parser.
     */
    rangeConstraint?: Schema$KnowledgeAnswersRangeConstraint;
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
  }
  /**
   * An EntityType configures a value whose type is intended to be an entity. Entities may be specified using either the collection(s) to which they belong, or explicitly via a list of KG-ids. Both collections and ids can be specified, in which case the type will be the union of the id(s) and all mids within the collection(s). Next available tag: 9
   */
  export interface Schema$KnowledgeAnswersEntityType {
    /**
     * This field specifies that containing entity must be: - in *any* 'collection' if 'in_all_collections' is false (default) - in *every* 'collection' if 'in_all_collections' is true. The collection field contains strings of the form '/collection/'. If no collections are specified, this value can be filled with any entity. A collection specified as an empty string has a special meaning for Aqua induction, which is that the type includes all entities.
     */
    collection?: string[] | null;
    /**
     * The entity that this value is filled with must not be any of these collections (denoted by a /collection/x id). This restriction does not affect parsing; it is used only to filter attributes in the extraction flow.
     */
    excludedCollection?: string[] | null;
    /**
     * The entity that this value is filled with must be one of the following explicitly specified KG-ids.
     */
    id?: string[] | null;
    /**
     * The entity that this value is filled with must be of the explicit type and/or contain the explicitly specified id. This field can not be used for kg mids, which should directly use the id field above.
     */
    identifier?: Schema$KnowledgeAnswersIntentQueryIdentifier[];
    inAllCollections?: boolean | null;
    /**
     * If this is set to true for a slot and the entity is a location, the latitude and longitude will be available in variables $SlotName_Latitude and $SlotName_Longitude, respectively. The latitude and longitude data comes from KG.
     */
    includeGeolocationData?: boolean | null;
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
  }
  /**
   * Modifiers decorate a Meaning Expression (i.e. intent FunctionCall) with signals that depend on the source language's grammar and syntax. See go/intent-modifiers for details. NOTE: Modifiers don't necessarily impact go/intent-resolution semantics. LINT.IfChange
   */
  export interface Schema$KnowledgeAnswersIntentModifiers {
    /**
     * Language of all of the non-annotation tokens of the query interpretation, if it is different than |language|. This can happen with English smearing, e.g. [height rousseau] will trigger as "fr" when issued in fr/FR, but really the language is "en". This can also happen when we have extra information about the language model, e.g. language="zh", alternate_language="zh-Hant".
     */
    alternateLanguage?: string | null;
    definiteness?: string | null;
    /**
     * Language of parsed query.
     */
    language?: string | null;
    /**
     * Since there's only IMPERATIVE, consider using Marker.command instead.
     */
    mood?: string | null;
    plurality?: string | null;
    /**
     * Whether or not the question is a polar (yes/no) question.
     */
    polarQuestion?: boolean | null;
    /**
     * Sentiment analysis attached to an intent implies the sentiment user expressed behind that query. This is generated by the Empathetic Servlet in the QRewrite.
     */
    sentiment?: Schema$SentimentSentiment;
    tense?: string | null;
  }
  /**
   * Signals coming from the Annotation Layer of TUIG. See more details at http://go/unified-intent-generation-apis.
   */
  export interface Schema$KnowledgeAnswersIntentQueryAnnotationLayerSignals {
    customVehicleActionArgumentAnnotatorSignals?: Schema$KnowledgeAnswersIntentQueryCustomVehicleActionArgumentAnnotatorSignals;
    freetextAnnotationSignals?: Schema$KnowledgeAnswersIntentQueryFreetextAnnotationSignals;
    nimbleAnnotationSignals?: Schema$KnowledgeAnswersIntentQueryNimbleAnnotationSignals;
    ntprAnnotationSignals?: Schema$KnowledgeAnswersIntentQueryNTPRAnnotationSignals;
    qrefAnnotationSignals?: Schema$KnowledgeAnswersIntentQueryQrefAnnotationSignals;
    semanticAnnotationSignals?: Schema$KnowledgeAnswersIntentQuerySemanticAnnotationSignals;
    teleportArgumentAnnotatorSignals?: Schema$KnowledgeAnswersIntentQueryTeleportArgumentAnnotatorSignals;
  }
  export interface Schema$KnowledgeAnswersIntentQueryArgPath {
    components?: Schema$KnowledgeAnswersIntentQueryArgPathComponent[];
  }
  /**
   * LINT.IfChange(ArgPath) Given a FunctionCall and an Argument somewhere in it, an ArgPath is a list of name-index pairs that uniquely determines the path down to that Argument. For each pair, the |index|, starting from zero, distinguishes between "sibling" (i.e. belonging to the same sub-FunctionCall) Arguments with the same name. For example, given the following FunctionCall: A(X=D(W=5), Z=B(Z=6), Z=C(Y=7)) The path to the Z=6 argument is {{"Z", 0\}, {"Z", 0\}\} It's the first of two Z "siblings" under A, then the only Z under B. The path to the Y=7 argument is {{"Z", 1\}, {"Y", 0\}\} It's the second of two Z "siblings" under A, then the only Y under C. The path to the Z=B(...) argument is {{"Z", 0\}\} It's the first of two Z "siblings" under A.
   */
  export interface Schema$KnowledgeAnswersIntentQueryArgPathComponent {
    argName?: string | null;
    index?: number | null;
  }
  /**
   * A message representing the function argument. Next ID: 9 Important: If you add new fields that do not reflect signals data, but actual semantics of the FunctionCall, please also update CreateFuncallCopyWithoutSignals and CreateFuncallCopyWithArgumentSignals in function_call_utils. LINT.IfChange
   */
  export interface Schema$KnowledgeAnswersIntentQueryArgument {
    /**
     * This field is used inside Aqua and outside Aqua for identifying the token indices and/or byte offsets of this argument
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * Eval_data was not derived at parsing time (i.e. is not expected to be produced by the IG), but heuristically determined by matching the ArgumentValue to an annotation/query fragment.
     */
    heuristicEvalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * Slot schema key for this Argument. Note: This is still under development and not available for general use. Contact meaning-platform-eng@ for questions. Note: Currently MeaningSchemaSlotKey proto has both mid and unique_id. In future, only mid will be present in it. We are in the process of moving "unique_id" out of it. See (b/168907943). Note: The logged version of intent_query will only have "mid" populated in it to save space and avoid data duplication.
     */
    key?: Schema$KnowledgeAnswersMeaningSchemaSlotKey;
    /**
     * A flattened representation of all intent modifiers that apply to this argument.
     */
    modifiers?: Schema$KnowledgeAnswersIntentModifiers;
    /**
     * Name of this argument. If this Argument is part of a FunctionCall, it must have a name or it is not well-formed. If this Argument is from an Annotator, the name field should be empty.
     */
    name?: string | null;
    /**
     * Signals associated with this argument.
     */
    signals?: Schema$KnowledgeAnswersIntentQueryArgumentSignals;
    /**
     * The value of this argument.
     */
    value?: Schema$KnowledgeAnswersIntentQueryArgumentValue;
  }
  /**
   * NextId: 11
   */
  export interface Schema$KnowledgeAnswersIntentQueryArgumentProvenance {
    /**
     * If populated, the current query contains an anaphor that refers to the value. For example: U: Weather in Paris. [Weather(location=paris)] G: 65 degrees and sunny. U: How many people live there? [Population(city=paris)] The "there" in the current query would have the "anaphor" field set. NOTE: after a string rewrite this field will not be populated anymore if the rewrite replaced the anaphor with the corresponding value. For example, if we rewrite [How many people there] to [How many people in Paris], the CurrentQuerySignals for "paris" will not contain an "anaphor" message anymore in the following turns. It will only contain an eval_data for the span that corresponds to "paris" in the query.
     */
    anaphor?: Schema$KnowledgeAnswersIntentQueryArgumentProvenanceQueryAnaphor;
    attentionalEntity?: Schema$KnowledgeAnswersIntentQueryArgumentProvenanceAttentionalEntity;
    /**
     * NOTE: PreviousQuery is used for values that originate directly from QRef entities annotated in the user query. AttentionalEntity is used for values that come from the system (entities published by a dialog). These values could also originate from an entity annotated by QRef in the query, but this is not necessarily the case. SearchAnswerValue is used for values that come from the system as part of the answer of the user query. For example: U: Wife of Barack Obama G: Barack Obama's wife is Michelle Obama Here "Barack Obama" can have an ArgumentProvenance of PreviousQuery, or AttentionalEntity if a dialog publishes that entity and the interpretation pulls the value from it. "Michelle Obama" can have an ArgumentProvenance of SearchAnswerValue, or AttentionalEntity if the dialog publishes that entity and the interpretation pulls the value it.
     */
    currentQuery?: Schema$KnowledgeAnswersIntentQueryArgumentProvenanceCurrentQuery;
    injectedContextualSchema?: Schema$KnowledgeAnswersIntentQueryArgumentProvenanceInjectedContextualSchema;
    previousQuery?: Schema$KnowledgeAnswersIntentQueryArgumentProvenancePreviousQuery;
    previousResponseMeaning?: Schema$KnowledgeAnswersIntentQueryArgumentProvenancePreviousResponseMeaning;
    previousTaskState?: Schema$KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskState;
    searchAnswerValue?: Schema$KnowledgeAnswersIntentQueryArgumentProvenanceSearchAnswerValue;
  }
  /**
   * The value is carried over from an attentional entity. For example, in a dialog about a movie that publishes an attentional entity for /m/matrix: U: What is the cast. [Cast(location=/m/matrix)] G: The cast includes Keanu Reeves and others. U: Great, buy some tickets. [BuyTickets(movie=/m/matrix)] On the second user query, the "movie" argument would have a provenance of ATTENTIONAL_ENTITY.
   */
  export interface Schema$KnowledgeAnswersIntentQueryArgumentProvenanceAttentionalEntity {
    /**
     * This key can be used to recover the attentional entity from the corresponding attentional_entities::EntityCache.
     */
    attentionalEntityKey?: string | null;
    /**
     * Source information from the AttentionalEntityReader.
     */
    mentionProperties?: Schema$AttentionalEntitiesMentionProperties;
  }
  /**
   * NOTE: These comments should stay in sync with the comments in logs/proto/knowledge/interpretation/intent_query.proto LINT.IfChange The argument comes from the current query. For example: U: Book a hotel in Paris. [BookHotel(location=/m/paris)] The "location" argument would have a provenance of CURRENT_QUERY.
   */
  export interface Schema$KnowledgeAnswersIntentQueryArgumentProvenanceCurrentQuery {
    /**
     * The span(s) in the query where the value comes from. Note that if the argument is split across the current and previous query, this message should *NOT* be populated. Please use PreviousQuery below, populating it's eval-data fields accordingly.
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData[];
    neuralLocationAnnotator?: Schema$KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotator;
  }
  /**
   * The value is carried from injected contextual schema. Such schemas can be injected by go/qu-biasing-config for particular clients when their biasing configs are triggered for their traffic Config: (if QRewrite source == CARS_IMMERSIVE then inject LocalCarListings and Cars) Context: (QRewrite source == CARS_IMMERSIVE) U: Red [LocalCarListings(Cars() & RelatedTo(/m/red))] In this case, both LocalCarListings and Cars are spanless injected contextual schemas.
   */
  export interface Schema$KnowledgeAnswersIntentQueryArgumentProvenanceInjectedContextualSchema {}
  /**
   * The value is used for CurrentQuery.annotator and PreviousQuery.annotator to indicate what annotator annotated the argument
   */
  export interface Schema$KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotator {}
  /**
   * The value is carried over from either the previous winning IntentQuery or an entity annotated by QRef in a previous query. For example: U: How old is Obama. [Age(person=/m/obama)] G: Barack Obama is 56 years old. U: Who is his wife. [Spouse(person=/m/obama)] The "person" argument would have a provenance of PREVIOUS_QUERY. However, if a dialog publishes an attentional entity for "Obama", the "person" argument can have a provenance of ATTENTIONAL_ENTITY instead. This includes arguments with provenance that spans both the current and previous query.
   */
  export interface Schema$KnowledgeAnswersIntentQueryArgumentProvenancePreviousQuery {
    /**
     * The span(s) in the current query where the value comes from. This is used when the argument spans both the current and previous query. Eg jfk death -\> [death, when] spans both queries.
     */
    currentQueryEvalData?: Schema$NlpSemanticParsingAnnotationEvalData[];
    /**
     * The span(s) in the query where the value comes from.
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData[];
    /**
     * The event ID of the query where this value was pulled from.
     */
    eventId?: Schema$EventIdMessage;
    neuralLocationAnnotator?: Schema$KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotator;
    role?: Schema$KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRole;
    source?: string | null;
  }
  /**
   * The role that this data played in the previous query.
   */
  export interface Schema$KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRole {
    intentId?: string | null;
    slotName?: string | null;
  }
  export interface Schema$KnowledgeAnswersIntentQueryArgumentProvenancePreviousResponseMeaning {}
  /**
   * Value is derived from previous task state (go/taskstates).
   */
  export interface Schema$KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskState {
    /**
     * Argument names in the DialogIntentState that the argument corresponds to. This is repeated so it can handle complex argument update paths. (ordered from outermost argument to innermost argument)
     */
    argumentName?: string[] | null;
    /**
     * The span(s) in the current query (if any) used to resolve the previous query's DIS. Example: U: Barack Obama G: Do you want his age or his height? U: The first one. G: Age(/m/obama) In this example, the intent is derived from the previous query's DIS, but also needs to be resolved in the current query since the user was presented with multiple options.
     */
    currentQueryEvalData?: Schema$NlpSemanticParsingAnnotationEvalData[];
    /**
     * The id of the specific DialogIntentState instance that the argument corresponds to.
     */
    dialogIntentStateId?: string | null;
    /**
     * Intent name of the DialogIntentState that the argument corresponds to.
     */
    intentName?: string | null;
    listCandidate?: Schema$KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidate;
    previousFunctionCall?: Schema$KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCall;
  }
  /**
   * The value is carried over from a field_candidate in a DialogIntentState. For example: U: Send a message to John. G: Which John do you want to message? U: John A. [ListPresentationIntent(contact_disambiguation.person=0)] On the second user query, the "contact_disambiguation.person" argument would have a provenance of PREVIOUS_TASK_STATE_LIST_CANDIDATE.
   */
  export interface Schema$KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStateListCandidate {
    /**
     * The presented_index of the field_candidate in the DialogIntentState field_signals that the argument corresponds to.
     */
    candidateIndex?: number | null;
  }
  /**
   * The value was carried over from the previous function call. For example: U: Create an alarm titled "Wake". [CreateAlarm(title=Wake)] G: Sure, at what time? U: 5 am. [CreateAlarm(title=Wake,time=5am)] On the second user query, the "title" argument would have a provenance of PREVIOUS_TASK_STATE.
   */
  export interface Schema$KnowledgeAnswersIntentQueryArgumentProvenancePreviousTaskStatePreviousFunctionCall {}
  /**
   * Signals about an anaphor in the query: for example an occurrence of the pronoun "it".
   */
  export interface Schema$KnowledgeAnswersIntentQueryArgumentProvenanceQueryAnaphor {
    /**
     * If populated, the spans in the current query where this value was annotated. This is a repeated field because some values can be annotated from a set of discontiguous spans (e.g. some intent phrases), but in most cases this field will contain only one item or it will be empty (for values inferred from context without the use of anaphora).
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData[];
  }
  /**
   * The value was carried over from a SearchAnswerValue triggered by a previous query (go/search-answer-values). For example: U: Movies with Tom Cruise. [Movies(actor=/m/tom_cruise)] G: Tom Cruise's movies include Top Gun, The Mummy, and 52 others. U: Reviews for the second one. [Reviews(movie=/m/the_mummy)] The "movie" argument in the last query would have a provenance of SEARCH_ANSWER_VALUE.
   */
  export interface Schema$KnowledgeAnswersIntentQueryArgumentProvenanceSearchAnswerValue {
    /**
     * This identifies the SearchAnswerValues where this value was pulled from.
     */
    eventId?: Schema$EventIdMessage;
    /**
     * Each SearchAnswerValue can have a primary value and a list of metadata values. If this index is set, this value was pulled from the metadata value at this index, otherwise it was pulled from the primary value.
     */
    metadataValueIndex?: number | null;
    /**
     * The display text of this answer value. It's taken from the search answer value display text if present, or the canonical name if it's an entity.
     */
    text?: string | null;
    /**
     * The index of the SearchAnswerValue where this value was pulled from.
     */
    valueIndex?: number | null;
  }
  /**
   * A message representing the signals associated with an argument. NEXT ID TO USE: 58 For //depot/google3/logs/proto/knowledge/interpretation/intent_query.proto in the "ThenChange", fields under Argument.signals in the serving proto are stored directly under Argument on the logging side. For example, see http://google3/nlp/semantic_parsing/data_management/logs/web_logs/semantic_logging_converters/semantic_logging_request_argument_converter.cc?l=58&rcl=322925428. LINT.IfChange
   */
  export interface Schema$KnowledgeAnswersIntentQueryArgumentSignals {
    /**
     * Whether this argument was added by CloseAnswers in Postref. This bit is used to mark the corresponding interpretation/intent query as such by setting is_close_interpretation bit.
     */
    addedByCloseAnswers?: boolean | null;
    /**
     * For this argument, backend performed fuzzy match.
     */
    allowedFuzzyMatch?: boolean | null;
    /**
     * Relationships between entities
     */
    annotatedRelationship?: Schema$LogsSemanticInterpretationIntentQueryWebrefEntityRelationship[];
    /**
     * Signals to facilitate orchestration of TUIG annotations.
     */
    annotationLayerSignals?: Schema$KnowledgeAnswersIntentQueryAnnotationLayerSignals;
    /**
     * One or more ChainIds from a ChainAnnotation whose "organization_mid" matches the MID. As of 2021-01 multiple chain_ids may be specified if the organization for MID controls multiple chains. See go/chains-lckp-robust-triggering for motivation.
     */
    chainId?: Schema$LocalsearchChainId[];
    /**
     * If the literal.obj_type of the argument value is ID (Entity), this stores cluster scoring information for that entity, if the entity belongs to a cluster.
     */
    clusterInfo?: Schema$QualityViewsExtractionClusterInfo;
    /**
     * If the literal.obj_type of the argument value is ID (Entity), this represents the collection that the entity in this argument is a member of.
     */
    collectionMembership?: Schema$KnowledgeAnswersIntentQueryCollectionMembership[];
    /**
     * How this argument was resolved through context from a previous query. Examples: obama -\> "he" is resolved from the Obama entity starbucks -\> Q2 is resolved from the list of shops (Attentional Entities)
     */
    contextResolution?: string | null;
    /**
     * If the literal.obj_type of the argument value is ID (Entity), this represents freebase types of the entity in this argument.
     */
    deprecatedFreebaseType?: string[] | null;
    /**
     * A list of mids that "support" this argument in voting, i.e., results that support these mids will be treated as if they support the argument. This field has been deprecated in favor of related_entity. b/27363861
     */
    deprecatedSupportingMid?: string[] | null;
    /**
     * Signals about what other entities this entity implies / is implied by. This is useful for grounding. Example: b/138388207: suppressing song intents if the artist entity doesn't link to the song title. This value specifies the order of annotations in a QRef annotation chain so they can refer to each other.
     */
    entityNumber?: number | null;
    /**
     * Signals about what other entities this entity implies / is implied by. This is useful for grounding. Example: b/138388207: suppressing song intents if the artist entity doesn't link to the song title.
     */
    entityRelationship?: Schema$NlpSemanticParsingQRefAnnotationEntityRelationship[];
    /**
     * Status indicating whether the user has completely expressed the semantics of the argument.
     */
    expressionStatus?: Schema$NlpSemanticParsingExpressionStatus;
    /**
     * Whether the argument entity comes from a manual graphic symbol annotation. This is later used as a heuristic for poor web result quality.
     */
    fromManualSymbolAnnotation?: boolean | null;
    /**
     * Whether the argument entity comes from a graphic symbol annotation. This is later used as a heuristic for poor web result quality.
     */
    fromSymbolAnnotation?: boolean | null;
    /**
     * The gaia id for the entity (person or plus page).
     */
    gaiaId?: string | null;
    groundingSignals?: Schema$KnowledgeAnswersIntentQueryGroundingSignals;
    /**
     * If the argument is entity, the ungrounded type the entity is. For example, the entity argument is /m/0p83l (Jasmine), the value of this field should be "Plant" if it is present.
     */
    isAUngroundedTypeOf?: string | null;
    /**
     * If true, the value of the argument is populated with the default value specified by the system if the value can't be inferred from the input query. In IntentConfig case, the default value is specified by using IntentConfig.slot.default_value.
     */
    isDefaultValue?: boolean | null;
    /**
     * Set when the argument has an enum value - a normalized_string_type from the intent catalog.
     */
    isEnum?: boolean | null;
    /**
     * Set when the eval_data was not derived at parsing time, but heuristically determined by matching the ArgumentValue to an annotation/query fragment.
     */
    isEvalDataHeuristic?: boolean | null;
    /**
     * Whether this annotation was propagated as part of a Genie rewrite (go/genie-aqua).
     */
    isGenieAnnotation?: boolean | null;
    /**
     * Whether this argument was annotated by Intentgen QUIK model (go/intentgen-quik)
     */
    isIntentgenAnnotation?: boolean | null;
    /**
     * Whether this argument was annotated by nimble (go/nimble-annotator)
     */
    isNimbleAnnotation?: boolean | null;
    /**
     * Entity location information (latitude/longitude) from freebase.
     */
    location?: Schema$GeostorePointProto;
    /**
     * The usual semantic role associated with the signal from lightweight tokens attached to this argument span.
     */
    locationMarkersSignals?: Schema$KnowledgeAnswersIntentQueryLocationMarkersSignals;
    /**
     * Signals about the media entity for this argument.
     */
    mediaEntitySignals?: Schema$KnowledgeAnswersIntentQueryMediaEntitySignals;
    /**
     * List of QRef implied entities merged into this entity during parsing. Clients should not rely on the order, as it is derivation-dependent.
     */
    mergedImpliedEntity?: Schema$KnowledgeAnswersIntentQueryImpliedEntity[];
    /**
     * For collection arguments, it is useful to save what was the original mid that qref annotated. For example, if the collection is /collection/films, we'll have the mid for /en/film here (/m/02vxn).
     */
    midEquivalentToCollection?: string | null;
    /**
     * Whether there were multiple equally good matches from horizontal_list_selection.
     */
    multipleHorizontalListSelectionMatches?: boolean | null;
    /**
     * Signals derived from Munin Function call annotations.
     */
    muninSignals?: Schema$KnowledgeAnswersIntentQueryMuninSignals;
    /**
     * Additional signals for on-device annotations.
     */
    onDeviceAnnotationSignals?: Schema$KnowledgeAnswersIntentQueryOnDeviceAnnotationSignals;
    /**
     * The oyster feature id. NOTE: As of Mar 2017, the cell ID field of the feature ID might not be set. See http://b/35447230#comment10
     */
    oysterId?: Schema$GeostoreFeatureIdProto;
    /**
     * Experiment ID for experiments that were used to parse this FunctionCall. Empty indicates no experiments used.
     */
    parsedDueToExperiment?: string[] | null;
    /**
     * Personal entities are compound entities made up of entities and their attributes, where the entities can be compound too. E.g., "my father's mother" can have a summary node annotation of "Mother(Father(Myself))"
     */
    personalEntity?: Schema$KnowledgeAnswersIntentQueryPersonalEntity[];
    /**
     * Information about where the value of this argument came from. For example, it could have been explicitly provided in the query, pulled in from the previous state, or pulled from attentional entities.
     */
    provenance?: Schema$KnowledgeAnswersIntentQueryArgumentProvenance[];
    /**
     * The QRef confidence score for an entity argument.
     */
    qrefConfidenceScore?: number | null;
    /**
     * The index of the QueryJoin interpretation from which this annotation is taken. We copy over the value given by nlp.semantic_parsing.annotators.QrefAnnotator. The value will be "-1" if the annotation is coming from low confidence Qref annotations. NOTE - this is generated from as QRef's interetation_number.
     */
    qrefInterpretationIndex?: number | null;
    /**
     * A copy of the span of canonical (raw) parser input text corresponding to this annotation.
     */
    rawQueryText?: string | null;
    /**
     * List of entities that are semantically related to the argument as well as details of the relationship.
     */
    relatedEntity?: Schema$NlpSemanticParsingRelatedEntity[];
    /**
     * Relatedness Matrix signals about this argument, e.g., query_popularity.
     */
    relatednessSignals?: Schema$KnowledgeAnswersIntentQueryRelatednessSignals;
    /**
     * Whether this argument was resolved through context from a previous query. Examples: obama -\> "he" is resolved from the Obama entity starbucks -\> Q2 is resolved from the list of shops
     */
    resolvedFromContext?: boolean | null;
    /**
     * Whether this argument was resolved from a pronoun mention in the query. Eg: [how old was obama when *he* became president]
     */
    resolvedFromPronoun?: boolean | null;
    responseMeaningSignals?: Schema$KnowledgeAnswersIntentQueryResponseMeaningSignalsResponseMeaningSignals;
    /**
     * The list of result supports for this Argument.
     */
    resultSupport?: Schema$UniversalsearchNewPackerKnowledgeResultSupport[];
    /**
     * Signals derived from SAFT.
     */
    saftSignals?: Schema$KnowledgeAnswersIntentQuerySaftSignals;
    /**
     * Equivalent shopping ids for the argument.
     */
    shoppingIds?: Schema$KnowledgeAnswersIntentQueryShoppingIds;
    /**
     * go/stbr supportthis is an
     */
    supportTransferRules?: Schema$LogsSemanticInterpretationIntentQuerySupportTransferRule[];
    /**
     * Support Transfer signals for this entity.
     */
    supportTransferSignals?: Schema$KnowledgeAnswersIntentQuerySupportTransferSignals;
    /**
     * Type of ungrounded argument. It is exclusively used when simple_value.ungrounded_value is populated.
     */
    ungroundedValueType?: Schema$KnowledgeAnswersValueType;
    /**
     * Webref entity index for this argument, necessary for interpreting the relationship structure, and the list to index into. Specifically we need this to understand qref implications since they edges are represented with entity indexes.
     */
    webrefEntitiesIndex?: number | null;
    /**
     * This represents which list entities index refers to.
     */
    webrefListSource?: string | null;
  }
  /**
   * A message representing the value of an argument. All types in the "value" oneof should have a corresponding field in the ValueType or OpaqueType protos defined in knowledge/answers/config/value.proto. This is specified by annotating each ArgumentValue type with options of the form (value_type_name) = A unit test ensure that this field is set and is valid for all types in ArgumentValue. A small number of special cases (such as funcall and simple_value) are allowed to omit the annotation. See intent_query_proto_test.cc for details. Note: If you are trying to add a new OpaqueType, stop; OpaqueType is deprecated, refer to go/opaque_type for details. If you think this is the only way to implement your feature, attend an office hours (go/meaning-help) and discuss with the MRF team. Next Id: 41
   */
  export interface Schema$KnowledgeAnswersIntentQueryArgumentValue {
    /**
     * Custom type used by actions-on-google in-dialog queries. See go/3p-custom-intents-wrt-meaning-catalog
     */
    aogSlot?: Schema$NlpSemanticParsingProtoActionsOnGoogleAogSlot;
    /**
     * Device actions custom types.
     */
    appAnnotation?: Schema$NlpSemanticParsingAppAnnotation;
    audio?: Schema$NlpSemanticParsingModelsMediaAudio;
    /**
     * Calendar custom types. Details in go/cal-ref.
     */
    calendarEvent?: Schema$AssistantApiCoreTypesCalendarEvent;
    /**
     * Details in go/multi-account-event-representation.
     */
    calendarEventWrapper?: Schema$AssistantApiCoreTypesCalendarEventWrapper;
    calendarReference?: Schema$QualityQrewriteCalendarReference;
    /**
     * Custom type used by Complex Queries. This is populated based on the output of the RPC to the Complex Queries Boq node.
     */
    complexQueriesRewrite?: Schema$QualityGenieComplexQueriesComplexQueriesOutputRewrite;
    /**
     * Component reference between WebrefEntity and Mention. This should only ever be set in argument values in WebrefEntities (e.g. in a QueryJoin). The processing expectation is that the value including the component reference is discarded altogether and replaced by reference target. Use QueryJoinToMeaningStructConverter to perform the replacement. An example value parallel to this reference may exist, but it's meant purely for human consumption and should not be used.
     */
    componentReference?: Schema$RepositoryWebrefComponentReference;
    /**
     * A value that is a coreference or variable binding to some other part of the tree. See go/mrf-variables.
     */
    coreference?: Schema$KnowledgeAnswersIntentQueryCoreference;
    /**
     * *** Opaque types that are likely to become fully supported: *** Represents: date and time expressions. Annotated by: datetime subgrammar.
     */
    dateTime?: Schema$NlpSemanticParsingDatetimeDateTime;
    /**
     * Media custom types. For example use, see go/valyrian-media-dd.
     */
    device?: Schema$NlpSemanticParsingModelsMediaCastDeviceAnnotation;
    /**
     * DeviceId custom types. Details in go/reply-broadcast
     */
    deviceId?: Schema$AssistantApiCoreTypesDeviceId;
    /**
     * DeviceUserIdentity custom types. Details in go/reply-broadcast
     */
    deviceUserIdentity?: Schema$AssistantApiCoreTypesDeviceUserIdentity;
    /**
     * Represents: duration expressions (e.g. 5 minutes). Annotated by: datetime subgrammar.
     */
    duration?: Schema$NlpSemanticParsingDatetimeDuration;
    /**
     * *** Fully supported types *** An argument can also be a function call.
     */
    funcall?: Schema$KnowledgeAnswersIntentQueryFunctionCall;
    /**
     * HomeAutomation custom types. Details in go/smarthome_with_monastery.
     */
    homeAutomationDevice?: Schema$AssistantVerticalsHomeautomationProtoHomeAutomationDevice;
    /**
     * Represents: location expressions. Annotated by: location subgrammar.
     */
    location?: Schema$NlpSemanticParsingLocalLocation;
    media?: Schema$NlpSemanticParsingModelsMediaMediaAnnotation;
    /**
     * Custom type used by tap-to-read for embedding a MessageNotification message in a GetMessageContent intent.
     */
    messageNotification?: Schema$AssistantApiCoreTypesMessageNotification;
    /**
     * Represents: money expressions (e.g. 25$). Annotated by: number subgrammar.
     */
    money?: Schema$NlpSemanticParsingModelsMoneyMoney;
    /**
     * Custom type used by NarrativeNews. This is populated by the narrative news provider annotator, and it differs semantically from a mid for a news brand in that it doesn't refer to the field of widely known news brands but rather but to the specific audio news RSS feeds that the narrative news feature serves. (There is of course substantial overlap between those two concepts)
     */
    narrativeNewsProvider?: Schema$NlpSemanticParsingModelsNarrativeNewsNewsProvider;
    /**
     * Represents: number expressions. Annotated by: number subgrammar.
     */
    number?: Schema$NlpSemanticParsingNumberNumber;
    /**
     * OnDevice custom types. Device on which an intent should be fulfilled. Differs semantically from device fields used by Media and HomeAutomation: this is annotated by the on_device subgrammar, and will not output any metadata beyond what the subgrammar outputs. See go/on_device_induction_quality.
     */
    onDevice?: Schema$NlpSemanticParsingModelsOnDevice;
    /**
     * Represents: structured person names, including common names and personal contacts. Annotated by: go/person-subgrammar.
     */
    person?: Schema$NlpSemanticParsingModelsPersonPerson;
    /**
     * Entity parsed from manual grammar interpretation in the Personal Intelligence domain.
     */
    personalIntelligenceEntity?: Schema$NlpSemanticParsingPersonalIntelligenceEntity;
    productivityListItem?: Schema$AssistantProductivityListItem;
    /**
     * Represents: intervals of recurrence for repeated tasks. See go/recurrence-subgrammar Annotated by: recurrence subgrammar.
     */
    recurrence?: Schema$NlpSemanticParsingModelsRecurrence;
    reminder?: Schema$QualityActionsReminder;
    /**
     * Sensitive value, see go/sensitive-intents and go/a4w-multi-turn-dialog
     */
    sensitiveValue?: Schema$KnowledgeAnswersIntentQuerySensitiveArgumentValueGuard;
    /**
     * Argument level query sensitivities. 1) Statically defined Sensitivity is copied from IntentSlot at serving time so it can be propagated along with FunctionCall to places where the Intent Catalog is not available. See go/sensitive-intents for details. 2) For the same reason, contextual sensitivites (eg., from AttentionalEntity mentions) are populated here too. See go/tagging-sensitive-ae for details.
     */
    sensitivity?: Schema$KnowledgeAnswersSensitivitySensitivity[];
    shoppingMerchant?: Schema$NlpSemanticParsingModelsShoppingAssistantMerchant;
    /**
     * Shopping custom types. See go/sopa-attentional.
     */
    shoppingOffer?: Schema$NlpSemanticParsingModelsShoppingAssistantOffer;
    shoppingProduct?: Schema$NlpSemanticParsingModelsShoppingAssistantProduct;
    shoppingProductExpression?: Schema$NlpSemanticParsingModelsShoppingAssistantProductExpression;
    shoppingStore?: Schema$NlpSemanticParsingModelsShoppingAssistantStore;
    /**
     * When literal is a datetime, it's really just an ISO 8601 datetime string. This case will eventually be replaced with the date_time field, which is more expressive and can also represent recurrences, ranges, etc. Likewise, simple_value will replace the other types of simple values that literal is currently being used to represent.
     */
    simpleValue?: Schema$KnowledgeAnswersIntentQuerySimpleValue;
    /**
     * Productivity custom types. Team: go/productivity-assistance.
     */
    timer?: Schema$QualityActionsTimer;
    /**
     * Represents: timezone expressions (e.g. Eastern Daylight Time). Annotated by: datetime subgrammar.
     */
    timezone?: Schema$NlpSemanticParsingDatetimeTimeZone;
  }
  /**
   * Contains an attribute id and it's completion score.
   */
  export interface Schema$KnowledgeAnswersIntentQueryAttributeSignal {
    attributeId?: string | null;
    score?: number | null;
  }
  /**
   * A message representing the collection membership of an entity.
   */
  export interface Schema$KnowledgeAnswersIntentQueryCollectionMembership {
    /**
     * Human readable id of the collection.
     */
    collectionId?: string | null;
    /**
     * Identifier of the collection, usually a MID (/m/xyz or /g/zyw).
     */
    collectionMid?: string | null;
    /**
     * The collection score for a entity.
     */
    collectionScore?: number | null;
    /**
     * Different types of scores for the collection. Each score type has at most one score.
     */
    score?: Schema$KnowledgeAnswersIntentQueryCollectionScore[];
  }
  export interface Schema$KnowledgeAnswersIntentQueryCollectionScore {
    scoreType?: string | null;
    scoreValue?: number | null;
  }
  /**
   * A message representing a coreferenced value defined elsewhere in the meaning struct.
   */
  export interface Schema$KnowledgeAnswersIntentQueryCoreference {
    /**
     * A coreference is represented by an argument path starting from the root of the whole tree to the referenced value.
     */
    argPath?: Schema$KnowledgeAnswersIntentQueryArgPath;
  }
  /**
   * Signals associated with CustomVehicleActionArgumentAnnotator annotations.
   */
  export interface Schema$KnowledgeAnswersIntentQueryCustomVehicleActionArgumentAnnotatorSignals {
    /**
     * Stores any additional data which is required only at the intent fulfilment phase.
     */
    additionalAnnotationData?: {[key: string]: string} | null;
  }
  /**
   * Signals associated with FreetextAnnotator annotations. Empty. The signal being present is enough for the conformance checking library to be able to check.
   */
  export interface Schema$KnowledgeAnswersIntentQueryFreetextAnnotationSignals {}
  /**
   * A message representing the function call of an answers intent query. Next ID: 19 Important: If you add new fields that do not reflect signals data, but actual semantics of the FunctionCall, please also update CreateFuncallCopyWithoutSignals and CreateFuncallCopyWithArgumentSignals in function_call_utils. LINT.IfChange
   */
  export interface Schema$KnowledgeAnswersIntentQueryFunctionCall {
    /**
     * A list of arguments of this function call.
     */
    argument?: Schema$KnowledgeAnswersIntentQueryArgument[];
    /**
     * The corresponding meaning catalog version that was used to generate this FunctionCall.
     */
    catalogVersion?: string | null;
    /**
     * Contextual Sensitivity (go/contextual-sensitivity) metadata indicating that a policy- or privacy- sensitive conversation context (previous queries, rewritten user queries, and previous system responses, like attentional entities) is used to generate this FunctionCall. This needs propagation (1) from Interp to DialogIntentState (DIS) (see b/148479837) and (2) from QRewrite/QUS down to Assistant Server's memory finalizer. One can use knowledge/answers/sensitivity/sensitivity_reader.h to parse this proto. NOTE(b/149091449): This is part of the migration of contextual sensitivity protos from Interp sensitivity extension. (nlp::semantic_parsing::sensitivity) to this proto field. See the bug to track the migration progress and for more details.
     */
    contextualSensitivity?: Schema$KnowledgeAnswersSensitivitySensitivity[];
    /**
     * Contains data about which remodelings are being used for this funcall. For more information see go/meaning-remodeling-framework.
     */
    enabledRemodelings?: Schema$NlpMeaningMeaningRemodelingControl;
    /**
     * A list of token lists that were ignored during parsing because they are known context phrases for this interpretation. For example, for query [tell me how tall height of Obama really], assuming "tell me", "tall", "of", "really" are explained and thus ignored, with corresponding prior 0.9, 0.8, 0.7, 0.6, following ignored tokens will be populated: { ignored_tokens { token { ngram: "tell me", prior: 0.9\} score: 0.9 \} ignored_tokens { token { ngram: "tall", prior: 0.8\} token { ngram: "of", prior: 0.7\} score: 0.56 // currently score = prior1 * prior2 * ... * prior N \} ignored_tokens { token { ngram: "really", prior: 0.6\} score: 0.6 \} \} These tokens can serve two purpose: 1) debug info to show why an interpretation is generated; 2) carry the signals for downstream usage. Note: This field is under active development, and significant changes could happen. Please contact porky-pig@ if you want to use it.
     */
    ignoredTokens?: Schema$KnowledgeAnswersIntentQueryTokens[];
    /**
     * The primary key for this FunctionCall. Note: This is still under development and not available for general use. Contact meaning-platform-eng@ for questions.
     */
    key?: Schema$KnowledgeAnswersMeaningSchemaKey;
    /**
     * The marker specifies the purpose of this meaning struct / function call: Is it asking a question, and if yes, for which slot(s)? Is it a command, statement, etc? This corresponds to a (very coarse) notion of dialog acts. In the absence of this field, it will be inferred using the following algorithm (subject to marker applicability rules specified in marker.proto, see also go/requested-slots): 1) Use the underlying Meaning Schema's default marker, if applicable. 2) Assume that the Meaning Struct is polar or a statement. The presence of a marker will affect the value type of this function call.
     */
    marker?: Schema$KnowledgeAnswersMarker;
    /**
     * A flattened representation of all intent modifiers that apply to this function call.
     */
    modifiers?: Schema$KnowledgeAnswersIntentModifiers;
    /**
     * Name of this function call. The name must be present. If it is omitted, the FunctionCall is not well-formed.
     */
    name?: string | null;
    /**
     * Intent level query sensitivity (go/sensitive-intents). This metadata comes directly from Intent Catalog, indicating a single-shot query sensitivity without putting context into considerations. Therefore, this requires a one-to-one match with each intent registered in Intent Catalog.
     */
    sensitivity?: Schema$KnowledgeAnswersSensitivitySensitivity;
    /**
     * Signals at the function call level
     */
    signals?: Schema$KnowledgeAnswersIntentQueryFunctionCallSignals;
    /**
     * A list of tokens that were ignored during parsing that cannot be explained by context phrases.
     */
    unexplainedTokens?: Schema$KnowledgeAnswersIntentQueryTokens[];
  }
  /**
   * Next ID: 37
   */
  export interface Schema$KnowledgeAnswersIntentQueryFunctionCallSignals {
    /**
     * The argument mid that was used to compose the entity for a concept interpretation, along with the intent_composing_mid (one of the intent's equivalent MIDs).
     */
    argumentComposingMid?: string | null;
    /**
     * The attributes from which this intent was generated during execution of AttributeSignalsProvider. |attribute_signals| is only populated for single entity funcalls.
     */
    attributeSignals?: Schema$KnowledgeAnswersIntentQueryAttributeSignal[];
    /**
     * An entity that represents the concept of an entity-attribute intent by being composed of an intent equivalent MID and the argument MID.
     */
    conceptEntityMid?: string | null;
    confidenceLevel?: string | null;
    /**
     * FunctionCall-s that this funcall was deduped against.
     */
    dedupedFuncalls?: Schema$KnowledgeAnswersIntentQueryFunctionCall[];
    /**
     * Status indicating whether the user has completely expressed their intended semantics. (See go/streaming-nlu-fulfilment-protocol-v1 for more info. )
     */
    expressionStatus?: Schema$NlpSemanticParsingExpressionStatus;
    freefolksTrigger?: string | null;
    /**
     * Grounding signals for ranking/filtering, as well as whether to use Grounding Box and PGRP in AnswersRewriter. See comment on GroundingSignals for details.
     */
    groundingSignals?: Schema$KnowledgeAnswersIntentQueryGroundingSignals;
    /**
     * Used to indicate that an interpretation is high confidence and triggers different voting behavior. This bit should only be set for verticals. DEPRECATED. Use confidence_level instead.
     */
    highConfidence?: boolean | null;
    intentAnnotationSources?: string[] | null;
    /**
     * An intent_relevant_mid that was used to compose the entity for a concept interpretation, along with argument_composing_mid (the question's argument MID).
     */
    intentComposingMid?: string | null;
    /**
     * Information about where the value of this intent came from. For example, it could have been explicitly provided in the query, pulled in from the previous dialog state, or pulled from previous queries.
     */
    intentProvenance?: Schema$KnowledgeAnswersIntentQueryArgumentProvenance[];
    /**
     * KG mids of entities that represent this intent. These entities are seen as equivalent to the Intent definition, and are specified in the Intent Catalog as relevant_mid.
     */
    intentRelevantMid?: string[] | null;
    /**
     * Whether the interpretation was generated using similar queries in POSTREF. In case POSTREF_AQUA generated the same entity-attribute interpretation, this is still set to true.
     */
    isCloseInterpretation?: boolean | null;
    /**
     * Denotes whether this is an intent being fulfilled from user tapping a disambiguation card. More info in go/cardea-deck.
     */
    isDisambiguationCardIntent?: boolean | null;
    /**
     * Denotes whether this is a sub-intent of an ambiguous SystemUncertain intent go/intent-disambiguation.
     */
    isDisambiguationIntent?: boolean | null;
    /**
     * Whether the interpretation was generated from the neural categorical parser.
     */
    isNeuralCategoricalInterpretation?: boolean | null;
    /**
     * Denotes this is a sub-intent used for composing an Assistant UI response. The assistant dialog should output ui_composition_shelf in the SystemResponse if it can fulfill the intent. More info in go/davinci-design and go/davinci-di-fulfillment
     */
    isUiCompositionIntent?: boolean | null;
    /**
     * Information about Local results to be used in the Packer for Local Categorical derived intent deduplication and conformance.
     */
    localSignals?: Schema$KnowledgeAnswersIntentQueryLocalSignals;
    /**
     * A tag to annotate user's journey (e.g., JourneyFollowCampusUpdates). This will be used for Journey OSRP demo (go/josrp-sprint). !!NOTE!! This field is reserved for Journey OSRP demo, and will be deprecated shortly after its completion. DO NOT USE.
     */
    osrpJourneyTag?: string | null;
    /**
     * Experiments that caused this FunctionCall to parse, without which this would not have parsed.
     */
    parsedDueToExperiment?: string[] | null;
    /**
     * Parsing signals for ranking/filtering.
     */
    parsingSignals?: Schema$KnowledgeAnswersIntentQueryParsingSignals;
    /**
     * Identifies a score, determined before fulfillment but after grounding. Written by the Prefulfillment Ranker, and used as a signal for ACE Ranking.
     */
    prefulfillmentRankingScore?: number | null;
    /**
     * All the input signals to the Prefulfillment Ranker.
     */
    prefulfillmentSignals?: Schema$AssistantPrefulfillmentRankerPrefulfillmentSignals;
    /**
     * Describes how this intent was resolved via external data (either elsewhere in the query, or in a previous query).
     */
    referentialResolution?: Schema$KnowledgeAnswersDialogReferentialResolution;
    /**
     * The id of the summary node if this funcall represents an mdvc interpretation
     */
    refxSummaryNodeId?: string | null;
    /**
     * Signal data from SRM generation. Solely used internally. See: go/srm-design.
     */
    responseMeaningSignals?: Schema$KnowledgeAnswersIntentQueryResponseMeaningSignalsResponseMeaningSignals;
    /**
     * The list of result supports for this FunctionCall.
     */
    resultSupport?: Schema$UniversalsearchNewPackerKnowledgeResultSupport[];
    role?: string | null;
    /**
     * Identifies whether the Prefulfillment Ranker selected this intent for emission. This is needed temporarily while migrating intent emitters from ACE to QUS/PFR. See go/pfr-intent-emitter for more info
     */
    selectedByPrefulfillmentRanking?: boolean | null;
    /**
     * Equivalent shopping ids for the function call.
     */
    shoppingIds?: Schema$KnowledgeAnswersIntentQueryShoppingIds;
    /**
     * Additional intents to be used for intent scoring. This field must only be populated when we cannot find a single unified intent. For example, when we compute signals for a LocalEntities function call, this means we could not find a unified intent to capture all the local results. In this case, we add a fallback intent for each local result (e.g. GeoSchool, GeoRestaurant, and GeoBank if those are the results we show).
     */
    signalsFallbackIntents?: Schema$KnowledgeAnswersIntentQuerySignalComputationFallbackIntent[];
    /**
     * Identifies whether this intent intends to be scored and pruned by the prefulfillment ranker after intent-generation.
     */
    usesPrefulfillmentRanker?: boolean | null;
  }
  /**
   * Grounding-related signals to be propagated down stream. Next ID: 14
   */
  export interface Schema$KnowledgeAnswersIntentQueryGroundingSignals {
    /**
     * True if the argument was added during grounding. This signal is intended to be used with ArgumentSignals. Note that the added argument's value must be a FunctionCall that only contains resolutions, i.e. grounding cannot add/modify/delete any ungrounded values.
     */
    addedByGrounding?: boolean | null;
    /**
     * Score indicating how grounded the intent is, populated by the Grounding Box, used by the pre-fulfillment ranker, see http://go/prefulfillment-ranker.
     */
    groundabilityScore?: number | null;
    /**
     * Sum of the number of constraints used by the Grounding Box to ground each variable.
     */
    numConstraints?: number | null;
    /**
     * Sum of the number of constraints satisfied for each variable. Depending on the match score for a constraint, this number can be fractional and is in the range [0, num_constraints].
     */
    numConstraintsSatisfied?: number | null;
    /**
     * Number of groundable arguments in the parsed intent.
     */
    numGroundableArgs?: number | null;
    /**
     * Number of arguments that got actually grounded.
     */
    numGroundedArgs?: number | null;
    /**
     * Number of arguments, possibly nested, that the Grounding Box tried to ground.
     */
    numVariables?: number | null;
    /**
     * Number of arguments, possibly nested, that the Grounding Box was able to ground. This includes ambiguously grounded arguments.
     */
    numVariablesGrounded?: number | null;
    /**
     * PGRP outputs PROD_INTENT_FACTORY intent format by default. See go/intent-conversion-locations-in-sage. Experimental flags can change or make PGRP output additional intents formatted for PORTMON_FULFILLMENT (e.g. with RDs). This is used by the PortMon/ARM dark launch (go/arm-dark-launch-infra). Longer term, this will be replaced by DGS system-internal transformations (go/if-dgs).
     */
    pgrpOutputFormat?: string | null;
    provenance?: string | null;
    sentiment?: string | null;
    /**
     * If true, then GroundingBox and PGRP are used in AnswersRewriter to process the intent. Other post-processing steps, including IGDP, are adjusted accordingly. Note this will be removed once GroundingBox is fully launched and all prod traffic goes through it. Before that happens, each IG that needs to go through GB and PGRP (post GB ranking pruning) will need to explicitly set this field to true. See http://go/gb-impl and http://go/gb-post-ranker-pruner for details.
     */
    usesGroundingBox?: boolean | null;
  }
  /**
   * Identifiers are references to a specific entity of a specified type, such as a TIMER_ID XXX. For more backround and uses see go/grounding-common-ids.
   */
  export interface Schema$KnowledgeAnswersIntentQueryIdentifier {
    id?: string | null;
    idType?: string | null;
  }
  /**
   * Signals for $QRefImpliedEntities that are merged into entity arguments during parsing.
   */
  export interface Schema$KnowledgeAnswersIntentQueryImpliedEntity {
    /**
     * A copy of the span of canonical (raw) parser input text corresponding to this annotation. Copied from QRefAnnotation.annotated_span.
     */
    annotatedSpan?: string | null;
    /**
     * This field is used inside Aqua for evaluation purposes.
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * TODO (b/143536264): Create a new ImpliedTokens message and remove this. Whether the implied entity is ungrounded value, set to true when the entity doesn't have a KG mid.
     */
    isUngroundedValue?: boolean | null;
    /**
     * The KG mid of the implied entity.
     */
    mid?: string | null;
    /**
     * The QRef confidence (in [0, 1]) of the entity being correctly annotated.
     */
    qrefConfidenceScore?: number | null;
    /**
     * All ShoppingIds for this implied entity that need to be copied to IntentQuery (FunctionCall) if this implied entity is used in intent generation. See go/iql-shopping-ids for details.
     */
    shoppingIds?: Schema$KnowledgeAnswersIntentQueryShoppingIds;
  }
  /**
   * Mustang/Kgraph attachment to encode IQL expressions annotated by Webref, Pianno, and other applications. This is currently a prototype implementation. The attachment is not yet output in production. Please contact simonz@ for more info. The planned use-cases include: - Pianno page-level intents (go/pianno-design). - Compound entity representations (go/compounds-in-refx). See go/iql-in-wma for more details about IQL attachment and its encoding design. Next available tag: 5
   */
  export interface Schema$KnowledgeAnswersIntentQueryIndexingIQLAttachment {
    /**
     * The version of encoder for the IQL FunctionCalls. We bump up the version when, but not limited to, we change how an IQL is converted to a byte array, or the change of byte compression algorithm.
     */
    iqlEncodingVersion?: number | null;
    /**
     * A compressed byte array that represents IQL FunctionCalls. A list of IQL FunctionCalls are first encoded as a byte array. The byte array is then compressed. For more details on the encoding, see go/iql-in-wma.
     */
    iqlFuncalls?: string | null;
    /**
     * The Pianno confidence scores of all intents of the IQL FunctionCalls. For space reasons this is stored as a [0, 100] integer that represents the confidence up to two decimal points (fixed point). Convert it to confidence_score using the following formula: float pianno_confidence_score = pianno_confidence_score_e2 / 100.0f It should have the same number of elements as the IQL expressions after decoding. For non-Pianno top level intents, this score is 0.
     */
    piannoConfidenceScoreE2?: number[] | null;
    /**
     * A bit map indicating if the intents in the IQL FunctionCalls are top level intents for Pianno (go/pianno). This is a repeated field. In the event of more than 32 intents, the first uint32/ represents the 1st to the 32nd intents, and the second uint32 represents/ the 33rd to the 64th intents, and so on. Within each uint32, the bits are in reversed order, i.e. the right-most bit of the first uint32 indicating if the first intent in IQL expressions is a top level intent for Pianno. The prevailing (unused) bits of the last uint32 are filled with 0s.
     */
    piannoIqlBitmap?: number[] | null;
  }
  /**
   * A message that stores signals relating to a Local result.
   */
  export interface Schema$KnowledgeAnswersIntentQueryLocalResultSignals {
    /**
     * Geo intents corresponding to the gcids obtained from the Local result.
     */
    gcidIntent?: string[] | null;
    /**
     * Salient terms associated with this Local result based on the result gcids.
     */
    salientTermSet?: Schema$QualitySalientTermsSalientTermSet;
  }
  /**
   * A message that stores information about Local results to be used in the Packer for Local Categorical derived intent deduplication and conformance.
   */
  export interface Schema$KnowledgeAnswersIntentQueryLocalSignals {
    /**
     * Signals relating to each Local result.
     */
    localResultSignals?: Schema$KnowledgeAnswersIntentQueryLocalResultSignals[];
    /**
     * Minimum salient term similarity between Local results.
     */
    minSalientTermSimilarity?: number | null;
  }
  /**
   * Signals from LightweightToken. The span for an argument may have been extended to include lightweight token markers such as FROM or TO. This signal provides the semantics for the range extension.
   */
  export interface Schema$KnowledgeAnswersIntentQueryLocationMarkersSignals {
    /**
     * The type of the lightweight token match.
     */
    type?: string | null;
  }
  /**
   * Signals about the media entity.
   */
  export interface Schema$KnowledgeAnswersIntentQueryMediaEntitySignals {
    /**
     * For songs, this is the name of the primary artist, i.e. "Shallow" would "Lady Gaga" set.
     */
    artistTitle?: string | null;
    /**
     * Name of the media entity, i.e. "Lady Gaga".
     */
    name?: string | null;
  }
  /**
   * Signals derived from Munin Function call annotations.
   */
  export interface Schema$KnowledgeAnswersIntentQueryMuninSignals {
    /**
     * If the modifier is only a good soft modifier by itself, then we would trigger only if it's the only modifier
     */
    isIsolated?: boolean | null;
    /**
     * Signals for $ListQueryRuleWithSoftModifier. Collections allowed by the soft modifier.
     */
    softModifierCollection?: string[] | null;
    /**
     * If true, the text for this argument did not come from the query, but was generated somehow else.
     */
    textIsGenerated?: boolean | null;
  }
  /**
   * Signals associated with NimbleAnnotator annotations.
   */
  export interface Schema$KnowledgeAnswersIntentQueryNimbleAnnotationSignals {
    /**
     * Where the annotation has been read from.
     */
    annotationSource?: string | null;
    /**
     * A client-controlled identifier that the client can use to distinguish between different sets of annotations.
     */
    type?: string | null;
    /**
     * Version identifier used to isolate different clients from each other. A client should intersect this list of versions with the ones the client is interested in, and use the annotation if the intersection is non-empty.
     */
    version?: string[] | null;
  }
  /**
   * Signals associated with NTPRAnnotator annotations. Empty. The signal being present is enough for the conformance checking library to be able to check.
   */
  export interface Schema$KnowledgeAnswersIntentQueryNTPRAnnotationSignals {}
  /**
   * Signals coming from on-device annotators.
   */
  export interface Schema$KnowledgeAnswersIntentQueryOnDeviceAnnotationSignals {
    /**
     * Provenance of the annotator. Equivalent to the `provenance` field in OnDeviceParserInput::AnnotationInfo. This is used to map from AnnotationInfo to nlp_sage.ScoredAnnotation, since nlp_sage.ScoredAnnotation doesn't have a native `provenance` field. Note in the (very) long term, we'd like to replace ScoredAnnotation with Argument altogether.
     */
    provenance?: string | null;
  }
  /**
   * Parsing-related signals. Only horizontal signals should appear directly as fields on this message. Each domain should create their own extension for anything that they need to propagate down stream from AQUA. Note that this proto is not the same as the Superroot proto ParsingSignals (http://google3/knowledge/proto/scoring-signals.proto), which is a Superroot-specific signal used in Scoring. Next ID: 7
   */
  export interface Schema$KnowledgeAnswersIntentQueryParsingSignals {
    /**
     * A parsing score that is independently calibrated by each parser/IG, used by pre-fulfillment ranker, see http://go/prefulfillment-ranker.
     */
    calibratedParsingScore?: number | null;
    /**
     * The total effective length of the spans for the arguments used to construct the parse. May include vertical specific adjustments. Eg: For the query [delete my 7 p.m. alarm called chicken] and intent Delete_alarm(alarm_object=RD(category=AlarmObject( label="chicken", trigger_time_datetime=<< 7 PM \>\>))), the effective argument span is "7 p.m." + "chicken" (total length of 13).
     */
    effectiveArgSpanLength?: number | null;
    /**
     * This is a cross-intent feature which is calculated by iterating all intent candidates. This feature should be populated in post-IG stage (before GB).
     */
    inQueryMaxEffectiveArgSpanLength?: number | null;
    /**
     * This proto holds the fingerprint of the call path info of QRewrite client (e.g. the QUS's phase like "RBT","QBT"; the QUS's candidate type like "Identity"; and the ACE's candidate type like "FuzzyMatcher").
     */
    qrewriteCallPathInfoFingerprint?: string | null;
    /**
     * The parser that calibrated the parsing score below.
     */
    source?: string | null;
  }
  /**
   * A message encapsulating all "/collection/personal_memory" annotations from QRef annotator. These annotations are present in personal_summary_node_child proto field of input QRefAnnotation proto. NEXT ID TO USE: 5
   */
  export interface Schema$KnowledgeAnswersIntentQueryPersonalEntity {
    /**
     * Attribute ID of a personal_summary_node_child.
     */
    attributeId?: string | null;
    entityRelationship?: Schema$KnowledgeAnswersIntentQueryPersonalEntityEntityRelationship[];
    /**
     * The mid of the entity in freebase associated with this span.
     */
    freebaseMid?: string | null;
    /**
     * Every PersonalEntity might itself rescursively contain related Personal Entities, e.g. for, "my father's mother" a parent Personal Entity for 'Mother()' contains a child Personal Entity of the form 'Mother(Myself)'.
     */
    personalEntityChild?: Schema$KnowledgeAnswersIntentQueryPersonalEntity[];
  }
  /**
   * The relationship information from QRef. Only included if the QRefAnnotator is initialised with include_annotated_relationships.
   */
  export interface Schema$KnowledgeAnswersIntentQueryPersonalEntityEntityRelationship {
    /**
     * The index of the other entity in the relationship.
     */
    entityIndex?: number | null;
    /**
     * Names of the relationship links.
     */
    linkPropertyName?: string[] | null;
  }
  /**
   * Signals associated with Qref annotations.
   */
  export interface Schema$KnowledgeAnswersIntentQueryQrefAnnotationSignals {
    /**
     * Numeric value associated with each annotation within the Qref servlet output.
     */
    score?: number | null;
    /**
     * Trusted name confidence signal https://g3doc.corp.google.com/repository/webref/preprocessing/names/tnc_classifier/README.md
     */
    trustedNameConfidence?: number | null;
  }
  /**
   * Relatedness Matrix signals for FunctionCall Arguments.
   */
  export interface Schema$KnowledgeAnswersIntentQueryRelatednessSignals {
    queryPopularity?: number | null;
    youtubeViews?: string | null;
  }
  export interface Schema$KnowledgeAnswersIntentQueryResponseMeaningSignalsAnswersHeaderSignals {
    answersValueGender?: string | null;
    numAnswers?: string | null;
  }
  /**
   * SRM signal data. Properties here should be nonsemantic. Semantic properties should be modeled directly in the SRM.
   */
  export interface Schema$KnowledgeAnswersIntentQueryResponseMeaningSignalsResponseMeaningSignals {
    /**
     * Signals that are used to generate answers header.
     */
    answersHeaderSignals?: Schema$KnowledgeAnswersIntentQueryResponseMeaningSignalsAnswersHeaderSignals;
    propertyValue?: Schema$FreebasePropertyValue[];
    /**
     * The intended application this response meaning is used for. It is intended for downstream dispatching.
     */
    responseMeaningApplication?: string | null;
  }
  /**
   * Signals derived from overlapping saft annotations.
   */
  export interface Schema$KnowledgeAnswersIntentQuerySaftSignals {
    entityType?: string | null;
    isHeadOfIntent?: boolean | null;
    /**
     * Saft often marks verbs as head of intent and we may want to ignore those.
     */
    isVerb?: boolean | null;
    number?: string | null;
  }
  /**
   * Signals associated with nlp_ig::v1::SemanticAnnotator.
   */
  export interface Schema$KnowledgeAnswersIntentQuerySemanticAnnotationSignals {
    /**
     * Name of the subgrammar category this annotation is associated with.
     */
    category?: string | null;
    /**
     * Name of the subgrammar domain.
     */
    domain?: string | null;
    features?: Schema$KnowledgeAnswersIntentQuerySemanticAnnotationSignalsFeature[];
    /**
     * Numeric value associated with each subgrammar annotation. Used for in-domain ranking inside the Aqua Analyzer. This field is not guaranteed to be in any range. Furthermore, this field should never be compared for annotations with differing 'domain' value. The field is included here for making the Aqua Analyzer work with subgrammar annotations that have been generated in a different Aqua Analyzer (typically by TUIG SemanticAnnotationServlet). TL;DR: Consumers of this message are STRONGLY DISCOURAGED from using this field.
     */
    score?: number | null;
  }
  /**
   * Aqua features exported from a subgrammar. Primarily added here for External Subgrammar Annotations to work. See go/esa-exported-features for details. NOTE: Feature names can change and the existence of any feature is not guaranteed. Get in touch with ig-eng@ before using these features.
   */
  export interface Schema$KnowledgeAnswersIntentQuerySemanticAnnotationSignalsFeature {
    name?: string | null;
    value?: number | null;
  }
  export interface Schema$KnowledgeAnswersIntentQuerySensitiveArgumentValueGuard {
    /**
     * Decrypted and deserialized contents of |encrypted_value|. This field should never be populated in prod. This is only provided for easier human inspection when using dev builds (dev keys are public).
     */
    doNotUseDebugOnlyDecryptedValue?: Schema$KnowledgeAnswersIntentQueryArgumentValue;
    /**
     * Encrypted protobuffer of type ArgumentValue.
     */
    encryptedValue?: string | null;
  }
  /**
   * Additional shopping identifiers related to an entity or IQL function call. This must be passed along to the shopping backend (go/o4) to aid in fulfillment. Because the shopping data models do not always line up 1-1 with KG entities and are not always reconciled with each other, the message may contain multiple ids. Next id: 8 LINT.IfChange
   */
  export interface Schema$KnowledgeAnswersIntentQueryShoppingIds {
    /**
     * A shopping aspect cluster id. These are attributes mined from mentions in web articles.
     */
    aspectClusterIds?: string[] | null;
    /**
     * Brand entity id. Brands are fully reconciled with KG entities so there should never be ambiguity as to which brand applies (those would be separate MIDs).
     */
    brandEntityId?: string | null;
    /**
     * A category in the shopping browseonomy, a taxonomy of product types that can be found at go/bx. This field is expected to contain the deepest node in the browseonomy that the intent or argument pertains to, which may be an internal node. It does not contain the entire path of categories.
     */
    bxCategoryIds?: number[] | null;
    measures?: Schema$KnowledgeAnswersIntentQueryShoppingIdsMeasureValue[];
    /**
     * List of merchant customer account IDs associated with a merchant entity in KG. NOTE: Soon to be deprecated, see go/merchant_mids_in_indexer design
     */
    merchantIds?: string[] | null;
    /**
     * A shopping merchant source id, i.e. the key used to identify Shopping Merchants as they are imported into KG. For reference, these IDs are populated in: * CommerceDB under BusinessIdentification.knowledge_graph.source_id * KG using the /shopping/merchant/id predicate
     */
    merchantSourceIds?: string[] | null;
    /**
     * Moka attributes of a product. This includes color tags but currently not brand. We allow the possibility for multiple tag ids, as multiple Moka tag ids may map to the same mid, and we may not be able to find a single matching Moka tag. Also, cross-category Moka colors intentionally map a single color mentioned in the query to an expansion of many tags representing points in LAB color space (although this representation is expected to change).
     */
    tagIds?: string[] | null;
  }
  /**
   * A measured value of a product (e.g. Hard drive size = 1 TB). The value is measured in the facet's base unit. This does not necessarily match the unit expressed by the user in the query. The exact unit is known to the O4 server and is used in fulfillment.
   */
  export interface Schema$KnowledgeAnswersIntentQueryShoppingIdsMeasureValue {
    facetId?: string | null;
    value?: number | null;
  }
  /**
   * A message representing an intent to use for intent scoring if the root intent is invalid.
   */
  export interface Schema$KnowledgeAnswersIntentQuerySignalComputationFallbackIntent {
    /**
     * The intent name of the fallback intent.
     */
    intent?: string | null;
  }
  /**
   * A message representing a simple literal value.
   */
  export interface Schema$KnowledgeAnswersIntentQuerySimpleValue {
    boolValue?: boolean | null;
    doubleValue?: number | null;
    identifier?: Schema$KnowledgeAnswersIntentQueryIdentifier;
    intValue?: string | null;
    stringValue?: string | null;
    /**
     * Ungrounded value contains the part of the query (or web snippet, etc.) that was not understood. For more information on this field, see the "Ungrounded value" item in the table of contents of go/iql-v1
     */
    ungroundedValue?: string | null;
  }
  /**
   * Signals indicating whether this entity received or transferred support (and from which entities).
   */
  export interface Schema$KnowledgeAnswersIntentQuerySupportTransferSignals {
    /**
     * Entities that transferred support to this entity (mids).
     */
    supportTransferSource?: string[] | null;
    /**
     * Entities that received support from this entity (mids).
     */
    supportTransferTarget?: string[] | null;
  }
  /**
   * Signals associated with TeleportArgumentAnnotator annotations. Empty. The signal being present is enough for the conformance checking library to be able to check.
   */
  export interface Schema$KnowledgeAnswersIntentQueryTeleportArgumentAnnotatorSignals {}
  /**
   * A token represents an ngram with relevant information about it. If the token is a context phrase, it will have a prior score associated with it. The prior is computed via knowledge/answers/query_generalization/ word_prior/word_prior_from_examples_lib.cc, and ranges between 0 and 1. Stopwords and intent tokens (primary and component) have a score of 1.0.
   */
  export interface Schema$KnowledgeAnswersIntentQueryToken {
    /**
     * This field is used inside Aqua and outside Aqua for identifying the token indices and/or byte offsets of this Token.
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * |ngram| should be populated with a string from the raw query, not the normalized tokens. E.g. The ngram in the ignored token for the Height intent on the query [Height of barack obama], will be "Height". The ngram in the ignored token for the Videos intent on the query [vidéos] will be "vidéos".
     */
    ngram?: string | null;
    /**
     * Experiments that caused this Token to parse, without which this would not have parsed.
     */
    parsedDueToExperiment?: string[] | null;
    prior?: number | null;
    provenance?: string | null;
    /**
     * Unique identifiers for the provenance of this token, for example, NLP Repository Example IDs.
     */
    provenanceId?: string[] | null;
    provenanceLanguage?: string | null;
    synonyms?: Schema$KnowledgeAnswersIntentQueryTokenSynonym[];
  }
  /**
   * Tokens includes a list of tokens, with an aggregated score of the priors of the tokens, if any.
   */
  export interface Schema$KnowledgeAnswersIntentQueryTokens {
    /**
     * Score for this group of tokens is currently product of priors.
     */
    score?: number | null;
    token?: Schema$KnowledgeAnswersIntentQueryToken[];
  }
  /**
   * A TokenSynonym contains information about synonyms of a Token's ngram. The synonyms were the ones used during parsing for token explanation in place of the original ngrams. Example 1: [present population of nyc] We can generate interpretation kc:/location/statistical_region:population by converting "present" to its synonym "current", which is a context phrase for the intent. The ngram for this token would be "present" and the string "current" would be stored in synonym_ngram. Example 2: [nys important cities] We can generate interpretation kc:/location/us_state:cities by converting "important" to its synonym "major" or its synonym "biggest", because both "major cities" and "biggest cities" are attribute phrases for the intent. In this case, the ngram in this Token is "important cities", and the token_synonyms (specifically, the synonym_ngram field) would store "major cities" and "biggest cities", since those are the actual synonym ngrams that match the attribute phrases. For context phrases, we generally should have only one matched_squery_synonyms, since we try to find the best synonyms to use using the context phrase score. However, for attribute phrase we don't really have enough info to determine which synonym is better if they both trigger the same intent, and hence we will propagate both synonyms.
   */
  export interface Schema$KnowledgeAnswersIntentQueryTokenSynonym {
    source?: string | null;
    synonymNgram?: string | null;
  }
  export interface Schema$KnowledgeAnswersIntersectType {
    slotNames?: string[] | null;
  }
  /**
   * A Marker specifies a Meaning Expression's (i.e. intent FunctionCall) purpose. NOTE: Markers always impact go/intent-resolution semantics.
   */
  export interface Schema$KnowledgeAnswersMarker {
    command?: Schema$KnowledgeAnswersMarkerCommand;
    openQuestion?: Schema$KnowledgeAnswersMarkerOpenQuestion;
    polarQuestion?: Schema$KnowledgeAnswersMarkerPolarQuestion;
    stateOfAffairs?: Schema$KnowledgeAnswersMarkerStateOfAffairs;
  }
  /**
   * Indicates a command, instructing someone to do something which might be explicit (e.g. [call me]) or implicit (e.g. [can you call me]).
   */
  export interface Schema$KnowledgeAnswersMarkerCommand {}
  /**
   * Indicates a question, requesting the value of a specified slot. Not applicable if the requested slot simultaneously appears as an argument. See go/requested-slots for details. Next ID: 3
   */
  export interface Schema$KnowledgeAnswersMarkerOpenQuestion {
    /**
     * Note: This is still under development and not available for general use. Contact meaning-platform-eng@ for questions.
     */
    slotKey?: Schema$KnowledgeAnswersMeaningSchemaSlotKey;
    /**
     * One or multiple slots may be requested by the marker. See go/mrf-multiple-output-slots for details on requesting multiple output slots.
     */
    slotName?: string[] | null;
  }
  /**
   * Indicates a question, requesting the truth-value/actualness of a state of affairs denoted by the expression encompassed by the FunctionCall this appears on. Often this is a yes/no question, e.g. [was tom cruise in top gun] : ActedIn.polar(Movie=/m/top_gun, Actor=/m/tom_cruise) Not all polar questions will necessarily have a yes/no answer; the expected resolution of a polar question is a StateOfAffairs. e.g. [is chocolate good for you] : FoodItemAttribute.polar(/m/chocolate, /m/healthy) which may not have a simple yes/no answer. See go/mrf-polar-questions for details.
   */
  export interface Schema$KnowledgeAnswersMarkerPolarQuestion {}
  /**
   * Indicates a reference to a particular state of affairs denoted by the expression encompassed by the FunctionCall this appears on. The state may be actual e.g. [new york is a city] : IsA.state(/m/new_york, /m/city) or not e.g. [1+1=3] : Addition.state(Sum=3, Addend=1, Addend=1) The state can also represent an proposition of an action, e.g. [cinar gave jason a cookie] : Give.state(Giver=cinar, Receiver=jason, Object=cookie) See go/mrf-polar-questions for details.
   */
  export interface Schema$KnowledgeAnswersMarkerStateOfAffairs {}
  /**
   * The primary key for an intent. Next ID: 3
   */
  export interface Schema$KnowledgeAnswersMeaningSchemaKey {
    /**
     * The version has been changed to be defined as a horizontal version on the entire meaning catalog instead of per-schema.
     */
    deprecatedVersion?: string | null;
    /**
     * The minted MID for an intent.
     */
    mid?: string | null;
  }
  /**
   * The primary key for a MeaningSchema slot. Next ID: 3 For //depot/google3/logs/proto/knowledge/interpretation/intent_query.proto in the "ThenChange", please update Argument.SlotKey. LINT.IfChange
   */
  export interface Schema$KnowledgeAnswersMeaningSchemaSlotKey {
    /**
     * The minted MID for the slot. This ID uniquely identifies the slot globally.
     */
    mid?: string | null;
    /**
     * A stable unique ID for this intent minted from go/uniqueid. NOTE: This is considered a private field used only for internal Intent Catalog purposes (i.e. as a source ID for generating this intent's associated MID). Additionally, this field is only populated on the schema. TODO (b/168907943): Move "unique_id" out of MeaningSchemaSlotKey proto message. Note: Please do not use this field. It is going to be moved out of this proto message.
     */
    uniqueId?: string | null;
  }
  /**
   * A MeasurementType configures a value that consists of a measurement. The expected value should have a number and a mid representing the unit. Note: this is currently only used for attribute answer value types. Configuration intent slot as measurement is yet to be supported (or instead we should universally use SemanticType).
   */
  export interface Schema$KnowledgeAnswersMeasurementType {
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
  }
  /**
   * A NormalizedStringType configures a value that is one of the listed normalized_values. An arbitrary mapping from input strings to normalized_values can be specified in the local intent config. Only alphabetical strings can be used as normalized_values. This type should NOT be used for: - Mids, ids, dates, or other structured data. Use an annotator instead, and address any quality issues at the annotator level. - Simplifying grammar rules. If you are not using the normalized_values in your question semantics, you should remove the slot. Use additional query_examples instead.
   */
  export interface Schema$KnowledgeAnswersNormalizedStringType {
    normalizedValue?: string[] | null;
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
  }
  /**
   * A NumberType configures a value whose type is intended to be numeric.
   */
  export interface Schema$KnowledgeAnswersNumberType {
    /**
     * If true, the semantics of the NumberType argument are retained as a string, rather than being converted to a float-type object. This option is particularly useful in cases where leading 0s in the user input are meaningful, e.g. for zip codes or sports jersey numbers. For the user- specified value "01", for instance, the PathQuery semantics will be: def $Slot "01"
     */
    keepAsString?: boolean | null;
    /**
     * Range constraint limits the set of numbers accepted by this type. The constraint applies to all subtypes. Currently, this constraint is only enforced in Loose Parser.
     */
    rangeConstraint?: Schema$KnowledgeAnswersRangeConstraint;
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
    /**
     * sub_type is a list of the NumberSubTypes which are accepted. If the list is empty, that means all numeric or ordinal values are accepted. If multiple values are specified, then this value accepts any of the sub_types in the list.
     */
    subType?: string[] | null;
  }
  /**
   * Custom opaque type used by actions-on-google in-dialog queries. See go/3p-custom-intents-wrt-meaning-catalog
   */
  export interface Schema$KnowledgeAnswersOpaqueAogType {}
  export interface Schema$KnowledgeAnswersOpaqueAppAnnotationType {}
  export interface Schema$KnowledgeAnswersOpaqueAudioType {}
  export interface Schema$KnowledgeAnswersOpaqueCalendarEventType {}
  /**
   * Used for sensitive calendar events that require additional BUILD visibility protection. See go/multi-account-event-representation.
   */
  export interface Schema$KnowledgeAnswersOpaqueCalendarEventWrapperType {}
  export interface Schema$KnowledgeAnswersOpaqueCalendarReferenceType {}
  export interface Schema$KnowledgeAnswersOpaqueComplexQueriesRewriteType {}
  export interface Schema$KnowledgeAnswersOpaqueComponentReferenceIndexType {}
  export interface Schema$KnowledgeAnswersOpaqueDeviceIdType {}
  export interface Schema$KnowledgeAnswersOpaqueDeviceType {}
  export interface Schema$KnowledgeAnswersOpaqueDeviceUserIdentityType {}
  export interface Schema$KnowledgeAnswersOpaqueHomeAutomationDeviceType {}
  /**
   * A LocationType configures a value whose type is a Location message, for example, the output of the Location subgrammar. Note that this location type is not the same as a "location entity" (an entity with a location indicating type/collection, which is annotated by QRef). The scope of a LocationType is usually broader than a location entity, it may represent - businesses, places, and POIs (location entities from QRef) - addresses ("123 Main St., New York, NY") or even just coordinates (latitude, longitude) - business categories (e.g., "pharmacies" or "gas stations") - SAFT locations - aliases (including "home" and "work") - contacts - combinations of a location with modifiers and constraints (e.g., "chinese restaurant near me" or "cheap kid-friendly hotels") - ungrounded locations produced by ungrounded_location model See go/location-type for the details of the location proto output by location subgrammar.
   */
  export interface Schema$KnowledgeAnswersOpaqueLocationType {}
  export interface Schema$KnowledgeAnswersOpaqueMediaType {}
  export interface Schema$KnowledgeAnswersOpaqueMessageNotificationType {}
  export interface Schema$KnowledgeAnswersOpaqueMoneyType {}
  export interface Schema$KnowledgeAnswersOpaqueNewsProviderType {}
  export interface Schema$KnowledgeAnswersOpaqueOnDeviceType {}
  /**
   * Entity parsed from manual grammar interpretation in the Personal Intelligence domain.
   */
  export interface Schema$KnowledgeAnswersOpaquePersonalIntelligenceEntityType {}
  export interface Schema$KnowledgeAnswersOpaquePersonType {}
  export interface Schema$KnowledgeAnswersOpaqueProductivityListItemType {}
  export interface Schema$KnowledgeAnswersOpaqueRecurrenceType {}
  export interface Schema$KnowledgeAnswersOpaqueReminderType {}
  export interface Schema$KnowledgeAnswersOpaqueShoppingMerchantType {}
  export interface Schema$KnowledgeAnswersOpaqueShoppingOfferType {}
  export interface Schema$KnowledgeAnswersOpaqueShoppingProductExpressionType {}
  export interface Schema$KnowledgeAnswersOpaqueShoppingProductType {}
  export interface Schema$KnowledgeAnswersOpaqueShoppingStoreType {}
  export interface Schema$KnowledgeAnswersOpaqueTimerType {}
  /**
   * Note: OpaqueType is deprecated and addition of new fields is not allowed. Refer to go/opaque_type for details. If you think this is the only way to implement your feature, attend an office hours (go/meaning-help) and discuss with the MRF team. An OpaqueType configures a value whose type is only interpretable by _specific_ clients of the intent catalog. This means horizontal 'features' like pretty printing, correct logging, intent blacklisting and signal aggregation will not work for opaque value types. It has a field for each type in IntentQuery that is not covered by a non-opaque type (specifically: protocol messages). The fields are themselves messages declared in this file. The specific opaque value types must be empty messages. If you find a need to add any fields to these messages, make them non-opaque and implement all of the code to treat them as first class types. It is allowable for a value to have more than one of the opaque types. See http://go/opaque-type-for-value-type. LINT.IfChange Next Id: 31
   */
  export interface Schema$KnowledgeAnswersOpaqueType {
    aogType?: Schema$KnowledgeAnswersOpaqueAogType;
    appAnnotationType?: Schema$KnowledgeAnswersOpaqueAppAnnotationType;
    audioType?: Schema$KnowledgeAnswersOpaqueAudioType;
    calendarEventType?: Schema$KnowledgeAnswersOpaqueCalendarEventType;
    calendarEventWrapperType?: Schema$KnowledgeAnswersOpaqueCalendarEventWrapperType;
    calendarReferenceType?: Schema$KnowledgeAnswersOpaqueCalendarReferenceType;
    complexQueriesRewriteType?: Schema$KnowledgeAnswersOpaqueComplexQueriesRewriteType;
    componentReferenceType?: Schema$KnowledgeAnswersOpaqueComponentReferenceIndexType;
    deviceIdType?: Schema$KnowledgeAnswersOpaqueDeviceIdType;
    deviceType?: Schema$KnowledgeAnswersOpaqueDeviceType;
    deviceUserIdentityType?: Schema$KnowledgeAnswersOpaqueDeviceUserIdentityType;
    homeAutomationDeviceType?: Schema$KnowledgeAnswersOpaqueHomeAutomationDeviceType;
    locationType?: Schema$KnowledgeAnswersOpaqueLocationType;
    mediaType?: Schema$KnowledgeAnswersOpaqueMediaType;
    messageNotificationType?: Schema$KnowledgeAnswersOpaqueMessageNotificationType;
    moneyType?: Schema$KnowledgeAnswersOpaqueMoneyType;
    narrativeNewsProviderType?: Schema$KnowledgeAnswersOpaqueNewsProviderType;
    onDeviceType?: Schema$KnowledgeAnswersOpaqueOnDeviceType;
    personalIntelligenceEntityType?: Schema$KnowledgeAnswersOpaquePersonalIntelligenceEntityType;
    personType?: Schema$KnowledgeAnswersOpaquePersonType;
    productivityListItemType?: Schema$KnowledgeAnswersOpaqueProductivityListItemType;
    recurrenceType?: Schema$KnowledgeAnswersOpaqueRecurrenceType;
    reminderType?: Schema$KnowledgeAnswersOpaqueReminderType;
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
    shoppingMerchantType?: Schema$KnowledgeAnswersOpaqueShoppingMerchantType;
    shoppingOfferType?: Schema$KnowledgeAnswersOpaqueShoppingOfferType;
    shoppingProductExpressionType?: Schema$KnowledgeAnswersOpaqueShoppingProductExpressionType;
    shoppingProductType?: Schema$KnowledgeAnswersOpaqueShoppingProductType;
    shoppingStoreType?: Schema$KnowledgeAnswersOpaqueShoppingStoreType;
    timerType?: Schema$KnowledgeAnswersOpaqueTimerType;
  }
  /**
   * Plexity is a conceptual distinction between viewing something (a slot filler, for example) as a single individual, or as a complex concept consisting of multiple individuals or subparts. Note that plexity is not the same as (or correlated with) either grammatical number or with distributive and collective interpretations of the slot. The PlexityRequirement proto and Plexity enum are defined outside ValueType as we may move the plexity specification to a different place in the intent protos in future.
   */
  export interface Schema$KnowledgeAnswersPlexityRequirement {
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
    /**
     * Simple plexity: the slot's filler must allow the specified plexity value, for example it must contain multiple individuals if the plexity is MULTIPLEX.
     */
    simplePlexity?: string | null;
  }
  /**
   * A special type representing a polar question.
   */
  export interface Schema$KnowledgeAnswersPolarQuestionType {
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
  }
  export interface Schema$KnowledgeAnswersRangeConstraint {
    max?: Schema$KnowledgeAnswersRangeConstraintRangeEndpoint;
    min?: Schema$KnowledgeAnswersRangeConstraintRangeEndpoint;
  }
  export interface Schema$KnowledgeAnswersRangeConstraintRangeEndpoint {
    /**
     * If true, then this endpoint's value is not included in the range.
     */
    isExclusive?: boolean | null;
    /**
     * The value of this endpoint
     */
    value?: number | null;
  }
  export interface Schema$KnowledgeAnswersSameType {
    slotName?: string | null;
  }
  /**
   * A SemanticType configures a value determined by another source, in particular another intent or a semantic frame. See go/unifying-intents and go/framery.
   */
  export interface Schema$KnowledgeAnswersSemanticType {
    /**
     * If true, is compatible with a schema whose answer_type is any semantic_type including empty (since by default schemas return themselves as semantic_types (b/211438997). This is used primarily for slot composition. Example: for the slot name: Operand type { semantic_type { allow_all: true \} entity_type {\} \} * An entity_type or a schema with answer_type 'entity_type' can fill Operand. * A schema with either (a) no answer_type or (b) answer_type with !semantic_type.names().empty() can fill Operand * A schema with answer_type 'date' CAN NOT fill Operand. Note that when there is an explicit answer_type, the 'self' semantic_type is not considered.
     */
    allowAll?: boolean | null;
    /**
     * Determines whether or not the meaning schema that contains this semantic_type conforms to a function call with the name and arguments taken from the meaning schema. As it refers to the "containing_intent", this field should only be set in a semantic_type declared in an intent's type_members field. The behavior of this field is undefined in other cases, for example, declaring the type of an intent slot. On Assistant, we use meaning schemas for argument types to represent both function call values as well as a reusable tool to host other argument values (opaque types, normalized strings, subsets of entities) across intents. Teams need this information to run conformance checks and annotate new data. Example: If the intents below are in the intent catalog, then: - Intent(slot="some string") is conformant, because Type has string_type{\} in its type_members. - Intent(slot=Type()) is not conformant, because Type has set semantic_type.includes_containing_intent to false. - Intent(slot=SubType()) is conformant, because type_members is not inherited. { id: "Intent" slot: { name: "slot" type: { semantic_type { name: "Type" \}\} \} \} { id: "Type" type_members { string_type{\} semantic_type { includes_containing_intent: false \} \} \} { id: "SubType" parent { id: "Type" relationship_type: SUBTYPE \} \}
     */
    includesContainingIntent?: boolean | null;
    /**
     * Names of valid sources of the semantics (for example: a frame or an intent).
     */
    name?: string[] | null;
    /**
     * Contains data about current schema remodelings at the SemanticType name level. The "name" field contains all possible semantic type names and "semantic_type_name_remodelings" acts as an overlay to determine which ones to surface based on which schema remodeling IDs are requested. For more information see go/meaning-remodeling-framework.
     */
    nameRemodelings?: Schema$NlpMeaningSemanticTypeNameMeaningRemodelings[];
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
  }
  /**
   * Policy controlling argument level eval.
   */
  export interface Schema$KnowledgeAnswersSensitivityArgumentEvalPolicy {
    /**
     * Optional cannery policy name. If it presents then Intent Scrubber will use the corresponding Cannery rule for argument scrubbing and redaction instead. It should only be used for existing complex argment value types such as HomeAutomationDevice.
     */
    policyName?: string | null;
    /**
     * Redact corresponding span of the string query.
     */
    redactQuerySpan?: boolean | null;
    /**
     * Customized replacement phrase, if missing ${ArgumentName\}_REDACTED is used as default.
     */
    replacement?: string | null;
    /**
     * Scrub argument value and signals before saving to eval storage. If not set, 1) inherit the policy from the outer argument if there is one (for nested intents); 2) finally default to type based scrubbing: see go/argument-type-scrubbing.
     */
    scrubArgumentValue?: boolean | null;
  }
  /**
   * Instructions (eg., logging, disambiguation, ads serving) of handling a sensitive intent and its data. LINT.IfChange NextId: 8
   */
  export interface Schema$KnowledgeAnswersSensitivityInstruction {
    argument?: Schema$KnowledgeAnswersSensitivityInstructionArgument;
    intent?: Schema$KnowledgeAnswersSensitivityInstructionIntent;
    /**
     * This field is for backward compatibility.
     */
    legacyAssistantSensitivity?: Schema$SearchPolicyRankableSensitivity;
    /**
     * Controls whether a top-level intent is multi-account approved. NLU will do go/cross-account-understanding only for intents with this bit on. Also, this bit should be propagated to user turn Attentionl Entities to extend protection of cross-account data to next turns. In principle fulfillment services (e.g., Monastery) should only dispatch such intents to multi-account approved fulfillers (schemas), at least when the user has a linked dasher account. The Assistant runtime policy engine should treat a query as dasher data if 1) this bit is true in the string redaction, and 2) the user has a linked dasher account, and apply a more restrictive rule for whitelisting, regardless of the actual account provenance in Sensitivity. Example: [User logged in to their personal gmail account.] Q1: "Schedule a meeting tiltled okr review at 3pm". Assistant: "Should I scheduled it on your xyz@gmail.com account?" Q2: "No, add it to my xyz@bigcorp.com account." We don't know Q1 is dasher data until Q2. To prevent leaking of Q1 to non-dasher approved binaries, this bit should be used as a proactive measure. It might introduce some over-triggering (e.g., user says "Yes" in Q2), but is much better than blindly treating every query as dasher, not considering whether it actually triggers any multi-account capable intents or not (see b/164420114 for example).
     */
    multiAccountAllowed?: boolean | null;
    previousQuery?: Schema$KnowledgeAnswersSensitivityInstructionPreviousQuery;
  }
  /**
   * Slot/Argument level instructions.
   */
  export interface Schema$KnowledgeAnswersSensitivityInstructionArgument {
    eval?: Schema$KnowledgeAnswersSensitivityArgumentEvalPolicy;
    logging?: Schema$KnowledgeAnswersSensitivityLoggingPolicy;
    serving?: Schema$KnowledgeAnswersSensitivityServingPolicy;
    storage?: Schema$KnowledgeAnswersSensitivityStoragePolicy;
  }
  /**
   * Intent level instructions apply to the entire intent and all its argument values.
   */
  export interface Schema$KnowledgeAnswersSensitivityInstructionIntent {
    eval?: Schema$KnowledgeAnswersSensitivityIntentEvalPolicy;
    footprints?: Schema$KnowledgeAnswersSensitivityMyActivityPolicy;
    logging?: Schema$KnowledgeAnswersSensitivityLoggingPolicy;
    serving?: Schema$KnowledgeAnswersSensitivityServingPolicy;
    storage?: Schema$KnowledgeAnswersSensitivityStoragePolicy;
  }
  /**
   * Instructions for knowledge_context.PreviousQuery. See go/apps-userdata-guidelines.
   */
  export interface Schema$KnowledgeAnswersSensitivityInstructionPreviousQuery {
    logging?: Schema$KnowledgeAnswersSensitivityLoggingPolicy;
    serving?: Schema$KnowledgeAnswersSensitivityServingPolicy;
    storage?: Schema$KnowledgeAnswersSensitivityStoragePolicy;
  }
  /**
   * Policy controlling intent level eval.
   */
  export interface Schema$KnowledgeAnswersSensitivityIntentEvalPolicy {
    /**
     * Policy for all arguments, so no need to repeat on every argument.
     */
    allArguments?: Schema$KnowledgeAnswersSensitivityArgumentEvalPolicy;
    /**
     * Controls whether to enabled limited logging (rpc whitelisting + GWS log query redaction) if the intent wins post-fulfillment ranking.
     */
    enabled?: boolean | null;
    /**
     * The eval policy won't apply if the annotated intent is a root. This check is majorly to prevent calling IntentScrubber halfway from InterpretationScrubber via nested intents.
     */
    nestedIntentOnly?: boolean | null;
    /**
     * Scrub entire intent before saving to eval storage, leaving only intent name and sensitivity info.
     */
    scrubEntireIntent?: boolean | null;
  }
  /**
   * Policies controlling the logging.
   */
  export interface Schema$KnowledgeAnswersSensitivityLoggingPolicy {
    /**
     * The contents of the argument value should be scrubbed before being written to logs.
     */
    scrubArgumentValue?: boolean | null;
    /**
     * If this is set to true, this Sensitivity's presence will result in QRewrite to enable AS logging to scrub any discourse context.
     */
    scrubContext?: boolean | null;
  }
  /**
   * Policy controlling MyActivity.
   */
  export interface Schema$KnowledgeAnswersSensitivityMyActivityPolicy {
    myActivityRedactedAction?: string | null;
    /**
     * This field will be translated by footprints and is used to describe the content that was redacted that will be displayed to the user in MyActivity.
     */
    myActivityRedactionKey?: string | null;
  }
  /**
   * Canonical representation of query sensitivites. See go/sensitive-intents for more details.
   */
  export interface Schema$KnowledgeAnswersSensitivitySensitivity {
    /**
     * Used to annotate the provenace of cross-account personal data. See go/cross-account-understanding. Sensitivity could be annotated at query, intent, and argument levels. Query and intent could have data from multiple accounts, so this field is repeated. A sensitive knowledge_context.PreviousQuery might be dropped to prevent leaking cross-account data via Genie rewrite. For arguments, the best practice is to not blend multi-account data, and this field should be treated as singular to make ownership clear. When publishing attentional entities, contextual NLU might drop an argument that contains data from a different account for data protection. Mixing multi-account data in one argument will cause data from the primary account to be dropped altogether, which is an unnecessary quality loss.
     */
    accountProvenance?: Schema$QualityQrewriteAccountProvenance[];
    /**
     * Instruction of handling sensitive intent/argument data. Can be specified in Intent Catalog.
     */
    instruction?: Schema$KnowledgeAnswersSensitivityInstruction;
    /**
     * This should be systematically added without requiring the feature developers to add a source. This is for debug purpose as to whether the Sensitivity's trace/path included any of landmark code path helpful for tracing back the sensitivity sources. One should add a new source when one sees fits. It's chronological order as to which source is added first. One should not manually add a source. The same source can be repeated if the Sensitivity object went through the same code path twice.
     */
    source?: string[] | null;
    /**
     * Sensitivity type. See the enum definition below.
     */
    type?: string | null;
  }
  /**
   * Policies controlling RPC Whitelist at serving time.
   */
  export interface Schema$KnowledgeAnswersSensitivityServingPolicy {
    /**
     * If this is set to true, QRewrite will enable RPC Whitelist to be applied in Assistant Server and Genie Rewriter.
     */
    enableRpcWhitelist?: boolean | null;
  }
  /**
   * Policies controlling the storage.
   */
  export interface Schema$KnowledgeAnswersSensitivityStoragePolicy {
    /**
     * The contents of the argument value should be encrypted before being written to a persistent storage (even if the storage has short time-to-live). No-op when specified at intent level.
     */
    encryptArgumentValue?: boolean | null;
    /**
     * If this is set true, we encrypt QueryAnnotationDataProto prior to writing it to Footprint ASSISTANT_EPHEMERAL corpus. This enables restricting ACL to the data.
     */
    encryptQueryAnnotationData?: boolean | null;
    /**
     * If this is set to true, the following fields in ConversationSnapshot are scrubbed: * circulated_state.squery * spoken_query * All client_op arguments |from_assistant| interactions
     */
    scrubAuxiliaryFieldsInConversationSnapshot?: boolean | null;
  }
  /**
   * A special type representing a StateOfAffairs. Currently (as of 2021Q2) this is duplicative with semantic_type { name: "StateOfAffairs" \} but we (mrf-team) will encourage clients to migrate to this new type.
   */
  export interface Schema$KnowledgeAnswersStateOfAffairsType {
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
  }
  /**
   * A StringType configures a value whose type is intended to be arbitrary text.
   */
  export interface Schema$KnowledgeAnswersStringType {
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
    /**
     * If true, this value will match a single token. If false, this value will match any nonzero number of tokens.
     */
    singleToken?: boolean | null;
  }
  /**
   * A TimeZoneType configures a value whose type is a timezone.
   */
  export interface Schema$KnowledgeAnswersTimeZoneType {
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
  }
  /**
   * A TrackingNumberType configures a value whose type is a TrackingNumber.
   */
  export interface Schema$KnowledgeAnswersTrackingNumberType {
    /**
     * Contains data about current schema remodelings at this ValueType level. For more information see go/meaning-remodeling-framework.
     */
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
  }
  export interface Schema$KnowledgeAnswersUnionType {
    slotNames?: string[] | null;
  }
  /**
   * Specifies the allowed type(s) that a value can have, e.g. for a Slot. For example, having both entity_type and string_type present in a ValueType field of a Slot means that the Slot can take _either_ an an EntityType _or_ StringType as a value, and nothing else. It may be helpful to think of this proto as being called something like AllAllowedValueTypes. Next tag id: 25 LINT.IfChange
   */
  export interface Schema$KnowledgeAnswersValueType {
    /**
     * This type is meant to accept "any" type and allow any and all composition. As such, it should not be used for any composition algorithms, e.g. in Loose Parser. See more detailed discussion at go/any-type-in-mrf. This type may appear on an answer_type, implying that the output of that Meaning Schema is allowed to nest in any other slot. However, support for this is NOT implemented in Loose Parser due to risk of overcomposition, but the MRF Conformance checker allows for this. If you are thinking of using this, please contact mrf-team@.
     */
    anyType?: Schema$KnowledgeAnswersAnyType;
    attributeType?: Schema$KnowledgeAnswersAttributeType;
    booleanType?: Schema$KnowledgeAnswersBooleanType;
    collectionType?: Schema$KnowledgeAnswersCollectionType;
    compoundType?: Schema$KnowledgeAnswersCompoundType;
    dateType?: Schema$KnowledgeAnswersDateType;
    /**
     * Used for configuring dynamic types to allow for type transparency. See: go/type-dependencies
     */
    dependencyType?: Schema$KnowledgeAnswersDependencyType;
    durationType?: Schema$KnowledgeAnswersDurationType;
    entityType?: Schema$KnowledgeAnswersEntityType;
    /**
     * When specified on a slot's type, restricts composition based on the enum value. This does not mean anything when the value type is to be interpreted as an output_type.
     */
    inputCompositionConfig?: string | null;
    measurementType?: Schema$KnowledgeAnswersMeasurementType;
    /**
     * Note that normalized_string_type is NOT supported in the loose parser. A slot with this type will cause the intent to not be parsed.
     */
    normalizedStringType?: Schema$KnowledgeAnswersNormalizedStringType;
    numberType?: Schema$KnowledgeAnswersNumberType;
    opaqueType?: Schema$KnowledgeAnswersOpaqueType;
    plexityRequirement?: Schema$KnowledgeAnswersPlexityRequirement;
    polarQuestionType?: Schema$KnowledgeAnswersPolarQuestionType;
    semanticType?: Schema$KnowledgeAnswersSemanticType;
    stateOfAffairsType?: Schema$KnowledgeAnswersStateOfAffairsType;
    stringType?: Schema$KnowledgeAnswersStringType;
    timezoneType?: Schema$KnowledgeAnswersTimeZoneType;
    trackingNumberType?: Schema$KnowledgeAnswersTrackingNumberType;
  }
  /**
   * /////////// DATE //////////
   */
  export interface Schema$KnowledgeGraphDateTimeProto {
    /**
     * A day of month, 1-31. If present, year and month must be present as well, and must form a valid date.
     */
    days?: number | null;
    /**
     * Hour of the day, 0-23
     */
    hours?: number | null;
    /**
     * Microsecond, in the interval [0, 999999]. If present, seconds have to be present as well.
     */
    microseconds?: number | null;
    /**
     * Minute, 0-59. If present, hours have to be present as well.
     */
    minutes?: number | null;
    /**
     * A month, 1-12. If present, year must be present as well.
     */
    months?: number | null;
    /**
     * Second, in the interval [0, 60], where 60 is an exceptional value reserved for leap seconds. If present, minutes have to be present as well.
     */
    seconds?: number | null;
    /**
     * Timezone offset in seconds (can be positive/negative). If present, hours have to be present as well If absent, we expect the time above to be in local time (a.k.a. civil time, go/httat#civil_time).
     */
    tzOffset?: string | null;
    /**
     * A year.
     */
    years?: number | null;
  }
  /**
   * A nested struct is a recursive tree structure for storing a set of triples. more info can be found at go/nested-struct-primer
   */
  export interface Schema$KnowledgeGraphNestedStruct {
    /**
     * predicate_objs.pred should be unique within the list.
     */
    predicateObjs?: Schema$KnowledgeGraphNestedStructPredicateObjs[];
  }
  export interface Schema$KnowledgeGraphNestedStructPredicateObjs {
    objs?: Schema$KnowledgeGraphTripleObj[];
    pred?: string | null;
  }
  /**
   * A qualifier represents an extra piece of context about an assertion/fact. See go/qualifiers-in-kg for more details.
   */
  export interface Schema$KnowledgeGraphQualifier {
    /**
     * The qualifier pred must be a qualifier property defined in KG schema as applying to the predicate of the triple this qualifier is attached to.
     */
    pred?: string | null;
    value?: Schema$KnowledgeGraphTripleObj;
  }
  /**
   * A QualifierSet represents a grouping of qualifiers that together with an SPO make up a logical assertion or fact. One triple can contain multiple qualifier sets and thus represent several different assertions about the same SPO.
   */
  export interface Schema$KnowledgeGraphQualifierSet {
    qualifiers?: Schema$KnowledgeGraphQualifier[];
  }
  /**
   * A Triple is a representation of data with a Subject, a Predicate, and an Object, For example: (Triple, IS-A, "data representation"). Triples are a very good representation of data where the relationship between data points is significant, because the Object of a Triple can be the Subject of another Triple: (Triple, HAS-A, Subject) (Subject, IS-A, "Term of a proposition") The ease with which Triples can represent relationships makes them an excellent candidate for representing graphs. Next id: 21
   */
  export interface Schema$KnowledgeGraphTriple {
    /**
     * If is_negation is set to true then this triple is considered a statement that the fact is false. This allows for the storage of both what we know to be true and what we know to be false.
     */
    isNegation?: boolean | null;
    /**
     * obj is the value of a relationship.
     */
    obj?: Schema$KnowledgeGraphTripleObj;
    /**
     * pred is an arbitrary node id representing the predicate (name) of a graph relationship.
     */
    pred?: string | null;
    provenance?: Schema$KnowledgeGraphTripleProvenance[];
    /**
     * WARNING: This is currently defined for experimentation purposes only. Please do not set. Data set in this field will not be published to any systems downstream of Livegraph. Together with the SPO of this triple, each qualifier set here represents a different logical assertion/fact.
     */
    qualifierSets?: Schema$KnowledgeGraphQualifierSet[];
    /**
     * sub is an arbitrary node id representing the source entity of a graph relationship.
     */
    sub?: string | null;
  }
  export interface Schema$KnowledgeGraphTripleObj {
    boolValue?: boolean | null;
    datetimeValue?: Schema$KnowledgeGraphDateTimeProto;
    doubleValue?: number | null;
    /**
     * seconds
     */
    durationValue?: string | null;
    /**
     * An id representing an entity (mid or hrid)
     */
    idValue?: string | null;
    int64Value?: string | null;
    /**
     * The language code for the object value. It must be a BCP 47-compliant language tag (b/10005172). See also go/kg-data-l10n.
     */
    locale?: string | null;
    nestedStructValue?: Schema$KnowledgeGraphNestedStruct;
    protoValue?: Schema$KnowledgeGraphTripleObjProto;
    s2cellId?: string | null;
    /**
     * A UTF-8 string value to be used for the following expected schema types: - /type/rawstring - /type/text - /type/key
     */
    stringValue?: string | null;
    uint64Value?: string | null;
    /**
     * A UTF-8 string value to be used for expected type /type/uri - b/68760994.
     */
    uriValue?: string | null;
  }
  export interface Schema$KnowledgeGraphTripleObjProto {
    /**
     * The encoded proto data.
     */
    data?: string | null;
    /**
     * The full name of the proto descriptor, such as 'music.AlbumSummary'.
     */
    descriptorFullName?: string | null;
  }
  /**
   * Message containing information about the source of this triple. See go/kg-provenance for an explanation of the fields.
   */
  export interface Schema$KnowledgeGraphTripleProvenance {
    /**
     * Specifies the contract or legal visibility required to see the Triple. See go/kg-triple-level-access-controls for details and background. Note that we use an int32 here so that we won't lose values when decoding on a stale binary. The int32 references to the enum storage_graph_bfg.Triple.Provenance.AccessRequirement.
     */
    accessRequired?: number | null;
    /**
     * Historically, this field was used to encode the Freebase User ID, Google username, or Google MDB group that was responsible for the pipeline that is producing this data. However, there is currently no horizontal validation in place, and as of Q3 2018, this field is used essentially as a free-form string by multiple data providers. NOTE: Do not use this field in new pipelines without first consulting with the OWNERS of this proto.
     */
    creator?: string | null;
    /**
     * The dataset which asserted this data. Must be a valid mid. See go/kg-provenance
     */
    datasetMid?: string | null;
    /**
     * Indicates that the corresponding data is supporting evidence for reconciliation only, and is *not* an assertion that should be visible to other systems or to external users. Note that this also means that no provenances indicating supporting data will be visible in the composed graph. Please see go/supporting-kg-triples-design-doc for additional details and background.
     */
    isSupportingData?: boolean | null;
    /**
     * Internal metadata used by Livegraph and possibly other horizontal KG infra systems. This is not part of the logical triple or its provenance, and contents may not be visible downstream of LG.
     */
    lgMetadata?: Schema$StorageGraphBfgLivegraphProvenanceMetadata;
    /**
     * Metadata specifying data governance policies. This information will be processed and enforced in KE systems. For more context, see go/ke-triple-dg-policy-and-metadata. WARNING: This field is WIP and please do not populate it without consulting ke-data-governance@.
     */
    policyMetadata?: Schema$StorageGraphBfgPolicyMetadata;
    /**
     * An identifier for the process that asserted this triple.
     */
    process?: string | null;
    restrictions?: string[] | null;
    /**
     * Used to measure impact of 3P contributions. See go/ke-metrics.
     */
    sourceCategory?: string | null;
    /**
     * The websearch doc_id of the source_url. Used in conjunction with source_category for measuring 3P contributions.
     */
    sourceDocId?: string | null;
    /**
     * If the triple was extracted from the web, the source URL where the assertion was found. Used for citation if needed (see restrictions field below).
     */
    sourceUrl?: string | null;
    /**
     * A fact about potentially sensitive personal info (http://what/SPII) can be "certified" iff it meets specific requirements. See go/kg-spii-certification for details.
     */
    spiiCertification?: Schema$StorageGraphBfgSpiiCertification;
  }
  /**
   * A user specified location to trigger weather for a specific location. Also it can be generalized for other verticals.
   */
  export interface Schema$KnowledgeVerticalsWeatherProtoUserSpecifiedLocation {
    /**
     * (Mandatory) Oyster ID.
     */
    featureId?: Schema$GeostoreFeatureIdProto;
    /**
     * (Mandatory) Coordinates of the location for which weather is requested.
     */
    latLng?: Schema$GoogleTypeLatLng;
    /**
     * The name to display. If specified it will override the formatted address of "feature_id".
     */
    locationName?: string | null;
    /**
     * MID corresponding to the location from feature_id.
     */
    mid?: string | null;
    /**
     * The timezone to display the current conditions observation time. Optional and will override the timezone of "feature_id".
     */
    timezone?: string | null;
  }
  export interface Schema$LegalCitation {
    /**
     * For Courts, the country the court is in. For Statues,? 3 leter country code ISO 3166 alpha2
     */
    CountryCode?: string | null;
    courtdocument?: Schema$LegalCitationCourtDocument;
    law?: Schema$LegalCitationLaw;
    ParseType?: number | null;
    /**
     * State or province of the court or statue (if applicable) What standard?
     */
    State?: string | null;
    /**
     * DocType
     */
    Type?: number | null;
  }
  /**
   * Information about a published version of the document. Not all references/documents will have this because some will be vendor and/or media neutral.
   */
  export interface Schema$LegalCitationCourtDocument {
    /**
     * One entry per judge who listened to the case in this court
     */
    ArguedBefore?: Schema$LegalPerson[];
    ArguedDate?: Schema$LegalDate;
    /**
     * For an appeal, the name of the lower court that sent this up Abbreviation form? Verbose form?
     */
    CertiorariCourtName?: string | null;
    CertiorariRelationship?: number | null;
    court?: Schema$LegalCitationCourtDocumentCourt;
    /**
     * Usually the name of a month. Not sure really what it means.
     */
    CourtTerm?: string | null;
    /**
     * Various dates related to the generation of document most of these are opinion-centric
     */
    DecidedDate?: Schema$LegalDate;
    FiledDate?: Schema$LegalDate;
    /**
     * Not sure what this is. But I've seen it.
     */
    MemoID?: string | null;
    ModifiedDate?: Schema$LegalDate;
    opinioninfo?: Schema$LegalCitationCourtDocumentOpinionInfo[];
    perdocketinfo?: Schema$LegalCitationCourtDocumentPerDocketInfo[];
    pub?: Schema$LegalCitationCourtDocumentPub[];
    /**
     * A summary of the document or a syllabus for this document
     */
    Syllabus?: string | null;
    unknowndate?: Schema$LegalCitationCourtDocumentUnknownDate[];
  }
  export interface Schema$LegalCitationCourtDocumentCourt {
    /**
     * The name of the court to be displayed to users.
     */
    DisplayName?: string | null;
    /**
     * Maybe be redundant with the Name. We can remove this later if we don't find it useful. Court Level
     */
    Level?: number | null;
    /**
     * Court id for matching records; "name" is a historic misnomer.
     */
    Name?: string | null;
    namecomponent?: Schema$LegalCitationCourtDocumentCourtNameComponent[];
    /**
     * The name of the court as taken directly from the source document
     */
    OriginalName?: string | null;
  }
  /**
   * The name broken down into its various components, such as core court, state, and district
   */
  export interface Schema$LegalCitationCourtDocumentCourtNameComponent {
    Text?: string | null;
    Type?: number | null;
  }
  /**
   * A variety of opinions may be published as a single document. We have one OpinionInfo for each opinion About the "CONCURRING" opinion type: It means that a judge "concurs" to the conclusion (judegment) of the majority of the court, however, he may not agree with the argument in the primary opinion. If multiple judges "concur" or "dissent" the primary opinion, then one judge delivers their opinion, and other judges are said to "join" him.
   */
  export interface Schema$LegalCitationCourtDocumentOpinionInfo {
    Bench?: number | null;
    /**
     * if Type == PER_CURIAM, then DeliveredBy is unnecessary since it is delivered by the full court. Who delivered the opinion?
     */
    DeliveredBy?: Schema$LegalPerson;
    /**
     * Who agrees with the opinion
     */
    JoinedBy?: Schema$LegalPerson;
    /**
     * OpinionType
     */
    Type?: number | null;
  }
  /**
   * Information associated with a docket. Note that multiple dockets can be combined and argued as one and produce a single opinion
   */
  export interface Schema$LegalCitationCourtDocumentPerDocketInfo {
    /**
     * An alpha-numeric (usually, mostly numeric) string used to identify the case by the court
     */
    DocketID?: string | null;
    /**
     * Who is bringing the action? (X in X vs. Y)
     */
    Petitioner?: Schema$LegalPerson[];
    /**
     * Who represents the petitioner?
     */
    PetitionerCounsel?: Schema$LegalPerson[];
    /**
     * Who is responding to the action? (Y in X vs. Y)
     */
    Respondent?: Schema$LegalPerson[];
    /**
     * Who represents the respondent?
     */
    RespondentCounsel?: Schema$LegalPerson[];
    /**
     * The "in re" or "matter of" field.
     */
    Topic?: string | null;
  }
  export interface Schema$LegalCitationCourtDocumentPub {
    /**
     * Page number
     */
    Page?: string | null;
    /**
     * Paragraph number
     */
    Paragraph?: string | null;
    /**
     * The publisher of the opinion. For example, 'U.S.' - United States Reports 'S. Ct.' - Supreme Court Reporter 'L. Ed. 2d' - Lawyers Edition Second Series
     */
    Reporter?: string | null;
    /**
     * For documents published by a court reporter. Vendor/Media neutral citations will probably not have this.
     */
    Volume?: number | null;
    /**
     * This is the publication year. In many citations, there is one year listed and it is typically the year the opinion was handed down. For example: Roe v. Wade, 410 U.S. 113 (1973) Occasionally, the publication year of the reporter is included. This happens typically when the law reporter volume numbers are numbered within a calendar year. For example, Swiss Bank Corp. v. Air Canada, [1988] 1 F.C. 71. It some (most?) areas, publication date is denoted by [] while opinion date is denoted by ().
     */
    Year?: number | null;
  }
  /**
   * Dates that we didn't fully parse, so we don't know exactly what they are, but we are keeping in case it's all we have.
   */
  export interface Schema$LegalCitationCourtDocumentUnknownDate {
    Date?: Schema$LegalDate;
    Description?: string | null;
  }
  export interface Schema$LegalCitationLaw {
    collectionname?: Schema$LegalCitationLawCollectionName;
    level?: Schema$LegalCitationLawLevel[];
    RevisionDate?: Schema$LegalDate;
    /**
     * LawStatus
     */
    Status?: number | null;
    /**
     * LawType
     */
    Type?: number | null;
  }
  /**
   * this is used to store information about law collections Normalized is the normalized name for the law (e.g., USC for USCA and USCS) Source is the text that represents the law in the citation
   */
  export interface Schema$LegalCitationLawCollectionName {
    Normalized?: string | null;
    Source?: string | null;
  }
  /**
   * Law have tree-like sturcture (title, section, etc), but the levels and their names are not fixed. e.g., we could have: US Constitution -\> Article 3 -\> Section 4, OR, US Code -\> Title 12 -\> Chapter 6 -\> Sub-chapter I -\> Section 602, OR, US Code -\> Title 10 -\> Sub-title A -\> Part 2 -\> Chapter 32 -\> Section 523. We use a repeated group to represent this structure. NOTE: Always insert higher levels before lower levels,
   */
  export interface Schema$LegalCitationLawLevel {
    /**
     * A counter that specifies the depth of the level in the parse
     */
    Depth?: number | null;
    /**
     * "SECTION, TITLE, PART, etc."
     */
    LevelTypeNormalized?: string | null;
    /**
     * "Section, Sect., §, etc"
     */
    LevelTypeSourceText?: string | null;
    /**
     * deprecated
     */
    LevelTypeString?: string | null;
    /**
     * The name of the chapter/section/etc.
     */
    Name?: string | null;
    /**
     * deprecated
     */
    Type?: number | null;
    /**
     * "3", "42(a)", etc
     */
    Value?: string | null;
  }
  export interface Schema$LegalDate {
    Day?: number | null;
    Month?: number | null;
    Year?: number | null;
  }
  export interface Schema$LegalPerson {
    Description?: string | null;
    LastName?: string | null;
    OtherNames?: string | null;
  }
  /**
   * Aesthetics score of a style image. Check http://go/styleai-indexing-g3doc#aesthetic-model for more details about the Style AI Aesthetics Model.
   */
  export interface Schema$LensDiscoveryStyleAestheticsScoreSignals {
    /**
     * Aesthetics score discretized into range [0, 100].
     */
    discretizedAestheticsScore?: number | null;
    version?: string | null;
  }
  /**
   * Bounding box with absolute integer coordinates.
   */
  export interface Schema$LensDiscoveryStyleBoundingBox {
    x1?: number | null;
    x2?: number | null;
    y1?: number | null;
    y2?: number | null;
  }
  /**
   * This message holds person attributes from the Person Interpreter model (go/person-interpreter) and the Style AI Iconic Person Scorer (go/styleai-indexing-g3doc#iconic-person-scorer) for the most iconic person in a style image. Discretization of float values is recommended by CDS for cheaper and more efficient storage. Next ID: 11
   */
  export interface Schema$LensDiscoveryStylePersonAttributes {
    /**
     * The visibility of the face of the most iconic person in the image discretized into range [0, 100].
     */
    discretizedFaceVisibilityScore?: number | null;
    discretizedFemaleConfidence?: number | null;
    /**
     * Male and female confidence scores are discretized into the [0, 100] range.
     */
    discretizedMaleConfidence?: number | null;
    /**
     * Age prediction is rounded to the first decimal place and multiplied by 10 (e.g. 12.3 -\> 123). *** Not populated in Amarna for legal reasons. ***
     */
    discretizedPredictedAge?: number | null;
    /**
     * The area ratio of the most iconic person to the whole image discretized into range [0, 100].
     */
    discretizedVisualSaliencyScore?: number | null;
    /**
     * Bounding box of the most iconic person in the image.
     */
    personBoundingBox?: Schema$LensDiscoveryStyleBoundingBox;
    personVisibilityScores?: Schema$LensDiscoveryStylePersonAttributesPersonVisibilityScores;
    /**
     * Bucketed version of the predicted age.
     */
    predictedAgeBucket?: string | null;
    version?: string | null;
  }
  export interface Schema$LensDiscoveryStylePersonAttributesPersonVisibilityScores {
    /**
     * A measure of the visibility of the most iconic person between [0, 100], derived by combining all label predictions by the Person Visibility model according to go/person-visibility-formula. Higher values indicate greater visibility while lower values indicate lesser visibility.
     */
    discretizedPersonVisibilityScore?: number | null;
    /**
     * Repeated for # of PersonVisibility types.
     */
    personVisibilityPredictions?: Schema$LensDiscoveryStylePersonAttributesPersonVisibilityScoresPersonVisibilityPrediction[];
  }
  export interface Schema$LensDiscoveryStylePersonAttributesPersonVisibilityScoresPersonVisibilityPrediction {
    /**
     * Confidence score of the visibility type prediction discretized into range [0, 100].
     */
    discretizedIconicPersonVisibilityConfidence?: number | null;
    /**
     * Classification of how much of the body of the most iconic person in the image is visible.
     */
    iconicPersonVisibilityType?: string | null;
  }
  /**
   * This message holds bounding boxes of detected people in the image. Next ID: 3
   */
  export interface Schema$LensDiscoveryStylePersonDetectionSignals {
    /**
     * Information of all detected people in the image, sorted by decreasing size of the bounding box. We store a maximum of 10 detected people.
     */
    detectedPersons?: Schema$LensDiscoveryStylePersonDetectionSignalsDetectedPerson[];
    version?: string | null;
  }
  /**
   * Holds information about a detected person in the image.
   */
  export interface Schema$LensDiscoveryStylePersonDetectionSignalsDetectedPerson {
    /**
     * Bounding box of the detected person.
     */
    boundingBox?: Schema$LensDiscoveryStyleBoundingBox;
  }
  /**
   * Prediction of a style image type: Stage, Stock, Street or Outfits. Check http://go/styleai-indexing-g3doc#style-image-type-classifier for more details about the Style AI Style Image Type Classifier.
   */
  export interface Schema$LensDiscoveryStyleStyleImageTypeSignals {
    /**
     * Repeated for # of StyleImageType types.
     */
    styleImageTypePredictions?: Schema$LensDiscoveryStyleStyleImageTypeSignalsStyleImageTypePrediction[];
    version?: string | null;
  }
  export interface Schema$LensDiscoveryStyleStyleImageTypeSignalsStyleImageTypePrediction {
    /**
     * Style image type confidence discretized into range [0, 100].
     */
    discretizedStyleImageTypeConfidence?: number | null;
    /**
     * Predicted style image type.
     */
    styleImageType?: string | null;
  }
  /**
   * Data to generate the list snippets UI.
   */
  export interface Schema$ListSnippetResponse {
    header?: Schema$ListSnippetResponseRow;
    /**
     * Should list be formatted as a table?
     */
    isTable?: boolean | null;
    row?: Schema$ListSnippetResponseRow[];
    /**
     * The number of rows annotated in the doc, of which 'row' is a subset.
     */
    totalRows?: number | null;
  }
  export interface Schema$ListSnippetResponseRow {
    column?: string[] | null;
  }
  /**
   * An unique identification of a chain. The following are the possible chain id forms: 1) prominent_entity_id only: The entity uniquely represents a chain, which may have multiple sitechunks. 2) sitechunk only: The sitechunk uniquely represents a chain while the chain currently does not have an entity in KG. 3) prominent_entity_id + sitechunk: The chain could be represented by the entity, but not merged at last, and the sitechunks represents the chain better. 4) prominent_entity_id + category: There are multiple subchains for the prominent entity, and category is used to differentiate subchains. NOTE: the size and complexity of the ChainId proto has implications in the serving system and should be thoughtfully kept under control.
   */
  export interface Schema$LocalsearchChainId {
    /**
     * The category associated with this chain, currently only used for subchains.
     */
    category?: string | null;
    /**
     * The Knowledge Graph (KG) entity of the chain, found and used in chain mining.
     */
    prominentEntityId?: string | null;
    /**
     * The website sitechunk/domain that is owned by the chain.
     */
    sitechunk?: string | null;
  }
  /**
   * Next tag: 23
   */
  export interface Schema$LocalsearchDocInfo {}
  /**
   * * Proto representing the metadata associated with food ordering internal action. Next ID: 13
   */
  export interface Schema$LocalsearchProtoInternalFoodOrderingActionMetadata {
    /**
     * The action type of this action metadata.
     */
    actionType?: string | null;
    /**
     * If true, it indicates that the merchant has a primarily food intent. This field will only be set when enable_food_gcid_strict_check in FoodOrderingRestrictionProto is true, see go/togo-unified:overlapping-for-le. See go/togo-unified-gcid for how this is calculated.
     */
    hasPrimarilyFoodIntent?: boolean | null;
    /**
     * If set, indicates that the food ordering service is out of operational hours. This could only be populated if the request explicitly asks for ignore_operational_hours in request (universalsearch/rpc/geo/food_ordering_restriction.proto). Design doc: go/fo-persistent-v1.
     */
    isOutOfOperationalHours?: boolean | null;
    /**
     * When true, indicates that this is a whitelisted restaurant from a first party (but non FO) partner, i.e. a merchant from the orderig app, who is Google owned first party food ordering platform. Design doc: go/onboard-mavn-to-fo. Tracking bug: b/150331855
     */
    isWhitelistedExternalRestaurant?: boolean | null;
    /**
     * Next opening time when the food ordering service will be available. This is only present if the unavailability reason is OUT_OF_OPERATIONAL_HOURS.
     */
    nextOpeningTime?: string | null;
    /**
     * Indicates whether only order ahead services are available. Order ahead services allow only to place order for future and ASAP order can not be placed via them.
     */
    onlyOrderAheadServicesAvailable?: boolean | null;
    /**
     * Aggregated service information by service type. Each service type would only have one ServiceInfo. Optional.
     */
    serviceInfo?: Schema$LocalsearchProtoInternalFoodOrderingActionMetadataServiceInfo[];
    /**
     * Food ordering service type.
     */
    supportedServiceType?: string | null;
    /**
     * Reason for unavailability of internal food ordering action. This is only present when FOPA is unavailable for a particular restaurant. When this is set, all other fields in this proto will not be populated. Note(fo-search): If there are log only partners and this particular restaurant is only supported because of log only partners, this field will not be set to NOT_INTEGRATED_WITH_FOPA.
     */
    unavailabilityReason?: string | null;
  }
  /**
   * Includes all partners that are either open now or supporting order ahead.
   */
  export interface Schema$LocalsearchProtoInternalFoodOrderingActionMetadataAvailablePartnerInfo {
    /**
     * Available partner's id.
     */
    availablePartnerId?: string | null;
    /**
     * Indicates whether the partner is log only.
     */
    logOnly?: boolean | null;
  }
  export interface Schema$LocalsearchProtoInternalFoodOrderingActionMetadataServiceInfo {
    /**
     * Information about Food Ordering partner, which is used for whitelisting the partner in Food Ordering entry points such as Placesheet.
     */
    availablePartnerInfo?: Schema$LocalsearchProtoInternalFoodOrderingActionMetadataAvailablePartnerInfo[];
    /**
     * Maximum max_wait_time in second.
     */
    maxWaitTimeSec?: string | null;
    /**
     * Only present for delivery case, service fee is not included.
     */
    minDeliveryFee?: Schema$GoogleTypeMoney;
    /**
     * Minimum min_wait_time in second.
     */
    minWaitTimeSec?: string | null;
    /**
     * Food ordering service type. Please note that only ServiceType.PICKUP and ServiceType.DELIVERY are valid values for this field.
     */
    serviceType?: string | null;
  }
  /**
   * Next Id: 36
   */
  export interface Schema$LocalWWWInfo {
    address?: Schema$LocalWWWInfoAddress[];
    brickAndMortarStrength?: number | null;
    cluster?: Schema$LocalWWWInfoCluster[];
    docid?: string | null;
    /**
     * Information about geo locations, rather than individual businesses.
     */
    geotopicality?: Schema$RepositoryAnnotationsGeoTopicality;
    hours?: Schema$LocalWWWInfoOpeningHours[];
    /**
     * Does this LocalWWWInfo represent a widely-distributed chain?
     */
    isLargeChain?: boolean | null;
    isLargeLocalwwwinfo?: boolean | null;
    phone?: Schema$LocalWWWInfoPhone[];
    /**
     * These are per-document signals independent of any particular address.
     */
    siteSiblings?: number | null;
    /**
     * These are for convenience during intermediate data processing, and should be cleared before the data gets into doc-joins.
     */
    url?: string | null;
    wrapptorItem?: Schema$LocalWWWInfoWrapptorItem[];
  }
  /**
   * These are the addresses, phone numbers, and opening hours related to this document, or the local businesses mentioned on this document. We currently populate these fields from web extractions, i.e, from the data present explicitly on the document, but in future, they can also be filled with data coming from the local index. We populate addresses and phone numbers only if there are <= 4 addresses and phone numbers on the document, respectively. This is primarily for space reasons.
   */
  export interface Schema$LocalWWWInfoAddress {
    address?: Schema$GeostoreAddressProto;
    addrFprint?: string | null;
    latE7?: number | null;
    lngE7?: number | null;
  }
  export interface Schema$LocalWWWInfoCluster {
    addrFprint?: string | null;
    /**
     * Confidence score for business mention annotations which is copied from LocalEntityAnnotations::location_confidence.
     */
    annotationConfidence?: number | null;
    clusterdocid?: string | null;
    clusterid?: string | null;
    /**
     * Probability that this is the authority page of the business. Same as LocalListing.authority_page_probability, only set for pages with page_type_flags & AUTHORITY.
     */
    confidence?: number | null;
    /**
     * Feature type for this listing, from LocalListing::info::related_feature. A geostore::FeatureProto::TypeCategory. Intended primarily to indicate POI-ness (i.e., TYPE_ESTABLISHMENT_POI).
     */
    featureType?: number | null;
    /**
     * Opening hours for the business, from Local attributes and/or extracted annotations.
     */
    hours?: Schema$GeostoreTimeScheduleProto;
    hoursSource?: string | null;
    includeInIndex?: boolean | null;
    /**
     * TODO(local-universal) Consider deleting is_plusbox once the new scheme that uses make_plusbox_visible rolled out.
     */
    isPlusbox?: boolean | null;
    latitudeE6?: number | null;
    /**
     * DEPRECATED / NO LONGER WRITTEN. URL path level from actual references to this webpage.
     */
    level?: number | null;
    longitudeE6?: number | null;
    /**
     * A hint for frontend to decide whether this plusbox should be visible or not.
     */
    makePlusboxVisible?: boolean | null;
    /**
     * Menu link for the business. Currently only comes from Local attributes.
     */
    menuUrl?: string[] | null;
    /**
     * Type of the web reference.
     */
    pageTypeFlags?: number | null;
    phoneFprint?: string | null;
    phoneNumber?: Schema$TelephoneNumber;
    postalAddress?: Schema$PostalAddress;
    /**
     * DEPRECATED / NO LONGER WRITTEN. How relevant the webpage is to the business (clustering distance). Same as LocalListing::Reference.relevance. Typically only set for pages with (page_type_flags & WEB_EXTRACTION && !AUTHORITY).
     */
    relevance?: number | null;
    showInSnippets?: boolean | null;
    source?: string[] | null;
    title?: string | null;
  }
  /**
   * Populated from StoreHoursAnnotations.
   */
  export interface Schema$LocalWWWInfoOpeningHours {
    hours?: Schema$GeostoreTimeScheduleProto;
    hoursFprint?: string | null;
  }
  export interface Schema$LocalWWWInfoPhone {
    phoneFprint?: string | null;
    phoneNumber?: Schema$TelephoneNumber;
  }
  /**
   * A single WrapptorItem, with a business name, an address and a phone number. We keep only the fingerprints of address and phone number. The full address and phone protos will be elsewhere within LocalWWWInfo.
   */
  export interface Schema$LocalWWWInfoWrapptorItem {
    addrFprint?: string | null;
    bizName?: string | null;
    phoneFprint?: string | null;
  }
  /**
   * Proto-representation of the Crawler-ID in Web-Search (Alexandria-Scope). The string-representation (covered in //indexing/crawler_id/scope/alexandria/crawler_id.h) and the proto-representation are identical in meaning. For more information in regard to the crawler_id, please look at //depot/google3/indexing/crawler_id Used within the following components: - WebMirror: To understand the parsed crawler-ID and apply attributes within their own tables. - Serving : to identify the crawler-ID within the GenericSearchResponse, which implies being stored in the MDU and returned by ascorer to Superroot. - QSessions: To store the crawler-ID in all logged events for analysis. The default values represent the 'empty string' crawler-ID for the Alexandria-scope.
   */
  export interface Schema$LogsProtoIndexingCrawlerIdCrawlerIdProto {
    /**
     * The country to crawl the country from, defaults to the default non-specified crawling node (which is interpreted by most web-servers as USA). When specified, the crawling will fetch the document from a node in that country instead.
     */
    country?: string | null;
    /**
     * The device type, which maps into the useragent to be set when initiating the fetch-request, e.g. desktop-googlebot vs. smartphone-googlebot.
     */
    deviceType?: string | null;
    /**
     * Specifies whether the document is a duplicated document from the index growth experiment, detailed at go/indexsize_exp, defaults to not in any experiment.
     */
    indexGrowthExptType?: string | null;
    /**
     * The language being set by the crawler. Defaults to UNKNOWN_LANGUAGE which indicates to not apply an accept-language header on the FetchRequest. When a language is specified, on crawling this language is converted into an accept-language header (e.g. GERMAN -\> "Accept-language: de"). Script variations, e.g. ZH-HANS vs. ZH-HANT, are handled as different enum values (e.g. CHINESE vs. CHINESE_T).
     */
    language?: string | null;
    /**
     * Language-code used for identifying the locale of the document. 'language' and 'country' above are used for web-based documents, representing the detected language of the document and the country it was crawled from. The language code here, however, rather represents an artifical language_code applied to manually translated webpages (e.g. feeds), for instance for the pidgin-usecase. They are limited to the set of III-codes being supported by the client, yet are beyond the enum in 'language', e.g. to support variants of English across different countries.
     */
    languageCode?: string | null;
  }
  /**
   * Logs version of the repository_webref.EntityLinkMetadata proto Used to represent QRef implications
   */
  export interface Schema$LogsSemanticInterpretationIntentQueryEntityLinkMetadata {
    aggregateFlags?: Schema$LogsSemanticInterpretationIntentQueryLinkKindFlags;
    kindInfo?: Schema$LogsSemanticInterpretationIntentQueryLinkKindInfo[];
  }
  /**
   * Logs version of the repository_webref.LinkKindFlags proto Used to represent QRef implications Next available tag: 8
   */
  export interface Schema$LogsSemanticInterpretationIntentQueryLinkKindFlags {
    cluster?: string | null;
    geoContainment?: string | null;
    implication?: string | null;
    latentEntity?: string | null;
    mdvc?: string | null;
    property?: string | null;
    /**
     * Has not been useful since at least 2015 (before this was logged).
     */
    resolution?: string | null;
  }
  /**
   * Logs version of the repository_webref.LinkKindInfo proto Used to represent QRef implications
   */
  export interface Schema$LogsSemanticInterpretationIntentQueryLinkKindInfo {
    flags?: Schema$LogsSemanticInterpretationIntentQueryLinkKindFlags;
    kcLinkName?: string | null;
    topicPropertyName?: string | null;
  }
  /**
   * Logs version of the repository_webref.SupportTransferRule proto Non-logs version supports go/stbr
   */
  export interface Schema$LogsSemanticInterpretationIntentQuerySupportTransferRule {
    allowWildcardIntents?: boolean | null;
    domain?: string | null;
    isReverseLink?: boolean | null;
    mentionsOnly?: boolean | null;
    supportShare?: boolean | null;
    targetCollection?: string | null;
    userCountry?: string | null;
    userLanguage?: string | null;
  }
  /**
   * Logs version of the repository_webref.WebrefEntityRelationship proto Used to represent QRef implications
   */
  export interface Schema$LogsSemanticInterpretationIntentQueryWebrefEntityRelationship {
    entityIndex?: number | null;
    linkMetadata?: Schema$LogsSemanticInterpretationIntentQueryEntityLinkMetadata;
    linkWeight?: number | null;
  }
  /**
   * An experimental long snippet. The protocol allows any permutation of headers and plain text paragraphs, but typical responses are just paragraphs or alternating headers and paragraphs.
   */
  export interface Schema$LongStructuredSnippet {
    entry?: Schema$LongStructuredSnippetEntry[];
  }
  export interface Schema$LongStructuredSnippetEntry {
    /**
     * Is this a header or normal paragraph?
     */
    header?: boolean | null;
    /**
     * The text of the header or paragraph.
     */
    text?: string | null;
  }
  /**
   * The information on whether the contact is related to an app shortcut. Next ID: 2
   */
  export interface Schema$MajelContactInformationShortcutInformation {
    shortcutContactType?: string | null;
  }
  /**
   * Flags that describe the information about a special word. If you add another flag please add it to the special words implemenation in google3/maps/quality/internal/special_words.cc. -- Next available id: 22 --
   */
  export interface Schema$MapsQualitySpecialWordsFlags {
    /**
     * An affix that indicates an alley. Alleys are unnamed, numbered routes that are always linked to a "parent street". As these parent streets can be named e.g. "7th street" and alleys might be referred to as "7th alley", we need to be able to distinguish those affixes. For more details about alleys see go/vn-alley-geocoding.
     */
    isAlleyAffix?: boolean | null;
    /**
     * Common words E.g.: center, park, etc.
     */
    isCommonWord?: boolean | null;
    /**
     * Whether this special word is part of a name without a separator (like e.g. suffix "strasse" in Freigutstrasse).
     */
    isDeconstructible?: boolean | null;
    /**
     * Directional modifier. E.g.: north, south, etc.
     */
    isDirectionalModifier?: boolean | null;
    /**
     * An affix that indicates distance marker on a route, e.g., 'km'.
     */
    isDistanceMarker?: boolean | null;
    /**
     * Whether geo paths are forbidden to contain this word.
     */
    isForbiddenWord?: boolean | null;
    /**
     * A keyword for a house id.
     */
    isHouseIdIdentifier?: boolean | null;
    /**
     * Intersection. E.g.: and, at, corner.
     */
    isIntersectionConnector?: boolean | null;
    /**
     * An affix that indicates a landmark, e.g. "opposite", "near" etc.
     */
    isLandmarkIdentifier?: boolean | null;
    /**
     * Language indicator. E.g.: platz in German, straat in Dutch.
     */
    isLanguageIndicator?: boolean | null;
    /**
     * Whether this is a name synonym and should be allowed to be matched on when searching (that is, added to the retrieval query with the name/ prefix).
     */
    isNameSynonym?: boolean | null;
    /**
     * Terms which are not allowed to be used by the legacy street number detection.
     */
    isNotForLegacyStreetNumberDetection?: boolean | null;
    /**
     * Terms which are not allowed to be treated as optional.
     */
    isNotOptionalizable?: boolean | null;
    /**
     * Numbers. E.g.: 1, one, 2, two.
     */
    isNumber?: boolean | null;
    /**
     * E.g. suffixes in French: bis, ter.
     */
    isNumberSuffix?: boolean | null;
    /**
     * Is this special word optional?
     */
    isOptional?: boolean | null;
    /**
     * E.g.: 1st, first.
     */
    isOrdinalNumber?: boolean | null;
    /**
     * Optional terms that should not geocode by themselves.
     */
    isPenalizedIfMissing?: boolean | null;
    /**
     * Personal titles (e.g. doctor, professor, general, etc.)
     */
    isPersonalTitle?: boolean | null;
    /**
     * E.g.: the, in, near, where.
     */
    isStopWord?: boolean | null;
    /**
     * A keyword that denotes a street number, e.g. "number", "unit" etc.
     */
    isStreetNumberIdentifier?: boolean | null;
  }
  /**
   * The goal of the special words are to: - Canonicalize the user query by rewriting abbreviations into the canonical version that is indexed. - Figure out at index time for each element which tokens are important. We use this to decide if an address component is matched or not. For instance in "1600 Pennsylvania Ave NW" since "NW" is recognised as a directional (and "Ave" is recognised as a street visible type), "Pennsylvania" becomes the name and you can't match this street by just specifying "avenue" or "NW".
   */
  export interface Schema$MapsQualitySpecialWordsProto {
    /**
     * Alternate versions of this canonical form. This is mainly abbreviations of the canonical form e.g. "St", "NE", etc. This should be present as it is used in the specified language with the correct capitalization, accents, etc. in UTF-8.
     */
    alternate?: string[] | null;
    /**
     * Canonical versions: the version which is in oyster. This should be present as it is used in the specified language with the correct capitalization, accents, etc. in UTF-8. The canonical can be a single or a multi-token string. There can be several canonicals, e.g. "center" and "centre" in English.
     */
    canonical?: string[] | null;
    /**
     * If empty, apply this rule to any country. Otherwise, a list of ISO 3166-1 alpha-2 (2-letter uppercase) country codes that this description applies to.
     */
    country?: string[] | null;
    /**
     * Boolean flags indicating what type of special word this is.
     */
    flags?: Schema$MapsQualitySpecialWordsFlags;
    /**
     * The III language code of the language that this description applies to. No language means that this applies worldwide. This could be useful for codes like country codes or airport codes or for displayed language neutral icons. A special word with a language code here also applies to the regional variants of that language (e.g. "en" applies to "en-GB" and "en-US" as well).
     */
    language?: string[] | null;
    position?: string | null;
    /**
     * visible_type_id from VisibleTypeProto for visible types converted to the special words. For original special words this field is empty.
     */
    visibleTypeId?: string[] | null;
  }
  /**
   * Stores coordinates corresponding to the dimensions of the box surrounding the region of interest. Coordinates may be normalized or absolute depending on the implementation and signal corresponding to this field.
   */
  export interface Schema$MediaIndexBoundingbox {
    /**
     * The area of the region as a fraction of the image. The value is in the range (0, 1).
     */
    areaFraction?: number | null;
    xmax?: number | null;
    xmin?: number | null;
    ymax?: number | null;
    ymin?: number | null;
  }
  /**
   * Packages entity id and score together for a given source.
   */
  export interface Schema$MediaIndexEntityField {
    /**
     * The custom source should only be a-z[0-9] dashes, underscores, and colons. Special characters should be avoided.
     */
    customSource?: string | null;
    entityId?: string | null;
    quantizedScore?: string | null;
    source?: string | null;
  }
  /**
   * Identifier for frames associated with a video.
   */
  export interface Schema$MediaIndexFrameIdentifier {
    previewFrameZeroVariant?: Schema$MediaIndexFrameIdentifierPreviewFrameZeroVariant;
    /**
     * Offset of the frame from the beginning of the video (in milliseconds).
     */
    timestampMs?: number | null;
  }
  /**
   * This variant defines the frame to be the first frame of the video's generated preview.
   */
  export interface Schema$MediaIndexFrameIdentifierPreviewFrameZeroVariant {
    previewLength?: string | null;
    /**
     * All xtags used in the generation of the preview. The same frame generated from the same preview with different xtags will likely have different bytes (such as, for example, resulting from a different aspect ratio).
     */
    xtagList?: Schema$MediaIndexXtagList;
  }
  /**
   * Metadata associated with a region in an image. NEXT_ID: 14
   */
  export interface Schema$MediaIndexRegion {
    /**
     * The bounding box corresponding to the region.
     */
    boundingBox?: Schema$MediaIndexBoundingbox;
    /**
     * Detected Entities found within this region.
     */
    entityFields?: Schema$MediaIndexEntityField[];
    /**
     * The labels associated with the region encoded as a SparseFloatVector to facilitate dot product computation during sorting. The columns are the fingerprints of the labels and the values are the corresponding confidence scores. The vector is L2 normalized.
     */
    labels?: Schema$MediaIndexSparseFloatVector;
    /**
     * PRIMI Apparel Features v2 embedding and tokens.
     */
    primiApparelFeaturesV2?: string | null;
    primiApparelTokensV2?: string[] | null;
    /**
     * PRIMI Generic Features v2.5 embedding and tokens.
     */
    primiGenericFeaturesV25?: string | null;
    primiGenericTokensV25?: string[] | null;
    /**
     * Starburst v4 embedding and tokens.
     */
    starburstFeaturesV4?: string | null;
    /**
     * Starburst v5 embedding and tokens.
     */
    starburstFeaturesV5?: string | null;
    starburstTokensV4?: string[] | null;
    starburstTokensV5?: string[] | null;
    starburstV4?: Schema$ImageContentStarburstVersionGroup;
    starburstV5?: Schema$ImageContentStarburstVersionGroup;
  }
  export interface Schema$MediaIndexSparseFloatVector {
    /**
     * Parallel arrays of column / value. Exactly one of those columns vector should be set. Columns must be in monotonically increasing order.
     */
    columns?: string[] | null;
    columnsInt16?: string | null;
    columnsInt32?: number[] | null;
    /**
     * Columns are fixed integers, used for accelerated parse.
     */
    columnsInt64?: string[] | null;
    columnsInt8?: string | null;
    values?: number[] | null;
  }
  /**
   * Data about the behavior of the video across the pages it is embedded in.
   */
  export interface Schema$MediaIndexVideoCentroid {
    domainScores?: Schema$MediaIndexVideoCentroidDomainScore[];
  }
  /**
   * See go/video-centroid-domain-score.
   */
  export interface Schema$MediaIndexVideoCentroidDomainScore {
    /**
     * The domain this score was generated for.
     */
    domain?: string | null;
    /**
     * Number of pages from the domain used to generate this DomainScore.
     */
    numDocs?: number | null;
    /**
     * In general, lower scores indicate the video is appearing on more diverse pages.
     */
    score?: number | null;
  }
  /**
   * Core signals for video content corpus which will be fetched for every query. If a signal is required only for a subset of search queries then it should be added as a separate field in the schema.
   */
  export interface Schema$MediaIndexVideoCoreSignals {
    centroid?: Schema$MediaIndexVideoCentroid;
    videoFrames?: Schema$MediaIndexVideoFrame[];
  }
  /**
   * Data about a frame associated with the video.
   */
  export interface Schema$MediaIndexVideoFrame {
    /**
     * The canonical docid of the frame.
     */
    docid?: string | null;
    frameIdentifier?: Schema$MediaIndexFrameIdentifier;
    /**
     * Metadata associated with regions within this frame.
     */
    regions?: Schema$MediaIndexRegion[];
    /**
     * Starburst v4 embedding and tokens.
     */
    starburstFeaturesV4?: string | null;
    /**
     * Note: due to the migration to Golden7-source Starburst v4 embedding, no starburst_tokens_v4 will be provided in video content corpus (go/video-content-corpus). But this field is kept in case other purposes may still use it in the proto.
     */
    starburstTokensV4?: string[] | null;
    /**
     * Set of available thumbnail types for this frame. Should be valid image_base.ThumbnailType values (enumerated at http://google3/image/base/thumbnail-type.proto).
     */
    thumbnailType?: string[] | null;
  }
  /**
   * Data about multiple video frames associated with the video.
   */
  export interface Schema$MediaIndexVideoFrames {
    videoFrames?: Schema$MediaIndexVideoFrame[];
  }
  export interface Schema$MediaIndexXtag {
    /**
     * Names are all stored case-sensitive, and no case-folding is done for comparisons.
     */
    name?: string | null;
    /**
     * The value associated with this Xtag. Values are all stored case-sensitive, and no case-folding is done for comparisons.
     */
    value?: string | null;
  }
  /**
   * XtagList -- a collection of Xtag instances with unique names. This would be associated with one specific piece of content.
   */
  export interface Schema$MediaIndexXtagList {
    xtags?: Schema$MediaIndexXtag[];
  }
  /**
   * Note: This message is also in the RTUpdate protocol buffer.
   */
  export interface Schema$MobilePerDocData {
    flags?: number | null;
    /**
     * DEPRECATED: Url of the mobile version of the document. This is set during canonicalization if we do not know that the Web url also serves the mobile version.
     */
    mobileurl?: string | null;
    /**
     * DEPRECATED: The transcoded page quality repesented in 7-bits range from 0 to 127.
     */
    transcodedPageScore?: number | null;
  }
  /**
   * Defines the presence of a field. This can help distinguish between empty vs. not-present annotations.
   */
  export interface Schema$MultiscaleFieldPresence {
    /**
     * Whether the field (data field or pointer) is defined.
     */
    present?: boolean | null;
    wellDefined?: string | null;
  }
  /**
   * Defines the presence of a layer (previously called "scale").
   */
  export interface Schema$MultiscaleLayerPresence {
    /**
     * If the layer is not materialized but things point into it, this gives the effective length.
     */
    implicitLength?: number | null;
    /**
     * Whether the layer is present.
     */
    present?: boolean | null;
  }
  /**
   * Pointer to a single node in a target scale. `pointer.Index` fields should be annotated with a `(pointer.to)` annotation, indicating what scale they point at.
   */
  export interface Schema$MultiscalePointerIndex {
    /**
     * The index of the node that this pointer points to.
     */
    index?: number | null;
  }
  /**
   * Pointer to a contiguous range of nodes in a target scale. `pointer.Span` fields should be annotated with a `(pointer.to)` annotation, indicating what scale they point at.
   */
  export interface Schema$MultiscalePointerSpan {
    /**
     * The exclusive end index for the span of nodes that this pointer points to -- i.e., one plus the index of the last node in the span. Must be greater than or equal to `start`. If equal to `start`, then the target span is empty.
     */
    limit?: number | null;
    /**
     * The inclusive start index for the span of nodes that this pointer points to -- i.e., the index of the first node in the span.
     */
    start?: number | null;
  }
  /**
   * CandidateFeature contains a pair of feature name and score for a snippet candidate.
   */
  export interface Schema$MustangReposWwwSnippetsCandidateFeature {
    /**
     * Name corresponds to the names in WebChooserScorer::FeatureNames.
     */
    name?: string | null;
    score?: number | null;
  }
  /**
   * Data to generate the list preview for organic list snippets.
   */
  export interface Schema$MustangReposWwwSnippetsOrganicListSnippetResponse {
    /**
     * The texts of header and listing items.
     */
    header?: string | null;
    /**
     * The ratio of header tokens covered by title.
     */
    headerTitleRedundancy?: number | null;
    /**
     * If the header being used in organic snippet.
     */
    headerUsedInSnippet?: boolean | null;
    items?: string[] | null;
    /**
     * The number of items in the original list.
     */
    originalTotalItems?: number | null;
    /**
     * The score of the radish signal.
     */
    radishScore?: number | null;
  }
  /**
   * This message contains features for candidates at the chooser level. For each snippet candidate, we also log the final score as the last candidate feature.
   */
  export interface Schema$MustangReposWwwSnippetsSnippetCandidate {
    /**
     * data_source_type corresponds to the ChosenSnippet::SnippetType enum.
     */
    dataSourceType?: number | null;
    features?: Schema$MustangReposWwwSnippetsCandidateFeature[];
    text?: string | null;
  }
  /**
   * This is a protocol buffer to export into flatfiles in ranklab. All fields are converted into flatfiles with some specific prefix and a field name like 'snippet_features_snippet_data_source_type'.
   */
  export interface Schema$MustangReposWwwSnippetsSnippetsRanklabFeatures {
    /**
     * Browser width.
     */
    browserWidth?: number | null;
    /**
     * Features for snippets candidates, generated by both old and new scorer. Currently only features for chosen candidate is generated.
     */
    candidates?: Schema$MustangReposWwwSnippetsSnippetCandidate[];
    /**
     * Snippet features for the final chosen snippet. This field is firstly populated by Muppet, and then overwriten by Superroot if SnippetBrain is triggered.
     */
    displaySnippet?: Schema$QualityPreviewRanklabSnippet;
    /**
     * locale of the document.
     */
    documentLanguage?: string | null;
    /**
     * Original query term coverage in titles and / or snippets.
     */
    originalQueryTermCoverages?: Schema$QualityPreviewSnippetQueryTermCoverageFeatures;
    /**
     * locale of the query,
     */
    queryLanguage?: string | null;
    /**
     * Snippet data source.
     */
    snippetDataSourceType?: number | null;
    /**
     * Query term coverage in snippets.
     */
    snippetQueryTermCoverage?: number | null;
    /**
     * Snippet features for Muppet snippet candidates. In production, only the data for chosen snippet will be recorded.
     */
    snippets?: Schema$QualityPreviewRanklabSnippet[];
    /**
     * Title data source.
     */
    titleDataSourceType?: number | null;
    /**
     * Query term coverage in titles.
     */
    titleQueryTermCoverage?: number | null;
    /**
     * Per-candidate title features for ranklab models, sorted from the best candidate to the worst candidate (i.e., the first element is the actually selected title).
     */
    titles?: Schema$QualityPreviewRanklabTitle[];
    /**
     * Query term coverage in titles and snippets.
     */
    titleSnippetQueryTermCoverage?: number | null;
  }
  /**
   * Tidbit token rendered in generating snippet/title.
   */
  export interface Schema$MustangSnippetsRenderedToken {
    /**
     * Is the rendered token bolded (insided )
     */
    bolded?: boolean | null;
    /**
     * Byte offset range in the rendered text that corresponds to this token. [byte_offset_begin, byte_offset_end) inclusive
     */
    byteOffsetBegin?: number | null;
    /**
     * exclusive
     */
    byteOffsetEnd?: number | null;
    /**
     * Section and TokenPos of the token.
     */
    section?: string | null;
    tokenPos?: string | null;
  }
  /**
   * Globally unique identifier for a virtual network.
   */
  export interface Schema$NetFabricRpcVirtualNetworkId {
    /**
     * required
     */
    id?: number | null;
  }
  export interface Schema$NlpMeaningMeaningRemodeling {
    /**
     * This field can be set to true to indicate that the associated part of the schema is being deleted as part of the remodeling.
     */
    deletion?: boolean | null;
    /**
     * The remodeling ID. Each remodeling has a unique ID that is used to associate changes with that remodeling.
     */
    id?: string | null;
  }
  /**
   * This is the FunctionCall counterpart to the "MeaningRemodelings" structure. When present, it is used for typechecking the FunctionCall against the schema with the remodelings enabled.
   */
  export interface Schema$NlpMeaningMeaningRemodelingControl {
    remodelingId?: string[] | null;
  }
  /**
   * This proto will be added as a field to part of a schema to indicate it is being remodeled.
   */
  export interface Schema$NlpMeaningMeaningRemodelings {
    remodeling?: Schema$NlpMeaningMeaningRemodeling[];
  }
  /**
   * Associates remodeling data with a semantic type name.
   */
  export interface Schema$NlpMeaningSemanticTypeNameMeaningRemodelings {
    /**
     * Semantic type name.
     */
    name?: string | null;
    remodelings?: Schema$NlpMeaningMeaningRemodelings;
  }
  /**
   * Representation of a phrase in the document with a particular annotation. Provides the ability to annotate arbitrary spans in the document. This is intended for representing spans that SAFT does NOT consider to be mentions of entities within a SAFT document.
   */
  export interface Schema$NlpSaftAnnotatedPhrase {
    /**
     * Annotation for this phrase.
     */
    info?: Schema$Proto2BridgeMessageSet;
    /**
     * Contains start and end pointers to the token array for this span.
     */
    phrase?: Schema$NlpSaftPhrase;
  }
  /**
   * Constituency parse tree node with tokens as the leaf nodes.
   */
  export interface Schema$NlpSaftConstituencyNode {
    /**
     * An arbitrary number of children, ordered from left to right; empty for preterminals. Represented via indices into Document.constituency_node.
     */
    child?: number[] | null;
    /**
     * The label of the current node.
     */
    label?: string | null;
    /**
     * A phrase that contains information about the span and the (optional) head token. For terminal nodes the head of the phrase holds the word.
     */
    phrase?: Schema$NlpSaftPhrase;
  }
  /**
   * A document contains the raw text contents of the document as well as an analysis. The document can be split into tokens which can contain information about POS tags and dependency relations. The document can also contain entities and mentions of these entities in the document. Next available id: 36
   */
  export interface Schema$NlpSaftDocument {
    /**
     * Annotated phrases in the document that are not semantically well-defined mentions of entities.
     */
    annotatedPhrase?: Schema$NlpSaftAnnotatedPhrase[];
    /**
     * Generic annotations.
     */
    annotations?: Schema$Proto2BridgeMessageSet;
    /**
     * Document author(s).
     */
    author?: string[] | null;
    /**
     * Document's byline date, if available: this is the date that will be shown in the snippets in web search results. It is stored as the number of seconds since epoch. See segindexer/compositedoc.proto
     */
    bylineDate?: string | null;
    /**
     * Constituency parse tree nodes for the sentences in this document.
     */
    constituencyNode?: Schema$NlpSaftConstituencyNode[];
    /**
     * The root node of the constituency tree for each sentence. If non-empty, the list of roots will be aligned with the sentences in the document. Note that some sentences may not have been parsed for various reasons; these sentences will be annotated with placeholder "stub parses". For details, see //nlp/saft/components/constituents/util/stub-parse.h.
     */
    constituencyRoot?: number[] | null;
    /**
     * Age of the content of the document. For details, see: quality/historical/shingle/signals/contentage.proto The format has been translated to a canonical timestamp (seconds since epoch).
     */
    contentage?: string | null;
    /**
     * Stores minimum of first time google successfully crawled a document, or indexed the document with contents (i.e, not roboted). It is stored as the number of seconds since epoch. See quality/historical/signals/firstseen/firstseen.proto
     */
    contentFirstseen?: string | null;
    /**
     * Optional document content_type (from webutil/http/content-type.proto). Used for setting the content_type when converting the SAFT Document to a CompositeDoc. Will be inferred if not given here.
     */
    contentType?: number | null;
    /**
     * Document anchor date in YYYYMMDDhhmmss format.
     */
    date?: string | null;
    /**
     * Identifier for document.
     */
    docid?: string | null;
    /**
     * Entities in the document.
     */
    entity?: Schema$NlpSaftEntity[];
    /**
     * Entity labels used in this document. This field is used to define labels for the Entity::entity_type_probability field, which contains corresponding probabilities. WARNING: This field is deprecated. go/saft-replace-deprecated-entity-type
     */
    entityLabel?: string[] | null;
    /**
     * Focus entity. For lexicon articles, like Wikipedia pages, a document is often about a certain entity. This is the local entity id of the focus entity for the document.
     */
    focusEntity?: number | null;
    /**
     * Flag for indicating that the document is a gold-standard document. This can be used for putting additional weight on human-labeled documents in contrast to automatically labeled annotations.
     */
    golden?: boolean | null;
    /**
     * HTTP header for document. If the HTTP headers field is set it should be the complete header including the HTTP status line and the trailing cr/nl. HTTP headers are not required to be valid UTF-8. Per the HTTP/1.1 Syntax (RFC7230) standard, non-ASCII octets should be treated as opaque data.
     */
    httpHeaders?: string | null;
    /**
     * The hyperlinks in the document. Multiple hyperlinks are sorted in left-to-right order.
     */
    hyperlink?: Schema$NlpSaftHyperlink[];
    /**
     * Generic labeled spans (produced by the span labeling framework, go/saft-span-labeling). The map key identifies spans of the same type. By convention, it should be of the form "team_name/span_type_name".
     */
    labeledSpans?: {[key: string]: Schema$NlpSaftLabeledSpans} | null;
    /**
     * Document language (default is English). This field's value maps cleanly to the i18n.languages.Language proto enum (i18n::languages::Language in C++).
     */
    language?: number | null;
    /**
     * Last significant update of the page content, in the same format as the contentage field, and also derived from ContentAge.last_significant_update in quality/historical/shingle/signals/contentage.proto.
     */
    lastSignificantUpdate?: string | null;
    /**
     * Measures in the documents. This covers both time expressions as well as physical quantities.
     */
    measure?: Schema$NlpSaftMeasure[];
    /**
     * True if this document contains privacy sensitive data. When the document is transferred in RPC calls the RPC should use SSL_PRIVACY_AND_INTEGRITY security level.
     */
    privacySensitive?: boolean | null;
    /**
     * Relations between entities in the document.
     */
    relation?: Schema$NlpSaftRelation[];
    /**
     * True if some RPC which touched this document had an error.
     */
    rpcError?: boolean | null;
    /**
     * The semantic nodes for the document represent arbitrary types of higher-level abstractions beyond entity mention coreference and binary relations between entities. These may include: n-ary relations, semantic frames or events. The semantic nodes for a document are the nodes in a directed acyclic graph, with an adjacency list representation.
     */
    semanticNode?: Schema$NlpSaftSemanticNode[];
    /**
     * Sub-sections for document for dividing a document into volumes, parts, chapters, sections, etc.
     */
    subsection?: Schema$NlpSaftDocument[];
    /**
     * Document's syntactic date (e.g. date explicitly mentioned in the URL of the document or in the document title). It is stored as the number of seconds since epoch. See quality/timebased/syntacticdate/proto/syntactic-date.proto
     */
    syntacticDate?: string | null;
    /**
     * Raw text contents of document. (In docjoin attachments from the SAFT goldmine annotator this field will be empty.)
     */
    text?: string | null;
    /**
     * Optional document title.
     */
    title?: string | null;
    /**
     * Tokenization of the document.
     */
    token?: Schema$NlpSaftToken[];
    topic?: Schema$NlpSaftDocumentTopic[];
    /**
     * Whether to enable component tracing during analysis of this document. See http://go/saft-tracing for details.
     */
    trace?: boolean | null;
    /**
     * Source document URL.
     */
    url?: string | null;
  }
  /**
   * Document topic(s).
   */
  export interface Schema$NlpSaftDocumentTopic {
    /**
     * Topic name or identifier.
     */
    name?: string | null;
    /**
     * Topic score.
     */
    score?: number | null;
  }
  /**
   * Named entities in the document.
   */
  export interface Schema$NlpSaftEntity {
    /**
     * Antecedent for entity. This is used to make coreference chains before the mentions in the document are grouped by entity.
     */
    antecedent?: number | null;
    /**
     * Entity type (e.g. PER, ORG, LOC). WARNING: This field is deprecated. go/saft-replace-deprecated-entity-type
     */
    entityType?: string | null;
    /**
     * Probability distribution over entity types. These values correspond to Document.entity_label values: doc.entity[e].entity_type_probability[n] is the probability that the correct label for doc.entity[e] is doc.entity_label[n]. These probabilities sum to 1.0 (with possible rounding error). WARNING: This field is deprecated. go/saft-replace-deprecated-entity-type
     */
    entityTypeProbability?: number[] | null;
    /**
     * Gender for entity.
     */
    gender?: string | null;
    /**
     * Application-specific information about this entity.
     */
    info?: Schema$Proto2BridgeMessageSet;
    /**
     * Mentions of the entity in the document.
     */
    mention?: Schema$NlpSaftMention[];
    /**
     * Representative entity name.
     */
    name?: string | null;
    /**
     * Profile for entity.
     */
    profile?: Schema$NlpSaftEntityProfile;
    /**
     * Referent information for discourse context entities that are not mentioned in the document. These can be merged with mentioned entities during analysis if they are deemed to be coreferent. Entities with referents should not have any mentions if they do not corefer with anything. For example, when adding context entities to an input document prior to SAFT analysis, those entities should have a referent and no mentions.
     */
    referent?: Schema$NlpSaftReferent;
    /**
     * Representative mention, as an index into mention.
     */
    representativeMention?: number | null;
    /**
     * Score indicating the saliency (centrality) of this entity to the document.
     */
    salience?: number | null;
    /**
     * Entity types of the entity. These can include SAFT types (/saft/location, /saft/art, /saft/other/living_thing, etc), collections types (/collection/tv_personalities, /collection/statistical_regions, etc), and more. This refers to the type of the entity itself: in "She is on TV", "She" refers to a specific actor, with type "/collection/tv_personalities". Cf. Mention.Type, which is the type of the referring mention.
     */
    type?: Schema$NlpSaftEntityType[];
  }
  /**
   * An entity profile contains a summary of the information about a single unique entity. Next available index: 46.
   */
  export interface Schema$NlpSaftEntityProfile {
    alternate?: Schema$NlpSaftEntityProfileAlternate[];
    /**
     * Generic annotations.
     */
    annotations?: Schema$Proto2BridgeMessageSet;
    /**
     * List of attributes for the entity.
     */
    attribute?: Schema$NlpSaftEntityProfileAttribute[];
    /**
     * Canonical entity name.
     */
    canonicalName?: string | null;
    collectionScoreType?: string | null;
    /**
     * Disambiguation phrase. The combination of entity name and disambiguation phrase should be unique within the corpus.
     */
    disambiguation?: string | null;
    /**
     * Entity embeding vector, representing the entity in a dense low-dimensional embedding space.
     */
    embedding?: number[] | null;
    /**
     * Profile frame in binary SLING encoding.
     */
    frame?: string | null;
    /**
     * Gender of the entity.
     */
    gender?: string | null;
    /**
     * Unique global id for entity.
     */
    id?: string | null;
    /**
     * External identifiers for entity.
     */
    identifier?: Schema$NlpSaftIdentifier[];
    keyword?: Schema$NlpSaftEntityProfileKeyword[];
    /**
     * Freebase MID for entity. This field should be the same as FREEBASE_MID identifier for the entity profile.
     */
    mid?: string | null;
    /**
     * Representative name for entity.
     */
    name?: string | null;
    /**
     * Language for the name and disambiguation.
     */
    nameLanguage?: number | null;
    /**
     * Nature of the entity.
     */
    nature?: string | null;
    reference?: Schema$NlpSaftEntityProfileReference[];
    related?: Schema$NlpSaftEntityProfileRelated[];
    /**
     * Entity type.
     */
    type?: string | null;
  }
  /**
   * Alternative names for entity.
   */
  export interface Schema$NlpSaftEntityProfileAlternate {
    count?: number | null;
    /**
     * see nlp/saft/resolution/name-form.h for values
     */
    form?: number | null;
    /**
     * frame in SLING encoding
     */
    frame?: string | null;
    language?: number | null;
    name?: string | null;
    /**
     * (1 << SRC_DEFAULT)
     */
    sources?: number | null;
  }
  export interface Schema$NlpSaftEntityProfileAttribute {
    /**
     * Boolean attribute value, e.g. for IsDeceased.
     */
    boolValue?: boolean | null;
    /**
     * Double attribute value, e.g. for height/weight.
     */
    floatValue?: number | null;
    /**
     * Integer attribute value, e.g. IntId("April").
     */
    intValue?: string | null;
    /**
     * Language, in case the attribute value is a string.
     */
    language?: number | null;
    /**
     * String name of the type of attribute, e.g. /birth/date
     */
    type?: string | null;
    /**
     * Any id of the type of the attribute, e.g. IntId(/birth/date)
     */
    typeId?: number | null;
    /**
     * String attribute value, e.g. "April 2010" or "3,235,121".
     */
    value?: string | null;
    /**
     * The type of the value.
     */
    valueType?: string | null;
  }
  /**
   * Keywords and key phrases for entity.
   */
  export interface Schema$NlpSaftEntityProfileKeyword {
    count?: number | null;
    language?: number | null;
    /**
     * Score associated with the keyword. For fine-grained types this is a probability.
     */
    score?: number | null;
    term?: string | null;
    type?: string | null;
  }
  /**
   * References to entity.
   */
  export interface Schema$NlpSaftEntityProfileReference {
    docid?: string | null;
    entity?: number | null;
  }
  /**
   * Related entities.
   */
  export interface Schema$NlpSaftEntityProfileRelated {
    /**
     * Number of occurrences.
     */
    count?: number | null;
    /**
     * Inverse relations can be marked in a bidirectional graph.
     */
    inverse?: boolean | null;
    /**
     * Optional integer id for the relation.
     */
    relationId?: number | null;
    /**
     * Optional external identifier for the relation.
     */
    relationIdentifier?: Schema$NlpSaftIdentifier;
    /**
     * Score for related entity, i.e. p(e-\>r | e).
     */
    score?: number | null;
    /**
     * Profile id of related entity.
     */
    targetId?: string | null;
    /**
     * Optional external identifier for the target entity.
     */
    targetIdentifier?: Schema$NlpSaftIdentifier;
    /**
     * Name of related entity.
     */
    targetName?: string | null;
    /**
     * Type of relation.
     */
    type?: string | null;
  }
  /**
   * A generic type description for an entity.
   */
  export interface Schema$NlpSaftEntityType {
    /**
     * This field can be used to specify if the entity type has been annotated or predicted from a specific mention of the entity. However, the entity type does still apply to the entity as a whole, and not just a specific mention.
     */
    basedOnMention?: number | null;
    /**
     * A domain name for the set that this particular type belongs to.
     */
    domain?: string | null;
    /**
     * Application-specific information about this entity type.
     */
    info?: Schema$Proto2BridgeMessageSet;
    /**
     * The type name, like "/saft/person". See README.entity-types for the inventory of SAFT type tags.
     */
    name?: string | null;
    /**
     * A score for this type.
     */
    score?: number | null;
  }
  /**
   * A link on an HTML page.
   */
  export interface Schema$NlpSaftHyperlink {
    /**
     * Clean anchor text (no HTML markup).
     */
    anchorText?: string | null;
    /**
     * note: inclusive
     */
    byteEnd?: number | null;
    /**
     * begin/end options are for goldmine AnnotationsFinder to locate the offsets of saft tokens. Start is inclusive by default and end is marked. The indices of the first and last byte covered by the hyperlink.
     */
    byteStart?: number | null;
    /**
     * The indices of the first and last token covered by the hyperlink.
     */
    phrase?: Schema$NlpSaftPhrase;
    /**
     * (Absolute) URL that the links to.
     */
    url?: string | null;
  }
  /**
   * External identifier. An external identifier is a persistent identifier for an object within a domain.
   */
  export interface Schema$NlpSaftIdentifier {
    /**
     * Domain for the identifier.
     */
    domain?: string | null;
    /**
     * Identifier within domain.
     */
    id?: string | null;
  }
  /**
   * A generic span, possibly with an associated label. The span may be defined by either byte-level or token-level boundaries.
   */
  export interface Schema$NlpSaftLabeledSpan {
    /**
     * note: inclusive
     */
    byteEnd?: number | null;
    /**
     * The indices of the first and last byte covered by the span.
     */
    byteStart?: number | null;
    /**
     * The label associated with the span.
     */
    label?: string | null;
    /**
     * Optionally stores alternative labels with associated scores for the span.
     */
    labelScores?: {[key: string]: number} | null;
    /**
     * A score associated with the span.
     */
    score?: number | null;
    /**
     * note: inclusive
     */
    tokenEnd?: number | null;
    /**
     * The indices of the first and last token covered by the span.
     */
    tokenStart?: number | null;
  }
  /**
   * A list of labeled spans of the same type.
   */
  export interface Schema$NlpSaftLabeledSpans {
    labeledSpan?: Schema$NlpSaftLabeledSpan[];
  }
  /**
   * Measures in the documents. This covers both time expressions as well as physical quantities.
   */
  export interface Schema$NlpSaftMeasure {
    /**
     * Canonical value for measurement.
     */
    canonical?: number | null;
    /**
     * Granularity for measurement.
     */
    granularity?: number | null;
    /**
     * Application-specific information about this measure.
     */
    info?: Schema$Proto2BridgeMessageSet;
    /**
     * Phrase containing the measure.
     */
    phrase?: Schema$NlpSaftPhrase;
    type?: string | null;
    unit?: string | null;
    /**
     * Measurement value and unit.
     */
    value?: string | null;
  }
  /**
   * Mentions of the entity in the document.
   */
  export interface Schema$NlpSaftMention {
    /**
     * Estimate of the confidence that this mention is in the correct cluster. Zero means this mention is probably in the wrong cluster, 1 means this mention is probably in the correct cluster. See nlp/saft/components/coreference/coreference-confidence.h for details about what "correct cluster" might mean.
     */
    confidence?: number | null;
    /**
     * Application-specific information about this mention.
     */
    info?: Schema$Proto2BridgeMessageSet;
    kind?: string | null;
    nestingRelation?: string | null;
    /**
     * Phrase for the mention.
     */
    phrase?: Schema$NlpSaftPhrase;
    /**
     * Mention-level resolution. This is used for encoding the meaning of the mention rather than the entity. For example, definite references and appositions are resolved to the mid for the concept rather than the entity.
     */
    resolution?: Schema$NlpSaftMentionResolution;
    role?: string | null;
    type?: string | null;
  }
  /**
   * Mention resolution for encoding the concept id (e.g. mid) for a mention.
   */
  export interface Schema$NlpSaftMentionResolution {
    /**
     * Profile for mention information.
     */
    profile?: Schema$NlpSaftEntityProfile;
    type?: string | null;
  }
  /**
   * Message that stores information about the morphology of a token.
   */
  export interface Schema$NlpSaftMorphology {
    /**
     * A list of morphology attribute-value pairs.
     */
    attrValue?: string[] | null;
  }
  /**
   * A document phrase marks a range of tokens in a document as a phrase. The indices are token positions in the document.
   */
  export interface Schema$NlpSaftPhrase {
    end?: number | null;
    facet?: string | null;
    /**
     * The head token in the phrase is the id of the top-most token within the phrase. It either has an arc from outside the phrase going to it, or it is a root token of the sentence. A value of -1 indicates that the head has not yet been computed for the phrase (not the same semantics as the head of a token!). Note that even when it is uniquely defined, there is no guarantee that the head is set for entities and measurements within a document: you may need to explicitly compute it.
     */
    head?: number | null;
    /**
     * First and last token in the phrase. The phrase goes from start to end (inclusive).
     */
    start?: number | null;
  }
  /**
   * A referent contains information about what a discourse context entity is referring to. It acts like a canonical mention of the entity.
   */
  export interface Schema$NlpSaftReferent {
    /**
     * Distance of this referent from the markables in the Document. Smaller values imply that the referent is more accessible to be an antecedent for a markable in the Document. The expectation is that this field would increase with every new Document in which this referent is not mentioned.
     */
    distance?: number | null;
    explicitness?: string | null;
    /**
     * Application-specific information about this referent.
     */
    info?: Schema$Proto2BridgeMessageSet;
    /**
     * Entity name phrase. The phrase indices are relative to the token array above. The phrase should normally cover all the tokens in the name and the head must be set to be the head token of the name.
     */
    phrase?: Schema$NlpSaftPhrase;
    /**
     * Prominence score for referent. This is roughly equivalent to the number of previous mentions of the referent.
     */
    prominence?: number | null;
    role?: string | null;
    /**
     * Tokenized representation for the canonical name of the referent entity.
     */
    token?: Schema$NlpSaftToken[];
  }
  /**
   * Relations between entities in the document. A relation is between two different entities in the document. A relation can have a number of mentions in the document. Next available id: 11
   */
  export interface Schema$NlpSaftRelation {
    /**
     * External identifier for relation.
     */
    identifier?: Schema$NlpSaftIdentifier;
    /**
     * Application-specific information about this relation.
     */
    info?: Schema$Proto2BridgeMessageSet;
    kind?: string | null;
    /**
     * Mentions of the relation in the document.
     */
    mention?: Schema$NlpSaftRelationMention[];
    /**
     * Relation score.
     */
    score?: number | null;
    /**
     * Source and target entity indices. These are indices into the entity array in the document. If this is an attribute relation the target is the index of a measure in the document.
     */
    source?: number | null;
    target?: number | null;
    /**
     * Relation type.
     */
    type?: string | null;
    /**
     * Relation type id.
     */
    typeId?: number | null;
  }
  /**
   * Mentions of relations in the document. A relation mention is between a mention of the source entity and a mention of the target entity.
   */
  export interface Schema$NlpSaftRelationMention {
    /**
     * Application-specific information about this relation mention.
     */
    info?: Schema$Proto2BridgeMessageSet;
    /**
     * Phrase in the document that indicates the relation mention.
     */
    phrase?: Schema$NlpSaftPhrase;
    /**
     * Source and target mention indices. These are indices into the mention arrays for their respective entities. The target is not used for attributes.
     */
    source?: number | null;
    /**
     * The info of the source models or systems of the relation mention.
     */
    sourceInfo?: string[] | null;
    target?: number | null;
  }
  /**
   * Semantic node for annotating semantic constructions in documents. A set of SemanticNode instances represents a directed acyclic graph with an adjacency list representation. Each node can optionally be connected to some existing type system, such as PropBank. Each node can optionally be connected to one or more concrete elements in a SAFT document, specifically, an entity mention, a measure and/or a token span (Phrase). Next available id: 23
   */
  export interface Schema$NlpSaftSemanticNode {
    /**
     * The arcs from this node. For example, if this node is the root of a subgraph representing a predicate-argument structure, this node will typically refer to the predicate, and there will typically be one arc per argument.
     */
    arc?: Schema$NlpSaftSemanticNodeArc[];
    /**
     * Confidence score for the annotation.
     */
    confidence?: number | null;
    /**
     * Human-readable description of the information in the subgraph represented by this node. This field is only meant for display purposes.
     */
    description?: string | null;
    /**
     * The entity and mention fields specify a unique entity mention referred to by this semantic node.
     */
    entity?: number | null;
    /**
     * Indicates whether the semantic node is not explicit (grounded) in the text (e.g. pro-drop for a text author or an implicit predicate node for interpreting a compound noun), rather than any explicit phrase or text inside the document.
     */
    implicit?: boolean | null;
    /**
     * Application-specific information about this node.
     */
    info?: Schema$Proto2BridgeMessageSet;
    /**
     * Encodes the kind of this node and, possibly, the entire subgraph rooted at this node. For example, if this node represents a predicate-argument structure in PropBank, then this node's kind will be PROPBANK, its phrase field will be set to correspond to the span of tokens corresponding to the predicate (such as a verb) and it will have one arc per argument. If the kind is MONOTONIC this node corresponds to a semantic graph node, and arcs correspond to semantic graph edges outgoing from the node. If the kind field is not set, then this node is not directly connected to any type system. In such a case, this node may still optionally have a concrete "payload" in the form of references to an entity mention, measure or span of tokens (Phrase) in a SAFT document. The values or existence of the kind field need not be identical in any subgraph. For example, even if this node's kind field is not set, it may still be the destination node of an arc from some other node whose kind field is set.
     */
    kind?: string | null;
    /**
     * The index of the measure referred to by this semantic node.
     */
    measure?: number | null;
    mention?: number | null;
    /**
     * Phrase (span of text) for this node. This field does not need to be set, but if it is, this node has a textual "payload" corresponding to the specified token span. For example, if this node is the root of a subgraph corresponding to a predicate-argument structure, then the phrase field will be set to be the span of tokens corresponding to the predicate (e.g., a verb).
     */
    phrase?: Schema$NlpSaftPhrase;
    /**
     * Arbitrary type string for this semantic node, or for the subgraph rooted at this node. This type string might come from an external resource, type system or ontology that contains a predefined set of types.
     */
    type?: string | null;
    /**
     * Arbitrary value string for this semantic node.
     */
    value?: string | null;
  }
  /**
   * An arc contained by a source node pointing to a destination node in a directed acyclic graph.
   */
  export interface Schema$NlpSaftSemanticNodeArc {
    /**
     * Human-readable description of this arc's type (for display purposes).
     */
    description?: string | null;
    /**
     * Indicates the arc is for an implicit semantic relation between nodes, for example one that does not correspond to a grammatical relation in the text.
     */
    implicit?: boolean | null;
    /**
     * Application-specific information about this arc.
     */
    info?: Schema$Proto2BridgeMessageSet;
    /**
     * Index of the semantic node pointed to by this arc.
     */
    semanticNode?: number | null;
    /**
     * Arc type (akin to an edge label, or semantic operator).
     */
    type?: string | null;
  }
  /**
   * A document token marks a span of bytes in the document text as a token or word. Next available index: 16.
   */
  export interface Schema$NlpSaftToken {
    breakLevel?: string | null;
    /**
     * Whether the break skipped over non-tag text (excluding script/style).
     */
    breakSkippedText?: boolean | null;
    /**
     * Coarse-grained word category for token. See README.categories for category inventory.
     */
    category?: string | null;
    end?: number | null;
    /**
     * Head of this token in the dependency tree: the id of the token which has an arc going to this one. If it is the root token of a sentence, then it is set to -1.
     */
    head?: number | null;
    /**
     * Annotation for this token.
     */
    info?: Schema$Proto2BridgeMessageSet;
    /**
     * Label for dependency relation between this token and its head. See README.labels for label inventory.
     */
    label?: string | null;
    /**
     * Word lemma. This is only filled if the lemma is different from the word form.
     */
    lemma?: string | null;
    /**
     * Morphology information.
     */
    morph?: Schema$NlpSaftMorphology;
    /**
     * A string representation (typically four letters, sometimes longer) of the token's Unicode script code, based on BCP 47/CLDR, capitalized according to ISO 15924. See i18n/identifiers/scriptcode.h for details.
     */
    scriptCode?: string | null;
    /**
     * [start, end] describe the inclusive byte range of the UTF-8 encoded token in document.text. End gives the index of the last byte, which may be a UTF-8 continuation byte, and the length in bytes is end - start + 1. begin/end options are for goldmine AnnotationsFinder to locate the offsets of saft tokens. Start is inclusive by default and end is marked.
     */
    start?: number | null;
    /**
     * Part-of-speech tag for token. See README.tags for tag inventory.
     */
    tag?: string | null;
    /**
     * Confidence score for the tag prediction -- should be interpreted as a probability estimate that the tag is correct.
     */
    tagConfidence?: number | null;
    textProperties?: number | null;
    /**
     * Token word form. This may not be identical to the original. For example, in goldmine annotation we do UTF-8 normalization and punctuation normalization. The punctuation normalization includes inferring the directionality of straight doublequotes -- that is, we map " to open quote (``) or close quote (''), and sometimes we get it wrong. SAFT processing in other contexts (such as queries in qrewrite) involves different normalizations.
     */
    word?: string | null;
  }
  /**
   * A copy of the text of an article along with references to internal figures and external citations, datasets, etc. Next available ID: 19
   */
  export interface Schema$NlpSciencelitArticleData {
    /**
     * All the text in this article, separated into Sections and Paragraphs. See nlp_sciencelit.ScaleSetExtensions for the extensions to ScaleSet used.
     */
    analyzedText?: Schema$NlxDataSchemaScaleSet;
    articleId?: Schema$NlpSciencelitArticleId[];
    /**
     * All references from this article (Bibliography).
     */
    citation?: Schema$NlpSciencelitCitationData[];
    /**
     * The result of selecting the earliest date from various metadata (PMC, PubMed Metadata, scholar citations).
     */
    earliestPubDate?: string | null;
    metadata?: Schema$NlpSciencelitArticleMetadata;
    nonAbstractWordCount?: string | null;
    /**
     * Path of the source document from which this was parsed.
     */
    parsedFrom?: string | null;
    /**
     * All dates from the PMC article metadata Year/Mon/Day.
     */
    pubDate?: Schema$NlpSciencelitPubDate[];
    /**
     * All figure captions within this article.
     */
    referencedBlock?: Schema$NlpSciencelitReferencedBlock[];
    /**
     * Citation for this article.
     */
    scholarCitation?: Schema$ScienceCitation;
    /**
     * DocJoins with full text article.
     */
    scholarDocument?: Schema$CompositeDoc[];
    /**
     * May also add the Scholar index signal information:
     */
    scholarSignal?: Schema$ScienceIndexSignal;
    /**
     * Source of this article data (e.g., PubMed, scholar index, other source.).
     */
    source?: string | null;
    title?: string | null;
    /**
     * Number of words in the entire article and everywhere outside of abstract sections.
     */
    wordCount?: string | null;
  }
  /**
   * Article IDs associated with an article (e.g., PMID, DOI, PMC).
   */
  export interface Schema$NlpSciencelitArticleId {
    id?: string | null;
    idType?: string | null;
  }
  /**
   * Next available ID: 20.
   */
  export interface Schema$NlpSciencelitArticleMetadata {
    /**
     * Abstract of article from metadata.
     */
    abstract?: Schema$NlpSciencelitTokenizedText;
    articleId?: Schema$NlpSciencelitArticleId[];
    /**
     * Author of article.
     */
    author?: Schema$NlpSciencelitAuthor[];
    /**
     * Datasets referenced from this article.
     */
    dataset?: Schema$NlpSciencelitDataset[];
    /**
     * Most recent date YYYY-MM-DD.
     */
    dateStr?: string | null;
    /**
     * Citation for flagged for deletion by source.
     */
    deleted?: boolean | null;
    /**
     * Mesh Terms.
     */
    heading?: Schema$NlpSciencelitMeshHeading[];
    issue?: string | null;
    /**
     * Title of journal. For books: Journal = Publisher Volume = Collection
     */
    journal?: string | null;
    language?: string | null;
    /**
     * Last entry revision date YYYY-MM-DD.
     */
    lastRevisedDateStr?: string | null;
    metadataSource?: string[] | null;
    /**
     * Source Pubmed/Medline XML file.
     */
    parsedFrom?: string | null;
    /**
     * PMID of article (for non-pubmed data, this is the docid).
     */
    pmid?: string | null;
    publicationType?: Schema$NlpSciencelitPublicationType[];
    /**
     * Optional ScaM restrict tokens to be added to all GFVs generated from this article's data.
     */
    scamRestrictTokens?: Schema$ResearchScamV3Restrict;
    /**
     * Title of article.
     */
    title?: string | null;
    /**
     * URL(s) for the document. If possible, order by decreasing desirability.
     */
    url?: string[] | null;
    volume?: string | null;
  }
  export interface Schema$NlpSciencelitAuthor {
    firstName?: string | null;
    lastName?: string | null;
  }
  /**
   * Next available ID: 8
   */
  export interface Schema$NlpSciencelitCitationData {
    articleId?: Schema$NlpSciencelitArticleId[];
    author?: Schema$NlpSciencelitAuthor[];
    externalLink?: string | null;
    fullText?: string | null;
    /**
     * Reference used in text (e.g., PMC rid).
     */
    reference?: string | null;
    /**
     * Scholar citation information from scholar index.
     */
    scholarCitation?: Schema$ScienceCitation;
    /**
     * Optional information about the publication.
     */
    title?: string | null;
  }
  export interface Schema$NlpSciencelitDataset {
    association?: string | null;
    datasetMetadata?: Schema$ResearchScienceSearchReconciledMetadata;
  }
  /**
   * A full Mesh Heading containing a descriptor and optionally multiple qualifiers. https://www.nlm.nih.gov/bsd/licensee/elements_descriptions.html#meshheadinglist
   */
  export interface Schema$NlpSciencelitMeshHeading {
    meshDescriptor?: Schema$NlpSciencelitSubjectHeading;
    meshQualifier?: Schema$NlpSciencelitSubjectHeading[];
  }
  /**
   * Pubdate extracted from PMC article metadata.
   */
  export interface Schema$NlpSciencelitPubDate {
    dateStr?: string | null;
    /**
     * "ppub" for a print ISSN and "epub" for an electronic ISSN.
     */
    pubType?: string | null;
  }
  export interface Schema$NlpSciencelitPublicationType {
    /**
     * Display name for the publication type, e.g. "Journal Article"
     */
    name?: string | null;
    /**
     * MeSH unique identifiers for publication types, e.g. "D016428"
     */
    ui?: string | null;
  }
  /**
   * Data associate with the ReferencesBlock. Next available ID: 5
   */
  export interface Schema$NlpSciencelitReferencedBlock {
    /**
     * Caption tokens - all text in the caption other than the block.
     */
    caption?: Schema$NlpSciencelitTokenizedText;
    /**
     * Reference used from the text to point to this figure.
     */
    reference?: string | null;
    /**
     * Title tokens - these come from a block within a caption.
     */
    title?: Schema$NlpSciencelitTokenizedText;
    /**
     * Type of figure (table, figure, etc.).
     */
    type?: string | null;
  }
  export interface Schema$NlpSciencelitRetrievalQueryEncodingDebugInfo {
    /**
     * The query encoding sent to scam for retrieval.
     */
    scamQueryEncoding?: Schema$ResearchScamGenericFeatureVector;
  }
  /**
   * Returned by Delver API in SearchResult.debug_info.
   */
  export interface Schema$NlpSciencelitRetrievalSearchResultDebugInfo {
    /**
     * Only set if RequestOptions.debug_return_article_data is true.
     */
    articleData?: Schema$NlpSciencelitArticleData;
    goldDocid?: string[] | null;
    goldSnippets?: string[] | null;
    /**
     * Not set by server; only used by evals.
     */
    isGold?: boolean | null;
    /**
     * See SearchResultInternal.reranking_score.
     */
    rerankingScore?: number | null;
    /**
     * See SearchResultInternal.reverse_reranking_order.
     */
    reverseRerankingOrder?: number | null;
    /**
     * See SearchResultInternal.section_ir_score.
     */
    sectionIrScore?: {[key: string]: number} | null;
  }
  /**
   * Optionally returned by Delver API in the response's debug_info field.
   */
  export interface Schema$NlpSciencelitRetrievalSearchResultSetDebugInfo {
    queryEncoding?: Schema$NlpSciencelitRetrievalQueryEncodingDebugInfo;
    scamResponse?: Schema$ResearchScamQueryResponse;
  }
  /**
   * Returned by Delver API in Snippet.debug_info.
   */
  export interface Schema$NlpSciencelitRetrievalSnippetDebugInfo {
    /**
     * Which highlights have sentence overlap with gold snippets. Not ordered. Might only be set for the first gold highlight.
     */
    goldHighlightSentenceIndices?: number[] | null;
    /**
     * Map of highlight index to best overlap with any gold snippet [0,1].
     */
    highlightIdxToOverlap?: {[key: string]: number} | null;
    /**
     * Map of highlight index to best overlap with any gold sentence [0,1].
     */
    highlightIdxToSentenceOverlap?: {[key: string]: number} | null;
    /**
     * Not set by server; only used by certain evals. Might only be set for the first gold snippet.
     */
    isGold?: boolean | null;
    /**
     * Byte index of text within the full section text (or within title).
     */
    offsetWithinSection?: number | null;
    /**
     * Section within the document. -1 if title.
     */
    sectionIndex?: number | null;
    /**
     * IR score of the section the snippet is coming from.
     */
    sectionIrScore?: number | null;
    /**
     * BLEU score for the entire snippet.
     */
    snippetBleuScore?: number | null;
  }
  /**
   * A subject heading from Mesh
   */
  export interface Schema$NlpSciencelitSubjectHeading {
    id?: string | null;
    majorTopic?: boolean | null;
    term?: string | null;
  }
  /**
   * Tokenized text with optional original representation.
   */
  export interface Schema$NlpSciencelitTokenizedText {
    text?: string | null;
    token?: string[] | null;
  }
  /**
   * Annotators whose semantics are represented via a protocol message should add to that message a field or extension of this type and set it using Annotator::PopulateAnnotationEvalData to enable span-based evaluation metrics in training. Evaluation is done based on token spans. The byte span aligns with the token span and is used when saving examples. Background: In some settings, the examples used to induce/train a grammar do not specify complete semantics of an annotation. For example, some examples that come from Ewok specify only the span associated with each annotation. This message allows evaluation metrics to test the span by embedding it in the semantics. LINT.IfChange
   */
  export interface Schema$NlpSemanticParsingAnnotationEvalData {
    /**
     * Additional spans after the first. Empty in all additional_spans.
     */
    additionalSpans?: Schema$NlpSemanticParsingAnnotationEvalData[];
    numBytes?: number | null;
    numTokens?: number | null;
    /**
     * Byte position within the utterance. Safe to use across different components of the NLU stack as long as said components have access to the same query.
     */
    startByte?: number | null;
    /**
     * Token position. This is cleared when normalizing examples for storage because tokenization changes over time. DO NOT use these two fields across components that use different tokenizations.
     */
    startToken?: number | null;
  }
  /**
   * The App annotator annotates potential app name in the parser's input and outputs the proto with the details about app(s).
   */
  export interface Schema$NlpSemanticParsingAppAnnotation {
    /**
     * The app_info is to store specific information about installed/uninstalled apps annotated by app annotator servlet. It contains app name, package name, confidence, and source.
     */
    appInfo?: Schema$QualityActionsAppInfo[];
  }
  /**
   * AbsoluteDateTime represents the resolved date/time expressions that need no further calculation. It has a section for date and a section for time. The date section will always be filled; if the time section is filled, hour is always filled; for (minute, second, partial_second), they are optional with a zero default value. But if partial_second is filled, (minute, second) must be filled, even they are 0s; if second is filled, minute must be filled. Next field#: 22.
   */
  export interface Schema$NlpSemanticParsingDatetimeAbsoluteDateTime {
    /**
     * allow_personal determines if personal datetimes are allowed to be used in the resolution of the personal datetime. If allow_personal is false and a personal date exists, the entire parse will be thrown out.
     */
    allowPersonal?: boolean | null;
    day?: number | null;
    /**
     * Deprecated fields. Do NOT use.
     */
    deleted11?: string | null;
    /**
     * season, quarters and holidays will be soon handled as fetched relative datetimes and will be removed from the AbsoluteDateTime message.
     */
    holiday?: Schema$NlpSemanticParsingDatetimeHoliday;
    /**
     * Time is 24-hour military time.
     */
    hour?: number | null;
    /**
     * Note: This is marked as deprecated as we are moving into explicit parses using the `meridiem` field, and leave the inference over implicit parses to the grounding/resolution libraries.
     */
    hourState?: string | null;
    /**
     * |is_bc| is true if and only the date is Before Christ/Common Era. If |is_bc| is true, only year is meaningful in this proto, as Gregorian calendar is only meaningful for A.D. date/times.
     */
    isBc?: boolean | null;
    /**
     * For expressions such as "am", "pm". Note: the name "meridiem" has been taken by a field in message ResolutionProperties. Examples: * "9 am": point { hour: 9 meridiem: AM hour_state: UNAMBIGUOUS \}
     */
    meridiem?: string | null;
    minute?: number | null;
    /**
     * For expressions such as "around 2 pm".
     */
    modifier?: string | null;
    month?: string | null;
    /**
     * If present then: 1) the incoming non-Gregorian datetime will be converted to Gregorian. 2) exported DateTimeProperty fields will contain the converted Gregorian datetime. 3) DateTimeProperty.source_calendar will be set to the calendar-system that was used to specify the non-Gregorian date.
     */
    nonGregorianDate?: Schema$NlpSemanticParsingDatetimeNonGregorianDate;
    partialSecond?: number | null;
    properties?: Schema$NlpSemanticParsingDatetimeDateTimeProperty;
    quarter?: string | null;
    /**
     * Modifier that return the appropriate subrange. For more information, see the description of RangeOfDateTimeModifier. Example: * *early* 2020 * *early* on March 20th When a point have a range_modifier field, the resolution library will expand the point into the widest range in contains. For example, in the case of a single date point like "April 22nd, 2022", the point will be transformed into a range with: - "begin: April 22nd 2022 00:00:00h" - "end: April 22nd 2022 23:59:59h" The modifier will then be applied over that range.
     */
    rangeModifier?: string | null;
    season?: string | null;
    second?: number | null;
    /**
     * A string representation of the timezone information, see i18n/identifiers/timezones.{h,cc\}.
     */
    timezone?: string | null;
    /**
     * The |weekday| field is populated to indicate that a day-of-the-week is explicitly mentioned in an absolute date utterance, such as [Tuesday, July 6th, 2021]. Note that when a day-of-the-week is included in other, non-absolute-date expressions, such as [on Tuesday], then this this field is not populated (and in fact an AbsoluteDateTime is not used at all.) Note: This field is populated only when the original expression contains a day-of-the-week. It is not populated by the grounding library to indicate that the date happens to be a Tuesday. Examples: * "Tuesday, July 6th 2021" --\> the day of the week is part of an absolute date expression, so this field is populated: point { year: 2021 month: JULY day: 6 weekday: TUESDAY \} * "on Tuesday" --\> the day of the week is not part of an absolute date expression, so it is interpreted as a relative datetime: relative { fetched { target { weekday: TUESDAY \} \} \}
     */
    weekday?: string | null;
    /**
     * Date.
     */
    year?: number | null;
  }
  /**
   * Example: "Remind me to go to the store on (Friday) (9am)" would output two non-overlapping and unrelated annotations. One would have a start_date = Friday and the other would have start_time = 9am. It's possible for Friday to be one of several upcoming Friday's, so start_date is a repeated field. Next ID: 10
   */
  export interface Schema$NlpSemanticParsingDateTimeAnnotation {
    dateType?: string | null;
    endDate?: string[] | null;
    endTime?: string[] | null;
    endWeekday?: string | null;
    rawText?: string | null;
    /**
     * NOTE: None of these are co-indexed. If the query is 'morning', there could be multiple start_time's, start_date's, end_date's, and end_time's, and they do not correspond to one another in any structured way.
     */
    startDate?: string[] | null;
    startTime?: string[] | null;
    startWeekday?: string | null;
    timeType?: string | null;
  }
  /**
   * The top-level DATE/TIME representation. It can represent either (1) one or multiple Date/Time ranges, or (2) one or multiple of Date/Time points, or (3) a recurrent date/time expression. Next available ID: 12. Only one of |range|, |point| and |recurrent| will be set: |range| contains a list of resolved Date/Time ranges. |point| contains a list of resolved Date/Time points. |recurrent| contains the representation for periodical dates/times. |range| and |point| are repeated to accommodate the need when the date/time expression under one non-terminal is resolved to a list of correct values. For example, "Mondays in April, 2014" may have 4 correct dates.
   */
  export interface Schema$NlpSemanticParsingDatetimeDateTime {
    /**
     * For temporal expressions that consist of components with different types, the elements in the composition are nested according to the order they should be grounded/resolved. For example, "tomorrow at 8am" has a relative component [tomorrow] and an absolute datetime component [8am] so the annotation will be represented in the following way, indicating that the relative datetime for tomorrow should be grounded first, and then resolve the actual 8am point for that given date: point { hour: 8 hour_state: UNAMBIGUOUS properties { time_format: AM_PM_TOKEN \} \} composition_element { relative { fetched { ordinal: 1 target { unit: DAY \} base_type: CURRENT_DATETIME \} \} grounding_stage: UNGROUNDED \} grounding_stage: UNGROUNDED_COMPOSITION The composition_element field will be populated only when the grounding_stage is set to UNGROUNDED_COMPOSITION and it will hold the nested DateTime value for the rest the compositional expression. More details in: go/datetime-resolution-decoupling.
     */
    compositionElement?: Schema$NlpSemanticParsingDatetimeDateTime;
    /**
     * Deprecated fields. Do NOT use.
     */
    deleted7?: boolean | null;
    deleted8?: boolean | null;
    /**
     * This field of the DateTime message should not in general be used by outside clients of the grammar. It is intended to be used internally in Aqua for evaluation purposes. The rationale is that token counts depend on the particular tokenization used in Aqua which may be different from the one used by the client and may change from time to time. Outside clients should not create a dependency on the current tokenization used in Aqua.
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    groundingStage?: string | null;
    point?: Schema$NlpSemanticParsingDatetimeAbsoluteDateTime[];
    properties?: Schema$NlpSemanticParsingDatetimeResolutionProperties;
    /**
     * Note that there is a difference between this scenario and an ambiguous date/time expression. The latter is resolved to multiple proto messages, not multiple values within one proto message. To be concrete, consider "Monday" in "Monday football". It is ambiguous and can be reasonably resolved to "Monday last week," "Monday this week" and "Monday next week." The 3 values are represented as 3 separate DateTime messages, not 3 values within one DateTime message.
     */
    range?: Schema$NlpSemanticParsingDatetimeRange[];
    recurrent?: Schema$NlpSemanticParsingDatetimeRecurrent;
    relative?: Schema$NlpSemanticParsingDatetimeRelativeDateTime;
    /**
     * See comments of Span.
     */
    span?: Schema$NlpSemanticParsingDatetimeSpan;
  }
  /**
   * DateTimeProperty contains various metadata about the DateTime interpretation. Next field: 13
   */
  export interface Schema$NlpSemanticParsingDatetimeDateTimeProperty {
    dateFormat?: string | null;
    expandYearToCurrent?: boolean | null;
    hourStatus?: string | null;
    inferredDateValue?: string | null;
    /**
     * Note: this may be changed to a repeated field in the future.
     */
    metadata?: string | null;
    /**
     * Metadata about the personal reference if the date was generated from a personal reference.
     */
    personalReferenceMetadata?: Schema$CopleyPersonalReferenceMetadata;
    relationToReference?: string | null;
    /**
     * Expresses the relative DateTime query that gave rise to these grounded semantics.
     */
    relative?: Schema$NlpSemanticParsingDatetimeRelativeDateTime;
    sourceCalendar?: string | null;
    /**
     * If the annotation was created by using personal data, we record the provenance for that data here.
     */
    sourceTypeList?: Schema$CopleySourceTypeList;
    timeFormat?: string[] | null;
    /**
     * True iff the timezone value in AbsoluteDateTime is explicit in the annotated text or not. In the following examples the timezone is explicit: Query Timezone -------------------------- -------- 10pst Pacific Standard Time 10 utc UTC 10 sydney time Australia Eastern Time
     */
    timezoneIsExplicit?: boolean | null;
  }
  /**
   * To represent unanchored durations - the length of a date/time expression not related to calendar in local context. E.g., "play first (DURATION: 5 minutes) of Yellow Submarine", "it takes (DURATION: more than 3 days) to finish." In contrast, queries like: "wake me up in 5 minutes" will be resolved to a AbsoluteDateTime since the query indicates that the reference is now. A duration can be turned into a range if either end is anchored.
   */
  export interface Schema$NlpSemanticParsingDatetimeDuration {
    /**
     * This field of the Duration message should not in general be used by outside clients of the grammar. It is intended to be used internally in Aqua for evaluation purposes. The rationale is that token counts depend on the particular tokenization used in Aqua which may be different from the one used by the client and may change from time to time. Outside clients should not create a dependency on the current tokenization used in Aqua.
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * For expressions such as "about 2 hrs".
     */
    modifier?: string | null;
    quantity?: Schema$NlpSemanticParsingDatetimeQuantity;
    /**
     * See comments of Span.
     */
    span?: Schema$NlpSemanticParsingDatetimeSpan;
  }
  /**
   * This message is defined to be a representation of events that could interact with datetimes expressions through composition by shifting or fetching. For "native" datetime events like sunset, sunrise, etc the type is enough, but this should be extended as needed to represent richer event information.
   */
  export interface Schema$NlpSemanticParsingDatetimeEvent {
    holiday?: string | null;
    moonEvent?: Schema$NlpSemanticParsingDatetimeMoonEventInfo;
    sunEvent?: string | null;
    type?: string | null;
  }
  /**
   * For a more detailed presentation on what's a fetching operation, see go/datetime-meaning-schemas. Examples to illustrate how the proto is used: I. Fetching day-of-weeks: a) query: "1st 2 Mondays of April" proto: ordinal: 1 target {weekday: MONDAY\} count: 2 range: {begin {year: RESOLVED_YEAR month: APRIL day: 1\} {end {year: RESOLVED_YEAR month: APRIL day: 30\} b) query: "1st and last Monday of April" proto: ordinal: 1 ordinal: -1 target {weekday: MONDAY\} range: {begin {year: RESOLVED_YEAR month: APRIL day: 1\} {end {year: RESOLVED_YEAR month: APRIL day: 30\} c) query: "next Monday" proto: ordinal: 1 target {weekday: MONDAY\} d) query: "last 2 Mondays" proto: ordinal: -1 count: 2 target {weekday: MONDAY\} e) query: "this Monday" proto: ordinal: 0 target {weekday: MONDAY\} f) query: "the monday after next" proto: ordinal: 2 target {weekday: MONDAY\} g) query: "third Monday in April" proto: ordinal: 3 target {weekday: MONDAY\} range: {begin {year: RESOLVED_YEAR month: APRIL day: 1\} {end {year: RESOLVED_YEAR month: APRIL day: 30\} h) query: "the monday before last" proto: ordinal: -2 target {weekday: MONDAY\} i) query: "the second to the last monday in April" proto: ordinal: -2 target {weekday: MONDAY\} range: {begin {year: RESOLVED_YEAR month: APRIL day: 1\} {end {year: RESOLVED_YEAR month: APRIL day: 30\} II. Fetching date/time unit: a) query: "1st 2 weeks of April" proto: ordinal: 1 target {unit: WEEK\} count: 2 range: {begin {year: RESOLVED_YEAR month: APRIL day: 1\} {end {year: RESOLVED_YEAR month: APRIL day: 30\} b) query: "1st and last week of April" proto: ordinal: 1 ordinal: -1 target {unit: WEEK\} range: {begin {year: RESOLVED_YEAR month: APRIL day: 1\} {end {year: RESOLVED_YEAR month: APRIL day: 30\} c) query: "next year" proto: ordinal: 1 target {unit: YEAR\} d) query: "last 2 weeks" proto: ordinal: -1 count: 2 target {unit: WEEK\} e) query: "this month" proto: ordinal: 0 target {unit: MONTH\} f) query: "the week after next" proto: ordinal: 2 target {unit: WEEK\} g) query: "third week in April" proto: ordinal: 3 target {unit: WEEK\} range: {begin {year: RESOLVED_YEAR month: APRIL day: 1\} {end {year: RESOLVED_YEAR month: APRIL day: 30\} h) query: "the week before last" proto: ordinal: -2 target {unit: WEEK\} i) query: "the second to the last week in April" proto: ordinal: -2 target {unit: WEEK\} range: {begin {year: RESOLVED_YEAR month: APRIL day: 1\} {end {year: RESOLVED_YEAR month: APRIL day: 30\} Next field: 9
   */
  export interface Schema$NlpSemanticParsingDatetimeFetchedRelativeDateTime {
    baseType?: string | null;
    /**
     * How many to fetch (e.g. [next weekend] vs. [next two weeks])
     */
    count?: number | null;
    /**
     * Can be used to tag relative datetime expressions with metadata information in the grammar.
     */
    metadata?: string | null;
    /**
     * Encodes expressions like next (+1), last (-1), after next (+2), this (0).
     */
    ordinal?: number[] | null;
    /**
     * The restriction range on which fetching is operated, e.g., "April" in "first Tuesday in/of April." If this field is missing, the operation is done relative to the base_type (or if not given, to the query's reference datetime). When the fetching operation is performed relative to a reference time point, positive ordinal values represent upcoming instances from the reference point, negative ordinal values represent previous instances from the reference point. Similarly, ordinal=0 represents a reference to the "current instance", which may vary depending on the target. E.g. "this week" is simply defined as the week range that contains the current reference time point, but "this " can be ambiguous and its resolution will depend on language/locale conventions ("this monday" in some languages refers to the closest upcoming instance of Monday, while in other languages it represents the Monday instance within the current week).
     */
    range?: Schema$NlpSemanticParsingDatetimeRange;
    /**
     * Modifier that return the appropriate subrange. For more information, see the description of RangeOfDateTimeModifier. Example: * *early* next week * *late* next Monday
     */
    rangeModifier?: string | null;
    /**
     * If the underlying range comes from a relative datetime expression, encode the expression here instead.
     */
    relativeRange?: Schema$NlpSemanticParsingDatetimeResolutionProperties;
    /**
     * The target to be fetched. This could be a named day-of-week or month (e.g., "Monday", "April"), or a date/time unit (e.g., "day", "week", "month").
     */
    target?: Schema$NlpSemanticParsingDatetimeTargetToFetch;
  }
  /**
   * List of holidays that are not fixed absolute or relative dates on the Gregorian calendar.
   */
  export interface Schema$NlpSemanticParsingDatetimeHoliday {
    /**
     * There are 3 types of holidays supported by the datetime subgrammar: 1) NonFixedHolidayEnum: e.g., "easter", "chinese new year". 2) FetchedRelativeDateTime: e.g., "Thanksgiving" =\> [4th Thursday of November] 3) HolidayByMonthDay: e.g., "xmas" =\> [December 25] Each holiday of the first type is resolved by a C++ function; the 2nd and 3rd type of holidays are mapped to AbsoluteDateTime and FetchedRelativeDateTime, respectively, in grammar and are not needed to be represented in proto.
     */
    nonFixed?: string | null;
  }
  export interface Schema$NlpSemanticParsingDatetimeMoonEventInfo {
    phase?: string | null;
    type?: string | null;
  }
  /**
   * Non-Gregorian dates are similar to AbsoluteDateTime, but use non-Gregorian calendars.
   */
  export interface Schema$NlpSemanticParsingDatetimeNonGregorianDate {
    chineseMonth?: string | null;
    /**
     * The day is the offset within the month, same as in Gregorian calendars.
     */
    day?: number | null;
    hebrewMonth?: string | null;
    islamicMonth?: string | null;
    /**
     * The year is relative to the calendar (e.g. 5777 for Hebrew calendar).
     */
    year?: number | null;
  }
  export interface Schema$NlpSemanticParsingDatetimeQuantity {
    /**
     * For internal use - DateTime subgrammar users should look at Duration.modifier. = MORE in [3 more days].
     */
    modifier?: string | null;
    /**
     * = 3 in "3 milliseconds".
     */
    number?: number | null;
    /**
     * This field keeps the span info of the number element in a quantity expression, which is useful for downstream components to obtain the number annotations inside a quantity when necessary.
     */
    numberSpan?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * Quantities are typically converted into milliseconds, regardless of the units the user used. Sometimes this loses crucial information, e.g., "5 days" vs "5 nights". When quantities are converted to milliseconds, 'symbolic_quantity' will contain the sequence of units that the user actually supplied. This can be more than one element in cases like "one minute and 30 seconds". In cases where 'symbolic_quantity' has more than one element, THERE IS NO GUARANTEED ORDER between elements.
     */
    symbolicQuantity?: Schema$NlpSemanticParsingDatetimeQuantity[];
    /**
     * = MILLISECOND in "3 milliseconds".
     */
    unit?: string | null;
  }
  /**
   * Range has 4 use cases: 1. with an explicit begin and an explicit end, e.g. "from Monday to Wednesday." Both |begin| and |end| are filled in this case. 2. a point date/time expression is used as a range at a finer granularity. E.g., in "first Monday of this month", "this month" is used as a range. In this case, only |begin| will be filled and the |end| will be filled during the grounding process. 3. a fuzzy date/time range such as "morning" or "evening." 4. with a relative begin and a relative end, e.g. "from yesterday to next Monday." Note: this may be used in a mixture of exact/relative begin and end. Next available ID: 14.
   */
  export interface Schema$NlpSemanticParsingDatetimeRange {
    /**
     * Deprecated fields. Do NOT use.
     */
    begin?: Schema$NlpSemanticParsingDatetimeAbsoluteDateTime;
    beginRelative?: Schema$NlpSemanticParsingDatetimeRelativeDateTime;
    /**
     * if |duration| is set, one field from start or finish must be populated, but not both. |exclusive| value is still relevant to decide if the endpoints of the range are included in the range (value defined in the start/finish fields as well as the datetime value resulting of offseting the duration over the given range endpoint).
     */
    duration?: Schema$NlpSemanticParsingDatetimeQuantity;
    end?: Schema$NlpSemanticParsingDatetimeAbsoluteDateTime;
    endRelative?: Schema$NlpSemanticParsingDatetimeRelativeDateTime;
    exclusive?: boolean | null;
    finish?: Schema$NlpSemanticParsingDatetimeDateTime;
    fuzzyRange?: string | null;
    metadata?: string | null;
    properties?: Schema$NlpSemanticParsingDatetimeResolutionProperties;
    /**
     * Modifier that return the appropriate subrange. For more information, see the description of RangeOfDateTimeModifier. Example: * *late* morning
     */
    rangeModifier?: string | null;
    /**
     * |start| and |finish| are inclusive unless exclusive field is true. the values in start and finish can be an absolute point, a relative or another range. Recurrences and repeated values are not expected/allowed.
     */
    start?: Schema$NlpSemanticParsingDatetimeDateTime;
    /**
     * The field is set if the range is the result of resolving/grounding a relative datetime expression referring to a part of the day. E.g. "morning", "afternoon", "evening", "night", "tonight", etc.
     */
    symbolicValue?: string | null;
  }
  /**
   * expressions: "every Monday after December 1" "every morning starting from this Friday". Note: if a recurrent DATE/TIME expression is bounded (limited by a finite interval or a finite count), e.g., "every monday in the next 3 months", "... at 11:00am every Monday for 4 times" the grammar will resolve it to a finite number of |range|s. Next available ID: 17.
   */
  export interface Schema$NlpSemanticParsingDatetimeRecurrent {
    /**
     * How many times it repeats.
     */
    countRestriction?: number | null;
    /**
     * An arbitrary exception to the recurrence. This can be an absolute point, a relative, a range or a recurrent expression. Examples: * "every Tuesday except for July 13th 2021" * "every Tuesday except for July 13th and November 2nd" * "every second Monday except during the summer" * "everyday except Thursdays" * "every Friday, except from October 1st to October 22nd"
     */
    exception?: Schema$NlpSemanticParsingDatetimeDateTime[];
    /**
     * |frequency| is used to represent the frequency of the recurrence over a given recurrent period. E.g. "twice a week", "once a month". An unknown frequency is represented with 0, as in just "repeating".
     */
    frequency?: number | null;
    metadata?: string | null;
    /**
     * |period| and |unit| specify how often |start_point| or |start_range| repeats. |period| should not be 0.
     */
    period?: number | null;
    rangeRestriction?: Schema$NlpSemanticParsingDatetimeRange;
    relativeRangeRestriction?: Schema$NlpSemanticParsingDatetimeRelativeDateTime;
    /**
     * A recurrent expression can be restricted by either a datetime |restriction| or |count_restriction| below. The restriction datetime can be expressed as an explicit range a relative datetime expression, a datetime point or a recurrent datetime. E.g. "every monday [next month]", "every second tuesday [this year]", etc. If |period| is \> 0 and |restriction| is not set, repeat indefinitely. Note that this can support recurrent expressions as |restriction| as well. For example in the expression "every monday on [every other month]" where [every other month] is a restriction expressed as a recurrent datetime.
     */
    restriction?: Schema$NlpSemanticParsingDatetimeDateTime;
    /**
     * |start| is used to represent the starting points, ranges or relative datetims in a recurrent expression, for example: "every morning", (range) "everyday at 5 pm", (point) "every second monday" (relative) |start| should never contain a recurrent element.
     */
    start?: Schema$NlpSemanticParsingDatetimeDateTime[];
    /**
     * DO NOT USE: deprecated fields soon to be removed.
     */
    startPoint?: Schema$NlpSemanticParsingDatetimeAbsoluteDateTime[];
    startRange?: Schema$NlpSemanticParsingDatetimeRange[];
    startRelative?: Schema$NlpSemanticParsingDatetimeRelativeDateTime[];
    /**
     * The target to be fetched. This could be a named day-of-week or month (e.g., "Monday", "April"), or a date/time unit (e.g., "day", "week", "month").
     */
    target?: Schema$NlpSemanticParsingDatetimeTargetToFetch;
    /**
     * |time_interval| is a time amount or duration, used to described the time interval between the instances of the recurrence. (e.g. "every 3 hours", "every 35 minutes", "every 2 months and 15 days", etc)
     */
    timeInterval?: Schema$NlpSemanticParsingDatetimeQuantity;
    unit?: string | null;
  }
  /**
   * This provides a semi-abstract description for relative datetime expressions. - ShiftedRelativeDateTime encodes datetimes that arise from before/after expressions (e.g. [three days ago], [2 days after March 1st]). - FetchedRelativeDateTime encodes expressions that are retrieval-type statements (e.g. [next weekend], [the last two Mondays]). Next field: 5
   */
  export interface Schema$NlpSemanticParsingDatetimeRelativeDateTime {
    fetched?: Schema$NlpSemanticParsingDatetimeFetchedRelativeDateTime;
    metadata?: string | null;
    /**
     * When a relative datetime which resolves into a range is being used as the endpoint of a range (begin_relative/end_relative), its begin/end will be taken accordingly unless this modifier indicates the opposite: begin_relative with relative range and modifier == AFTER means that its end will be taken as the beginning of the resulting range. Similarly, end_relative with a relative range and modifier == BEFORE means that its begin will be taken as the end of the resulting range. E.g. "after next month" will be a range with a begin_relative that will take the end of "next month" as its starting point (exclusive). values other than AFTER and BEFORE in the specific conditions explained here will be ignored and have no effect in the resolution of RelativeDateTimes.
     */
    modifier?: string | null;
    shifted?: Schema$NlpSemanticParsingDatetimeShiftedRelativeDateTime;
  }
  /**
   * Encapsulates metadata about the query span resolved here.
   */
  export interface Schema$NlpSemanticParsingDatetimeResolutionProperties {
    /**
     * Simple enum container for exporting meridiem mentions. Note: this is marked as deprecated as we are moving to properly parse expressions with explicit meridiem information.
     */
    meridiem?: string | null;
    /**
     * Encodes whether the datetime was phrased in a specific way, see enum above.
     */
    metadata?: string | null;
    /**
     * Expresses the relative DateTime query that gave rise to these grounded semantics.
     */
    relative?: Schema$NlpSemanticParsingDatetimeRelativeDateTime;
  }
  export interface Schema$NlpSemanticParsingDatetimeShiftedRelativeDateTime {
    /**
     * The base could be an absolute datetime point for example: "March 1", a relative datetime point, for example: "2 days before March 1" or a symbolic base type, for example: CURRENT_DATETIME. This could also be used to combine EXPLICIT_PRONOUN with the actual value of that reference being setup as a datetime point in base or relative_base
     */
    base?: Schema$NlpSemanticParsingDatetimeAbsoluteDateTime;
    baseType?: string | null;
    /**
     * Can be used to tag relative datetime expressions with metadata information in the grammar.
     */
    metadata?: string | null;
    relativeBase?: Schema$NlpSemanticParsingDatetimeResolutionProperties;
    shiftAmount?: Schema$NlpSemanticParsingDatetimeQuantity;
    /**
     * If true, shifting to the past; if false, shifting to the future.
     */
    shiftPast?: boolean | null;
  }
  /**
   * The byte offset and text of a span.
   */
  export interface Schema$NlpSemanticParsingDatetimeSpan {
    numBytes?: number | null;
    /**
     * 0-based start byte offset of the span.
     */
    startByte?: number | null;
    /**
     * The text of the span: a substring of ParserInput's canonical_input.
     */
    text?: string | null;
  }
  /**
   * Next field: 9
   */
  export interface Schema$NlpSemanticParsingDatetimeTargetToFetch {
    event?: Schema$NlpSemanticParsingDatetimeEvent;
    fuzzyRange?: string | null;
    month?: string | null;
    quarter?: string | null;
    reference?: string | null;
    season?: string | null;
    /**
     * Unnamed target: "week", "month" etc. E.g., "1st week of April".
     */
    unit?: string | null;
    /**
     * Named target: only one of the following is expected.
     */
    weekday?: string[] | null;
  }
  export interface Schema$NlpSemanticParsingDatetimeTimeZone {
    timezone?: string | null;
  }
  export interface Schema$NlpSemanticParsingEntitySourceData {
    /**
     * Indicates backends from which parts of an entity were retrieved.
     */
    entitySources?: string[] | null;
  }
  /**
   * Status indicating whether the user has finished expressing their intended semantics during a streaming interaction. Semantics are partially expressed when later, unprompted user input is expected to modify the semantics. Future inputs are typically additional speech or continued modification of argument text in form field. These inputs can trigger modifications including adding arguments, changing the intent, or modifying existing arguments. Sensing this status can be done both directly and indirectly. Fluid Actions directly detects this status as the user moves between, or enters and leaves, argument form fields. Understanding indirectly detects this status by the pace of the user's speech, the semantics of the language, and the user's intonation. See go/streaming-nlu-fulfilment-protocol-v1 for details about how it is used in the Streaming NLU Fulfillment protocol.
   */
  export interface Schema$NlpSemanticParsingExpressionStatus {
    status?: string | null;
    /**
     * Completeness probability as calculated by the parser's completeness layer.
     */
    textCompletenessProbability?: number | null;
  }
  /**
   * A list of amenity constraints. There is an implicit AND relationship between the different constraints.
   */
  export interface Schema$NlpSemanticParsingLocalAmenities {
    /**
     * Applied amenity constraints. Nothing should be inferred about the ordering of the values in this field.
     */
    type?: string[] | null;
  }
  /**
   * Conceptually this describes one location. Technically, this is a sequence of location elements with the intention that at least one element in the sequence is an actual location (rather than a modifier).
   */
  export interface Schema$NlpSemanticParsingLocalBasicLocation {
    element?: Schema$NlpSemanticParsingLocalLocationElement[];
  }
  /**
   * A high-level categorization of business types. Used for location elements that are either BUSINESS_NAME or BUSINESS_CATEGORY. The business types roughly correspond to QRef collections and should be interpreted broadly. E.g., hotel also include motels, youth hostels, and guest houses; restaurants includes bars and cafes, etc. Business types can be populated by QRef collections; other population is done by grammar categories from local_categories.grammar. It is expected that some business organizations will match more than one business type. E.g., Safeway is both a grocery store and a pharmacy. Next ID: 43 NOTE(oksana): LocalCategoryReliable grammar over-rides a few business type queries to include hyper_reliable location element. If you change this, please make sure that LocalCategoryReliable grammar reflects this too. LINT.IfChange
   */
  export interface Schema$NlpSemanticParsingLocalBusinessType {
    airline?: boolean | null;
    airport?: boolean | null;
    bank?: boolean | null;
    bikeSharingStation?: boolean | null;
    busStop?: boolean | null;
    clothingStore?: boolean | null;
    /**
     * If the element implies a cuisine type then we include the gcid string when available. Currently this happens for BUSINESS_CATEGORY type. The field is repeated to model categories like "mandarin buffet restaurant" with multiple cuisine gcid's: mandarin_restaurant and buffet_restaurant.
     */
    cuisineGcid?: string[] | null;
    departmentStore?: boolean | null;
    drugDropOff?: boolean | null;
    electricVehicleChargingStation?: boolean | null;
    electronicStore?: boolean | null;
    /**
     * This field is used to determine the emergency type of the element, which is specified by the grammar parse in (http://cs/file:googledata/localsearch/quality/grammar/local_patterns.asciipb). e.g. "coronavirus_treatment_locations" TODO(b/151330576) Deprecate the emergency field and replace with normal triggering.
     */
    emergency?: string | null;
    foodPantry?: boolean | null;
    gasStation?: boolean | null;
    groceryStore?: boolean | null;
    hairdresser?: boolean | null;
    hardwareStore?: boolean | null;
    hospital?: boolean | null;
    /**
     * Also youth hostels, guest houses, etc.
     */
    hotel?: boolean | null;
    parking?: boolean | null;
    petStore?: boolean | null;
    pharmacy?: boolean | null;
    /**
     * This is used for transit stations annotated by QRef. The transit_station business_type above is only used for business categories, and therefore is used downstream to find nearby stations rather than a particular station, and so cannot be present in a Location that is a specific station from QRef. For these cases, this business_type is used instead. e.g. "grand central" "millbrae station" "union station" will have business_type qref_transit_station
     */
    qrefTransitStation?: boolean | null;
    /**
     * Also bars and cafes
     */
    restaurant?: boolean | null;
    retail?: boolean | null;
    /**
     * Pre-k to high school
     */
    school?: boolean | null;
    shoppingCenter?: boolean | null;
    soupKitchen?: boolean | null;
    sportStore?: boolean | null;
    subwayStation?: boolean | null;
    telecom?: boolean | null;
    toyStore?: boolean | null;
    trainStation?: boolean | null;
    /**
     * A particular line in a transit system, e.g., "3 train", "Red Line", "Cirle Line", etc.
     */
    transitLine?: boolean | null;
    /**
     * Operator of a transit line, e.g., "MTA", "BART", "CTA", etc.
     */
    transitOperator?: boolean | null;
    /**
     * The different types of transit station business types will be used to figure out which vehicle types to use when querying Tripfinder's SearchStations service. The stations in that backend seem to be divided into HEAVY_RAIL, SUBWAY, and TRAM. There isn't a very reliable division between intercity rail and commuter rail -- Amtrak, LIRR, PATH, and NJ Transit are all classified as HEAVY_RAIL. That's why in these types we make a distinction between train and subway, and not train and muni_rail, (unlike TransitMode in the TravelAction proto).
     */
    transitStation?: boolean | null;
    /**
     * Also colleges
     */
    university?: boolean | null;
    /**
     * All of the vehicle types serviced by this business or business category. e.g. VEHICLE_TYPE_RAIL and VEHICLE_TYPE__BUS for "transit stop". This allows downstream to serve different result types for transit station categories in different languages. e.g. In en-US "train station" seeks both railway station and subway station results. But the equivalent word in French/Italian/German seeks only railway stations.
     */
    vehicleType?: string[] | null;
    /**
     * Stadiums, theaters, cinemas, etc.
     */
    venue?: boolean | null;
  }
  /**
   * ChainMemberConstraint for chain filtering enabled queries.
   */
  export interface Schema$NlpSemanticParsingLocalChainMemberConstraint {
    /**
     * Specifies which parent chain mids to filter by.
     */
    chainIds?: string[] | null;
  }
  export interface Schema$NlpSemanticParsingLocalCompoundLocation {
    joiner?: Schema$NlpSemanticParsingLocalJoiner;
    location1?: Schema$NlpSemanticParsingLocalLocation;
    /**
     * If location_2 is absent, it should likely be interpreted as an implicit "here". For example, "nearest Starbucks" will be represented as a compound location with "Starbucks" as location_1, "nearest" as the joiner, and empty location_2.
     */
    location2?: Schema$NlpSemanticParsingLocalLocation;
  }
  /**
   * Contact information for the |contact_location| field in LocationElement.
   */
  export interface Schema$NlpSemanticParsingLocalContactLocation {
    /**
     * Contact as a location.
     */
    contact?: Schema$NlpSemanticParsingModelsCommunicationRecipient;
    /**
     * The type of contact address (home, work, etc).
     */
    contactType?: Schema$NlpSemanticParsingModelsCommunicationPhoneType;
  }
  /**
   * Constraint for cuisine type, such as "chinese", "italian", "thai", "burgers", etc.
   */
  export interface Schema$NlpSemanticParsingLocalCuisineConstraint {
    cuisineGcid?: string | null;
  }
  export interface Schema$NlpSemanticParsingLocalEvChargingStationConnectorConstraint {
    connectorType?: string | null;
  }
  export interface Schema$NlpSemanticParsingLocalEvChargingStationPaymentConstraint {
    paymentNetworkMid?: string | null;
  }
  /**
   * There is an implicit AND relation if multiple EVCS constraint types are specified.
   */
  export interface Schema$NlpSemanticParsingLocalEvChargingStationSpeedConstraint {
    chargingSpeed?: string | null;
  }
  export interface Schema$NlpSemanticParsingLocalExtent {
    /**
     * True for values like "a few".
     */
    nonSpecificValue?: boolean | null;
    units?: string | null;
    /**
     * String representation, e.g., for debug.
     */
    unitsString?: string | null;
    /**
     * For approximate values such as "a few" or "several", we populate |value| with a specific numeric value which is a generous (i.e., high) interpretation of the text, and we set |non_specific_value| to true.
     */
    value?: number | null;
    /**
     * Can hold numbers as well as "a few".
     */
    valueString?: string | null;
  }
  export interface Schema$NlpSemanticParsingLocalGcidConstraint {
    /**
     * GCID - with the 'gcid:' prefix.
     */
    gcid?: string | null;
  }
  /**
   * Constraint for the health insurance network of a provider.
   */
  export interface Schema$NlpSemanticParsingLocalHealthInsuranceConstraint {
    network?: string | null;
  }
  /**
   * Hotel Type used by the hotels team to differentiate sub classes of accommodations. For any questions please contact hotel-search-quality@. Next ID: 48
   */
  export interface Schema$NlpSemanticParsingLocalHotelType {
    /**
     * Basic accommodation types variations.
     */
    allInclusiveResort?: boolean | null;
    beachResort?: boolean | null;
    bedAndBreakfast?: boolean | null;
    boutiqueHotel?: boolean | null;
    businessHotel?: boolean | null;
    /**
     * Other accommodation types.
     */
    cabin?: boolean | null;
    campsite?: boolean | null;
    capsuleHotel?: boolean | null;
    casinoAccommodation?: boolean | null;
    castleHotel?: boolean | null;
    chalet?: boolean | null;
    commonLodgingHouse?: boolean | null;
    condoHotel?: boolean | null;
    conventionHotel?: boolean | null;
    cottage?: boolean | null;
    ecoHotel?: boolean | null;
    extendedStayHotel?: boolean | null;
    farmstay?: boolean | null;
    gite?: boolean | null;
    golfResort?: boolean | null;
    guesthouse?: boolean | null;
    guestRanch?: boolean | null;
    hostel?: boolean | null;
    /**
     * Basic accommodation types.
     */
    hotel?: boolean | null;
    houseboat?: boolean | null;
    inn?: boolean | null;
    /**
     * Japanese accommodation types.
     */
    japaneseInn?: boolean | null;
    japaneseInnWithHotSpring?: boolean | null;
    lodge?: boolean | null;
    lodging?: boolean | null;
    loveHotel?: boolean | null;
    motel?: boolean | null;
    mountainHut?: boolean | null;
    /**
     * Any other lodging related type.
     */
    other?: boolean | null;
    pension?: boolean | null;
    resort?: boolean | null;
    safariLodge?: boolean | null;
    seasideResort?: boolean | null;
    servicedApartment?: boolean | null;
    skiResort?: boolean | null;
    suite?: boolean | null;
    vacationApartment?: boolean | null;
    vacationHouse?: boolean | null;
    /**
     * Vacation rental accommodation types.
     */
    vacationRental?: boolean | null;
    villa?: boolean | null;
    wellnessAndSpaAccommodation?: boolean | null;
    youthHostel?: boolean | null;
  }
  /**
   * Message containing information about hyper-reliable categories. go/local-hyper-reliable
   */
  export interface Schema$NlpSemanticParsingLocalHyperReliableData {
    /**
     * Whether a location is a commodity (distance is an important metric), neutral or non-commodity (distance is not important). Commodity locations are "atm", "gas station", etc. Non-commodity locations are "restaurant", "hotel", etc, and all others are neutral. The value is 1 for commodity queries, 0 for non-commodity queries, no-value for neutral queries (when the field doesn't exist in the grammar). The reason it is a float is to prepare for future changes when we expand the signal value from discrete classes to a score, and the score will be in the range of [0,1].
     */
    commodityStrength?: number | null;
    gcidsynsOverride?: Schema$NlpSemanticParsingLocalHyperReliableDataGCIDSynsOverride[];
    hyperReliable?: boolean | null;
    /**
     * Categories used for retrieval and used in Artemis diversity tiers as restricts. See https://ariane.googleplex.com/launch/190585 for details.
     */
    retrievalGcids?: string[] | null;
  }
  /**
   * Set only when hyper_reliable is true. These are gcids and scores for hyper-reliable categories in ariane/182060. These are overridden for a few hyper-reliable categories, and may not be present everywhere.
   */
  export interface Schema$NlpSemanticParsingLocalHyperReliableDataGCIDSynsOverride {
    gcidScore?: number | null;
    hyperReliableGcid?: string | null;
  }
  /**
   * Flags indiciating the specific implicit intent, e.g. dining, travel, etc. Next ID = 13
   */
  export interface Schema$NlpSemanticParsingLocalImplicitLocalCategory {
    airport?: boolean | null;
    bank?: boolean | null;
    chargingStation?: boolean | null;
    gasStation?: boolean | null;
    gym?: boolean | null;
    hairSalon?: boolean | null;
    hospital?: boolean | null;
    hotel?: boolean | null;
    laundromat?: boolean | null;
    movieTheater?: boolean | null;
    postOffice?: boolean | null;
    spa?: boolean | null;
  }
  export interface Schema$NlpSemanticParsingLocalJoiner {
    numBytes?: number | null;
    numBytesForConversion?: number | null;
    /**
     * The raw input span corresponding to this joiner.
     */
    startByte?: number | null;
    /**
     * Byte data added for conversion between this proto and IntentQuery in LooseParser. Must not be used for downstream triggering.
     */
    startByteForConversion?: number | null;
    /**
     * The original joiner string from the tokenized query. Particularly important if the type is OTHER.
     */
    text?: string | null;
    type?: string | null;
  }
  /**
   * This message holds all info the local assistant team will need to lookup a LocalResult in search.
   */
  export interface Schema$NlpSemanticParsingLocalLocalResultId {
    featureId?: Schema$GeostoreFeatureIdProto;
    /**
     * The full address of the result. This should be a verbose address string that geocodes reliably.
     */
    geocodingAddress?: string | null;
    /**
     * The knowledge graph reference of the result.
     */
    kgMid?: string | null;
    /**
     * The position of the result.
     */
    position?: Schema$GeostorePointProto;
    /**
     * The position of the result, if it can't be expressed as a pointproto.
     */
    rect?: Schema$GeostoreRectProto;
  }
  /**
   * There are a few types of locations: - Basic locations are sequences of location elements which can be either actual locations or modifiers. E.g., "Mountain View CA 94040" may be the sequence "Mountain View" (an actual location), "CA" (an actual location, and "94040" (a numeric modifier). - Compound locations: these are two locations combined by a joiner. E.g., "Target in Mountain View CA 94040" has the joiner "in" and two basic locations ("Target", and "Mountain View CA 94040"). Note that the definition is recursive, e.g., "Parking garage near Target in Mountain View". - Vicinity location: indicates an area around a certain location. The area can be defined by time or space. E.g., "within 1 hour of Palo Alto", "10 blocks from Union Square", "a few miles from here". Next ID: 14 LINT.IfChange()
   */
  export interface Schema$NlpSemanticParsingLocalLocation {
    /**
     * Exactly one of the location types should be populated.
     */
    basicLocation?: Schema$NlpSemanticParsingLocalBasicLocation;
    compoundLocation?: Schema$NlpSemanticParsingLocalCompoundLocation;
    /**
     * DEPRECATED. Instead, use LocationElement.contact_location.
     */
    contactLocation?: Schema$NlpSemanticParsingLocalContactLocation;
    /**
     * True if the location is merged, for example by CombineLocationsFn.
     */
    isMerged?: boolean | null;
    /**
     * The constraint includes various constraints on the location such as amenities, price range, ratings, or attributes such as new, cheap, etc. These constraints are a part of the location but are not modeled as location elements and are not included in the location text. The (debatable) motivation is that they do not stand on their own and are not an intrinsic part of the location. Note on texts and spans. For a location such as "kid friendly hotels with an indoor pool" we expect to get a basic location with a single location element and two constraints: - For the location element: - Both text and span match "hotels" - For the first constraint: - Both text and span match "kid friendly" - For the second constraint: - Both text and span match "indoor pool" - For the full location: - text: "hotels" - span covers "kid friendly hotels with an indoor pool"
     */
    locationConstraint?: Schema$NlpSemanticParsingLocalLocationConstraint[];
    numBytes?: number | null;
    /**
     * A LocalResult corresponding to the location the user specified, populated by local dialog (generally following a search). This field will only be set if the location is unambiguous, possibly following a series of disambiguation turns of dialog.
     */
    resolvedLocalResult?: Schema$QualityDialogManagerLocalResult;
    /**
     * The span, in the raw input, which corresponds to this location, expressed as a byte offset and byte size. This allows the extraction of the location string as it appears in the raw text.
     */
    startByte?: number | null;
    /**
     * A string representation of the location. Depending on the annotators and the location itself the string may represent the raw query, the pre-processed query, or something else. As a non-trivial example, for [target address mountain view] we will generate the text "target mountain view" without "address". We make a best-effort to come up with a good string, but make no formal guarantees. You should never present this text directly to outside users.
     */
    text?: string | null;
    /**
     * A location info including featureId and lat/lng that uniquely identifies the location the user specified.
     */
    userSpecifiedLocation?: Schema$KnowledgeVerticalsWeatherProtoUserSpecifiedLocation;
    vicinityLocation?: Schema$NlpSemanticParsingLocalVicinityLocation;
  }
  /**
   * All the possible location constraints. This message is associated with a location and can be nested accordingly. E.g., for a compound location the constraint may be associated with the entire location or with either of the two internal locations (loc_1 and loc_2). There is an implicit AND relation between the different constraints. Next ID: 26.
   */
  export interface Schema$NlpSemanticParsingLocalLocationConstraint {
    /**
     * LINT.IfChange
     */
    amenities?: Schema$NlpSemanticParsingLocalAmenities;
    chainMember?: Schema$NlpSemanticParsingLocalChainMemberConstraint;
    cuisine?: Schema$NlpSemanticParsingLocalCuisineConstraint;
    /**
     * Used for populating ElectricVehicleConnectorRefinement from QBF go/evcs-qbf-connector
     */
    evcsConnectorConstraint?: Schema$NlpSemanticParsingLocalEvChargingStationConnectorConstraint;
    /**
     * Used for populating ElectricVehiclePaymentRefinement from QBF go/evcs-qbf-payment
     */
    evcsPaymentConstraint?: Schema$NlpSemanticParsingLocalEvChargingStationPaymentConstraint;
    evcsSpeedConstraint?: Schema$NlpSemanticParsingLocalEvChargingStationSpeedConstraint;
    /**
     * Used for GCID filter. Unlike other grammar, for now this is populated in Superroot (currently based on QBLD classification, and an allowlist of GCID).
     */
    gcidConstraint?: Schema$NlpSemanticParsingLocalGcidConstraint;
    /**
     * Used for health insurance filter populator.
     */
    healthInsurance?: Schema$NlpSemanticParsingLocalHealthInsuranceConstraint;
    /**
     * Some constraints are also hyper-reliable, such as [brunch] and [coffee].
     */
    hyperReliableData?: Schema$NlpSemanticParsingLocalHyperReliableData;
    menuItem?: Schema$NlpSemanticParsingLocalMenuItem;
    new?: boolean | null;
    numBytes?: number | null;
    open24Hours?: boolean | null;
    price?: Schema$NlpSemanticParsingLocalPriceConstraint;
    quality?: Schema$NlpSemanticParsingLocalQualityConstraint;
    rooms?: Schema$NlpSemanticParsingLocalRoomConstraint;
    scalableAttribute?: Schema$NlpSemanticParsingLocalScalableAttribute;
    service?: Schema$NlpSemanticParsingLocalServiceConstraint;
    /**
     * The span, in the raw input, which corresponds to this constraint, expressed as a byte offset and byte size.
     */
    startByte?: number | null;
    text?: string | null;
    /**
     * Experimental, may change.
     */
    ungroundedConstraint?: boolean | null;
    /**
     * Used to remove all constraints, e.g. [forget all the filters]
     */
    unspecified?: boolean | null;
    /**
     * Used for vaccine refinement: go/covid-vaccine-refinement.
     */
    vaccineType?: string | null;
    visitHistory?: Schema$NlpSemanticParsingLocalVisitHistoryConstraint;
  }
  /**
   * Next ID: 26 LINT.IfChange
   */
  export interface Schema$NlpSemanticParsingLocalLocationElement {
    /**
     * For elements with a NICKNAME alias location, this field will hold all matching alias icons, which are used in search to resolve the location.
     */
    aliasIcon?: Schema$PersonalizationMapsAliasIcon[];
    /**
     * The following fields (alias_location, qref_location, and saft_location) should have at most one non-empty value between them.
     */
    aliasLocation?: string | null;
    /**
     * Set only when type is BUSINESS_NAME or BUSINESS_CATEGORY.
     */
    businessType?: Schema$NlpSemanticParsingLocalBusinessType;
    contactLocation?: Schema$NlpSemanticParsingLocalContactLocation;
    /**
     * This will hold semantics from the dialog_referents subgrammar with offsets and indices relating to a list of results shown to the user. This field is repeated while in the future we could support multiple item list selection. i.e. [the starbucks] where multiple entries in the results will be indicated here
     */
    dialogReferents?: Schema$NlpSemanticParsingModelsDialogReferentsDialogReferents[];
    /**
     * Set only when type is DIRECTIONAL_MODIFIER.
     */
    directionalModifier?: string | null;
    /**
     * DEPRECATED. See basic_location.element.type == LOCATION_REFERENT to determine this instead. Populated by a type VISITED local action, this field is used to indicate a location element is a general-case $PT_visited_location string.
     */
    genericLocation?: boolean | null;
    /**
     * Set only when business_type is hotel.
     */
    hotelType?: Schema$NlpSemanticParsingLocalHotelType;
    hyperReliableData?: Schema$NlpSemanticParsingLocalHyperReliableData;
    implicitLocalCategory?: Schema$NlpSemanticParsingLocalImplicitLocalCategory;
    /**
     * A field used to store the ID of a specific location entity, especially one not extracted via QRef. For example, - a location selected by the users via a dialog follow-up query like [the second one]. Will only be populated in the LocalSemanticsServlet, not in the grammar. - a location resolved based on a full search, e.g., following the geocoding step for a directions query. This field is also used by NoramlizeLocationForFingerprinting as the canonical place to store FeatureIds.
     */
    localResultId?: Schema$NlpSemanticParsingLocalLocalResultId;
    /**
     * Represents zip codes, street numbers, etc. that were detected directly by the grammar (and not, e.g., by QRef). DEPRECATED. We ran into problems with zip codes having leading zeroes. Now we store numbers only in the text field.
     */
    number?: number | null;
    numBytes?: number | null;
    /**
     * A collection of QRefAnnotations repesenting Reference and Resolution data for Personal References. See go/copley-local and go/copley-annotator.
     */
    personalReferenceLocation?: Schema$NlpSemanticParsingPersonalReferenceAnnotation;
    qrefLocation?: Schema$NlpSemanticParsingQRefAnnotation;
    saftLocation?: Schema$NlpSemanticParsingSaftMentionAnnotation;
    source?: string | null;
    /**
     * The byte span, in the raw query, which corresponds to this location element.
     */
    startByte?: number | null;
    /**
     * A string representation of the location element. Typical, this field will be populated by the MakeLocationElementFn semantic function with the substring of the raw_query defined by start_byte and num_bytes. However, the field can also be populated explicitly in the grammar, in which case MakeLocationElementFn leaves it alone.
     */
    text?: string | null;
    /**
     * Train number associated with /collection/geo/transit_line. Populated when user requests specific instance of a transit line. For example, long distance trains in India have two numbers for each train, one for up direction and other for down. And user use these numbers in queries along with name to specify the specific trip of the train. More details in go/number-transit-line-queries.
     */
    transitLineNumber?: string | null;
    type?: string | null;
  }
  /**
   * Specifies intent that corresponds to a menu item which is used as a location constraint, e.g. [restaurants that serve thai curry] or as a standalone categorical element, e.g. [thai curry].
   */
  export interface Schema$NlpSemanticParsingLocalMenuItem {
    /**
     * This ID corresponds to the name of the menu item in the query. For example [restaurants that serve thai curry] has menu_item_id = "thai curry".
     */
    menuItemId?: string | null;
  }
  export interface Schema$NlpSemanticParsingLocalPriceConstraint {
    cheap?: boolean | null;
    /**
     * The currency codes are expected to be string from the list in i18n/identifiers/currencycode.*
     */
    currencyCode?: string | null;
    expensive?: boolean | null;
    maxPrice?: number | null;
    minPrice?: number | null;
    moderatelyPriced?: boolean | null;
    /**
     * The user mentioned something about price, but didn't mention a specific constraint. This is used to indicate an intent to remove all price constraints, in queries like [forget the price].
     */
    unspecified?: boolean | null;
  }
  /**
   * Quality constraints about the establishment. In the future we can add to this message Zagat ratings, user reviews, etc. Next ID: 6.
   */
  export interface Schema$NlpSemanticParsingLocalQualityConstraint {
    best?: boolean | null;
    highlyRated?: boolean | null;
    stars?: Schema$NlpSemanticParsingLocalStarRatings;
    starType?: string | null;
    /**
     * The user mentioned something about quality, but didn't mention a specific constraint. This is used to indicate an intent to remove all quality constraints, in queries like [forget the rating].
     */
    unspecified?: boolean | null;
  }
  /**
   * Constraints for the occupancy of a hotel or vacation rental.
   */
  export interface Schema$NlpSemanticParsingLocalRoomConstraint {
    /**
     * It is possible to have fractional bathrooms.
     */
    minNumBathrooms?: number | null;
    minNumBedrooms?: number | null;
  }
  /**
   * Specifies intent that corresponds to a scalable attribute. This may be used as a location constraint, e.g. [restaurants with outdoor seating] or as a standalone categorical element, e.g. [happy hour] or [happy hour ny]. See go/scalable-attributes for details about scalable attributes. NOTE(oksana): LocalCategoryReliable grammar over-rides a few scalable attribute queries to include hyper_reliable location element. If you change this, please make sure that LocalCategoryReliable grammar reflects this too. LINT.IfChange This ID corresponds to the id field in //geostore/attributes/proto/config.proto:AttributeConfigProto This field holds the human readable ID for the KG topic that represents the attribute. Example: "/geo/type/establishment_poi/serves_breakfast"
   */
  export interface Schema$NlpSemanticParsingLocalScalableAttribute {
    attributeId?: string | null;
  }
  export interface Schema$NlpSemanticParsingLocalServiceConstraint {
    serviceType?: string | null;
  }
  /**
   * Star ratings constraints, mostly relevant for hotels. There is an implicit OR relation between these. E.g., for "three star or four star hotel" both three and four would be set to true. Next Available ID: 13.
   */
  export interface Schema$NlpSemanticParsingLocalStarRatings {
    five?: boolean | null;
    four?: boolean | null;
    fourAndAHalf?: boolean | null;
    one?: boolean | null;
    oneAndAHalf?: boolean | null;
    orFewer?: boolean | null;
    /**
     * If this field is set, exactly one of the star classes above should be set, and the interpretation should be that at least that many stars should be present.
     */
    orMore?: boolean | null;
    three?: boolean | null;
    threeAndAHalf?: boolean | null;
    two?: boolean | null;
    twoAndAHalf?: boolean | null;
    unspecified?: boolean | null;
  }
  export interface Schema$NlpSemanticParsingLocalVicinityLocation {
    /**
     * If the base is missing then clients should assume that it implicitly means "here". E.g., "within five miles" really means "within five miles from here"
     */
    base?: Schema$NlpSemanticParsingLocalLocation;
    /**
     * The text between the extent and the base, e.g., for "50 miles from here" the connector is "from".
     */
    connector?: string | null;
    extent?: Schema$NlpSemanticParsingLocalExtent;
  }
  /**
   * Constraint for visited, as in if a location has been visited before.
   */
  export interface Schema$NlpSemanticParsingLocalVisitHistoryConstraint {
    visitedType?: string | null;
  }
  /**
   * The type of contact (mobile, home, work, etc). NOTE: Unfortunately the name of this message is a misnomer. Contact type would be a better name.
   */
  export interface Schema$NlpSemanticParsingModelsCommunicationPhoneType {
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * Whether the annotation is from $Text.
     */
    isAnnotatedFromText?: boolean | null;
    /**
     * Normalized (canonicalized) text, e.g. "mobile".
     */
    normalizedText?: string | null;
    /**
     * Original text in query, e.g. "cell".
     */
    originalText?: string | null;
    /**
     * DEPRECATED. Used original_text instead.
     */
    rawText?: string | null;
  }
  /**
   * It can be a contact (person name), a business name, an email address or a phone number. NOTE: Unfortunately the name of this message is not generic enough. Contact would be a better name.
   */
  export interface Schema$NlpSemanticParsingModelsCommunicationRecipient {
    calendarEvent?: Schema$AssistantApiCoreTypesCalendarEvent;
    calendarEventWrapper?: Schema$AssistantApiCoreTypesCalendarEventWrapper;
    /**
     * Contact details (e.g. gaia_id, phone, etc). Replaces 'focus_name' above.
     */
    contact?: Schema$NlpSemanticParsingModelsPersonPerson;
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    isAnnotatedFromText?: boolean | null;
    /**
     * Deprecated in favor of recipient.contact.name_annotation_source.
     */
    nameAnnotationSource?: string | null;
    numberAnnotationSource?: string | null;
    /**
     * NOTE: for CONTACT recipient, this is *NOT* the real raw text of the recipient span of historical reasons. Major differences includes: - stripping possessive suffix, e.g. "John's" -\> "John" - stripping prefix/suffix/title, e.g. "Mr. John" -\> "John" - uninflect name for languages like Russian, e.g. "Андрею" -\> "Андрей" Currently this is the same as .contact.name, and is used as the string shown to the user on clientside UI. If you're looking for real raw text, use .contact.raw_text
     */
    rawText?: string | null;
    recipientType?: string | null;
    /**
     * A reference to a person by relationship name. eg. my father.
     */
    relationship?: Schema$NlpSemanticParsingModelsCommunicationRelationshipArgument;
    sensitiveNumBytes?: number | null;
    /**
     * The beginning and end of the recipient name that should be removed before logging.
     */
    sensitiveStartByte?: number | null;
  }
  /**
   * A relationship contact.
   */
  export interface Schema$NlpSemanticParsingModelsCommunicationRelationshipArgument {
    /**
     * The alias of the relationship in the query, e.g. "mom".
     */
    alias?: string | null;
    /**
     * The canonical format of the relationship, e.g. "Mother".
     */
    canonical?: string | null;
    /**
     * Mid for an entity that has lexical data (a LexiconEntry). See https://g3doc.corp.google.com/nlp/generation/g3doc/lexical_data.md for for more information about lexical data. This is the canonical mid for this entity (eg. it would be /m/0lbxz for "mother" in EN even if user referred to "mom").
     */
    canonicalLexicalMid?: string | null;
  }
  /**
   * The device to perform an action. Both device_type and device_name are optional and they can coexist: [on my phone]: device_type = PHONE [on my nexus 4]: device_name = "nexus 4" [on my nexus phone]: device_type = PHONE, device_name = "nexus"
   */
  export interface Schema$NlpSemanticParsingModelsDevice {
    /**
     * The name of the device (Nexus 5, Nexus 10, etc).
     */
    deviceName?: Schema$NlpSemanticParsingModelsDeviceName;
    /**
     * The type of the device (phone, tablet, watch, etc).
     */
    deviceType?: string | null;
  }
  /**
   * The name of the device (Nexus 5, Nexus 10, etc).
   */
  export interface Schema$NlpSemanticParsingModelsDeviceName {
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    rawText?: string | null;
  }
  /**
   * Will be used by dialog_referent subgrammar to emit types annotations from DialogReferentsAnnotator and $DialogReferentOrdinal rules.
   */
  export interface Schema$NlpSemanticParsingModelsDialogReferentsDialogReferents {
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * The field mentioned in the user's utterance, if any.
     */
    field?: Schema$NlpSemanticParsingModelsDialogReferentsListSelection;
    /**
     * Used for a grammar mention of an index.
     */
    index?: number | null;
    /**
     * Represents a tied referent in a different field of the same label
     */
    next?: Schema$NlpSemanticParsingModelsDialogReferentsDialogReferents;
    /**
     * The requested value(s) for selection from a list of alternatives.
     */
    selection?: Schema$NlpSemanticParsingModelsDialogReferentsListSelection[];
    /**
     * Set when the user's utterance refers to the (an) overall task/goal of the dialog (e.g. "the meeting starts at 10 am" mentions the goal, "meeting"). The field is repeated in case the user ambiguously identifies a task (two tasks named 'meeting').
     */
    taskMention?: Schema$NlpSemanticParsingModelsDialogReferentsListSelection[];
  }
  /**
   * Represents the user's selection from a list of alternatives.
   */
  export interface Schema$NlpSemanticParsingModelsDialogReferentsListSelection {
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * A unique identifier that is the canonical value for the chosen list item. If we are selecting among fields, this is the field_id specified in the corresponding DialogField.
     */
    id?: string | null;
    /**
     * If true, semantic function should look at watch actions in the following display entity if the first one is not playable. This is useful for "Play it" on entity page.
     */
    looseOffsetRestriction?: boolean | null;
    /**
     * The offset within the list, if know. If the list of values wasn't known (e.g. from the discourse context) then the offset is a zero-based mapping of the ordinal value of the selection ("first one" maps to zero; "last one" to minus one).
     */
    offset?: number | null;
    /**
     * When the user selects a list value by name then this is the matched text from the utterance. Note that, if the list of values is known, then the aqua annotator should have mapped it to an offset.
     */
    rawText?: string | null;
  }
  /**
   * Example: "The White Album"
   */
  export interface Schema$NlpSemanticParsingModelsMediaAlbumTitle {
    /**
     * Annotations from custom media annotator.
     */
    annotationList?: Schema$NlpSemanticParsingModelsMediaMediaAnnotationList;
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * If true, indicates the user wants their favorite album. Like [play my favorite album my Eminem]
     */
    favorite?: boolean | null;
    /**
     * If true, indicates the user wants the first album. Like [play adele's first album]
     */
    first?: boolean | null;
    /**
     * Is annotated by Nimble for the media Fast Path.
     */
    isFromFastPath?: boolean | null;
    /**
     * If true, indicates the user wants the latest album. Like, [play adele's latest album]
     */
    latest?: boolean | null;
    /**
     * More from this album.
     */
    playMore?: boolean | null;
    qref?: Schema$NlpSemanticParsingQRefAnnotation;
    /**
     * Required, corresponds to the raw text, like "The White Album."
     */
    rawText?: string | null;
  }
  /**
   * Represents a music recording (usually a song). Each populated field can be thought of as additional constraint about the song's identity. For instance, if no fields are set, then this represents "some song." If only the music_artist is set, then it represents "some song by the specified music_artist." Inspired (but not strictly adhered to) http://schema.org/MusicRecording Next ID: 22
   */
  export interface Schema$NlpSemanticParsingModelsMediaAudio {
    album?: Schema$NlpSemanticParsingModelsMediaAlbumTitle;
    artist?: Schema$NlpSemanticParsingModelsMediaMusicArtist;
    /**
     * Like an audio book. "Listen to (moby dick) audiobook"
     */
    book?: Schema$NlpSemanticParsingModelsMediaBook;
    /**
     * A date time constraint for audio entity, for example, "jazz station 1980".
     */
    dateTime?: Schema$NlpSemanticParsingDatetimeDateTime;
    /**
     * Constraining the query to some detail about the episode. Example: "listen to episode (13) of this american life with (mike birbiglia)" would have the 2 constraints in parens.
     */
    episodeConstraint?: Schema$NlpSemanticParsingModelsMediaEpisodeConstraint[];
    /**
     * Soundtrack or theme song (see score_type param that indicates whether the user refers to a soundtrack or a theme song) of the game. "Play soundtrack from (Deus Ex Human Revolution)".
     */
    game?: Schema$NlpSemanticParsingModelsMediaGame;
    genericMusic?: Schema$NlpSemanticParsingModelsMediaGenericMusic;
    genre?: Schema$NlpSemanticParsingModelsMediaMusicGenre;
    /**
     * Soundtrack or theme song (see score_type param that indicates whether the user refers to a soundtrack or a theme song) of the movie. E.g. "Play (Let It Go) from (Disney's Frozen)"
     */
    movie?: Schema$NlpSemanticParsingModelsMediaMovie;
    /**
     * News topic. "Listen to news about (Ukraine)"
     */
    newsTopic?: Schema$NlpSemanticParsingModelsMediaNewsTopic;
    /**
     * True when the query does not contains an explict audio name. E.g. When user says "play" or "listen to".
     */
    noExplicitAudio?: boolean | null;
    playlist?: Schema$NlpSemanticParsingModelsMediaMusicPlaylist;
    /**
     * Podcast feeds. "Listen to (This American Life)"
     */
    podcast?: Schema$NlpSemanticParsingModelsMediaPodcast;
    radio?: Schema$NlpSemanticParsingModelsMediaRadio;
    /**
     * E.g. "play NPR radio", "Play BBC radio".
     */
    radioNetwork?: Schema$NlpSemanticParsingModelsMediaRadioNetwork;
    /**
     * The query for backends to use in search. e.g. for an user query of "play kids song video on tv" from assistant, this field would be "kids song". Note: there is no guarantee this field is populated; when it is not, backends should fall back to "raw_text" fields in song, artist, album etc.
     */
    rawText?: string | null;
    /**
     * If any of movie, game or tv show fields is populated this field indicates specific score type requested in the query. E.g. for [play soundtrack from frozen] this field is SOUNDTRACK, for [play frozen song] this field is THEME_SONG.
     */
    scoreType?: string | null;
    /**
     * Constraining the query to some detail about the season. Example: "listen to season 2 of serial"
     */
    seasonConstraint?: Schema$NlpSemanticParsingModelsMediaSeasonConstraint;
    song?: Schema$NlpSemanticParsingModelsMediaSong;
    /**
     * Optional tags associated with how the media entity should be played. For example, this can be set to SEED_RADIO to signify that the user wants to play a radio station seeded by the entity.
     */
    tag?: string[] | null;
    /**
     * Soundtrack or theme song (see score_type param that indicates whether the user refers to a soundtrack or a theme song) of the tv show. E.g. "Play soundtrack from (Friends)".
     */
    tvShow?: Schema$NlpSemanticParsingModelsMediaTVShow;
  }
  /**
   * Metadata for an audiobook.
   */
  export interface Schema$NlpSemanticParsingModelsMediaAudiobookInfo {
    /**
     * The MID of the audiobook entity (/book/book_edition).
     */
    audiobookMid?: string | null;
    authors?: string[] | null;
    /**
     * The MID of the book entity (/book/book) which this audiobook is associated with.
     */
    bookMid?: string | null;
    narrators?: string[] | null;
  }
  /**
   * Example: "East of Eden"
   */
  export interface Schema$NlpSemanticParsingModelsMediaBook {
    /**
     * Annotations from custom media annotator.
     */
    annotationList?: Schema$NlpSemanticParsingModelsMediaMediaAnnotationList;
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * Annotation comes from a text annotator. Needed to boost recall. Typically need to be verified in superroot, and have separate scoring.
     */
    isAnnotatedFromText?: boolean | null;
    /**
     * If true, indicates the user wants the latest book. Like, [play Dan Brown's latest book]
     */
    latest?: boolean | null;
    qref?: Schema$NlpSemanticParsingQRefAnnotation;
    /**
     * Required, corresponds to the raw text, like "East of Eden"
     */
    rawText?: string | null;
  }
  /**
   * Media device. Like, Chromecast, TV or Chirp. When emitted from the cast_device domain, you should expect it to be one of 3 different forms: 1) Personal Device: The annotation comes from a device we found in the user's home. device_id and name should be set, cast_device_type is set if device type is mentioned in query. e.g. "Dima's Pineapple Chirp" device_id: FOOBAR name: "Dima's Pineapple" cast_device_type: CHIRP 2) Common Device Name: The annotation comes from a model of the common names of user's device. name and cast_device_type should be set but device_id will not be. cast_device_type can be UNKNOWN. e.g. "John's Living Room" name: "John's Living Room" cast_device_type: UNKNOWN 3) Device Type: The annotation comes from a model of common cast device types. Only cast_device_type will be set. e.g. "TV" or "chromecast" cast_device_type: CHROMECAST Next ID: 9
   */
  export interface Schema$NlpSemanticParsingModelsMediaCastDeviceAnnotation {
    castDeviceSource?: string | null;
    /**
     * This field is populated when the user says [play X on $cast_device] and we know the type of $cast_device but cannot identify the exact device.
     */
    castDeviceType?: string | null;
    /**
     * The timestamp that the device is linked with the user in milliseconds. This is inherited from the corresponding assistant DeviceSettings as is.
     */
    creationTimestampMs?: string | null;
    /**
     * DEPRECATED: Please use device_identifier instead.
     */
    deviceId?: string | null;
    /**
     * The identification of the device. This field is populated when the user says [play X on $device_name] and $device_name matches one of the devices linked to user's account. \} oneof Media Device
     */
    deviceIdentifier?: Schema$AssistantApiCoreTypesDeviceId;
    name?: string | null;
    /**
     * This field is populated when the user metioned quantification in the query. E.g., "2" or "all".
     */
    quantification?: Schema$NlpSemanticParsingModelsMediaQuantification;
  }
  /**
   * Represents a localized price. Next ID: 3
   */
  export interface Schema$NlpSemanticParsingModelsMediaCost {
    /**
     * Contains the standard code for the given type of currency. The value must represent a valid i18n_identifiers::CurrencyCode.
     */
    currencyCode?: string | null;
    /**
     * Contains the price in a particular currency.
     */
    price?: number | null;
  }
  /**
   * Provider deeplink and associated metadata, in particular restrictions on platform and user's subscription. Next ID: 18
   */
  export interface Schema$NlpSemanticParsingModelsMediaDeeplinkInfo {
    /**
     * The type of the deeplink. Sometimes the deeplink is not only used for playing media, but also used for other actions. For example, the deeplink could be for playing a movie trailer from YouTube or recording a movie from YouTube TV.
     */
    actionType?: string | null;
    /**
     * The upper-case, III country code, e.g., "US", in which the deeplink cannot play. For possible values, see: google3/i18n/identifiers/regioncode.h google3/java/com/google/i18n/identifiers/RegionCode.java For details on converting to and from ISO country codes, see http://iii-howto#GettingCanonRegionCodes.
     */
    blacklistedCountry?: string[] | null;
    /**
     * The upper-case, III country code, e.g., "US", in which the deeplink can play. If unset or has "earth" (b/72566951), means the deeplink can be used world-wide except in |blacklisted_country| list. For possible values, see: google3/i18n/identifiers/regioncode.h google3/java/com/google/i18n/identifiers/RegionCode.java For details on converting to and from ISO country codes, see http://iii-howto#GettingCanonRegionCodes.
     */
    country?: string[] | null;
    /**
     * Deeplink to the media. This deeplink is meant to be send to the provider app on available platforms without any modifications. Required.
     */
    deeplink?: string | null;
    /**
     * Some providers give us an opaque, unstable deeplink to use at execution-time. E.g. see http://go/collab-ranking-nl-uri#heading=h.ndmdfw388tk3 Such a deeplink is not useful for logging, caching, comparing to other candidate deeplinks, etc. So most fulfillment code will want the traditional, stable deeplink that can be interpreted, parsed, cached, etc (found in the "deeplink" field, above). But this opaque, unstable deeplink (if non-empty) must be included in the music initiation clientop.
     */
    deeplinkForExecution?: string | null;
    /**
     * Indicate whether the deeplink is compatible with credentials. If true, CCS will not send the credentials to cast app. Currently this field is only used for voice-follow on cases on smart displays.
     */
    incompatibleWithCredentials?: boolean | null;
    /**
     * List of offers that allow user to access the deeplink, that is if the list contains PREMIUM_SUBSCRIPTION and BASIC_SUBSCRIPTION users that have either premium or basic subscription can use the deeplink. If the list is empty it means that there are no subscription restrictions.
     */
    offer?: string[] | null;
    /**
     * This field is only used when "offer" includes a PAY_PER_USE. When "offer" includes a PAY_PER_USE, paid_offer_detail will contain offers for BUY and RENT offer_types with associated cost info.
     */
    paidOfferDetail?: Schema$NlpSemanticParsingModelsMediaPaidOfferDetail[];
    /**
     * List of platforms that support the deeplink. If the list is empty it means that there are no platform restrictions.
     */
    platform?: string[] | null;
    /**
     * Document scores which are used for ranking action links. Document scores might come from CDOC in Raffia or other indexing systems. For example, for web pages, the score shows how likely the web page (composite doc) which generated this link refers to the given entity or how close a particular entity is with the given composite doc. For the larger design, please see go/ma_dedup. For PACIFIC_COLLAB_RANKING deeplink, the score is the normalized confidence score returned by partner for fulfillment candidate. For pivot candidates, the score is calculated with the index of the alternative results.
     */
    score?: number | null;
    /**
     * Name of subscription packages which are granted access to this deeplink. This is to match exactly the end users authentication system. This is to be used if the offer is BASIC_SUBSCRIPTION or PREMIUM_SUBSCRIPTION. There can be multiple packages -- the user needs only to authenticate with a single package. For more information please see: go/subscription-package
     */
    subscriptionPackageName?: string[] | null;
    /**
     * Tags associated with the content played by this deeplink. In the common case, the deeplink is supposed to specify a music entity within the provider's inventory, and the provider app should decide the actual content based on the user's account profile (e.g., for a deeplink to an artist, playing tracks from the artist or similar artists, and for a song, playing the official album recording of the song). But in some cases, the deeplink belong to special content. For example, for an artist a seed radio based on the artist, and a live or karaoke version of a song. We use this field to mark such special content types.
     */
    tag?: string[] | null;
    /**
     * A time window in which the deeplink is valid. If not set, the deeplink is considered valid.
     */
    validTimeWindow?: Schema$NlpSemanticParsingModelsMediaDeeplinkInfoTimeWindow;
    /**
     * DEPRECATED: This field is ignored by understanding and fulfillment.
     */
    vuiId?: string | null;
    /**
     * Additional info specific to YouTube Deeplink (if applicable).
     */
    youtubeDeeplinkInfo?: Schema$NlpSemanticParsingModelsMediaYouTubeDeeplinkInfo;
  }
  /**
   * Represents a time window expressed as a time range.
   */
  export interface Schema$NlpSemanticParsingModelsMediaDeeplinkInfoTimeWindow {
    /**
     * Time in seconds since epoch.
     */
    endTimestamp?: string | null;
    /**
     * Time in seconds since epoch.
     */
    startTimestamp?: string | null;
  }
  /**
   * Example: "the episode with all of the comedians". A free-form text description of a media.
   */
  export interface Schema$NlpSemanticParsingModelsMediaDescription {
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    rawText?: string | null;
  }
  /**
   * Example: "latest" would constrain the episode to a certain ordinal.
   */
  export interface Schema$NlpSemanticParsingModelsMediaEpisodeConstraint {
    /**
     * The absolute index of the episode. 1 is the first element and -1 is the last element in the sequence, -2 is the second-to-last element, and so on. Examples: "first episode" =\> 1 "3rd episode" =\> 3 "last episode" =\> -1
     */
    absoluteIndex?: number | null;
    /**
     * Date/time of the message. This could be an absolute date/time (e.g. find my message from monday) or a date/time range (e.g. find my message in the past four hours). This constrains *when* the episode came out.
     */
    dateTime?: Schema$NlpSemanticParsingDatetimeDateTime;
    /**
     * A description of the episode. Example: For the query: [listen to this american life about cars] the description would be "cars"
     */
    description?: Schema$NlpSemanticParsingModelsMediaDescription;
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    rawText?: string | null;
    /**
     * The relative index of the episode. Examples: "previous episode" =\> -1 "current episode" =\> 0 "next episode" =\> 1
     */
    relativeIndex?: number | null;
  }
  /**
   * Defines a frequency for a terrestrial radio station. For instance, 99.1 FM, 730 AM, etc. Next ID: 4
   */
  export interface Schema$NlpSemanticParsingModelsMediaFrequency {
    /**
     * The broadcast band used by the radio station.
     */
    band?: string | null;
    /**
     * Frequency in MHz (for FM) and KHz (for AM).
     */
    value?: number | null;
  }
  /**
   * Example: "Deus Ex Human Revolution"
   */
  export interface Schema$NlpSemanticParsingModelsMediaGame {
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * Annotation comes from a text annotator. Needed to boost recall. Typically need to be verified in superroot, and have separate scoring.
     */
    isAnnotatedFromText?: boolean | null;
    qref?: Schema$NlpSemanticParsingQRefAnnotation;
    /**
     * Required, corresponds to the raw text, like "Deus Ex Human Revolution"
     */
    rawText?: string | null;
  }
  /**
   * Example: "my library", "some music".
   */
  export interface Schema$NlpSemanticParsingModelsMediaGenericMusic {
    /**
     * Annotations from custom media annotator. Deprecated - generic music deeplinks should be added to the Provider config, not to the grammar.
     */
    annotationList?: Schema$NlpSemanticParsingModelsMediaMediaAnnotationList;
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * New music.
     */
    newMusic?: boolean | null;
    /**
     * Required, corresponds to the raw text, like "my tracks"
     */
    rawText?: string | null;
    type?: string | null;
  }
  /**
   * An object representing a latitude/longitude pair. More info in https://cs.corp.google.com/piper///depot/google3/google/type/latlng.proto
   */
  export interface Schema$NlpSemanticParsingModelsMediaLatLng {
    /**
     * The latitude in degrees. It must be in the range [-90.0, +90.0].
     */
    latitude?: number | null;
    /**
     * The longitude in degrees. It must be in the range [-180.0, +180.0].
     */
    longitude?: number | null;
  }
  /**
   * Annotation for media entities. Next ID: 17
   */
  export interface Schema$NlpSemanticParsingModelsMediaMediaAnnotation {
    /**
     * Name of the artist (if applicable). Used for songs and albums.
     */
    artistName?: string | null;
    /**
     * Additional info specific to an audiobook (if applicable).
     */
    audiobookInfo?: Schema$NlpSemanticParsingModelsMediaAudiobookInfo;
    /**
     * Type of the media content. This field is not always populated, but only when this annotation is used to represent an individual media item, e.g., when it is the value of an intent argument storing a media object to play.
     */
    contentType?: string | null;
    /**
     * Images of the media.
     */
    image?: Schema$AssistantApiCoreTypesImage[];
    /**
     * Name of the media. Required.
     */
    name?: string | null;
    /**
     * Additional info specific to a news audio/video stream (if applicable).
     */
    newsInfo?: Schema$NlpSemanticParsingModelsMediaNewsInfo;
    /**
     * The personal ingestion engine.
     */
    personalDataIngestionEngine?: string | null;
    /**
     * Visibility setting of the retrieved playlist.
     */
    playlistVisibility?: string | null;
    /**
     * Additional info specific to podcast stream (if applicable).
     */
    podcastInfo?: Schema$NlpSemanticParsingModelsMediaPodcastInfo;
    primaryEntityMid?: string | null;
    /**
     * List of providers and their deeplinks.
     */
    providerInfo?: Schema$NlpSemanticParsingModelsMediaMediaProviderInfo[];
    /**
     * Purchase info for purchased or preordered movies, episodes, seasons, tv shows.
     */
    purchaseInfo?: Schema$NlpSemanticParsingModelsMediaPurchaseInfo;
    /**
     * Only one of these fields should be set depending on the type of the content. oneof content_specific_info { Additional info specific to a radio station (if applicable).
     */
    radioInfo?: Schema$NlpSemanticParsingModelsMediaRadioInfo;
    /**
     * Rental info for rented movies.
     */
    rentalInfo?: Schema$NlpSemanticParsingModelsMediaRentalInfo;
    source?: string | null;
    /**
     * Additional info specific to YouTube playlist (if applicable).
     */
    youtubePlaylistInfo?: Schema$NlpSemanticParsingModelsMediaYouTubePlaylistInfo;
  }
  /**
   * List of MediaAnnotation. Media annotators should use the MediaAnnotationList to annotate spans instead of MediaAnnotation. This prevents exponential explosion of interpretations (consider [play $song by $artist on $device]) and allows us to have simpler tests for grammar.
   */
  export interface Schema$NlpSemanticParsingModelsMediaMediaAnnotationList {
    annotation?: Schema$NlpSemanticParsingModelsMediaMediaAnnotation[];
  }
  /**
   * A media provider and the deeplinks provided by the provider. MediaProviderInfo is an abstraction for topics of multiple media related KG types under /base/mediaasset domain and /media_common. It's often eligible for topics of media related KG types like /broadcast/radio_station, /film/film, /music/artist, /music/album, /music/recording_cluster, /music/recording, /tv/tv_program, etc. See go/media-pq for design details. Next ID: 6
   */
  export interface Schema$NlpSemanticParsingModelsMediaMediaProviderInfo {
    /**
     * Deeplinks provided by the provider. If empty it indicates that the media is unavailable with the provider, e.g. due to country restrictions or limited catalog.
     */
    deeplinkInfo?: Schema$NlpSemanticParsingModelsMediaDeeplinkInfo[];
    /**
     * The unique and reverse unique provider enumerator in KG (e.g., "ORANGE_SPAIN" for /g/11h6nkfyrm). It is more stable than the KG mid. See go/kema-api#keys. Some mids cannot have the enumerator property due to historical reason (e.g., multiple media providers were created for iTunes and only ""/g/11fhyxjwt5" has provider enumerator as "ITUNES_NEW" in KG). These entities need to have hard-coded key (e.g., "/m/019g58" has key "ITUNES") kept outside of KG.
     */
    kgProviderKey?: string | null;
    /**
     * Media ID of a MediaItem in a MediaBrowseTree (MBT). This field is used to play a specific media item from MBT using playFromMediaId API.
     */
    mediaId?: string | null;
    /**
     * The machine ID (MID) of the media provider.
     */
    providerMid?: string | null;
    /**
     * The name of the media provider.
     */
    providerName?: string | null;
  }
  /**
   * Example: "Casablanca"
   */
  export interface Schema$NlpSemanticParsingModelsMediaMovie {
    /**
     * Annotations from custom media annotator.
     */
    annotationList?: Schema$NlpSemanticParsingModelsMediaMediaAnnotationList;
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * Annotation comes from a text annotator. Needed to boost recall. Typically need to be verified in superroot, and have separate scoring.
     */
    isAnnotatedFromText?: boolean | null;
    /**
     * Is annotated by Nimble for the media Fast Path.
     */
    isFromFastPath?: boolean | null;
    providerMetadata?: Schema$NlpSemanticParsingModelsMediaProviderMetadata[];
    qref?: Schema$NlpSemanticParsingQRefAnnotation;
    /**
     * Required, corresponds to the raw text, like "Casablanca"
     */
    rawText?: string | null;
  }
  /**
   * Example: "The Beatles"
   */
  export interface Schema$NlpSemanticParsingModelsMediaMusicArtist {
    /**
     * Annotations from custom media annotator.
     */
    annotationList?: Schema$NlpSemanticParsingModelsMediaMediaAnnotationList;
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * If true, indicates the user wants their favorite album. Like [play my favorite album my Eminem]
     */
    favorite?: boolean | null;
    /**
     * Is annotated by Nimble for the media Fast Path.
     */
    isFromFastPath?: boolean | null;
    /**
     * More from this artist.
     */
    playMore?: boolean | null;
    qref?: Schema$NlpSemanticParsingQRefAnnotation;
    /**
     * Required, corresponds to the raw text, like "The Beatles"
     */
    rawText?: string | null;
  }
  /**
   * Example: "British Invasion"
   */
  export interface Schema$NlpSemanticParsingModelsMediaMusicGenre {
    /**
     * Annotations from custom media annotator.
     */
    annotationList?: Schema$NlpSemanticParsingModelsMediaMediaAnnotationList;
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * More from this genre.
     */
    playMore?: boolean | null;
    qref?: Schema$NlpSemanticParsingQRefAnnotation;
    /**
     * Required, corresponds to the raw text, like "British Invasion"
     */
    rawText?: string | null;
  }
  /**
   * Example: "gym playlist"
   */
  export interface Schema$NlpSemanticParsingModelsMediaMusicPlaylist {
    /**
     * Annotations from custom media annotator.
     */
    annotationList?: Schema$NlpSemanticParsingModelsMediaMediaAnnotationList;
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * Annotation comes from a text annotator. Needed to boost recall. Typically need to be verified in superroot, and have separate scoring.
     */
    isAnnotatedFromText?: boolean | null;
    /**
     * If the model is confident that this is a bizarre long-tail mood-based playlist, it can send a signal to downstream systems (that might do things like generate random music) Example: * [play music for brushing my teeth with the lights off on tuesday] This is pretty much an 'easter egg' -- it is not critical.
     */
    longtailMood?: boolean | null;
    /**
     * Optional, some canonical name for the playlist.
     */
    normalizedText?: string | null;
    /**
     * Needed for proto conformance in Semantic Parsing.
     */
    qref?: Schema$NlpSemanticParsingQRefAnnotation;
    /**
     * Required, corresponds to the raw text, like "80s remix" (tokenized)
     */
    rawText?: string | null;
    special?: string | null;
  }
  export interface Schema$NlpSemanticParsingModelsMediaNewsInfo {
    /**
     * The docid of the news result from News360 backend.
     */
    docid?: string | null;
    /**
     * Indicates how the type of the news result.
     */
    newsContentType?: string | null;
    /**
     * Publication time of the news, in seconds (unix epoch).
     */
    publicationTime?: Schema$AssistantApiTimestamp;
    /**
     * The publisher of the news.
     */
    publisher?: string | null;
  }
  /**
   * Example: "ukraine" in a query like "read me news about Ukraine"
   */
  export interface Schema$NlpSemanticParsingModelsMediaNewsTopic {
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    rawText?: string | null;
  }
  /**
   * Represents BUY and RENT offers and associated cost info. Next ID: 3
   */
  export interface Schema$NlpSemanticParsingModelsMediaPaidOfferDetail {
    /**
     * Represents the price of this offer according to the locale and region.
     */
    cost?: Schema$NlpSemanticParsingModelsMediaCost[];
    /**
     * Specifies the type of offer.
     */
    paidOfferType?: string | null;
  }
  /**
   * Example: "This American Life"
   */
  export interface Schema$NlpSemanticParsingModelsMediaPodcast {
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * Annotation comes from a text annotator. Needed to boost recall. Typically need to be verified in superroot, and have separate scoring.
     */
    isAnnotatedFromText?: boolean | null;
    /**
     * Optional, some canonical name for the playlist.
     */
    normalizedText?: string | null;
    qref?: Schema$NlpSemanticParsingQRefAnnotation;
    /**
     * Required, corresponds to the raw text, like "this american life"
     */
    rawText?: string | null;
  }
  export interface Schema$NlpSemanticParsingModelsMediaPodcastInfo {
    /**
     * An internal identifier for the wernicke database that identifies a cluster of multiple sources for a particular podcast.
     */
    clusterId?: string | null;
    /**
     * GUID of the given podcast episode.
     */
    episodeGuid?: string | null;
    /**
     * The url for the rss feed providing this podcast.
     */
    feedUrl?: string | null;
    /**
     * Podcast recommendations features. These features are used to train models for reranking podcast recommendations. Full list of features: http://shortn/_bg6NvzYs6F This won't be sent to clients. It will only be annotated for crust results
     */
    podcastRecsFeatures?: Schema$SuperrootPodcastsRecommendationsPodcastRecsFeatures;
    title?: string | null;
  }
  /**
   * Provider metadata associated with video.
   */
  export interface Schema$NlpSemanticParsingModelsMediaProviderMetadata {
    /**
     * URL like https://www.netflix.com/title/70305883 -- this is used as a deeplink to play the video.
     */
    deeplinkUrl?: string | null;
    /**
     * Provider MID.
     */
    providerMid?: string | null;
  }
  export interface Schema$NlpSemanticParsingModelsMediaPurchaseInfo {
    orderType?: string | null;
    /**
     * The time at which the item is purchased.
     */
    purchaseTimestampSec?: string | null;
  }
  /**
   * The quantification of device(s) in the query. For example, "three speakers", "all TVs", etc. Usually, we should have either lexical field or number field. However, there are some special words which we will set both fields. For example, "all 3" will have the semantic: {lexical=ALL, number=3\}. Note that "both" is simply modeled as {lexical=ALL\}.
   */
  export interface Schema$NlpSemanticParsingModelsMediaQuantification {
    lexical?: string | null;
    /**
     * Numerical quantification. E.g., "three speakers".
     */
    number?: number | null;
  }
  /**
   * Example: "107.7 the bone"
   */
  export interface Schema$NlpSemanticParsingModelsMediaRadio {
    /**
     * Annotations from custom media annotator.
     */
    annotationList?: Schema$NlpSemanticParsingModelsMediaMediaAnnotationList;
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * If true, indicates the user wants their favorite radio station to be played. Ex: [play my favorites on radio]
     */
    favorite?: boolean | null;
    /**
     * This proto may only be partially filled depending on the query. ## Some examples (all of them have open_intent): ## | Query |radio.raw_text|radio.frequency.band|radio.frequency.value| |[play kqed fm]| [kqed fm] | [fm] | N/A | |[play 88.5 fm]| [88.5 fm] | [fm] | 88.5 | | [play 88.5 | [88.5] | N/A | 88.5 | ## | [play fm] | [fm] | [fm] | N/A |
     */
    frequency?: Schema$NlpSemanticParsingModelsMediaFrequency;
    /**
     * Annotation comes from a text annotator. Needed to boost recall. Typically need to be verified in superroot, and have separate scoring.
     */
    isAnnotatedFromText?: boolean | null;
    /**
     * Is annotated by Nimble for the media Fast Path.
     */
    isFromFastPath?: boolean | null;
    qref?: Schema$NlpSemanticParsingQRefAnnotation;
    /**
     * Required, corresponds to the raw text, like "107.7"
     */
    rawText?: string | null;
  }
  /**
   * Metadata for a radio station (both terrestrial and internet). Next ID: 4
   */
  export interface Schema$NlpSemanticParsingModelsMediaRadioInfo {
    /**
     * Frequency of the terrestrial radio station.
     */
    frequency?: Schema$NlpSemanticParsingModelsMediaFrequency;
    /**
     * Location of the radio station.
     */
    location?: Schema$NlpSemanticParsingModelsMediaLatLng;
    /**
     * Popularity of the radio station. This will be used in ranking of the radio stations. This value should be between 0 (least popular) and 5 (most popular).
     */
    popularity?: number | null;
  }
  /**
   * Example: "npr", "bbc", etc.
   */
  export interface Schema$NlpSemanticParsingModelsMediaRadioNetwork {
    /**
     * Annotations from custom media annotator.
     */
    annotationList?: Schema$NlpSemanticParsingModelsMediaMediaAnnotationList;
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    qref?: Schema$NlpSemanticParsingQRefAnnotation;
    /**
     * Required, corresponds to the raw text, like "npr"
     */
    rawText?: string | null;
  }
  export interface Schema$NlpSemanticParsingModelsMediaRentalInfo {
    /**
     * Time period for users to continue watching.
     */
    activatePeriodSec?: string | null;
    /**
     * Time period for users to begin watching.
     */
    grantPeriodSec?: string | null;
    /**
     * The time at which the item is purchased.
     */
    purchaseTimestampSec?: string | null;
    /**
     * Time until which ownership is granted
     */
    validUntilTimestampSec?: string | null;
  }
  /**
   * Example: "season 2" of serial
   */
  export interface Schema$NlpSemanticParsingModelsMediaSeasonConstraint {
    /**
     * The absolute index of the season. 1 is the first element and -1 is the last element in the sequence, -2 is the second-to-last element, and so on. Examples: "first season" =\> 1 "3rd season" =\> 3 "last season" =\> -1
     */
    absoluteIndex?: number | null;
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    rawText?: string | null;
    /**
     * The relative index of the season. Examples: "previous season" =\> -1 "current season" =\> 0 "next season" =\> 1
     */
    relativeIndex?: number | null;
  }
  /**
   * Example: "Hey Jude"
   */
  export interface Schema$NlpSemanticParsingModelsMediaSong {
    /**
     * Annotations from custom media annotator.
     */
    annotationList?: Schema$NlpSemanticParsingModelsMediaMediaAnnotationList;
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * If true, indicates the user wants their favorite album. Like [play my favorite song]
     */
    favorite?: boolean | null;
    /**
     * If true, indicates the user wants the first song. Like [play adele's first song]
     */
    first?: boolean | null;
    /**
     * Annotation comes from a text annotator. Needed to boost recall. Typically need to be verified in superroot, and have separate scoring.
     */
    isAnnotatedFromText?: boolean | null;
    /**
     * Is annotated by Nimble for the media Fast Path.
     */
    isFromFastPath?: boolean | null;
    /**
     * If true, indicates the user wants the latest song. Like, [play adele's latest song]
     */
    latest?: boolean | null;
    /**
     * Optional, indicates this reference came from QRef.
     */
    qref?: Schema$NlpSemanticParsingQRefAnnotation;
    /**
     * Required, corresponds to the raw text, like "Hey Jude."
     */
    rawText?: string | null;
  }
  /**
   * Example: "Breaking Bad"
   */
  export interface Schema$NlpSemanticParsingModelsMediaTVShow {
    /**
     * Annotations from custom media annotator.
     */
    annotationList?: Schema$NlpSemanticParsingModelsMediaMediaAnnotationList;
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * Is annotated by Nimble for the media Fast Path.
     */
    isFromFastPath?: boolean | null;
    providerMetadata?: Schema$NlpSemanticParsingModelsMediaProviderMetadata[];
    qref?: Schema$NlpSemanticParsingQRefAnnotation;
    /**
     * Required, corresponds to the raw text, like "Breaking Bad"
     */
    rawText?: string | null;
  }
  /**
   * Provide the deeplink information specific to YouTube PMAs. Next ID: 3
   */
  export interface Schema$NlpSemanticParsingModelsMediaYouTubeDeeplinkInfo {
    /**
     * See go/yt-clicktracking. Serialized youtube.api.innertube.InnerTubeClickTrackingProto.
     */
    clickTrackingId?: string | null;
    /**
     * For YouTube Channels, by default the deeplink is set to be the playlist of all uploads from the channel. This field is used for YouTube in-app browse when we need the YouTube channel's main page url. We will use the uploader_channel_id to construct the needed channel deeplink.
     */
    uploaderChannelId?: string | null;
  }
  export interface Schema$NlpSemanticParsingModelsMediaYouTubePlaylistInfo {
    /**
     * Count of videos in the YouTube playlist that are playable in WoodStock. For performance reasons the maximum value this field can reach is capped, see: kMaxVideosPerPlaylistForSearchMetadata.
     */
    numVidsPlayableInWoodstock?: string | null;
    /**
     * Total number of videos present in the retrieved playlist.
     */
    videoCount?: number | null;
  }
  export interface Schema$NlpSemanticParsingModelsMoneyCurrency {
    /**
     * KG Currency mid
     */
    freebaseMid?: string | null;
  }
  /**
   * Represent a money quantity
   */
  export interface Schema$NlpSemanticParsingModelsMoneyMoney {
    amount?: Schema$NlpSemanticParsingNumberNumber;
    currency?: Schema$NlpSemanticParsingModelsMoneyCurrency;
  }
  /**
   * Corresponds to an entry in our hand-curated Nimble table of providers.
   */
  export interface Schema$NlpSemanticParsingModelsNarrativeNewsNewsProvider {
    /**
     * Annotation data for the provider.
     */
    data?: Schema$QualityActionsNewsProviderAnnotationData;
    /**
     * Required, but should only be used inside Aqua and must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    rawText?: string | null;
  }
  /**
   * OnDevice describes the device(s) to perform an action. This message type can be imported in action messages as an argument.
   */
  export interface Schema$NlpSemanticParsingModelsOnDevice {
    /**
     * The device(s) to perform an action.
     */
    device?: Schema$NlpSemanticParsingModelsDevice[];
  }
  export interface Schema$NlpSemanticParsingModelsPersonPerson {
    /**
     * Alternative names like "John" for "Joan", with info such as RecognitionAlternateSource indicating where is it from.
     */
    alternativeNameInfo?: Schema$QualityQrewriteAlternativeNameInfo[];
    /**
     * Alternative names, e.g., names with similar pronunciation, Kathy and Cathy.
     */
    alternativeNames?: string[] | null;
    annotationSource?: string[] | null;
    /**
     * Contact metadata. Only available for personal contact.
     */
    contactData?: Schema$QualityQrewritePersonalContactData[];
    /**
     * Required, but should only be used inside Aqua. Must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * Whether the person is from personal contacts (e.g. Focus contacts or device contacts) or the person is constructed from a Gaia profile visible to the user (e.g. via Family Service).
     */
    isPersonalContact?: boolean | null;
    /**
     * Indicates whether $Person is used for person-group reference. If true, then the PersonalContactData in repeated contact_data field probably correspond to a group of different persons, where $Person is used to represent family, kids, parents, etc.
     */
    isPersonGroupReference?: boolean | null;
    /**
     * The name of the person without normalizations, preserves casing of the raw text, but removes possible prefix/suffix. For example: raw_text: "Mr. John" normalized_text: "john" name: "John" raw_text: "Tüll" normalized_text: "tuell" name: "Tüll"
     */
    name?: string | null;
    /**
     * Normalized text produced by annotator. Some annotators generate a normalized version to help better match with contact list.
     */
    normalizedText?: string | null;
    /**
     * Contains information about a Copley Person reference (go/copley-people). Note that this contains no information about the resolved people (e.g. names, phone numbers) but only about the user's reference. Resolution metadata is stored in contact_data.pkg_person.
     */
    pkgSemantics?: Schema$NlpSemanticParsingQRefAnnotation;
    rawText?: string | null;
  }
  /**
   * Recurrence rule for specifying date- and time-based repetition for tasks. Next id: 12.
   */
  export interface Schema$NlpSemanticParsingModelsRecurrence {
    /**
     * Optional. Specifies when in the day the task should occur. Applies to all frequencies DAILY and greater. If absent, the repeating tasks are considered "all day" type.
     */
    dailyPattern?: Schema$NlpSemanticParsingModelsRecurrenceDailyPattern;
    /**
     * This field of the Recurrence message should not in general be used by outside clients of the grammar. It is intended to be used internally in Aqua for evaluation purposes. The rationale is that token counts depend on the particular tokenization used in Aqua which may be different from the one used by the client and may change from time to time. Outside clients should not create a dependency on the current tokenization used in Aqua.
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * Multiplier on the frequency of the recurrence. Use this to specify patterns that recur every X days, months, years, etc. Example: [remind me to call mom every 2nd week]. Default is 1 (every day, every month, every year). Floating point numbers are understood and rounded to the nearest integer. E.g. "every 2.8 months" =\> (every 3)
     */
    every?: number | null;
    /**
     * Required. The high-level frequency of the recurrence.
     */
    frequency?: string | null;
    /**
     * Specify a monthly recurrence. Valid and required for MONTHLY frequencies only.
     */
    monthlyPattern?: Schema$NlpSemanticParsingModelsRecurrenceMonthlyPattern;
    /**
     * How many times the task should be repeated within the frequency interval. Floating point numbers are understood and rounded to the nearest integer. E.g. "3.8 times per week" =\> (num_instances_in_frequency 4)
     */
    numInstancesInFrequency?: number | null;
    /**
     * Required. The end condition for the recurrence.
     */
    recurrenceEnd?: Schema$NlpSemanticParsingModelsRecurrenceRecurrenceEnd;
    /**
     * Required. The start of the recurrence.
     */
    recurrenceStart?: Schema$NlpSemanticParsingModelsRecurrenceRecurrenceStart;
    /**
     * Optional time included with some types of recurrence phrases, such as "every morning".
     */
    time?: Schema$NlpSemanticParsingDatetimeDateTime;
    /**
     * Specify a weekly recurrence. Valid and required for WEEKLY frequencies only.
     */
    weeklyPattern?: Schema$NlpSemanticParsingModelsRecurrenceWeeklyPattern;
    /**
     * Specify a yearly recurrence. Valid only for YEARLY frequencies.
     */
    yearlyPattern?: Schema$NlpSemanticParsingModelsRecurrenceYearlyPattern;
  }
  /**
   * Pattern for when in the day the repeating task should trigger. Applies to all frequencies greater than or equal to DAILY. Exactly one of the containing fields should be set (i.e. a specific time or period).
   */
  export interface Schema$NlpSemanticParsingModelsRecurrenceDailyPattern {
    dayPeriod?: Schema$NlpSemanticParsingDateTimeAnnotation;
    timeOfDay?: Schema$NlpSemanticParsingDateTimeAnnotation;
  }
  /**
   * Pattern for a MONTHLY recurrence. A MONTHLY recurrence may be specified in four different ways. These fields should be set in a mutually exclusive way, i.e.: ((month_day OR last_day) XOR (week_day AND (week_day_number OR last_week))) 1. Absolute days of the month (i.e. the 1st and 15th) or relative day from the end of the month (i.e. -1 for last day, -2 for second-to-last day). Set month_day. 2. [Deprecated] Relative last day of the month. Represented as a boolean since the last absolute day number is dependent on the month. This is just a short-cut for month_day=-1 and is deprecated. Set last_day=true. 3. The nth (or nth-last) specific weekday of the month. For example, the 3rd Wednesday of the month. This represents the 3rd instance of a Wednesday of the month, regardless of what weekday the month started on. It does not necessarily mean the Wednesday on the 3rd week of the month. 4. [Deprecated] The last specific weekday of the month. For example, the last Thursday of the month. This is a short-cut for week_day_number=-1.
   */
  export interface Schema$NlpSemanticParsingModelsRecurrenceMonthlyPattern {
    /**
     * Special flag to indicate the last day of the month, equivalent to setting month_day to -1. Deprecated, use month_day=-1 instead.
     */
    lastDay?: boolean | null;
    /**
     * Special flag to indicate a week_day in the last week of the month, as this cannot be captured by week_day_number. Deprecated, use week_day_number=-1 instead.
     */
    lastWeek?: boolean | null;
    /**
     * Absolute day of the month (if positive) or relative day from the end of the month (if negative). Example: 2nd and 20th of the month [2, 20]. Example: Last day of the month [-1]. Positive values should correspond to actual calendar day number (indexing starts at 1).
     */
    monthDay?: number[] | null;
    /**
     * For capturing the nth weekday of the month. Use together with week_day_number or last_week to specify n.
     */
    weekDay?: string | null;
    /**
     * The nth occurrence of week_day to match. I.e. For 3rd Wednesday of the month, week_day = WEDNESDAY and week_day_number = 3. Values beyond the end of the month are skipped. If negative, this is interpreted as the nth-to-last occurrence of the week day in the month. I.e. for last Thursday of the month, week_day = THURSDAY and week_day_number = -1.
     */
    weekDayNumber?: number | null;
  }
  /**
   * The end of the recurrence can be represented in one of three ways. 1. An abstract DateTime. (inclusive) 2. An absolute timestamp, in milliseconds from UTC epoch. 3. A number of occurrences. Exactly one of the fields [end_date_time, end_millis, num_occurrences] in this message must be set. Repeating tasks for which the user did not specify an end date are automatically given a reasonable end conditions by the system and auto_renew will be set to true. Similarly, if the user- provided end date is too far in the future to reasonably create all instances, the server will set an auto_renew_until end condition.
   */
  export interface Schema$NlpSemanticParsingModelsRecurrenceRecurrenceEnd {
    /**
     * Should be used in cases where the size of the recurrence is infinite (no end date specified), in which case we rely on an offline process to extend. Set by server only, setting it on a new recurrence will throw an exception.
     */
    autoRenew?: boolean | null;
    /**
     * Used in cases where the recurrence is too large to create in a single transaction. In this case we create a manageable number of instances initially and rely on an offline process to continually extend the recurrence until this date. Set by server only, setting it on a new recurrence will throw an exception.
     */
    autoRenewUntil?: Schema$NlpSemanticParsingDateTimeAnnotation;
    endDateTime?: Schema$NlpSemanticParsingDateTimeAnnotation;
    /**
     * Deprecated - prefer end_date_time.absolute_time_ms.
     */
    endMillis?: string | null;
    /**
     * Note that auto-renewing is not supported in conjunction with num_occurrences. Therefore we impose a hard limit of 1000 when using this field.
     */
    numOccurrences?: number | null;
  }
  /**
   * The start of the recurrence can be represented either as a DateTime or a timestamp in milliseconds from UTC epoch. Exactly one of the fields of this message must be set.
   */
  export interface Schema$NlpSemanticParsingModelsRecurrenceRecurrenceStart {
    /**
     * Only the year/month/day portion are used to find the start date of the recurrence. To specify a time or period of each instance, use DailyPattern.
     */
    startDateTime?: Schema$NlpSemanticParsingDateTimeAnnotation;
    /**
     * Deprecated - prefer start_date_time.absolute_time_ms.
     */
    startMillis?: string | null;
  }
  /**
   * Pattern for a WEEKLY recurrence. You must specify at least one week_day.
   */
  export interface Schema$NlpSemanticParsingModelsRecurrenceWeeklyPattern {
    /**
     * Set of weekdays the recurrence applies to.
     */
    weekDay?: string[] | null;
    weeklyPatternEnd?: string | null;
    weeklyPatternStart?: string | null;
  }
  /**
   * Pattern for a YEARLY recurrence. A YEARLY recurrence is specified using a monthly pattern and a set of months the pattern applies to. Some examples: "Every January 16" : monthly_pattern { month_day = 16; \} year_month = JANUARY; "Last day of every April and August" : monthly_pattern { last_day = true; \} year_month = APRIL, AUGUST
   */
  export interface Schema$NlpSemanticParsingModelsRecurrenceYearlyPattern {
    /**
     * The monthly pattern to recur.
     */
    monthlyPattern?: Schema$NlpSemanticParsingModelsRecurrenceMonthlyPattern;
    /**
     * The months of the year to apply the pattern.
     */
    yearMonth?: string[] | null;
  }
  /**
   * A brand can be any combination of text or mid.
   */
  export interface Schema$NlpSemanticParsingModelsShoppingAssistantBrandPhrase {
    mid?: string | null;
    rawText?: string | null;
  }
  /**
   * A merchant that sells products.
   */
  export interface Schema$NlpSemanticParsingModelsShoppingAssistantMerchant {
    /**
     * This field should not be used by clients of the grammar. It is intended to be used internally in Aqua for metric and regression tests.
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * Merchant Center identifier for LIA merchants.
     */
    localMerchantId?: string | null;
    mcid?: Schema$NlpSemanticParsingModelsShoppingAssistantMerchantMerchantCenterId[];
    /**
     * Merchant Center identifier for GSX merchants. Deprecated: use MerchantCenterId.
     */
    merchantId?: string[] | null;
    /**
     * Optional. Knowledge Graph identifier for the merchant.
     */
    mid?: string | null;
    /**
     * A name for the merchant. Example: Walmart
     */
    name?: string | null;
  }
  /**
   * Note: A merchant may have multiple merchant center ids, and each one can have multiple purposes. The existing fields merchant_id, local_merchant_id fields are not enough to capture this. Instead we will have a repeated field name mcid with this structure.
   */
  export interface Schema$NlpSemanticParsingModelsShoppingAssistantMerchantMerchantCenterId {
    id?: string | null;
    isGsx?: boolean | null;
    isLocal?: boolean | null;
    isPla?: boolean | null;
  }
  /**
   * A product for sale from a particular merchant, possibly available at a specific store.
   */
  export interface Schema$NlpSemanticParsingModelsShoppingAssistantOffer {
    /**
     * The offer document id as used in Shopping's metadata.
     */
    docid?: string | null;
    /**
     * The merchant selling the product.
     */
    merchant?: Schema$NlpSemanticParsingModelsShoppingAssistantMerchant;
    /**
     * The price of the product sold by the merchant.
     */
    price?: Schema$NlpSemanticParsingModelsMoneyMoney;
    /**
     * The product for sale.
     */
    product?: Schema$NlpSemanticParsingModelsShoppingAssistantProduct;
    /**
     * Optional. The physical store where the product can be purchased.
     */
    store?: Schema$NlpSemanticParsingModelsShoppingAssistantStore;
  }
  /**
   * A phrase parsed from a user query.
   */
  export interface Schema$NlpSemanticParsingModelsShoppingAssistantPhrase {
    brand?: Schema$NlpSemanticParsingModelsShoppingAssistantBrandPhrase;
    offer?: Schema$NlpSemanticParsingModelsShoppingAssistantOffer;
    product?: Schema$NlpSemanticParsingModelsShoppingAssistantProductPhrase;
    unrecognized?: Schema$NlpSemanticParsingModelsShoppingAssistantUnrecognizedPhrase;
  }
  /**
   * A product that can be purchased.
   */
  export interface Schema$NlpSemanticParsingModelsShoppingAssistantProduct {
    /**
     * The shopping catalog identifier.
     */
    catalogId?: string | null;
    /**
     * The highes price this product is available for.
     */
    maxPrice?: Schema$NlpSemanticParsingModelsMoneyMoney;
    /**
     * TODO(ppoudyal) Add logging for media_product.
     */
    mediaProduct?: Schema$NlpSemanticParsingModelsShoppingAssistantProductMediaProduct;
    /**
     * Optional. Knowledge Graph identifier for the product.
     */
    mid?: string | null;
    /**
     * The lowest price this product is available for.
     */
    minPrice?: Schema$NlpSemanticParsingModelsMoneyMoney;
    /**
     * Title of the product. Example: Moto X Blue 64GB Note: This refers to only the catalog title not user specified phrase
     */
    title?: string | null;
  }
  /**
   * Whether the product being described fits into specific categories (e.g., "video games").
   */
  export interface Schema$NlpSemanticParsingModelsShoppingAssistantProductClassification {
    /**
     * TODO(ppoudyal) Expand confidence to cases where the product phrase might be a book/movie/video_game but isn't just a title The score (between 0 - 1) measuring the confidence that product
     */
    bookConfidence?: number | null;
    /**
     * TODO(ppoudyal) Deprecate is_video_game once the score covers all cases covered by $VideoGameProductPhrase The product phrase contains a video game title.
     */
    isVideoGame?: boolean | null;
    /**
     * phrase mentions a book title The score (between 0 - 1) measuring the confidence that product
     */
    movieConfidence?: number | null;
    /**
     * phrase mentions a movie title The score (between 0 - 1) measuring the confidence that product
     */
    videoGameConfidence?: number | null;
  }
  /**
   * An expression parsed from a user query that describes a product or set of products.
   */
  export interface Schema$NlpSemanticParsingModelsShoppingAssistantProductExpression {
    /**
     * This field should not be used by clients of the grammar. It is intended to be used internally in Aqua for metric and regression tests.
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    grammaticalGender?: string | null;
    grammaticalNumber?: string | null;
    /**
     * Ordered list of phrases that the user used to describe a product.
     */
    phrases?: Schema$NlpSemanticParsingModelsShoppingAssistantPhrase[];
    productClassification?: Schema$NlpSemanticParsingModelsShoppingAssistantProductClassification;
    /**
     * Associated shopping list item info. Only set when the product is come from a shopping list item.
     */
    shoppingListItemInfo?: Schema$NlpSemanticParsingModelsShoppingAssistantShoppingListItemInfo;
  }
  /**
   * A media product that can be purchased
   */
  export interface Schema$NlpSemanticParsingModelsShoppingAssistantProductMediaProduct {
    /**
     * The author of the media
     */
    author?: Schema$NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValue;
    /**
     * The genre of the media
     */
    genre?: Schema$NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValue;
    /**
     * The title of the media Example: The assasin's creed
     */
    mediaTitle?: Schema$NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValue;
    /**
     * Order in media series (series title is given by the product title)
     */
    orderInSeries?: Schema$NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValue;
    /**
     * The topic of the media
     */
    topic?: Schema$NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValue;
  }
  export interface Schema$NlpSemanticParsingModelsShoppingAssistantProductMediaProductMediaAttributeValue {
    /**
     * The knowledge graph identifier for the attribute
     */
    mid?: string | null;
    /**
     * Raw text of the media attribute (eg. author)
     */
    rawText?: string | null;
  }
  /**
   * A product can be any combination of raw_text and metadata (including mid, shopping product catalog title/id, and media attributes). A product phrase refers to a product at the catalog entry level and/or a media product. Media product contains information about author and media title TODO(ppoudyal) Add genre and order_in_series to MediaProduct
   */
  export interface Schema$NlpSemanticParsingModelsShoppingAssistantProductPhrase {
    metadata?: Schema$NlpSemanticParsingModelsShoppingAssistantProduct;
    rawText?: string | null;
  }
  export interface Schema$NlpSemanticParsingModelsShoppingAssistantShoppingListItemInfo {
    itemId?: string | null;
    listId?: string | null;
  }
  /**
   * A merchant's physical store.
   */
  export interface Schema$NlpSemanticParsingModelsShoppingAssistantStore {
    /**
     * Local store identifier.
     */
    id?: string | null;
    /**
     * The location of the store.
     */
    location?: Schema$NlpSemanticParsingLocalLocation;
    /**
     * A name for the store. Example: Walmart - Cranberry
     */
    name?: string | null;
  }
  /**
   * A span in a user query that could not be identified as any other type of `Phrase`.
   */
  export interface Schema$NlpSemanticParsingModelsShoppingAssistantUnrecognizedPhrase {
    rawText?: string | null;
  }
  export interface Schema$NlpSemanticParsingNumberFractionNumber {
    denominator?: Schema$NlpSemanticParsingNumberSimpleNumber;
    /**
     * Fields for fraction numbers
     */
    numerator?: Schema$NlpSemanticParsingNumberSimpleNumber;
    /**
     * This field is used to indicate the number of digits after the decimal point in the normalized_value field in number.proto, which contains the floating point representation of the fraction
     */
    precision?: number | null;
    /**
     * This field is set only for mixed fraction
     */
    wholeNumber?: Schema$NlpSemanticParsingNumberSimpleNumber;
  }
  /**
   * Next ID: 9
   */
  export interface Schema$NlpSemanticParsingNumberNumber {
    /**
     * Span info of the annotation - mostly used for evaluation purpose. Note: this data must never be used outside Aqua because it relies on the internal tokenization used in Aqua that could change over time.
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    fractionNumber?: Schema$NlpSemanticParsingNumberFractionNumber;
    /**
     * An optional field that holds whether the number_type number is a normalized spelled-out number or not. This field will not be set in cases when this information is not available.
     */
    isSpelledOut?: boolean | null;
    /**
     * NumberModifier is used to capture when the expression is not an absolute number, but a number expression to represent an increase/decrease/comparison. E.g. [10 more percent], [5 less].
     */
    modifier?: string | null;
    /**
     * Contains a normalized string representation of the numeric value that has: * No digit grouping delimiter (e.g. "," in english). * Decimal mark (if present) as "." (dot). For fraction_number, this contains the floating point representation of the fraction. The number of digits after the decimal point is defined in the precision field of fraction_number.proto.
     */
    normalizedValue?: string | null;
    /**
     * The raw text of the annotation.
     */
    rawText?: string | null;
    simpleNumber?: Schema$NlpSemanticParsingNumberSimpleNumber;
    /**
     * We expect this field to be set only when is_spelled_out is true.
     */
    spelledOutType?: string | null;
  }
  /**
   * Next ID: 8
   */
  export interface Schema$NlpSemanticParsingNumberSimpleNumber {
    /**
     * The type of decimal mark that was present before normalization. Note: different locales may use different decimal marks.
     */
    decimalMark?: string | null;
    /**
     * The type of digit grouping delimiter that was present before normalization. Note: different locales may use different digit grouping delimiters.
     */
    groupingDelimiter?: string | null;
    /**
     * We expect this field to be set only when grouping_delimiter is set.
     */
    groupingSystem?: string | null;
    /**
     * Contains a normalized string representation of the numeric value that has: * No digit grouping delimiter (e.g. "," in english). * Decimal mark (if present) as "." (dot). This field is kept for backward compatibility. The field is also available in number.proto
     */
    normalizedValue?: string | null;
    /**
     * Stores prefix output by the GRM number grammar (http://b/28623478).
     */
    prefix?: string | null;
    /**
     * Stores suffix output
     */
    suffix?: string | null;
    type?: string | null;
  }
  /**
   * This message should be wire-equivalent to the Entity proto defined in nlp/semantic_parsing/models/personal_intelligence.proto. The message is cloned here to allow legacy intents to extract entities to slots; trying to add Entity to knowledge_answers::intent_query::ArgumentValue creates a BUILD dependency loop. For the proto used for GwsLogs, see logs/proto/knowledge/interpretation/personal_intelligence.proto.
   */
  export interface Schema$NlpSemanticParsingPersonalIntelligenceEntity {
    /**
     * Used if the entity is an airline with an airline annotation.
     */
    airlineConfig?: Schema$TravelFlightsAirlineConfig;
    /**
     * Required, but should only be used inside Aqua. Must not be used by outside clients!!
     */
    evalData?: Schema$NlpSemanticParsingAnnotationEvalData;
    /**
     * raw string representation
     */
    name?: string | null;
    qrefAnnotation?: Schema$NlpSemanticParsingQRefAnnotation;
  }
  /**
   * A collection of any number of QRefAnnotations that designate a Copley Personal Reference and its Resolutions. This is used to handle personalized intents such as "navigate to my hotel" or "when is my mom's anniversary". See go/copley. This Annotation may contain only a reference with no resolutions for the failure case (go/copley-punts). TODO(bhorst) Rename this to remove the Copley codename.
   */
  export interface Schema$NlpSemanticParsingPersonalReferenceAnnotation {
    /**
     * A Copley Personal Reference represents a user's reference to a something that could be personal entity, e.g. "my hotel", "mom", "brunch".
     */
    reference?: Schema$NlpSemanticParsingQRefAnnotation;
    /**
     * A Copley Personal Resolution represents the resolution of a Reference, e.g. if the user has a reservation at The Kendall Hotel, the reference "my hotel" could be resolved to The Kendall Hotel, and there would be a QRefAnnotation containing the mid and other data. It is possible for there to be zero resolutions for a given reference.
     */
    resolutions?: Schema$NlpSemanticParsingQRefAnnotation[];
  }
  /**
   * In simple cases, each NLU slot will contain one or multiple possible values. But in the case of a composite entity - slots can have a complex tree structure. Each slot can represent a List parameter. List parameters are only allowed at the top level, i.e. lists can't ne nested in maps. Next Id: 9 LINT.IfChange
   */
  export interface Schema$NlpSemanticParsingProtoActionsOnGoogleAogSlot {
    /**
     * ID of the entity of this slot.
     */
    entityId?: string | null;
    /**
     * Number of bytes of this slot in resolved query.
     */
    numBytes?: number | null;
    /**
     * Part of input text, matched by that slot. In the case of composite slots, each slot should have its own original.
     */
    original?: string | null;
    /**
     * Name of parameter of this slot.
     */
    parameterName?: string | null;
    /**
     * Represents a "list parameter". Each parameter may be declared as a list and have multiple slot values, referenced by a single alias. Each slot value in a list may contain multiple possible values. For example: aqua return 3 dates if the year is not specified in a query - one for the current year, one for the past year, and one for the following year. If user defines a list parameter with type @sys.date, and the query contains multiple dates - we should return a list of possible values for each date from the query, i.e. it will be a list of list of dates.
     */
    slotList?: Schema$NlpSemanticParsingProtoActionsOnGoogleSlotList;
    /**
     * Represents a structured value. Used in composite entities. Composite entities can have arbitrary structure.
     */
    slotMap?: Schema$NlpSemanticParsingProtoActionsOnGoogleSlotMap;
    /**
     * Start byte position of this slot in resolved query.
     */
    startByte?: number | null;
    /**
     * One or more possible values. This field does not represent a list parameter.
     */
    value?: Schema$NlpSemanticParsingProtoActionsOnGoogleSlotValue;
  }
  /**
   * Represents datetime. It can be @sys.date, @sys.time or, in some cases, @sys.date-time. Our platform doesn't track seconds, so this field is omitted. Number of seconds should be considered 0. Hour and minute can be 0 in case of dates. In case of time and dateTime, hours and minutes will represent actual time, even if both of them are 0.
   */
  export interface Schema$NlpSemanticParsingProtoActionsOnGoogleDateTime {
    /**
     * Date value. Note, that month and day are 1 based. If this DateTime is a PARTIAL datetime, then fields have value -1, which means these fields are inferred rather than derived directly from query.
     */
    date?: Schema$GoogleTypeDate;
    /**
     * Property of this DateTime value that can be used to match user specification of parameters, e.g. date.recent.
     */
    property?: Schema$NlpSemanticParsingProtoActionsOnGoogleDateTimeProperty;
    /**
     * Time value. Only hours and minutes are used. Hours are in 24h format.
     */
    time?: Schema$GoogleTypeTimeOfDay;
    /**
     * Timezone field specified only if this DateTime has type TIME or DATETIME.
     */
    timeZone?: Schema$GoogleTypeTimeZone;
  }
  /**
   * Represents properties about a matched DateTime value. Will only be populated for @sys.date-time, @sys.date and @sys.time.
   */
  export interface Schema$NlpSemanticParsingProtoActionsOnGoogleDateTimeProperty {
    /**
     * Since datetime is a superset of date, time and date&time, this field is used to indicate which type the associated DateTime object belongs to.
     */
    datetimeType?: string | null;
    /**
     * The relative relationship between this DateTime value and DateTime&Timezone info provided in ClassifyRequest.
     */
    relativeDatetimeType?: string | null;
  }
  /**
   * Oneof doesn't allow list, this message is used to inject list as a possible value into Slot.
   */
  export interface Schema$NlpSemanticParsingProtoActionsOnGoogleSlotList {
    slots?: Schema$NlpSemanticParsingProtoActionsOnGoogleAogSlot[];
  }
  /**
   * Oneof doesn't allow maps, this message is used to inject map as a possible value into Slot.
   */
  export interface Schema$NlpSemanticParsingProtoActionsOnGoogleSlotMap {
    slots?: {
      [key: string]: Schema$NlpSemanticParsingProtoActionsOnGoogleAogSlot;
    } | null;
  }
  /**
   * Contains one or more possible values.
   */
  export interface Schema$NlpSemanticParsingProtoActionsOnGoogleSlotValue {
    values?: Schema$NlpSemanticParsingProtoActionsOnGoogleSlotValueSingleValue[];
  }
  /**
   * Represents an actual value.
   */
  export interface Schema$NlpSemanticParsingProtoActionsOnGoogleSlotValueSingleValue {
    /**
     * Represents date or time.
     */
    dateTimeValue?: Schema$NlpSemanticParsingProtoActionsOnGoogleDateTime;
    /**
     * Represents a string value.
     */
    stringValue?: string | null;
    /**
     * This field is only populated by on-device Heron. This field should not be populated by any other service.
     */
    typeValue?: Schema$NlpSemanticParsingProtoActionsOnGoogleTypedValue;
  }
  /**
   * Used by on-device Heron. Contains information about the type of slot value returned.
   */
  export interface Schema$NlpSemanticParsingProtoActionsOnGoogleTypedValue {
    /**
     * Represents a boolean value.
     */
    boolValue?: boolean | null;
    /**
     * Represents date or time.
     */
    dateTimeValue?: Schema$NlpSemanticParsingProtoActionsOnGoogleDateTime;
    /**
     * Represents number value. In accordance to ParamValue fields(https://source.corp.google.com/piper///depot/google3/third_party/java_src/appactions/proto/app_actions_data.proto;rcl=431529042;l=12)
     */
    numberValue?: number | null;
    /**
     * Represents a string value.
     */
    stringValue?: string | null;
  }
  /**
   * The QRefAnnotator annotates spans of input with freebase-ids and collection-information. NEXT ID TO USE: 41
   */
  export interface Schema$NlpSemanticParsingQRefAnnotation {
    /**
     * Whether this qref annotation was created by CloseAnswers on Postref. Annotations of this type don't correspond to a particular mention of the entity on the query but rather to an interpretation of the full query.
     */
    addedByCloseAnswers?: boolean | null;
    /**
     * A copy of the span of canonical (raw) parser input text corresponding to this annotation.
     */
    annotatedSpan?: string | null;
    /**
     * Attribute ID of a personal_summary_node_child.
     */
    attributeId?: string | null;
    /**
     * The ID of the cluster (set entity) this entity belongs to.
     */
    clusterId?: string | null;
    /**
     * Cluster set qref confidence score.
     */
    clusterSetScore?: number | null;
    /**
     * The set of mids that are members of the same cluster.
     */
    clusterSiblingMid?: string[] | null;
    collectionMembership?: Schema$NlpSemanticParsingQRefAnnotationCollectionMembership[];
    /**
     * The confidence (in [0, 1]) of the entity being correctly annotated.
     */
    confidenceScore?: number | null;
    /**
     * DEPRECATED: Equivalent ids (e.g. de-duped mids) for this entity.
     */
    deprecatedEquivalentMids?: string[] | null;
    /**
     * DEPRECATED: Higher level id's that support the given id. This field has been deprecated in favor of related_entity. b/27363861
     */
    deprecatedMdvcSupportingMid?: string[] | null;
    /**
     * Copy the display info. This can be used by annotators to give grammars a canonical name for an entity. For instance, the media grammar could use it to output the same canonical name for "rock music" and "rock".
     */
    displayName?: string | null;
    /**
     * The index of the entity from which this annotation is obtained, within the WebrefEntities message in the interpretation defined by interpretation_number, above.
     */
    entityNumber?: number | null;
    /**
     * The relationship information from QRef. Only included if the QRefAnnotator is initialised with include_annotated_relationships.
     */
    entityRelationship?: Schema$NlpSemanticParsingQRefAnnotationEntityRelationship[];
    /**
     * Holds information about the backends which contributed to this entity.
     */
    entitySourceData?: Schema$NlpSemanticParsingEntitySourceData;
    /**
     * The mid of the entity in freebase associated with this span.
     */
    freebaseMid?: string | null;
    /**
     * The Gaia ID for this entity. This is populated generally for people and businesses.
     */
    gaiaId?: string | null;
    /**
     * The shopping global product cluster id(s) of the annotated entity (in KG, the key(s) of type /business/variant_cluster).
     */
    globalProductClusterId?: string[] | null;
    /**
     * The index of the QueryJoin interpretation from which this annotation was obtained. This field is not used for entities coming from low-confidence annotations, since such entities are not included in any interpretation.
     */
    interpretationNumber?: number | null;
    /**
     * True if this entity is an mdvc dimension of some other annotated entity. Only included if the QRefAnnotator is initialised with include_annotated_relationships.
     */
    isMdvcDimension?: boolean | null;
    /**
     * Whether this annotation originates from nimble. (go/nimble-annotator)
     */
    isNimbleAnnotation?: boolean | null;
    /**
     * The center point of this location. This is either directly provided by the FeatureProto.center field or the centroid using the points of the polygon in the FeatureProto.
     */
    location?: Schema$GeostorePointProto;
    /**
     * The location type of the entity, as an int32 representing a TypeCategory enum value. For example, this could be TYPE_LOCALITY (37) or TYPE_COUNTRY (33). We store this type as an int because including FeatureProto would cause java/com/google/ads/adh/pipeline/bigquery:ProtoCatalog to become too large, resulting in OOM errors.
     */
    locationType?: number | null;
    /**
     * Whether this entity is low confidence. Not used. Currently whitelisted entities below min_confidence threshold are marked as low confidence and maybe not trusted by downstreams.
     */
    lowConfidence?: boolean | null;
    matchedLightweightToken?: Schema$RepositoryWebrefLightweightTokensMatchedLightweightToken[];
    /**
     * Nested annotations that represent subparts of the given mdvc full annotation. An MDVC full annotation is outputted as the summary node as the root node, and all the children of it as leaves (mdvc_child). QRef outputs a graph of relationships between the mdvc enties, and for mdvc full the aquatator nests the relevant children inside the summary node's proto.
     */
    mdvcChild?: Schema$NlpSemanticParsingQRefAnnotation[];
    /**
     * The set of verticals this summary node belongs to.
     */
    mdvcVerticals?: string[] | null;
    /**
     * A list of any implied entities merged into this annotation during parsing. Order is derivation-dependent.
     */
    mergedImpliedEntity?: Schema$NlpSemanticParsingQRefAnnotation[];
    merlotCategory?: Schema$NlpSemanticParsingQRefAnnotationMerlotCategoryData[];
    /**
     * Metadata to be passed through from the AnnotationContext API.
     */
    otherMetadata?: Schema$Proto2BridgeMessageSet;
    /**
     * The geo oyster_id of the entity, relevant only for locations. Only included if the QRefAnnotator is initialised with include_oyster_id.
     */
    oysterId?: Schema$GeostoreFeatureIdProto;
    /**
     * Personal summary nodes are compound entities made up of entities and their attributes, where the entities can be compound too. E.g., "my father's mother" can have a summary node annotation of "Mother(Father(Myself))".
     */
    personalSummaryNodeChild?: Schema$NlpSemanticParsingQRefAnnotation[];
    /**
     * The shopping product line id(s) of the annotated /business/shopping_product_line entity.
     */
    productLineId?: string[] | null;
    /**
     * The confidence (in [0, 1]) that the annotation is reference that implies another entity. (eg "my hotel" in "navigate to my hotel" is reference to explicit hotel from user hotel reservation).
     */
    referenceScore?: number | null;
    /**
     * Mids related to the given entity
     */
    relatedEntity?: Schema$NlpSemanticParsingRelatedEntity[];
    /**
     * The confidence (in [0, 1]) that the annotation was created on an implicit mention (eg my hotel) as opposed to an explicit mention (eg: the westin copley square)
     */
    resolutionScore?: number | null;
    /**
     * If the annotation was created by using personal data, we record the provenance for that data here.
     */
    sourceTypeList?: Schema$CopleySourceTypeList;
    subCluster?: Schema$NlpSemanticParsingQRefAnnotationSubCluster[];
  }
  export interface Schema$NlpSemanticParsingQRefAnnotationCollectionMembership {
    /**
     * Identifier of the collection. Usually something like "/collection/us_states".
     */
    collectionId?: string | null;
    /**
     * A value in [0, 1] indicating the relevance of the collection given this entity. NOTE: This field is deprecated and will stop being populated soon. In the meantime, it will always be populated with 1.0.
     */
    collectionScore?: number | null;
  }
  export interface Schema$NlpSemanticParsingQRefAnnotationEntityRelationship {
    /**
     * The index of the other entity in the relationship.
     */
    entityIndex?: number | null;
    /**
     * True if this entity is implied by the other (includes geo contains).
     */
    impliedBy?: boolean | null;
    /**
     * True if this entity implies the other (includes geo contained by).
     */
    implies?: boolean | null;
    /**
     * Names of the relationship links.
     */
    linkPropertyName?: string[] | null;
  }
  /**
   * Merlot category information. As of Sep2015, this is derived from collection membership, but as that information is planned for deprecation and may need to be replaced as a source for this data, it is extracted separately.
   */
  export interface Schema$NlpSemanticParsingQRefAnnotationMerlotCategoryData {
    categoryId?: number | null;
    confidence?: number | null;
  }
  /**
   * Keeps track of any individual clusters this mid is a member of. Cluster_id and cluster_sibling_mid stores the cluster all together, while the subcluster keeps track of each individual cluster information separately.
   */
  export interface Schema$NlpSemanticParsingQRefAnnotationSubCluster {
    clusterId?: string | null;
    clusterSetScore?: number | null;
    clusterSiblingMid?: string[] | null;
  }
  /**
   * A message that stores relations between this annotation and another entity. Stores the mid and the kind of relationship. These links may be consumed downstream for various purposes, including support transfer and other business logic. An example is for the Honda Civic entity. It may have an mdvc_relation that is a generalization_of the 2015 Honda Civic entity. So the Honda Civic would have the following: RelatedEntity { mid = 2015 Honda Civic Mid mdvc_relation = GENERALIZATION_OF \} It has no equivalent_relation because it is by default NO_EQUIVALENT. The Honda Civic entity might then have a separate relation to the Old Honda Civic entity, as they are considered the same entity, or the following relation: RelatedEntity { mid = Old Honda Civic Mid equivalent_relation = EQUIVALENT \}
   */
  export interface Schema$NlpSemanticParsingRelatedEntity {
    /**
     * Denotes whether or not the related entity is derived from cluster support transfer.
     */
    clusterSupportTransferRelation?: string | null;
    /**
     * Denotes whether or not the related entity composes a compound entity together with other related entities.
     */
    composedFromRelation?: string | null;
    /**
     * Whether or not the given mid is related to the other mid. Equivalent mids are usually mutually exclusive with other kinds of relations.
     */
    equivalentRelation?: string | null;
    /**
     * The mdvc relation with the related mid.
     */
    mdvcRelation?: string | null;
    /**
     * Mid that is related.
     */
    mid?: string | null;
    /**
     * Denotes whether or not there was support transfer between the two entities.
     */
    supportTransferRelation?: string | null;
    /**
     * Set if the related entity is the source of an STBR rule and the target is not this one.
     */
    targetIsStbrSource?: boolean | null;
  }
  /**
   * Identifies a coreference mention (pronoun or nominal) resolved to an entity.
   */
  export interface Schema$NlpSemanticParsingSaftCoreference {
    /**
     * Categories can be either a $PronounMention or $NominalMention.
     */
    category?: string | null;
    /**
     * The substring of the raw query spanned by this annotation.
     */
    rawText?: string | null;
    /**
     * The name of the entity this mentions refers to.
     */
    referentText?: string | null;
  }
  /**
   * Identifies a measure, like '53 pounds' in a query.
   */
  export interface Schema$NlpSemanticParsingSaftMeasure {
    /**
     * Defines the category of measure, like $Mass.
     */
    category?: string | null;
    /**
     * The substring of the raw query spanned by this annotation.
     */
    rawText?: string | null;
    /**
     * The numerical value of the measure.
     */
    value?: number | null;
  }
  /**
   * SaftMentionAnnotation(s) are used to identify a sub-span of the input with some semantic relevance, for example PER (Person), LOC (Locations) or measure etc. Each SaftMentionAnnotation will have exactly one non-empty field.
   */
  export interface Schema$NlpSemanticParsingSaftMentionAnnotation {
    /**
     * Annotations for spans that are resolved coreference mentions.
     */
    coreference?: Schema$NlpSemanticParsingSaftCoreference;
    /**
     * Annotations for spans like "san francisco giants".
     */
    entity?: Schema$NlpSemanticParsingSaftSpan;
    /**
     * Annotations for spans "53 pounds".
     */
    measure?: Schema$NlpSemanticParsingSaftMeasure;
    /**
     * Annotations for spans like "the president of the United States".
     */
    title?: Schema$NlpSemanticParsingSaftSpan;
  }
  /**
   * The lowest common denominator of a SAFT annotation is simply the definition of some |category| for a sub-span of the |raw_text| of the query.
   */
  export interface Schema$NlpSemanticParsingSaftSpan {
    /**
     * Categories can be either syntactic (NNS for fine-grained-POS) or semantics ($Mass for measures).
     */
    category?: string | null;
    /**
     * The substring of the raw query spanned by this annotation.
     */
    rawText?: string | null;
  }
  /**
   * A single byte, such as that from a utf8-encoded character sequence.
   */
  export interface Schema$NlxDataSchemaByte {
    /**
     * The document that contains this character.
     */
    document?: Schema$MultiscalePointerIndex;
  }
  /**
   * A single Unicode character.
   */
  export interface Schema$NlxDataSchemaCharacter {
    /**
     * The document that contains this character.
     */
    document?: Schema$MultiscalePointerIndex;
    /**
     * The paragraph that contains this character.
     */
    paragraph?: Schema$MultiscalePointerIndex;
    /**
     * The sentence that contains this character.
     */
    sentence?: Schema$MultiscalePointerIndex;
    /**
     * The character itself. Must contain valid UTF-8. Must be exactly one Unicode character.
     */
    text?: string | null;
    /**
     * The token that contains this character.
     */
    token?: Schema$MultiscalePointerIndex;
  }
  /**
   * A single document.
   */
  export interface Schema$NlxDataSchemaDocument {
    /**
     * The author(s) of this document.
     */
    author?: Schema$MultiscalePointerIndex[];
    /**
     * The bytes in this document.
     */
    bytes?: Schema$MultiscalePointerSpan;
    /**
     * The characters in this document.
     */
    characters?: Schema$MultiscalePointerSpan;
    /**
     * The identifier of this document.
     */
    id?: string | null;
    /**
     * A set of BCP-47 codes indicating the language(s) of this document.
     */
    languageCode?: string[] | null;
    /**
     * The language spans in this document.
     */
    languageSpans?: Schema$MultiscalePointerSpan;
    /**
     * The mentions in this document.
     */
    mentions?: Schema$MultiscalePointerSpan;
    /**
     * The paragraphs in this document.
     */
    paragraphs?: Schema$MultiscalePointerSpan;
    /**
     * The sentences in this document.
     */
    sentences?: Schema$MultiscalePointerSpan;
    /**
     * The text of this document. Must contain valid UTF-8.
     */
    text?: string | null;
    /**
     * The tokens in this document.
     */
    tokens?: Schema$MultiscalePointerSpan;
    /**
     * The url of this document.
     */
    url?: string | null;
  }
  /**
   * An entity, which may occur multiple times in the text.
   */
  export interface Schema$NlxDataSchemaEntity {
    /**
     * Entity gender. Default label set is 'masculine', 'feminine', or 'neuter'. (Perhaps in the future we can split 'neuter' into 'inanimate', 'unknown', and 'non-binary'.)
     */
    gender?: string | null;
    /**
     * Machine identifier, such as those from the Freebase database (or similar entity database).
     */
    mid?: string | null;
    /**
     * Free-form entity name.
     */
    name?: string | null;
    /**
     * Entity type, typically something like person/location/organization. The schema for types is not specified. If this entity has a MID, use the mid field instead or in conjunction with the type.
     */
    type?: string[] | null;
  }
  /**
   * A span of text that is written using a specified language (or languages). language_spans do not need to cover all of the characters in a text -- in particular, some pieces of text may not use any language. Depending on the model used to generate them, multilingual text can be encoded using overlapping or non- overlapping language_spans; and using one or multiple language_codes per language_span.
   */
  export interface Schema$NlxDataSchemaLanguageSpan {
    /**
     * The bytes in this span.
     */
    bytes?: Schema$MultiscalePointerSpan;
    /**
     * The characters in this span.
     */
    characters?: Schema$MultiscalePointerSpan;
    /**
     * The document that contains this span.
     */
    document?: Schema$MultiscalePointerIndex;
    /**
     * A set of BCP-47 codes indicating the language(s) of this span of text.
     */
    languageCode?: string[] | null;
  }
  /**
   * A mention of an entity. A single entity might be mentioned multiple times.
   */
  export interface Schema$NlxDataSchemaMention {
    /**
     * The bytes in this mention.
     */
    bytes?: Schema$MultiscalePointerSpan;
    /**
     * The document that contains this mention.
     */
    document?: Schema$MultiscalePointerIndex;
    /**
     * The entity that this mention refers to.
     */
    entity?: Schema$MultiscalePointerIndex;
    /**
     * Mention kind, typically 'referential', 'attributive', or 'modifier'.
     */
    kind?: string | null;
    /**
     * The mention text itself. Must contain valid UTF-8.
     */
    text?: string | null;
    /**
     * The token(s) in this mention. This may not be present, or have zero length if representing an implicit mention, as in the prodrop case.
     */
    tokens?: Schema$MultiscalePointerSpan;
    /**
     * Mention type, typically 'named' (for name mentions) or 'nominal'. More types include 'pronominal', 'conjoined' for conjoined mention construction, and 'non-referential' for non-referential pronoun mentions.
     */
    type?: string | null;
  }
  /**
   * A single paragraph.
   */
  export interface Schema$NlxDataSchemaParagraph {
    /**
     * The bytes in this paragraph.
     */
    bytes?: Schema$MultiscalePointerSpan;
    /**
     * The characters in this paragraph.
     */
    characters?: Schema$MultiscalePointerSpan;
    /**
     * The document that contains this paragraph.
     */
    document?: Schema$MultiscalePointerIndex;
    /**
     * The sentences in this paragraph.
     */
    sentences?: Schema$MultiscalePointerSpan;
    /**
     * The text of this paragraph. Must contain valid UTF-8.
     */
    text?: string | null;
    /**
     * The tokens in this paragraph.
     */
    tokens?: Schema$MultiscalePointerSpan;
  }
  /**
   * Standard NLX data schema.
   */
  export interface Schema$NlxDataSchemaScaleSet {
    byte?: Schema$NlxDataSchemaByte[];
    /**
     * Metadata for which layer (scale) fields are present. WARNING: CURRENT USAGE IS AD HOC, DO NOT RELY ON THESE BEING POPULATED CORRECTLY. This should improve in v2.
     */
    byteDocumentPresence?: Schema$MultiscaleFieldPresence;
    /**
     * Metadata for which layers (scales) are present. WARNING: CURRENT USAGE IS AD HOC, DO NOT RELY ON THESE BEING POPULATED CORRECTLY. This should improve in v2.
     */
    bytePresence?: Schema$MultiscaleLayerPresence;
    character?: Schema$NlxDataSchemaCharacter[];
    characterDocumentPresence?: Schema$MultiscaleFieldPresence;
    characterParagraphPresence?: Schema$MultiscaleFieldPresence;
    characterPresence?: Schema$MultiscaleLayerPresence;
    characterSentencePresence?: Schema$MultiscaleFieldPresence;
    characterTextPresence?: Schema$MultiscaleFieldPresence;
    characterTokenPresence?: Schema$MultiscaleFieldPresence;
    document?: Schema$NlxDataSchemaDocument[];
    documentAuthorPresence?: Schema$MultiscaleFieldPresence;
    documentBytesPresence?: Schema$MultiscaleFieldPresence;
    documentCharactersPresence?: Schema$MultiscaleFieldPresence;
    documentIdPresence?: Schema$MultiscaleFieldPresence;
    documentLanguageCodePresence?: Schema$MultiscaleFieldPresence;
    documentLanguageSpansPresence?: Schema$MultiscaleFieldPresence;
    documentMentionsPresence?: Schema$MultiscaleFieldPresence;
    documentParagraphsPresence?: Schema$MultiscaleFieldPresence;
    documentPresence?: Schema$MultiscaleLayerPresence;
    documentSentencesPresence?: Schema$MultiscaleFieldPresence;
    documentTextPresence?: Schema$MultiscaleFieldPresence;
    documentTokensPresence?: Schema$MultiscaleFieldPresence;
    documentUrlPresence?: Schema$MultiscaleFieldPresence;
    entity?: Schema$NlxDataSchemaEntity[];
    entityGenderPresence?: Schema$MultiscaleFieldPresence;
    entityMidPresence?: Schema$MultiscaleFieldPresence;
    entityNamePresence?: Schema$MultiscaleFieldPresence;
    entityPresence?: Schema$MultiscaleLayerPresence;
    entityTypePresence?: Schema$MultiscaleFieldPresence;
    languageSpan?: Schema$NlxDataSchemaLanguageSpan[];
    languageSpanBytesPresence?: Schema$MultiscaleFieldPresence;
    languageSpanCharactersPresence?: Schema$MultiscaleFieldPresence;
    languageSpanDocumentPresence?: Schema$MultiscaleFieldPresence;
    languageSpanLanguageCodePresence?: Schema$MultiscaleFieldPresence;
    languageSpanPresence?: Schema$MultiscaleLayerPresence;
    mention?: Schema$NlxDataSchemaMention[];
    mentionBytesPresence?: Schema$MultiscaleFieldPresence;
    mentionDocumentPresence?: Schema$MultiscaleFieldPresence;
    mentionEntityPresence?: Schema$MultiscaleFieldPresence;
    mentionKindPresence?: Schema$MultiscaleFieldPresence;
    mentionPresence?: Schema$MultiscaleLayerPresence;
    mentionTextPresence?: Schema$MultiscaleFieldPresence;
    mentionTokensPresence?: Schema$MultiscaleFieldPresence;
    mentionTypePresence?: Schema$MultiscaleFieldPresence;
    paragraph?: Schema$NlxDataSchemaParagraph[];
    paragraphBytesPresence?: Schema$MultiscaleFieldPresence;
    paragraphCharactersPresence?: Schema$MultiscaleFieldPresence;
    paragraphDocumentPresence?: Schema$MultiscaleFieldPresence;
    paragraphPresence?: Schema$MultiscaleLayerPresence;
    paragraphSentencesPresence?: Schema$MultiscaleFieldPresence;
    paragraphTextPresence?: Schema$MultiscaleFieldPresence;
    paragraphTokensPresence?: Schema$MultiscaleFieldPresence;
    sentence?: Schema$NlxDataSchemaSentence[];
    sentenceBytesPresence?: Schema$MultiscaleFieldPresence;
    sentenceCharactersPresence?: Schema$MultiscaleFieldPresence;
    sentenceDocumentPresence?: Schema$MultiscaleFieldPresence;
    sentenceParagraphPresence?: Schema$MultiscaleFieldPresence;
    sentencePresence?: Schema$MultiscaleLayerPresence;
    sentenceTextPresence?: Schema$MultiscaleFieldPresence;
    sentenceTokensPresence?: Schema$MultiscaleFieldPresence;
    token?: Schema$NlxDataSchemaToken[];
    tokenBytesPresence?: Schema$MultiscaleFieldPresence;
    tokenCharactersPresence?: Schema$MultiscaleFieldPresence;
    tokenDependencyHeadPresence?: Schema$MultiscaleFieldPresence;
    tokenDependencyLabelPresence?: Schema$MultiscaleFieldPresence;
    tokenDependencyPresence?: Schema$MultiscaleFieldPresence;
    tokenDocumentPresence?: Schema$MultiscaleFieldPresence;
    tokenParagraphPresence?: Schema$MultiscaleFieldPresence;
    tokenPosPresence?: Schema$MultiscaleFieldPresence;
    tokenPresence?: Schema$MultiscaleLayerPresence;
    tokenSentencePresence?: Schema$MultiscaleFieldPresence;
    tokenTextPresence?: Schema$MultiscaleFieldPresence;
  }
  /**
   * A single sentence or utterance.
   */
  export interface Schema$NlxDataSchemaSentence {
    /**
     * The bytes in this sentence.
     */
    bytes?: Schema$MultiscalePointerSpan;
    /**
     * The characters in this sentence.
     */
    characters?: Schema$MultiscalePointerSpan;
    /**
     * The document that contains this sentence.
     */
    document?: Schema$MultiscalePointerIndex;
    /**
     * The paragraph that contains this sentence.
     */
    paragraph?: Schema$MultiscalePointerIndex;
    /**
     * The text of this sentence. Must contain valid UTF-8.
     */
    text?: string | null;
    /**
     * The tokens in this sentence.
     */
    tokens?: Schema$MultiscalePointerSpan;
  }
  /**
   * A word, punctuation mark, or other small piece of text.
   */
  export interface Schema$NlxDataSchemaToken {
    /**
     * The bytes in this token.
     */
    bytes?: Schema$MultiscalePointerSpan;
    /**
     * The characters in this token.
     */
    characters?: Schema$MultiscalePointerSpan;
    /**
     * DEPRECATED: PLEASE USE dependency_head AND dependency_label FIELDS. One edge of the dependency parse.
     */
    dependency?: Schema$NlxDataSchemaTokenDependencyEdge;
    /**
     * The head of this token. By default, the root of the sentence is its own head; it should also have deprel as 'root'.
     */
    dependencyHead?: Schema$MultiscalePointerIndex;
    /**
     * Relation label for this dependency. Generally this should be using the Universal Dependencies label format, using fine-grained labels like nsubj:pass.
     */
    dependencyLabel?: string | null;
    /**
     * The document that contains this token.
     */
    document?: Schema$MultiscalePointerIndex;
    /**
     * The paragraph that contains this token.
     */
    paragraph?: Schema$MultiscalePointerIndex;
    /**
     * Coarse part-of-speech tag.
     */
    pos?: string | null;
    /**
     * The sentence that contains this token.
     */
    sentence?: Schema$MultiscalePointerIndex;
    /**
     * The text of this token. Must contain valid UTF-8.
     */
    text?: string | null;
  }
  /**
   * DEPRECATED: PLEASE USE dependency_head AND dependency_label FIELDS. One edge of the dependency parse.
   */
  export interface Schema$NlxDataSchemaTokenDependencyEdge {
    /**
     * Relation label for this dependency. Generally this should be using the Universal Dependencies label format, using fine- grained labels like nsubj:pass.
     */
    deprel?: string | null;
    /**
     * The head of this token. By default, the root of the sentence is its own head; it should also have deprel as 'root'.
     */
    head?: Schema$MultiscalePointerIndex;
  }
  /**
   * Message representing a versioned NSR score used for experimentation. This protobuf is copied from quality_nsr::NSRVersionedItem.
   */
  export interface Schema$NSRVersionedItem {
    /**
     * The NSR value corresponding to this version.
     */
    value?: number | null;
    /**
     * The version id.
     */
    versionId?: number | null;
  }
  /**
   * Metadata describing an 'item' (article) in a Woodwing file.
   */
  export interface Schema$OceanDataDocinfoWoodwingItemMetadata {
    author?: string | null;
    category?: string | null;
    description?: string | null;
    title?: string | null;
  }
  /**
   * Ocean data in docserver results (whole documents)
   */
  export interface Schema$OceanDocInfo {
    /**
     * data returned with search docresults (snippets)
     */
    docTag?: Schema$OceanDocTag;
  }
  /**
   * ============\> Next available number: 102 (ksridhara) <================
   */
  export interface Schema$OceanDocTag {
    /**
     * TODO(leonid) Deprecate these Authors string for front end.
     */
    authors?: string | null;
    /**
     * A bitmap containing all available download formats (values defined in AvaialableDownloadFormats enum) NOTE: Only populated for Volume level docs
     */
    availableDownloads?: number | null;
    blockSnippet?: boolean | null;
    bookspecific?: Schema$OceanDocTagBookSpecific;
    catalogspecific?: Schema$OceanDocTagCatalogSpecific;
    /**
     * The content type of the document. See BoundVolumeSource::ContentType in ocean/data/volume_types.protodevel for possible values.
     */
    contentType?: number | null;
    contributor?: Schema$OceanDocTagContributor[];
    /**
     * cover page (PrintedAsSeen string), to generate results snippet thumbnail image urls
     */
    coverPage?: string | null;
    /**
     * The size (in pixels) of the full-resolution clean images used for the cover page. The width and height will be zero if no image for that page.
     */
    coverPageSize?: Schema$OceanImageSize;
    /**
     * this is in ONIX format.
     */
    DEPRECATEDApplicationDate?: string | null;
    /**
     * this is in ONIX format.
     */
    DEPRECATEDIssueDate?: string | null;
    DEPRECATEDPatentAssignee?: string | null;
    /**
     * patent-specific fields. ALL DEPRECATED, moved into PatentSpecific group, above.
     */
    DEPRECATEDPatentNumber?: string | null;
    /**
     * Percent rights granted by publisher. This should only be set, and definitely should only be considered, if source_type == BoundVolumeSource::PUBLISHER. '0' may mean we have no info on publisher rights so we have to just assume 0%. Deprecated as this is taken into account by viewability
     */
    DEPRECATEDPublisherPercentVisible?: number | null;
    /**
     * Editors string for front end.
     */
    editors?: string | null;
    encryptedExpressionId?: string | null;
    encryptedVolumeId?: string | null;
    /**
     * DEPRECATED! Being replaced in favor of viewability, below. geo restrict info (from OceanRights::geo_restrict) In CAv2: geo restrict info (from ocean::VolumeImprintRights::geo_restrict)
     */
    geoRestrict?: string[] | null;
    /**
     * Text quality as defined in CA_VolumeScoreResult::OACapabilities::TextQualityAssessment Note - This is only populated if good_text() and is_ge_quality() are true
     */
    goodTextDetail?: number | null;
    /**
     * List of locales for which this book can be bought from a publisher, and read as a Google eBook. Each locale is a lowercase, two-letter country-code (eg "ca"), and is copied from PublisherGrantability.Locale.locale, defined in ocean/data/docinfo/volume_viewability.proto.
     */
    grantableLocale?: string[] | null;
    /**
     * Set to true if volume has ge quality
     */
    isGeQuality?: boolean | null;
    /**
     * whether this a landing page chosen at indexing time.
     */
    isLandingPage?: boolean | null;
    magazinespecific?: Schema$OceanDocTagMagazineSpecific;
    /**
     * metadata_cover_exists will be set if there's a metadata-provided cover thumbnail. the thumbnail will be used for scanless books or when a scanned book is in metadata-only view.
     */
    metadataCoverExists?: boolean | null;
    /**
     * The size (in pixels) of the metadata cover image.
     */
    metadataCoverSize?: Schema$OceanImageSize;
    newspaperspecific?: Schema$OceanDocTagNewspaperSpecific;
    /**
     * Number of pages in this volume (usually as specified in metadata)
     */
    numPages?: number | null;
    /**
     * A bitmap indicating whether content may be objectionable NOTE: Only populated for volume level docs
     */
    objectionableContentBitmap?: number | null;
    /**
     * pageid of the page (OceanTypes::PageIdType)
     */
    pageid?: number | null;
    /**
     * page_number of the page (OceanTypes::PageNumberType) In CAv2: page_number of the page ocean::PageNumber::T
     */
    pageNumber?: number | null;
    /**
     * the page rank value of the book page
     */
    pagerank?: number | null;
    patentspecific?: Schema$OceanDocTagPatentSpecific;
    /**
     * Price information for a volume (per locale). Note existence of a price for a locale implies that the book is sellable for that locale.
     */
    price?: Schema$OceanGEPrice;
    /**
     * printed page number (OceanPrintedPageNumber; from OceanPageInfoMap::Page::printed_page_number)
     */
    printedPageNumber?: string | null;
    /**
     * the URL of the reference page (About this book)
     */
    refPageUrl?: string | null;
    /**
     * the URL for the "search in book"
     */
    searchInBookUrl?: string | null;
    segmentTime?: number | null;
    /**
     * The source type of the document. See BoundVolumeSource::SourceType in ocean/data/volume_types.protodevel for possible values.
     */
    sourceType?: number | null;
    /**
     * In CAv2 only: structured page number (printed number as we understand it) (result of ocean::StructuredPageNumberProto::AppendToString)
     */
    structuredPageNumber?: string | null;
    /**
     * Bitmap indicating top-level subjects associated with this document. See ocean/metadata/subjects/util.h for more detail.
     */
    subjectBitmap?: string | null;
    /**
     * Sub title string for front end
     */
    subTitle?: string | null;
    /**
     * the URL of the cover page.
     */
    thumbnailUrl?: string | null;
    /**
     * Title string for front end.
     */
    title?: string | null;
    /**
     * Bibkey to be used as part of the URL (to make them persistent in some sense). This is obtained by doing a GetURLKey() on the bibdata which returns the main bibkey associated with the volume based on priority. This is parseable into an OceanVolumeBibKey (ocean/metadata/bibkeys.h) Note: This should ideally be a required field longer term but for now keeping it optional for compatibility. In case of this being absent, we don't include the key in the URL (just use volumeId as before). Note: For content type books, this key is supplemented by other bibkeys for this volumes(the field is aux_bibkeys)
     */
    urlKey?: string | null;
    /**
     * using_actual_cover will be set if we are using the actual cover of the book (instead of the table of content, etc.). This is particularly useful to identify books where we inserted a generated cover via Coverups.
     */
    usingActualCover?: boolean | null;
    /**
     * Volume viewability, which defines how/if the volume should be displayed in various locales.
     */
    viewability?: Schema$OceanVolumeViewability;
    volumeType?: number | null;
    /**
     * The version of the volume (serialized form). ONLY populated for Volume level docs
     */
    volumeVersion?: string | null;
    workcluster?: Schema$OceanDocTagWorkCluster;
  }
  /**
   * Book specific fields.
   */
  export interface Schema$OceanDocTagBookSpecific {
    /**
     * These are other bibkeys for this book beside the url_key, which is the primary key. For example, a book may have ISBN, OCLC num etc. In that case ISBN is the url_key and the OCLC number is the auxillary bibkey. The aux_bibkeys should have the same form as the url_key
     */
    auxBibkeys?: string[] | null;
    imprint?: string | null;
    numberingrange?: Schema$OceanDocTagBookSpecificNumberingRange[];
    numRatingHalfStars?: number | null;
    /**
     * publisher id, if available
     */
    partnerId?: string | null;
    /**
     * Set if the book is one of several editions or versions. Used by OFE to show numbered editions. The value is copied from clustering information. See also ocean/metadata/proto/bibdata_components.proto The value there is from metadata records by ocean/metadata/parsing/parse_utils.cc, and is a 1-based value.
     */
    productEditionNumber?: number | null;
    /**
     * In the format yyyy.mm.dd, or possibly just yyyy.
     */
    publicationDate?: string | null;
    publisherName?: string | null;
    /**
     * Subject (from Bisac)
     */
    subject?: string | null;
  }
  /**
   * These are copies of MetadataNumberingRange's from ocean/metadata/metadata_range.proto. They should be used for rendering volume numbering information in search results (as this protobuf is the only piece of data available at that point). The numbering can look like "Volume 1" or "Parts A-D" Schema is volume/part/etc, type arabic number/roman number/letter/etc (these are both enums from ocean/metadata/metadata_enums.proto). In most cases there is only one numbering range (e.g. "Volume 1, Issue 2"), but in general the ranges may be disjoint (e.g. "Volumes 2, 3 and 7")
   */
  export interface Schema$OceanDocTagBookSpecificNumberingRange {
    endNumbering?: string[] | null;
    numberingSchema?: number[] | null;
    numberType?: number[] | null;
    startNumbering?: string[] | null;
  }
  /**
   * catalog-specific fields.
   */
  export interface Schema$OceanDocTagCatalogSpecific {
    /**
     * Is this the latest issue of this catalog series? This is required to filter results if the latest restrict is on.
     */
    latest?: boolean | null;
    /**
     * time_t date corresponding to the catalog publication date. Approximate when the catalog does not have an exact "date" of publication, e.g. For "Spring 2002", year, month and day are 2002, 03 and 21, respectivley. This value is used to compare catalog issues to determine the latest. The value is stored in seconds-since-epoch, 1/1/1970. This is not a problem for catalogs because we are not dealing with any catalogs from before the 70's.
     */
    publicationDate?: number | null;
    /**
     * String to be displayed as catalog publication time, e.g. "Spring 2002".
     */
    publicationTimeToDisplay?: string | null;
  }
  /**
   * The composite descriptor of the contributors that should be known to search and front end. Both fields are required. Replaces authors and editors strings.
   */
  export interface Schema$OceanDocTagContributor {
    name?: string | null;
    /**
     * ContributionType enum from ocean/metadata/metadata_enums.proto Note that we pick only the "highest-ranking" contribution (i.e. writer and editor would collapse to "writer".
     */
    type?: number | null;
  }
  /**
   * Magazine-specific fields. See https://www.corp.google.com/eng/designdocs/scanning/magazines/designdoc.html for magazine design doc.
   */
  export interface Schema$OceanDocTagMagazineSpecific {
    /**
     * A human-readable date for display in the UI. Unlike "publication_date_" above, this should not be parsed into structured data, but should only be displayed as is.
     */
    displayDate?: string | null;
    /**
     * Description specific to a magazine issue, such as featured articles and article summaries.
     */
    issueDescription?: string | null;
    issueEnd?: number | null;
    issueStart?: number | null;
    /**
     * Items within a magazine issue.
     */
    item?: Schema$OceanDataDocinfoWoodwingItemMetadata[];
    otherNumberingEnd?: number | null;
    /**
     * NOTE: These should to be values from MetadataNumberingSchema; when this becomes a proto2, we can use MetadataEnums values.
     */
    otherNumberingSchema?: number | null;
    /**
     * For season or quarter dates.
     */
    otherNumberingStart?: number | null;
    /**
     * For each page of a magazine, maps to the item index of "item".
     */
    pageToItem?: number[] | null;
    publicationDateEnd?: string | null;
    publicationDateStart?: string | null;
    /**
     * This is used to render the metadata line of the snippet and should be present in all magazine documents.
     */
    serialTitle?: string | null;
    serialVolumeid?: string | null;
    volume?: number | null;
  }
  /**
   * Newspaper-specific fields.
   */
  export interface Schema$OceanDocTagNewspaperSpecific {
    /**
     * Newspaper Article Roll Coordinates used to figure out the location of the article wrt the page. It is of the form x,y.
     */
    articleRollCoords?: string | null;
    /**
     * Atlantis specific. Deprecated.
     */
    newspaperDate?: number | null;
    newspaperName?: string | null;
    /**
     * Atlantis specific. Deprecated.
     */
    newspaperUrl?: string | null;
    /**
     * These fields are only populated for Santorini (newspapers on goovols) formatted newspapers, not for Atlantis: YYYY.MM.DD format.
     */
    publicationDate?: string | null;
    /**
     * Atlantis specific. Deprecated.
     */
    publisher?: string | null;
  }
  /**
   * Patent specific fields. Currently empty, but need to move the fields below into here at a later date
   */
  export interface Schema$OceanDocTagPatentSpecific {
    /**
     * this is in ONIX format.
     */
    applicationDate?: string | null;
    /**
     * 2-letter language of the document such as "en" or "fr" This field was created for plumbing in the OFE API intl patent flow, and is probably not otherwise filled in.
     */
    contentLanguage?: string | null;
    docType?: number | null;
    /**
     * Just the number, no bibkey prefix. Called 'doc number' b/c it could be patent number for patents, application number for applications.
     */
    documentNumber?: string | null;
    /**
     * US and Int'l patent classification codes for "related patents".
     */
    domesticClassification?: string[] | null;
    internationalClassification?: string[] | null;
    /**
     * this is in ONIX format.
     */
    issueDate?: string | null;
    patentAssignee?: string | null;
    /**
     * For applications, the 'publication number' Something like US20071234567A1: 'US' prefix, 4 digit year, 7 digit serial number, 2 character code, all stuck together.
     */
    publicationNumber?: string | null;
    /**
     * Path identifying the image used for the thumbnail of this patent. e.g. "EP1234567B1/imgf0001.png" The client is expected to fill in the rest of the url such as: https://patentimages.storage.googleapis.com/thumbnails/EP1234567B1/imgf0001.png
     */
    relativeThumbnailPath?: string | null;
    tenCharUsClassification?: string[] | null;
  }
  /**
   * Details of the work cluster for this Volume.
   */
  export interface Schema$OceanDocTagWorkCluster {
    clusterSize?: number | null;
    workId?: string | null;
  }
  /**
   * A container proto to store prices for GE
   */
  export interface Schema$OceanGEMoney {
    /**
     * amount in micros. 1 is represented 1000000
     */
    amountInMicros?: string | null;
    /**
     * The currency codes come from google3/i18n/identifiers/currencycode.h.
     */
    currencyCode?: string | null;
  }
  /**
   * GE sale related data
   */
  export interface Schema$OceanGEPrice {
    locale?: Schema$OceanGEPriceLocale[];
  }
  export interface Schema$OceanGEPriceLocale {
    /**
     * The two character ISO country code
     */
    locale?: string | null;
    /**
     * Price used for sale by the OFE
     */
    offerPrice?: Schema$OceanGEMoney;
    /**
     * The time (in secs from epoch) the content goes on sale (only set when the book is not already sellable at the time of indexing).
     */
    onSaleTimeSecs?: string | null;
  }
  /**
   * Size info of an image.
   */
  export interface Schema$OceanImageSize {
    /**
     * pixels
     */
    height?: number | null;
    /**
     * pixels
     */
    width?: number | null;
  }
  /**
   * How a volume may be viewed in a particular locale. Next available ID: 25 (ikkwong)
   */
  export interface Schema$OceanLocaleViewability {
    /**
     * These capture "commercial" contract related access rights provided by partners for a volume.
     */
    accessRights?: Schema$OceanVolumeAccessRights;
    /**
     * Are we allowed to add all the front matter to the preview in addition to the preview amount that is from percent_book_shown? This means the front matter becomes freely previewable and does not count towards the previewable amount based on the percentage.
     */
    allowAddingFrontmatterToPreview?: boolean | null;
    /**
     * By default, we allow continuous browse. PFE provides a means for partners to opt out entirely or just specific books.
     */
    allowContinuousBrowse?: boolean | null;
    /**
     * whether OFE should display this volume in syndicated search results
     */
    allowRetailSyndication?: boolean | null;
    /**
     * The bibkey upon which this viewability information is based.
     */
    bibkey?: string | null;
    /**
     * Whether we can show ads with this book in this locale.
     */
    canDisplayAds?: boolean | null;
    /**
     * In future, we will generate epub iff can_download_epub = true irrespective of viewability or download pdf state.
     */
    canDownloadEpub?: boolean | null;
    /**
     * In future, we will generate PDF iff can_download_pdf = true irrespective of viewability.
     */
    canDownloadPdf?: boolean | null;
    /**
     * Whether to show library links for the books in this imprint.
     */
    canShowLibraryLinks?: boolean | null;
    /**
     * Whether we can show photos for this book in this locale.
     */
    canShowPhotos?: boolean | null;
    /**
     * It should be OK to use metadata covers normally, but we allow publishers to explicitly disallow them.
     */
    canUseMetadataCover?: boolean | null;
    /**
     * The client who provided the rights for this bibkey, and who should receive revenue derived from this book in this locale. This will only be present when we receive explicit rights from a publisher.
     */
    clientId?: string | null;
    /**
     * Volume related access rights that are computed by Goovols Syncher from partner and book metadata. This complements VolumeAccessRights. This message is used to capture "commerical" contracts that are computed from other sources. Any future computed rights that are not related to volume access should go into a new message.
     */
    computedAccessRights?: Schema$OceanVolumeComputedAccessRights;
    dates?: Schema$OceanLocaleViewabilityDates;
    /**
     * Volume display specific attributes are kept in display_details
     */
    displayDetails?: Schema$OceanVolumeDisplayDetails;
    /**
     * This only applies when view_type == VIEW_METADATA and controls whether we're allowed to include scanned info (keywords, toc, etc). in the metadata-view. For books in metadata view because they have been opted out, this would be false.
     */
    metadataViewMayIncludeInfoFromScans?: boolean | null;
    /**
     * This only applies when view_type == VIEW_METADATA and controls whether we're allowed to include a text sample even for a metadata view book.
     */
    metadataViewSampleAllowed?: boolean | null;
    /**
     * How much of the book can be viewed in this locale. Will be 100 for VIEW_FULL; 0 for VIEW_SNIPPET_, VIEW_NONE and VIEW_METADATA; and some value between 0 and 100 (exclusive) for VIEW_PARTIAL.
     */
    percentBookShown?: number | null;
    /**
     * If present, this is the rights policy's determination of the public domain status. (Of course, this determination is generally conservative (i.e. false negatives are likely), though exactly how conservative may depend on parameters to the rights policy.) If absent, public domain status can be inferred from view_type and view_reason, but that isn't quite perfectly reliable: view_type should always be VIEW_FULL for public domain, but view_reason might be REASON_PUBLIC_DOMAIN (definitely public domain, obviously), some other value, or absent. In the future, new viewabilities should always have this field whenever possible.
     */
    publicDomain?: boolean | null;
    sourcedetails?: Schema$OceanLocaleViewabilitySourceDetails;
    /**
     * The reason for the view_type.
     */
    viewReason?: string | null;
    /**
     * The viewability specified for this locale.
     */
    viewType?: string | null;
  }
  /**
   * Viewability related dates.
   */
  export interface Schema$OceanLocaleViewabilityDates {
    /**
     * If specified, the LocaleViewability will become effective on this date. This field is used to allow pre-indexing of future books which will become viewable and searchable according to the LocaleViewability on the specified date. Before the effective date, the volume will have scanless-like VIEW_METADATA viewability. For details, see the design document at http://go/oceanviewabilityeffectivedate. The date is expressed as the number of seconds since the Unix epoch.
     */
    effectiveDate?: string | null;
  }
  /**
   * How did we derive this viewability for this locale+volume? For "partner" books, this includes details about the "Imprint" that provided the rights. These details specify things such as preferred buy-the-book-url to show in the frontend.
   */
  export interface Schema$OceanLocaleViewabilitySourceDetails {
    imprint?: Schema$OceanVolumeImprint;
  }
  /**
   * Per-doc data in the Ocean index. Ocean indexing details are in https://www/eng/designdocs/scanning/ocean-indexing.html
   */
  export interface Schema$OceanPerDocData {
    /**
     * rights, mask-availability, porn, etc.
     */
    flags?: string | null;
    numPages?: number | null;
    pageid?: number | null;
    /**
     * 1-based
     */
    pageNumber?: number | null;
    volumeid?: string | null;
  }
  export interface Schema$OceanVolumeAccessRights {
    /**
     * If false, then we can only provide text layer generated from publisher provided epub.
     */
    allowAutoGeneratedText?: boolean | null;
    /**
     * Whether we can show info cards inside this book.
     */
    canShowInfoCards?: boolean | null;
    /**
     * Whether we can show photos inside this book.
     */
    canShowPhotos?: boolean | null;
    /**
     * Maximum number of Adobe Digital Editions device per sale item allowed. 0 means no download allowed. -1 means unlimited download.
     */
    numAdeDeviceAllowed?: number | null;
    /**
     * Maximum number of Adobe id per sale item allowed. 0 means no download allowed. -1 means unlimited download.
     */
    numAdobeIdAllowed?: number | null;
    /**
     * Max. number of Google eBooks downloads allowed. This is related to iPhone/iPad/Androrid/WebReader reading, not to epub/pdf downloads. 0 means no download allowed. This is related to bug #3094719.
     */
    numDownloadsAllowed?: number | null;
    /**
     * Number of readers can read the Google eBooks simultaneously
     */
    numSimultaneousAccess?: number | null;
    /**
     * Download type for offline reading
     */
    offlineDownload?: string | null;
    /**
     * How much of a volume we allow user to extract as text (for copy+paste)
     */
    percentCopyable?: number | null;
    /**
     * How much of a volume we allow user to print
     */
    percentPrintable?: number | null;
    /**
     * True iff restrict view only to epub text. Don't show page images if this is true. Some pubs don't have copyright for page layout and fonts.
     */
    restrictOnlyToText?: boolean | null;
    /**
     * Whether we sell fixed layout as image only.
     */
    sellFixedLayoutAsImageOnly?: boolean | null;
    /**
     * Whether text to speech is allowed
     */
    textToSpeech?: boolean | null;
    /**
     * Whether we treat this book as public domain.
     */
    treatAsPublicDomain?: boolean | null;
  }
  /**
   * Volume related access rights that are computed by Goovols Syncher from partner and book metadata. This complements VolumeAccessRights. Next available ID: 4 (kblass)
   */
  export interface Schema$OceanVolumeComputedAccessRights {
    /**
     * Whether this book can be shared with family members.
     */
    canFamilyShare?: boolean | null;
    /**
     * Whether the panelization feature is enabled for internal users only.
     */
    panelizationFeatureInternalOnly?: boolean | null;
    /**
     * Whether the book is viewable for internal users only.
     */
    viewableInternalOnly?: boolean | null;
  }
  /**
   * This message describes display attributes. The attributes which are applicable to OFE not indexing (mustang), should be added in this proto.
   */
  export interface Schema$OceanVolumeDisplayDetails {
    /**
     * The creative commons license specified, Please refer ocean.CreativeCommonsLicenseType.Type for enum values Not exposed in Partner Frontend anymore.
     */
    ccLicense?: number | null;
  }
  /**
   * Commercial information for a volume (data from the Imprint PublishersVolumeInfo table in the db). An imprint is a subdivision of a publisher (for example, Bantam Books is an imprint of Randon House), or can even be just a grouping of volumes with common commercial attributes.
   */
  export interface Schema$OceanVolumeImprint {
    /**
     * These capture "commercial" contract related access rights provided by partners for a volume.
     */
    accessRights?: Schema$OceanVolumeAccessRights;
    /**
     * Id used in the google ads system
     */
    adsId?: string | null;
    /**
     * Are we allowed to add all the front matter to the preview in addition to the preview amount that is from percent_book_shown?
     */
    allowAddingFrontmatterToPreview?: boolean | null;
    /**
     * By default, we allow continuous browse. PFE provides a means for partners to opt out entirely or just specific books. This will be deprecated once UpdateVolumesReqHandler returns VolumeViewability.
     */
    allowContinuousBrowse?: boolean | null;
    /**
     * By default, we allow retailer syndication. PFE provides a means for partner to opt out. This will be deprecated once UpdateVolumesReqHandler returns VolumeViewability.
     */
    allowRetailSyndication?: boolean | null;
    /**
     * Beware: the author strings are not in fixed format..these can be comma separated or 'and' separated or have extra terms like 'et al' and sometimes have weird ones like 'no author' as these are fed in via a somewhat flexible free text tool.
     */
    author?: string | null;
    /**
     * Commercial info comes with book identifiers like ISBN(or some bibkey), Title, Author. Passing these along as well with the commercials for better book identification/link up with rights.
     */
    bibkey?: string | null;
    /**
     * Text to display in the buy-the-book blurb
     */
    buyTheBookText?: string | null;
    /**
     * ISBN/ISSN-parameterized URL to the imprint's site for buying a book. For ISBN-parameterized links, the ISBN value will be substituted in the cannonical 13-digit form.
     */
    buyTheBookUrl?: string | null;
    /**
     * iff true volume is available as Google Edition. This will be deprecated once UpdateVolumesReqHandler returns VolumeViewability.
     */
    canDownloadEpub?: boolean | null;
    /**
     * iff true and VIEW_TYPE=FULL_VIEW, then we will allow PDF download This will be deprecated once UpdateVolumesReqHandler returns VolumeViewability.
     */
    canDownloadPdf?: boolean | null;
    /**
     * Whether to show library links for the books in this imprint. This will be deprecated once UpdateVolumesReqHandler returns VolumeViewability.
     */
    canShowLibraryLinks?: boolean | null;
    /**
     * It should be OK to use metadata covers normally, but we allow publishers to explicitly disallow them. This will be deprecated once UpdateVolumesReqHandler returns VolumeViewability.
     */
    canUseMetadataCover?: boolean | null;
    /**
     * Whether to disable other btb links for the books in this imprint. Show only btb link from this partner and remove everything else.
     */
    disableOtherBuyTheBookLinks?: boolean | null;
    /**
     * Volume display specific attributes are kept in display_details This will be deprecated once UpdateVolumesReqHandler returns VolumeViewability.
     */
    displayDetails?: Schema$OceanVolumeDisplayDetails;
    /**
     * The ISBN supplied by publisher (or Google) for the Google Edition e-book. One day it should be an attribute of the tome cluster.
     */
    geBibkey?: string | null;
    /**
     * The imprint id from the ocean devel db for this imprint.
     */
    imprintId?: string | null;
    imprintName?: string | null;
    /**
     * URL to the imprint's website, to go to upon a click on the logo
     */
    imprintUrl?: string | null;
    logoHeight?: number | null;
    /**
     * URL/location for the imprint's logo to display
     */
    logoLocation?: string | null;
    /**
     * The logo image's geometry
     */
    logoWidth?: number | null;
    /**
     * Percentage of book we are allowed to display This will be deprecated once UpdateVolumesReqHandler returns VolumeViewability.
     */
    percentBookShown?: number | null;
    promotionalText?: string | null;
    /**
     * We may allow imprints to run promotional campaigns. The following fields capture the blurb to display and the URL (ISBN-parameterized) link to provide.
     */
    promotionalUrl?: string | null;
    /**
     * Sometimes the Publisher/Imprint Name the book is published under is different from the current name and we may have this information.
     */
    publishedImprintName?: string | null;
    /**
     * Need a unique identifier for PFE records, using PVI ID
     */
    pviRowid?: string | null;
    title?: string | null;
    /**
     * Some records are deactivated, suppressed or excluded; we still want to hear about them, but we aren't going to be using their bibdata
     */
    useBibdata?: boolean | null;
    verticalType?: string | null;
  }
  export interface Schema$OceanVolumeViewability {
    /**
     * The viewability for any locale that is not explicitly listed.
     */
    defaultViewability?: Schema$OceanLocaleViewability;
    DEPRECATEDDefaultViewType?: number | null;
    /**
     * DEPRECATED: Viewability-Limbo was a state that prevented indexing from running if the viewability of a volume had dropped significantly. It was removed during viewability refactoring: http://go/viewability
     */
    inViewabilityLimbo?: boolean | null;
    locale?: Schema$OceanVolumeViewabilityLocale[];
    /**
     * Whether the volume viewability was updated by the indexer as opposed to a direct update in goovols. The absense of this bit will indicate to the indexer that it should not short-circuit indexing side effects that should occur when viewability changes.
     */
    updatedByIndexer?: boolean | null;
  }
  export interface Schema$OceanVolumeViewabilityLocale {
    DEPRECATEDViewType?: number | null;
    /**
     * The two-character ISO country code for the locale.
     */
    locale?: string | null;
    /**
     * The viewability specified for this locale.
     */
    viewability?: Schema$OceanLocaleViewability;
  }
  /**
   * Bounding box of patch containing line, word or symbol.
   */
  export interface Schema$OcrPhotoBoundingBox {
    /**
     * Angle of rotation of (in degrees, clockwise is positive) of the box about the top-left corner.
     */
    angle?: number | null;
    /**
     * Sequence of rotated boxes that tightly enclose the text.
     */
    curvedBox?: Schema$OcrPhotoCurvedBoundingBox;
    /**
     * Box height (bottom pixels at top + height - 1).
     */
    height?: number | null;
    /**
     * x coordinate of top-left corner
     */
    left?: number | null;
    /**
     * y coordinate of top-left corner
     */
    top?: number | null;
    /**
     * Box width (rightmost pixels at left + width - 1).
     */
    width?: number | null;
  }
  /**
   * Copy of ocr/goodoc/layout-common.proto:CurvedBoundingBox, temporary duplicated here to allow for on-device builds.
   */
  export interface Schema$OcrPhotoCurve {
    /**
     * The sequence of points that approximate the curve.
     */
    points?: Schema$OcrPhotoCurvePoint[];
  }
  export interface Schema$OcrPhotoCurvedBoundingBox {
    /**
     * The curve of points along the middle of the text line.
     */
    midLineCurve?: Schema$OcrPhotoCurve;
    /**
     * If top_to_bottom is true, this is the width of the curved box. Otherwise, it is the height of the curved box.
     */
    thickness?: number | null;
    /**
     * If true, the curve is interpreted as top to bottom of the line image. Otherwise, it is from left to right.
     */
    topToBottom?: boolean | null;
  }
  export interface Schema$OcrPhotoCurvePoint {
    x?: number | null;
    /**
     * NOTE: if we wish to support perspective (varying thickness), later on we could extend this message with a thickness field. In that case, CurvedBoundingBox.thickness() would be used as a default if !Point.has_thickness().
     */
    y?: number | null;
  }
  /**
   * Text with bounding box.
   */
  export interface Schema$OcrPhotoTextBox {
    /**
     * ID of the text block that this line belongs to.
     */
    blockId?: number | null;
    /**
     * Text bounding box.
     */
    box?: Schema$OcrPhotoBoundingBox;
    /**
     * Content type for this box.
     */
    contentType?: string | null;
    /**
     * Optional width of characters in the text.
     */
    symbolWidths?: number[] | null;
    /**
     * Text string.
     */
    text?: string | null;
  }
  /**
   * This proto is used as the key for official pages data. WARNING WARNING WARNING WARNING WARNING PAY ATTENTION HERE! The query field contains a specially NORMALIZED query, NOT a raw one. You can get a normalized query in several ways: 1. from an squery with NormalizedQueryFromSquery 2. from a CJK-segmented and punctuation-stripped query with NormalizeText (NOTE: navboost queries are already CJK-segmented and punctuation-stripped, you can just pass them to NormalizeText) 3. from user text/query with CanonicalizeText (this will do the CJK segmenting, punctuation stripping and character normalization for you) All of these functions are in ./utils/external-utils.h
   */
  export interface Schema$OfficialPagesOfficialKey {
    country?: string | null;
    language?: number | null;
    query?: string | null;
  }
  export interface Schema$OfficialPagesQuerySet {
    queries?: Schema$OfficialPagesOfficialKey[];
    /**
     * This is the fingerprint of the OfficialKey queries in the queries field. The index of a fingerprint in this field corresponds to the index of the fingerprinted query in the queries field. The fingerprint is produced with the QueryCountryLanguageFingerprint function in external-utils.h
     */
    queryCountryLanguageFingerprints?: string[] | null;
  }
  export interface Schema$OrionDocEntitiesProto {
    docid?: string | null;
    /**
     * This is encoded using EntityCandidate::Encode
     */
    encodedEntity?: number[] | null;
  }
  export interface Schema$PairwiseQScoringData {
    confidenceValue?: number | null;
    value?: number | null;
  }
  /**
   * Message representing a versioned PairwiseQ scores used for experimentation. This protobuf is copied from quality_nsr_pairwiseq::PairwiseQVersionedItem.
   */
  export interface Schema$PairwiseQVersionedItem {
    /**
     * The PairwiseQ confidence value corresponding to this version.
     */
    confidenceValue?: number | null;
    /**
     * The PairwiseQ value corresponding to this version.
     */
    value?: number | null;
    /**
     * The version id.
     */
    versionId?: number | null;
  }
  export interface Schema$PeoplestackFlexorgsProtoInternalExternal {
    /**
     * All evaluations are done within the context of a given application, e.g., "Gmail" and should not be reused in other apps.
     */
    application?: string | null;
    /**
     * * There can be multiple states based on the context: 1. AUTOCOMPLETE + Gmail - context 1 2. AUTOCOMPLETE + Chat/Dynamite - context 2 3. "SOME OTHER ACTION" + Gmail - context 3 A client should identify whether a patrticular context is present in the list and only if one is found - use the state that goes alogn with the context, otherwise the client should default to whatever is the safe assumption about "internality/externality" the application should be making (likely, consider everything not explicitly "internal" as "external").
     */
    stateStatus?: Schema$PeoplestackFlexorgsProtoInternalExternalStateStatus[];
  }
  export interface Schema$PeoplestackFlexorgsProtoInternalExternalStateStatus {
    contextType?: string | null;
    state?: string | null;
  }
  /**
   * =========================================================================== # Make sure you read the comments in the bottom before you add any new field. NB: As noted in the comments, this protocol buffer is used in both indexing and serving. In mustang serving implementations we only decode perdocdata during the search phase, and so this protocol should only contain data used during search. See mustang/repos_www/attachments.proto:{MustangBasicInfo,MustangContentInfo\} for protocols used during search and/or docinfo. Next available tag deprecated, use this (and look for commented out fields): blaze-bin/net/proto_compiler/protocol-compiler --freetags \ indexer/perdocdata/perdocdata.proto Next tag: 223
   */
  export interface Schema$PerDocData {
    /**
     * AppsLink contains Android application IDs in outlinks. It is used to improve results ranking within applications universal. See http://go/apps-universal for the project details.
     */
    appsLink?: Schema$QualityCalypsoAppsLink;
    /**
     * For indexing Asteroid Belt intent scores. See go/asteroid-belt for details.
     */
    asteroidBeltIntents?: Schema$QualityOrbitAsteroidBeltDocumentIntentScores;
    authorObfuscatedGaiaStr?: string[] | null;
    biasingdata?: Schema$BiasingPerDocData;
    /**
     * A replacement for BiasingPerDocData that is more space efficient. Once this is live everywhere, biasingdata will be deprecated.
     */
    biasingdata2?: Schema$BiasingPerDocData2;
    BlogData?: Schema$BlogPerDocData;
    /**
     * The body words over tokens ratios for the beginning part and whole doc. NB: To save space, field body_words_to_tokens_ratio_total is not set if it has the same value as body_words_to_tokens_ratio_begin (e.g., short docs).
     */
    bodyWordsToTokensRatioBegin?: number | null;
    bodyWordsToTokensRatioTotal?: number | null;
    /**
     * the book citation data for each web page, the average size is about 10 bytes
     */
    BookCitationData?: Schema$BookCitationPerDocData;
    /**
     * Brainloc contains location information for the document. See ariane/273189 for details.
     */
    brainloc?: Schema$QualityGeoBrainlocBrainlocAttachment;
    /**
     * A measure of commerciality of the document Score \> 0 indicates document is commercial (i.e. sells something) Computed by repository/pageclassifiers/parsehandler-commercial.cc
     */
    commercialScore?: number | null;
    compressedQualitySignals?: Schema$CompressedQualitySignals;
    /**
     * Compressed URL string used for SETI.
     */
    compressedUrl?: string | null;
    contentAttributions?: Schema$ContentAttributions;
    /**
     * This field stores the country information for the document in the form of CountryAttachment.
     */
    countryInfo?: Schema$CountryCountryAttachment;
    /**
     * For crawler-ID variations, the crawling context applied to the document. See go/url, and the description in google3/indexing/crawler_id
     */
    crawlerIdProto?: Schema$LogsProtoIndexingCrawlerIdCrawlerIdProto;
    /**
     * This field is used internally by the docjoiner to forward the crawl pageranks from original canonicals to canonicals we actually chose; outside sources should not set it, and it should not be present in actual docjoins or the index.
     */
    crawlPagerank?: number | null;
    crowdingdata?: Schema$CrowdingPerDocData;
    /**
     * Stores dates-related info (e.g. page is old based on its date annotations). Used in FreshnessTwiddler. Use encode/decode functions from quality/timebased/utils/dates-info-helper-inl.h
     */
    datesInfo?: string | null;
    /**
     * The obfuscated google profile gaia id(s) of the author(s) of the document. This field is deprecated, use the string version.
     */
    DEPRECATEDAuthorObfuscatedGaia?: string[] | null;
    DEPRECATEDQuarantineWhitelist?: boolean | null;
    /**
     * Contains desktop interstitials signal for VOLT ranking change.
     */
    desktopInterstitials?: Schema$IndexingMobileInterstitialsProtoDesktopInterstitials;
    /**
     * The document spam score is represented as a 7-bits, going from 0 to 127.
     */
    DocLevelSpamScore?: number | null;
    /**
     * 16-bit
     */
    domainAge?: number | null;
    /**
     * Free form debug info. NB2: consider carefully what to save here. It's easy to eat lots of gfs space with debug info that nobody needs...
     */
    Event?: Schema$PerDocDebugEvent[];
    /**
     * Date for Events. A web page might list multiple events with different dates. We only take one date (start date) per event.
     */
    eventsDate?: string[] | null;
    /**
     * This field is available only in the docjoins: it is cleared before building per-doc data in both Mustang and Teragoogle. (MessageSet is inefficient in space for serving data) Use this for all new fields that aren't needed during serving. Currently this field contains: * UrlSignals for the document level spam classifier (when the doclevelspamscore is set). * PerDocLangidData and realtimespam::ClassifierResult for the document level fresh spam classifier (when the doc-level fresh spam score is generated). * MicroblogDocQualitySignals for document-level microblog spam classifier. This only exists in Firebird for now. * spam_buckets::BucketsData for a document-structure hash
     */
    extraData?: Schema$Proto2BridgeMessageSet;
    /**
     * Contains Site signal information for Firefly ranking change. See http://ariane/313938 for more details.
     */
    fireflySiteSignal?: Schema$QualityCopiaFireflySiteSignal;
    /**
     * Stores scores of freshness-related classifiers: freshbox article score, live blog score and host-level article score. The encoding/decoding API is in quality/freshness/freshbox/goldmine/freshbox_annotation_encoder.h. To use this field, you MUST join g/pq-classifiers-announce and add your use case at http://shortn/_RYXS2lX2IV.
     */
    freshboxArticleScores?: number | null;
    /**
     * Stores freshness and aging related data, such as time-related quality metrics predicted from url-pattern level signals. Use the encoding decoding API in quality/freshness/docclassifier/aging/encoded-pattern-signals.h This field is deprecated.
     */
    freshnessEncodedSignals?: string | null;
    /**
     * Contains encoded FringeQueryPrior information. Unlikely to be meaningful for anyone other than fringe-ranking team. Contact fringe-ranking team if any questions, but do NOT use directly without consulting them.
     */
    fringeQueryPrior?: Schema$QualityFringeFringeQueryPriorPerDocData;
    /**
     * geo data; approx 24 bytes for 23M U.S. pages
     */
    geodata?: string | null;
    /**
     * The gibberish score is represented in 7 bits, going from 0 to 127.
     */
    GibberishScore?: number | null;
    /**
     * 16 bytes of groups2 data: used only in groups2 index
     */
    GroupsData?: Schema$GroupsPerDocData;
    homePageInfo?: number | null;
    /**
     * The page-rank of the homepage of the site. Copied from the cdoc.doc().pagerank_ns() of the homepage.
     */
    homepagePagerankNs?: number | null;
    /**
     * The earliest firstseen date of all pages in this host/domain. These data are used in twiddler to sandbox fresh spam in serving time. It is 16 bit and the time is day number after 2005-12-31, and all the previous time are set to 0. If this url's host_age == domain_age, then omit domain_age Please use //spam/content/siteage-util.h to convert the day between epoch second. Regarding usage of Sentinel values: We would like to check if a value exists in scoring bundle while using in Ranklab AST. For this having a sentinel value will help us know if the field exists or has a sentinel value (in the case it does not exist). 16-bit
     */
    hostAge?: number | null;
    /**
     * Site rank computed for host-level sitechunks. This value encodes nsr, site_pr and new_nsr. See quality_nsr::util::ConvertNsrDataToHostNsr and go/nsr.
     */
    hostNsr?: number | null;
    imagedata?: Schema$ImagePerDocData;
    /**
     * This field indicates whether the document is in the newsstand corpus.
     */
    inNewsstand?: boolean | null;
    /**
     * Is this document considered spam by the anchor bayes classifier?
     */
    IsAnchorBayesSpam?: boolean | null;
    /**
     * Set by the FreshDocs instant doc joiner. See //indexing/instant/hotdocs/README and http://go/freshdocs-hotdocs.
     */
    isHotdoc?: boolean | null;
    kaltixdata?: Schema$KaltixPerDocData;
    /**
     * The keyword stuffing score is represented in 7 bits, going from 0 to 127.
     */
    KeywordStuffingScore?: number | null;
    /**
     * For indexing k'nex annotations for FreshDocs.
     */
    knexAnnotation?: Schema$SocialPersonalizationKnexAnnotation;
    /**
     * Plausible languages in order of decreasing plausibility. Language values are small, IE < 127 so this should compress to one byte each.
     */
    languages?: number[] | null;
    /**
     * Last significant update of the document. This is sourced from the quality_timebased.LastSignificantUpdate proto as computed by the LSUSelector from various signals. The value is a UNIX timestamp in seconds.
     */
    lastSignificantUpdate?: string | null;
    /**
     * Metadata about last significant update. Currently this only encodes the quality_timebased.LastSignificantUpdate.source field which contains the info on the source of the signal. NOTE: Please do not read the value directly. Use helpers from quality/timebased/lastsignificantupdate/lsu-helper.h instead.
     */
    lastSignificantUpdateInfo?: string | null;
    /**
     * Info on how to launch a mobile app to consume this document's content, if applicable (see go/calypso).
     */
    launchAppInfo?: Schema$QualityRichsnippetsAppsProtosLaunchAppInfoPerDocData;
    liveResultsData?: Schema$WeboftrustLiveResultsDocAttachments;
    /**
     * Information on localized clusters, which is the relationship of translated and/or localized pages.
     */
    localizedCluster?: Schema$IndexingDupsLocalizedLocalizedCluster;
    /**
     * Contains the mids of the 5 most topical entities annotated with selected KG collections. This information is currently used on Image Search to detect cases where results converged to mostly a single person or media entity. More details: go/result-set-convergence.
     */
    mediaOrPeopleEntities?: Schema$ImageQualitySensitiveMediaOrPeopleEntities;
    /**
     * Additional metadata for lowend mobile documents in the Google index.
     */
    MobileData?: Schema$MobilePerDocData;
    /**
     * If not 0, we should not show the image in overlay mode in image snippets
     */
    noimageframeoverlayreason?: number | null;
    /**
     * Stripped site-level signals, not present in the explicit nsr_* fields, nor compressed_quality_signals.
     */
    nsrDataProto?: Schema$QualityNsrNsrData;
    /**
     * This field is propagated to shards. In addition, it is populated at serving time by go/web-signal-joins.
     */
    nsrIsCovidLocalAuthority?: boolean | null;
    /**
     * This field is propagated to shards. It will also be populated at serving time by go/web-signal-joins (see b/168114815).
     */
    nsrIsElectionAuthority?: boolean | null;
    /**
     * This field is propagated to shards. It will also be populated at serving time by go/web-signal-joins (see b/170607253). Bit indicating whether this site is video-focused, but not hosted on any major known video hosting domains.
     */
    nsrIsVideoFocusedSite?: boolean | null;
    /**
     * SiteChunk computed for nsr. It some cases it can use more information than just url (e.g. youtube channels). See NsrAnnotator for details. If sitechunk is longer than --populate_nsr_sitechunk_max_length (default=100), it will not get populated. This field might be compressed and needs to be decoded with quality_nsr::util::DecodeNsrSitechunk. See go/nsr-chunks for more details. This field contains only nontrivial primary chunks.
     */
    nsrSitechunk?: string | null;
    /**
     * Total number of urls encoded in the url section = # of alternate urls + 1
     */
    numUrls?: number | null;
    /**
     * 28 bytes per page, only in the Ocean index
     */
    oceandata?: Schema$OceanPerDocData;
    /**
     * Onsite prominence measures the importance of the document within its site. It is computed by propagating simulated traffic from the homepage and high craps click pages. It is a 13-bit int.
     */
    onsiteProminence?: number | null;
    origin?: number | null;
    /**
     * The original content score is represented as a 7-bits, going from 0 to 127. Only pages with little content have this field. The actual original content score ranges from 0 to 512. It is encoded with quality_q2::OriginalContentUtil::EncodeOriginalContentScore(). To decode the value, use quality_q2::OriginalContentUtil::DecodeOriginalContentScore().
     */
    OriginalContentScore?: number | null;
    /**
     * The number of hard tokens in the title.
     */
    originalTitleHardTokenCount?: number | null;
    /**
     * Experimental pageranks (DEPRECATED; only pagerank in MustangBasicInfo is used).
     */
    pagerank?: number | null;
    pagerank0?: number | null;
    pagerank1?: number | null;
    pagerank2?: number | null;
    /**
     * String that encodes the position ranges for different regions of the document. See "indexer/pageregion.h" for an explanation, and how to decode the string
     */
    pageregions?: string | null;
    pageTags?: number[] | null;
    phildata?: Schema$PhilPerDocData;
    /**
     * Additional metadata for Premium document in the Google index.
     */
    PremiumData?: Schema$PremiumPerDocData;
    /**
     * This field stores information about product sites.
     */
    productSitesInfo?: Schema$QualityProductProductSiteData;
    /**
     * bitmask of QuarantineBits (or'd together) used to store quarantine related information. For example: QUARANTINE_WHITELIST | QUARANTINE_URLINURL.
     */
    QuarantineInfo?: number | null;
    /**
     * The set of (query, country, language) triples for which this document is considered to be the official page. For example, www.britneyspears.com would be official for ("britney spears", "us", 0) and others (0 is English).
     */
    queriesForWhichOfficial?: Schema$OfficialPagesQuerySet;
    /**
     * Top two document language BCP-47 codes as generated by the RosettaLanguageAnnotator in the decreasing order of probability.
     */
    rosettaLanguages?: string[] | null;
    /**
     * Application information associated to the document.
     */
    rsApplication?: Schema$RepositoryAnnotationsRdfaRdfaRichSnippetsApplication;
    /**
     * Primary video's audio language classified by S3 based Automatic Language Identification (only for watch pages).
     */
    s3AudioLanguage?: Schema$S3AudioLanguageS3AudioLanguage;
    /**
     * Top document language as generated by SAFT LangID. For now we store bare minimum: just the top 1 language value, converted to the language enum, and only when different from the first value in 'languages'.
     */
    saftLanguageInt?: number[] | null;
    /**
     * DEPRECATED ---------------------------------------------------------------- Please do not use these fields in any new code. experimental
     */
    ScaledExptIndyRank?: number | null;
    /**
     * experimental
     */
    ScaledExptIndyRank2?: number | null;
    /**
     * experimental
     */
    ScaledExptIndyRank3?: number | null;
    ScaledExptSpamScoreEric?: number | null;
    ScaledExptSpamScoreYoram?: number | null;
    /**
     * The independence rank is represented as a 16-bit integer, which is multiplied by (max_indy_rank / 65536) to produce actual independence rank values. max_indy_rank is typically 0.84.
     */
    ScaledIndyRank?: number | null;
    /**
     * End DEPRECATED ------------------------------------------------------------ Link age score is represented as a 7-bit integer, going from 0 to 127.
     */
    ScaledLinkAgeSpamScore?: number | null;
    /**
     * Selection tier rank is a language normalized score ranging from 0-32767 over the serving tier (Base, Zeppelins, Landfills) for this document. This is converted back to fractional position within the index tier by scaled_selection_tier_rank/32767.
     */
    scaledSelectionTierRank?: number | null;
    ScaledSpamScoreEric?: number | null;
    /**
     * Spamscores are represented as a 7-bit integer, going from 0 to 127.
     */
    ScaledSpamScoreYoram?: number | null;
    /**
     * Scholar/Science Document type: <0 == not a Science Document -- default 0 == Science doc fully visible \>0 == Science doc but limited visibility, the number is the visible terms
     */
    scienceDoctype?: number | null;
    /**
     * Deprecated 2016/01/14.
     */
    scienceHoldingsIds?: string[] | null;
    /**
     * SemanticDate, estimated date of the content of a document based on the contents of the document (via parsing), anchors and related documents. Date is encoded as a 32-bits UNIX date (1970 Jan 1 epoch). Confidence is encoded using a SemanticDate specific format. For details of encoding, please refer to quality/freshness/docclassifier/semanticdate/public/semantic_date.proto
     */
    semanticDate?: number | null;
    /**
     * DEPRECATED: semantic_date_confidence replaced by semantic_date_info.
     */
    semanticDateConfidence?: number | null;
    /**
     * Info is encoded using a SemanticDate specific format. Contains confidence scores for day/month/year components as well as various meta data required by the freshness twiddlers.
     */
    semanticDateInfo?: number | null;
    /**
     * A set of cluster ids which are generated in Alexandria and used to de-dup results at serving time.
     */
    servingTimeClusterIds?: Schema$IndexingDocjoinerServingTimeClusterIds;
    shingleInfo?: Schema$ShingleInfoPerDocData;
    /**
     * Additional metadata for smartphone documents in the Google index.
     */
    smartphoneData?: Schema$SmartphonePerDocData;
    smearingMaxTotalOffdomainAnchors?: number | null;
    /**
     * For Social Search we store the fingerprint of the SG node name. This is used in one of the superroot's PRE_DOC twiddlers as a lookup key for the full Social Search data. PRE_DOC = twiddlers firing before the DocInfo request is sent to the mustang backend.
     */
    socialgraphNodeNameFp?: string | null;
    /**
     * Site level scores coming from spambrain.
     */
    spambrainData?: Schema$SpamBrainData;
    /**
     * The document total spam score identified by spambrain, going from 0 to 1.
     */
    spambrainTotalDocSpamScore?: number | null;
    /**
     * Actions based on Cookbook recipes that match the page.
     */
    spamCookbookAction?: Schema$SpamCookbookAction;
    /**
     * Contains hacked site signals which will be used in query time joins. As of Oct'19, the field is stored in a separate corpus. It'll only be populated for in-flight requests between retrieve and full-score in perdocdata. So no extra storage is needed on muppet side.
     */
    spamMuppetSignals?: Schema$SpamMuppetjoinsMuppetSignals;
    /**
     * The spamrank measures the likelihood that this document links to known spammers. Its value is between 0 and 65535.
     */
    spamrank?: number | null;
    /**
     * For SpamTokens content scores. Used in SiteBoostTwiddler to determine whether a page is UGC Spam. See go/spamtokens-dd for details.
     */
    spamtokensContentScore?: number | null;
    /**
     * The spamword score is represented in 7-bits, going from 0 to 127.
     */
    SpamWordScore?: number | null;
    /**
     * Tag-site-ness of a page, repesented in 7-bits range from 0 to 100. Smaller value means worse tag page.
     */
    TagPageScore?: number | null;
    /**
     * Encoded Document Time Sensitivity signal.
     */
    timeSensitivity?: number | null;
    /**
     * Number of hard tokens originally in title without counting the stopwords.
     */
    titleHardTokenCountWithoutStopwords?: number | null;
    ToolBarData?: Schema$ToolBarPerDocData;
    /**
     * A copy of the value stored in /namespace/indexing/wwwglobal//fakepr/x for this document. A value of quality_bakery::FakeprUtils::kUnknownToolbarPagerank indicates that we don't have toolbar pagerank for this document. A value between 0 and 10 (inclusive) means that this is the toolbar pagerank of the page. Finally, if this value is not set it means that the toolbar pagerank is equivalent to: quality_bakery::FakeprUtils::EstimatePreDemotionFromPagerankNearestSeeds( basic_info.pagerank_ns()) called on the MustangBasicInfo attachment for the same document.
     */
    toolbarPagerank?: number | null;
    /**
     * Top petacat of the site. Used in SiteboostTwiddler to determine result/query matching.
     */
    topPetacatTaxId?: number | null;
    topPetacatWeight?: number | null;
    /**
     * This field stores information about good travel sites.
     */
    travelGoodSitesInfo?: Schema$QualityTravelGoodSitesData;
    /**
     * For now, the count of matching trendspam queries.
     */
    trendspamScore?: number | null;
    /**
     * This field is propagated to shards. Stores clustering information on a site level for the Tundra project.
     */
    tundraClusterId?: number | null;
    /**
     * The uac spam score is represented in 7 bits, going from 0 to 127. Threshold is 64. Score \>= 64 is considered as uac spam.
     */
    uacSpamScore?: number | null;
    /**
     * These two fingerprints are used for de-duping results in a twiddler. They should only be populated by freshdocs, and will only be present for documents that are chosen to be canonicals in a cluster whose previous canonical is also in the index. Additionally, url_after_redirects_fp is only present if it is different from a fingerprint of the URL.
     */
    urlAfterRedirectsFp?: string | null;
    /**
     * Contains url poisoning data for suppressing spam documents.
     */
    urlPoisoningData?: Schema$UrlPoisoningData;
    /**
     * For indexing v2 k'nex, see/go/knex-v2-doc-annotation for details.
     */
    v2KnexAnnotation?: Schema$QualitySherlockKnexAnnotation;
    videoCorpusDocid?: string | null;
    videodata?: Schema$VideoPerDocData;
    /**
     * Audio-based language classified by Automatic Language Identification (only for watch pages).
     */
    videoLanguage?: Schema$QualityVidyaVideoLanguageVideoLanguage;
    /**
     * Contains page UX signals for VOLT ranking change. See http://ariane/4025970 for more details.
     */
    voltData?: Schema$IndexingMobileVoltVoltPerDocData;
    /**
     * Language classified by the WatchPageLanguage Model (go/watchpage-language). Only present for watch pages.
     */
    watchpageLanguageResult?: Schema$WatchpageLanguageWatchPageLanguageResult;
    webmirrorEcnFp?: string | null;
    /**
     * WebRef entities associated to the document. See go/webref for details.
     */
    webrefEntities?: Schema$RepositoryWebrefWebrefMustangAttachment;
    WhirlpoolDiscount?: number | null;
    /**
     * Stores scores of ymyl health classifier as defined at go/ymyl-classifier-dd. To use this field, you MUST join g/pq-classifiers-announce and add your use case at http://shortn/_nfg9oAldou.
     */
    ymylHealthScore?: number | null;
    /**
     * Stores scores of ymyl news classifier as defined at go/ymyl-classifier-dd. To use this field, you MUST join g/pq-classifiers-announce and add your use case at http://shortn/_nfg9oAldou.
     */
    ymylNewsScore?: number | null;
  }
  /**
   * Free form debug information from various components.
   */
  export interface Schema$PerDocDebugEvent {
    /**
     * depends on the source
     */
    Message?: string | null;
    /**
     * source tag, helps interpret value/message
     */
    Source?: string | null;
    /**
     * seconds since the epoch
     */
    Timestamp?: number | null;
    /**
     * depends on the source
     */
    Value?: string | null;
  }
  /**
   * A unique association of an AliasType and a number to identify this alias.
   */
  export interface Schema$PersonalizationMapsAliasAliasId {
    /**
     * A unique identifier for this alias, this identifier is unique to the type of this Alias. This means that aliases of different types can have the same sub_id, hence always use the full AliasId message to refer to an alias, not this field only. Because HOME and WORK aliases are unique, aliases of type HOME or WORK always have sub_id 0.
     */
    subId?: string | null;
    type?: string | null;
  }
  /**
   * A subset of an Alias that is stored on kansas max. It is used in Search for alias resolution and in Maps to show icons quickly on basetiles.
   */
  export interface Schema$PersonalizationMapsAliasIcon {
    /**
     * The id of the alias associated with this point. This is used to query for details for the info window and to display different icons depending on the AliasType contained in this message.
     */
    aliasId?: Schema$PersonalizationMapsAliasAliasId;
    /**
     * If this is a dropped pin alias, the leaf (level 30) S2 cell ID corresponding to the aliased lat/lng. Calculated once and stored here so that it can safely be used as an identifier across clients without risk of rounding differences leading to different values.
     */
    droppedPinS2cellId?: string | null;
    /**
     * The featureid that was associated with the alias when it was saved. If this is not set the lat/lng in 'point' is the aliased entity, i.e. this is a dropped pin alias.
     */
    featureId?: Schema$GeostoreFeatureIdProto;
    /**
     * For non-address feature aliases (e.g. businesses), the name of the feature (formatted from the FeatureProto) when it was saved.
     */
    featureName?: string | null;
    /**
     * The type of the feature associated with the alias.
     */
    featureType?: string | null;
    /**
     * One-line geocoded address that this lat/lng represents at the time this alias was created by the user.
     */
    formattedAddress?: string | null;
    /**
     * Free-text alias if alias type is NICKNAME. Otherwise unset. Limited to 40 characters.
     */
    nickname?: string | null;
    /**
     * lat/lng the icon is to be shown at.
     */
    point?: Schema$GeostorePointProto;
    /**
     * The id of the sticker asset chosen by the user to replace the default asset for the alias.
     */
    stickerId?: number | null;
    /**
     * If the feature associated with the alias has synthetic_geometry.
     */
    syntheticFeature?: boolean | null;
    /**
     * [INTERNAL ONLY] Last update of bigtable by kansas, in microseconds. Volatile only and not saved in kansas column. inmemory only because \>= 16.
     */
    timestamp?: string | null;
  }
  /**
   * Metadata related to LocalDiscoverySettings,e.g., dietary_restriction, cuisine and ingredient.
   */
  export interface Schema$PersonalizationSettingsApiProtoLocalDiscoveryLocalDiscoverySettingsMetadata {
    /**
     * Contexts regarding the preferences from OPA_RECIPES.
     */
    opaRecipesContext?: Schema$PersonalizationSettingsApiProtoLocalDiscoveryOpaRecipesContext;
    /**
     * The UI entry point from which the entity preference was set.
     */
    uiEntryPoint?: string | null;
  }
  /**
   * LINT.IfChange Contexts regarding the preferences from OPA_RECIPES. For example, users can click a recipes and say they don't like one cuisine. OpaRecipesContext will contain the doc_id/url of that recipes.
   */
  export interface Schema$PersonalizationSettingsApiProtoLocalDiscoveryOpaRecipesContext {
    /**
     * The recipe doc id where the setting comes from.
     */
    docId?: string | null;
    /**
     * The recipe url where the setting comes from.
     */
    url?: string | null;
  }
  export interface Schema$PhilPerDocData {
    /**
     * phil data , approx 70 bytes for top 500M
     */
    PhilString?: string | null;
    PhilVersion?: number | null;
  }
  export interface Schema$PhotosAnimationMetadata {
    /**
     * The duration of the animation or movie (not including any looping), in milliseconds. If there is only a single frame (and thus not animated), the duration will be 0.
     */
    durationMs?: string | null;
    /**
     * The number of times the animation plays. If 0, the animation will loop indefinitely. If positive, this number includes the initial playthrough. For example, a value of 3 means that each frame is shown 3 times.
     */
    loopCount?: number | null;
    numFrames?: string | null;
  }
  /**
   * Metadata pertaining to nested Dynamic Depth metadata. Currently this message is used to indicate the presence of dynamic depth.
   */
  export interface Schema$PhotosDynamicDepthMetadata {}
  export interface Schema$PhotosFourCMetadata {
    caption?: string | null;
    copyright?: string | null;
    creator?: string[] | null;
    credit?: string | null;
  }
  /**
   * Metadata in the GDepth XMP block. Note that GDepth::Data is not copied into this message.
   */
  export interface Schema$PhotosGDepthMetadata {
    /**
     * Depth map far plane distance.
     */
    far?: number | null;
    /**
     * Depth map format.
     */
    format?: string | null;
    /**
     * Depth map source image height.
     */
    imageHeight?: number | null;
    /**
     * Depth map source image width.
     */
    imageWidth?: number | null;
    /**
     * Depth map mime type.
     */
    mime?: string | null;
    /**
     * Depth map near plane distance.
     */
    near?: number | null;
    /**
     * Depth map units of distance.
     */
    units?: string | null;
  }
  /**
   * HDR Metadata describes in what way an image expresses high dynamic range information (e.g. using a gainmap or a specialized color space).
   */
  export interface Schema$PhotosHdrMetadata {
    /**
     * Indicates the presence of some kind of gainmap-utilizing format.
     */
    gainmap?: Schema$PhotosHdrMetadataGainmap;
  }
  /**
   * Details about gainmap-based HDR formats (e.g. go/ghdr). Notably, images can adhere to multiple gainmap specifications concurrently.
   */
  export interface Schema$PhotosHdrMetadataGainmap {
    /**
     * Indicates that this image can be processed as an Adobe HDR (FlexDR) image by reading the MPF segments.
     */
    adobeHdr?: boolean | null;
    /**
     * Indicates that this image can be processed as a go/ghdr (UltraHDR) image by reading the GContainer in the primary XMP block.
     */
    googleHdr?: boolean | null;
  }
  /**
   * Next tag value: 382.
   */
  export interface Schema$PhotosImageMetadata {
    actionadvised?: string | null;
    addlmodelinfo?: string | null;
    advisory?: string[] | null;
    altitude?: number | null;
    animationMetadata?: Schema$PhotosAnimationMetadata;
    aperturefnumber?: number | null;
    aperturevalue?: number | null;
    artworkorobject?: string[] | null;
    audioduration?: string | null;
    audiooutcue?: string | null;
    audiosamplingrate?: string | null;
    audiosamplingresolution?: string | null;
    audiotype?: string | null;
    author?: string | null;
    authorposition?: string | null;
    /**
     * Indicates whether auto-enhance has been applied to the image.
     */
    autoenhance?: boolean | null;
    baseurl?: string | null;
    /**
     * The number of bits per pixel used to express a color. Most images have 8-bit depth and Photos/thumbnailer currently do not support more than 8 bits (except RAW).
     */
    bitDepth?: number | null;
    /**
     * Start of reflected fields. These do not duplicate the above fields.
     */
    bitspersample?: number | null;
    brightnessvalue?: number | null;
    burstuuid?: string | null;
    cameraid?: string | null;
    /**
     * Exif camera make
     */
    cameramake?: string | null;
    /**
     * Exif camera model
     */
    cameramodel?: string | null;
    /**
     * Caption embedded in IPTC
     */
    caption?: string | null;
    captionwriter?: string | null;
    capturesoftware?: string | null;
    category?: string | null;
    ccdwidth?: number | null;
    celllength?: number | null;
    cellwidth?: number | null;
    certificate?: string | null;
    /**
     * A typed representation that translates the values from ycbcrsubsampling.
     */
    chromasubsampling?: string | null;
    ciadrcity?: string | null;
    ciadrctry?: string | null;
    ciadrextadr?: string[] | null;
    ciadrpcode?: string | null;
    ciadrregion?: string | null;
    ciemailwork?: string | null;
    citelwork?: string | null;
    city?: string | null;
    ciurlwork?: string | null;
    colormap?: number | null;
    /**
     * Indicates whether or not the source image had an embedded color profile.
     */
    colorprofile?: boolean | null;
    colorspace?: number | null;
    compressedbitsperpixel?: number | null;
    compressionlevel?: number | null;
    contact?: string | null;
    contentlocationcode?: string[] | null;
    contentlocationname?: string[] | null;
    contrast?: number | null;
    contributor?: string[] | null;
    copyrightnotice?: string | null;
    country?: string | null;
    countrycode?: string | null;
    coverage?: string | null;
    createdate?: string | null;
    credits?: string | null;
    croppedareaimageheightpixels?: number | null;
    croppedareaimagewidthpixels?: number | null;
    croppedarealeftpixels?: number | null;
    croppedareatoppixels?: number | null;
    customrendered?: number | null;
    cvterm?: string[] | null;
    date?: string | null;
    datecreated?: string | null;
    datesent?: string | null;
    datetime?: string | null;
    datetimedigitized?: string | null;
    /**
     * 0 = no daylight savings, 1 = daylight savings enabled. Note that this field only represents whether the setting in the camera was turned on or off. It must not be used to modify the timestamp of the photo. That is, the capture time is already completely determined by exif_time, timezoneoffset and timezoneminutes.
     */
    daylightsavings?: number[] | null;
    DEPRECATEDBlendingtype?: string | null;
    /**
     * This field was originally marked incorrectly as optional (rather than repeated). In order to fix it, the first field has been marked as deprecated and replaced with a field with a new name and tag number.
     */
    DEPRECATEDGpstimestamp?: number | null;
    DEPRECATEDIscolor?: number | null;
    DEPRECATEDLargestvalidinteriorrectheight?: number | null;
    DEPRECATEDLargestvalidinteriorrectleft?: number | null;
    DEPRECATEDLargestvalidinteriorrecttop?: number | null;
    DEPRECATEDLargestvalidinteriorrectwidth?: number | null;
    DEPRECATEDProcess?: number | null;
    destination?: string[] | null;
    /**
     * +/- 90 inclusive
     */
    destinationLatitude?: number | null;
    /**
     * +/- 180 inclusive
     */
    destinationLongitude?: number | null;
    digimageguid?: string | null;
    digitalsourcefiletype?: string | null;
    digitalsourcetype?: string | null;
    digitalzoomratio?: number | null;
    distance?: number | null;
    /**
     * DynamicDepth (go/dynamic-depth) metadata is described in the metadata of sub-images in the container. The presence of this field can be used to determine that an image is in the dynamic depth format.
     */
    dynamicDepthMetadata?: Schema$PhotosDynamicDepthMetadata;
    editorialupdate?: string | null;
    editstatus?: string | null;
    envelopenumber?: string | null;
    envelopepriority?: string | null;
    event?: string | null;
    /**
     * 4C metadata (caption, copyright, creator, credit) specific to each of the three metadata segments (EXIF, XMP, IPTC). These are used to keep separate the 4C data from each segment so that we can properly preserve the per-segment 4C data on write (when PreserveLevel is set appropriately).
     */
    exif4c?: Schema$PhotosFourCMetadata;
    /**
     * Timestamp embedded in the image. The value comes from the first valid date-time field extracted from the metadata in the order: 1) datecreated (ie. DateTimeOriginal) 2) datetimedigitized (ie. DateTimeDigitized) 3) datetime (ie. DateTime or last modified date) The type of this field is equivalent to a time_t (ie. number of seconds since the epoch - 00:00 hours, Jan 1, 1970) except that it is an int64 rather than an int.
     */
    exifTime?: string | null;
    /**
     * The exif_time_utc field is a UTC-based alternative to the exif_time field, which is in local time, rather than UTC. If they were not separate, clients would be unable to distinguish if the source were UTC- or local-based.
     */
    exifTimeUtc?: string | null;
    /**
     * The exif_time_utc_source indicates the source from which the exif_time_utc field is calculated.
     */
    exifTimeUtcSource?: string | null;
    expirationdate?: string | null;
    expirationtime?: string | null;
    exposurebias?: number | null;
    exposureindex?: number | null;
    exposurelockused?: boolean | null;
    exposuremode?: number | null;
    exposureprogram?: number | null;
    exposuretime?: number | null;
    extrasamples?: number | null;
    fillorder?: number | null;
    firmware?: string | null;
    firstphotodate?: string | null;
    fixtureidentifier?: string | null;
    flashcompensation?: number | null;
    flashenergy?: number | null;
    flashreturn?: number | null;
    flashused?: number | null;
    focallength?: number | null;
    focallengthin35mmfilm?: number | null;
    focalplaneunits?: number | null;
    focalplanexres?: number | null;
    format?: string | null;
    freebytecounts?: string | null;
    freeoffsets?: number | null;
    fullpanoheightpixels?: number | null;
    fullpanowidthpixels?: number | null;
    function?: boolean | null;
    gaincontrol?: number | null;
    gaudiomime?: string | null;
    /**
     * A unique String. The property should be present and identical for all images that make up a burst. It should be unique across devices (UUID recommended). Unlike GCreations:CameraBurstId, we should use images with this property to create auto collages and animations.
     */
    gcameraburstid?: string | null;
    /**
     * A value of 1 indicates that this was the primary (“best shot”) at capture time. Within Photos we should only treat this image as the best shot if the user hasn’t made an explicit choice. Defining the initial primary allows consistency between OEMs, Photos clients, and the Photos backend. This value is optional, cameras are not required to set it on any photo in a burst. Clients will default to the 0th frame, but may run an algorithm to pick a better default.
     */
    gcameraburstprimary?: number | null;
    /**
     * The possible values are: “Animation”, “Collage”, “Pano”, “Movies”. Photos will avoid creating the listed types using the containing image or video. The property is optional. The property can be included multiple times to disable creation of multiple different types.
     */
    gcameradisableautocreation?: string[] | null;
    /**
     * The following XMP metadata are used specifically for MicroVideo. More information about MicroVideo format can be found at go/photos-microvideo-format A value of 1 indicates that this file was a MicroVideo at capture time. Otherwise, this is not a MicroVideo (not set or 0).
     */
    gcameramicrovideo?: number | null;
    /**
     * The offset in bytes from the end of the file to the point where the appended mp4 begins (equivalent to the length of the compressed mp4). This field might be provided in the original MicroVideo from client, but it might become invalid when the image component is edited, so it is expected that the thumbnailer will validate it and find the correct value (by scanning through the JPEG) if it is invalid. In other words, only a valid offset should be returned by thumbnailer.
     */
    gcameramicrovideooffset?: number | null;
    /**
     * The presentation timestamp in microseconds of the video frame corresponding to the image still. Value may be -1 to denote unset/unspecified.
     */
    gcameramicrovideopresentationtimestampus?: number | null;
    /**
     * Indicates the file format version of the MicroVideo (initially 1).
     */
    gcameramicrovideoversion?: number | null;
    /**
     * An indication that this item should be treated as a Motion Photo. 0 -\> Not Motion Photo, 1 -\> Motion Photo, everything else is undefined per the spec. If it's a motion photo, the previous gcamera fields should be ignored.
     */
    gcameramotionphoto?: number | null;
    /**
     * The presentation timestamp in microseconds of the video frame corresponding to the image still. Value may be -1 to denote unset/unspecified.
     */
    gcameramotionphotopresentationtimestampus?: number | null;
    /**
     * Indicates the Motion Photo version of the spec (initially 1).
     */
    gcameramotionphotoversion?: number | null;
    /**
     * Camera creations metadata. The opaque id string created by the OEM. For bursts, this field should not be present. Instead, the two properties below will allow Photos to identify and provide special treatment for bursts.
     */
    gcameraspecialtypeid?: string | null;
    gcreationscameraburstid?: string | null;
    /**
     * String representation of creation type. Should be one of {"GCameraCollage", "GCameraAnimation", "GCameraGroupSmiles", "GPhotosCollage", "GPhotosAnimation"\}.
     */
    gcreationstype?: string | null;
    gdepthMetadata?: Schema$PhotosGDepthMetadata;
    gimagemime?: string | null;
    /**
     * This is in UTC time. Format is YYYY:mm:dd.
     */
    gpsdatestamp?: string | null;
    gpsdestbearing?: number | null;
    gpsdestbearingref?: string | null;
    gpsdestdistance?: number | null;
    gpsdestdistanceref?: string | null;
    gpsdestlatitude?: number | null;
    gpsdestlatituderef?: string | null;
    gpsdestlongitude?: number | null;
    gpsdestlongituderef?: string | null;
    gpsdifferential?: number | null;
    gpsdop?: number | null;
    gpsimgdirection?: number | null;
    gpsimgdirectionref?: string | null;
    gpsmapdatum?: string | null;
    gpsmeasuremode?: string | null;
    gpssatellites?: string | null;
    gpsspeed?: number | null;
    gpsspeedref?: string | null;
    gpsstatus?: string | null;
    /**
     * This is in UTC Time. Contains three floats: hour, minute and second. Supports subsecond resolution.
     */
    gpstime?: number[] | null;
    gpstrack?: number | null;
    gpstrackref?: string | null;
    grayresponsecurve?: number | null;
    grayresponseunit?: number | null;
    /**
     * The image has an alpha channel (potential transparency). If the image is decoded, this will be updated to indicate whether there is any active transparency. Formats supporting alpha: png, webp, gif, heif.
     */
    hasAlpha?: boolean | null;
    /**
     * Indicates that the image has some form of HDR present or available to it.
     */
    hdrMetadata?: Schema$PhotosHdrMetadata;
    headline?: string | null;
    height?: number | null;
    hostcomputer?: string | null;
    identifier?: string[] | null;
    imagenumber?: string | null;
    imageorientation?: string | null;
    imagetype?: string | null;
    initialhorizontalfovdegrees?: number | null;
    initialverticalfovdegrees?: number | null;
    initialviewheadingdegrees?: number | null;
    initialviewpitchdegrees?: number | null;
    initialviewrolldegrees?: number | null;
    instructions?: string | null;
    intellectualgenre?: string | null;
    interoperabilityindex?: string | null;
    iptc4c?: Schema$PhotosFourCMetadata;
    iptclastedited?: string | null;
    /**
     * The image is a Multi-Picture Object.
     */
    ismpformat?: boolean | null;
    isoequivalent?: number | null;
    keyword?: string[] | null;
    label?: string | null;
    language?: string[] | null;
    languageidentifier?: string | null;
    lastphotodate?: string | null;
    /**
     * GPS Info: +/- 90 inclusive
     */
    latitude?: number | null;
    lens?: string | null;
    lensid?: string | null;
    lensinfo?: string | null;
    lightsource?: number | null;
    location?: string | null;
    locationshown?: string[] | null;
    /**
     * +/- 180 inclusive
     */
    longitude?: number | null;
    marked?: boolean | null;
    maxaperturevalue?: number | null;
    maxavailheight?: number | null;
    maxavailwidth?: number | null;
    maxsamplevalue?: number | null;
    metadatadate?: string | null;
    meteringmode?: number | null;
    /**
     * This is similar to gcameramicrovideooffset, except it stores the unverified value that was provided in the motion photo file. This field is not part of the XMP or spec. It is used to ensure we preserve data from the original file when offset is modified.
     */
    microvideooriginaloffset?: number | null;
    /**
     * Mime type of image
     */
    mimeType?: number | null;
    minormodelagedisclosure?: string | null;
    minsamplevalue?: number | null;
    mode?: number | null;
    modelage?: number[] | null;
    modelreleaseid?: string[] | null;
    modelreleasestatus?: string | null;
    modifydate?: string | null;
    /**
     * The Motion Photo Video Data (MPVD) box header of a HEIF motion photo. It is used for reconstructing the original moton photo bytes. See go/photos-be-heic-motion-photos for more details.
     */
    motionphotovideodataboxheader?: string | null;
    nickname?: string | null;
    objectattributereference?: string[] | null;
    objectcycle?: string | null;
    objecttypereference?: string | null;
    offsettime?: string | null;
    offsettimedigitized?: string | null;
    offsettimeoriginal?: string | null;
    organisationinimagecode?: string[] | null;
    organisationinimagename?: string[] | null;
    /**
     * Exif camera orientation. "1" means "no rotation".
     */
    orientation?: number | null;
    originatingprogram?: string | null;
    owner?: string[] | null;
    ownername?: string | null;
    panoramaMetadata?: Schema$PhotosPanoramaMetadata;
    personinimage?: string[] | null;
    photometricinterpretation?: number | null;
    planarconfiguration?: number | null;
    poseheadingdegrees?: number | null;
    posepitchdegrees?: number | null;
    poserolldegrees?: number | null;
    primarychromaticities?: number | null;
    productid?: string[] | null;
    programversion?: string | null;
    projectiontype?: string | null;
    propertyreleaseid?: string[] | null;
    propertyreleasestatus?: string | null;
    publisher?: string[] | null;
    rating?: number | null;
    redeyemode?: boolean | null;
    referenceblackwhite?: number | null;
    referencedate?: string[] | null;
    referencenumber?: string[] | null;
    referenceservice?: string[] | null;
    relatedimagefileformat?: string | null;
    relatedimageheight?: string | null;
    relatedimagewidth?: string | null;
    relatedsoundfile?: string | null;
    relation?: string[] | null;
    releasedate?: string | null;
    releasetime?: string | null;
    resolutionunit?: number | null;
    /**
     * This field is deprecated. Rotation is now accomplished via ImageInfo.exif_orientation and ImageInfo.edit_list. WARNING: the presence of rotate is used by FIFE to identify older images. Setting this (even to the correct number of degrees) on newer images can cause incorrectly rotated thumbnails. This was the cause of omg/58543 Number of degrees (0, 90, 180, 270)
     */
    rotate?: number | null;
    rowsperstrip?: string | null;
    samplesperpixel?: number | null;
    saturation?: number | null;
    scene?: string[] | null;
    scenecapturetype?: number | null;
    sensingmethod?: number | null;
    sensorheight?: number | null;
    sensorwidth?: number | null;
    serialnumber?: string | null;
    serviceidentifier?: string | null;
    sharpness?: number | null;
    shutterspeedvalue?: number | null;
    software?: string | null;
    source?: string | null;
    sourcephotoscount?: number | null;
    spectralsensitivity?: string | null;
    state?: string | null;
    stitchingsoftware?: string | null;
    stripbytecounts?: string | null;
    stripoffsets?: string | null;
    subjectarea?: number | null;
    subjectcode?: string[] | null;
    subjectdistancerange?: number | null;
    subjectlocation?: number | null;
    subjectreference?: string[] | null;
    sublocation?: string | null;
    subsectime?: string | null;
    subsectimedigitized?: string | null;
    subsectimeoriginal?: string | null;
    supplementalcategory?: string[] | null;
    thresholding?: number | null;
    /**
     * The build CL for the version of thumbnailer that built this image.
     */
    thumbnailerBuildCl?: number | null;
    timesent?: string | null;
    /**
     * Remaining minutes of offset.
     */
    timezoneminutes?: number[] | null;
    /**
     * The elements in the timezone and daylight savings field arrays correspond to the following date/time fields: 0) datecreated (ie. DateTimeOriginal) 1) datetime (ie. DateTime or last modified date) 2) datetimedigitized (ie. DateTimeDigitized) If the field does not exist, then there is no valid time zone information for that date/time field. Offset in hours.
     */
    timezoneoffset?: number[] | null;
    title?: string | null;
    transmissionreference?: string | null;
    type?: string[] | null;
    /**
     * For unique hash:
     */
    uniqueid?: string | null;
    uno?: string | null;
    urgency?: string | null;
    url?: string | null;
    usageterms?: string | null;
    /**
     * GPano-related fields. A handful of these have been deprecated due to a change in the spec since its initial design.
     */
    usepanoramaviewer?: boolean | null;
    version?: string | null;
    webstatement?: string | null;
    whitebalance?: number | null;
    whitepoint?: number | null;
    /**
     * width and height are before any rotation (including EXIF orientation).
     */
    width?: number | null;
    xmp4c?: Schema$PhotosFourCMetadata;
    xresolution?: number | null;
    ycbcrcoefficients?: number | null;
    ycbcrpositioning?: number | null;
    ycbcrsubsampling?: number | null;
    yresolution?: number | null;
  }
  export interface Schema$PhotosPanoramaMetadata {
    sphericalPanorama?: boolean | null;
    /**
     * True if the image is a VR180 image. See go/3d180 for details.
     */
    vr180Panorama?: boolean | null;
  }
  /**
   * Bounding box coordinates are relative to the width and height of the image. For example, if image is 100x200 and NormalizedBoundingBox is , the bounding box coordinates will be (10, 40) to (50, 180). Note parts of the bounding box may fall outside the image.
   */
  export interface Schema$PhotosVisionGroundtruthdbNormalizedBoundingBox {
    xmax?: number | null;
    xmin?: number | null;
    ymax?: number | null;
    ymin?: number | null;
  }
  export interface Schema$PhotosVisionObjectrecFeatureVector {
    /**
     * For single precision floating point data
     */
    floatData?: number[] | null;
  }
  /**
   * The geo-location of a single point, or of the "center" of a group of points.
   */
  export interface Schema$PhotosVisionObjectrecGeoLocation {
    /**
     * Altitude of the point above the earth's surface, in meters.
     */
    altitudeMeters?: number | null;
    /**
     * Country code string.
     */
    countryCode?: string | null;
    /**
     * Indicates if the lat/lon above is assumed to come from a GPS device.
     */
    fromGps?: boolean | null;
    /**
     * Latitude in degrees north. Values south of the equator are negative.
     */
    lat?: number | null;
    /**
     * When applied to a single point, represents the estimated error bounds of manual geotagging. The estimate is based on size of the bounding box of the map used for manual geotagging. When applied to a group of points, the error bounds represent the dispersion around the group center (lat/lon above). The dispersion in this case is computed as half the interquartile range. Reference: http://en.wikipedia.org/wiki/Interquartile_range (lat +/- lat_error_bound, lng +/- lng_error_bound).
     */
    latErrorBound?: number | null;
    /**
     * Longitude in degrees east. Values west of 0 deg are negative.
     */
    lon?: number | null;
    lonErrorBound?: number | null;
  }
  /**
   * Global feature for the image.
   */
  export interface Schema$PhotosVisionObjectrecGlobalFeature {
    /**
     * Optional info provided by the feature extractor.
     */
    additionalInfo?: string | null;
    featureVector?: Schema$PhotosVisionObjectrecFeatureVector;
    quantizedFeatureVector?: Schema$PhotosVisionObjectrecQuantizedFeatureVector;
    /**
     * Tag for this global feature. E.g., "DELG", "SBv4" or "DELG_region1".
     */
    tag?: string | null;
    version?: string | null;
  }
  /**
   * ImageTemplate contains local and/or global features generated from one image. User-defined members can be set to any value within the constraints outlined below. Algorithms usually pass these through without evaluation, unless documented otherwise. Next id: 29
   */
  export interface Schema$PhotosVisionObjectrecImageTemplate {
    /**
     * Name of the author or image source. User-defined. Must be NULL-terminated.
     */
    authorName?: string | null;
    /**
     * Identifier for which corpus the image belongs to. Currently Cyclone uses this field in: - photos_vision_objectrec.SpatialMatcherRequest.residual_template to select which spatial matcher should be applied to the candidate matches - photos_vision_objectrec.CustomCorpusQuantizer to map a custom corpus to one or more posting lists
     */
    corpus?: string | null;
    /**
     * The geolocation of the image. Assumed to represent the location where the photo was taken from.
     */
    geoLocation?: Schema$PhotosVisionObjectrecGeoLocation;
    globalFeature?: Schema$PhotosVisionObjectrecGlobalFeature[];
    imageHeight?: number | null;
    /**
     * Unique identifier for the image used to compute this template.
     */
    imageId?: string | null;
    /**
     * URL or filename of the image used to compute this template. User-defined. Must contain only ASCII characters and be NULL-terminated.
     */
    imageUrl?: string | null;
    /**
     * Dimension of the image used to compute this template.
     */
    imageWidth?: number | null;
    info?: string | null;
    /**
     * Tags pertaining to this image. User-defined. Must be NULL-terminated.
     */
    objectInfo?: string[] | null;
    /**
     * Name of the object/scene depicted. User-defined. Must contain only ASCII characters and be NULL-terminated.
     */
    objectName?: string | null;
    /**
     * Opaque template data. May be used to pass through additional data from template sources to processing modules, that is not already covered by other members of this PB. It is the responsibility of processing modules to verify that the data is in a compatible format.
     */
    opaqueData?: string | null;
    /**
     * Region-of-interest: The bounding box of the object or scene depicted in the image.
     */
    roi?: Schema$PhotosVisionObjectrecROI;
    subset?: Schema$PhotosVisionObjectrecImageTemplateSubSet[];
    /**
     * Feature version.
     */
    version?: string | null;
  }
  /**
   * Each SubSet contains LocalDescriptors of a specific type. The type indicates which algorithm has been used to generate the descriptors. No enum is defined for the descriptor_type. For most applications it is sufficient to know if two descriptors are of the same or a different type, while ignoring the details of their generation. The descriptor type '0' is reserved and must not be used.
   */
  export interface Schema$PhotosVisionObjectrecImageTemplateSubSet {
    descriptor?: Schema$PhotosVisionObjectrecLocalDescriptor[];
    descriptorType?: number | null;
    /**
     * Used to indicate if the descriptor is binary or not. When decompressing feature this is useful to decide calling different decompression functions.
     */
    isBinaryDescriptor?: boolean | null;
    /**
     * Used to store the number of descriptors for statistical purposes, if the descriptors themselves are not stored.
     */
    numDescriptors?: number | null;
  }
  /**
   * LocalDescriptor holds interest point data and an optional local descriptor vector.
   */
  export interface Schema$PhotosVisionObjectrecLocalDescriptor {
    /**
     * Optional affine matrix. Supersedes scale and orientation if present. r' = affine_matrix.r + (x,y) defines an affine transform from the normalized image patch (in which the interest point is centered at the origin with scale 1) to the image. If the affine matrix is set, the following approximations are recommended: scale = sqrt(0.5 * (xx*xx + xy*xy + yx*yx + yy*yy)); orientation = atan2(yx - xy, xx + yy); If not present, the affine matrix can be computed from scale and orientation as: xx = scale * cos(orientation); xy = scale * -sin(orientation); yx = scale * sin(orientation); yy = scale * cos(orientation);
     */
    affineMatrix?: Schema$PhotosVisionObjectrecMatrix2D;
    data?: string | null;
    /**
     * data_factor and data represent the local descriptor vector in a compressed format, using only 8 bit per value. Each byte of the data string yields one component of the local descriptor by bit-casting it to an int8 and multiplying it by data_factor. Protocol buffers do not support int8 directly.
     */
    dataFactor?: number | null;
    /**
     * Unquantized feature vector (float).
     */
    featureVector?: Schema$PhotosVisionObjectrecFeatureVector;
    /**
     * Opaque descriptor data. May be used to pass through descriptor data from descriptor sources to processing modules, that is not already covered by data/data_factor and/or cannot be expressed as a vector of numbers. It is the responsibility of processing modules to verify that the data is in a compatible format.
     */
    opaqueData?: string | null;
    /**
     * Orientation is optional, as some interest point detectors don't compute it. The range of orientation is [-pi,pi).
     */
    orientation?: number | null;
    /**
     * Each interest point must have a characteristic scale \> 0.
     */
    scale?: number | null;
    /**
     * The strength or weight, indicating the relative significance of this point.
     */
    strength?: number | null;
    /**
     * The position in the image with sub-pixel accuracy. The center of the upper left pixel has coordinates (0.0, 0.0). Thus the range for x and y is (-0.5, width - 0.5) x (-0.5, height - 0.5).
     */
    x?: number | null;
    y?: number | null;
  }
  /**
   * A 2x2 float matrix.
   */
  export interface Schema$PhotosVisionObjectrecMatrix2D {
    xx?: number | null;
    xy?: number | null;
    yx?: number | null;
    yy?: number | null;
  }
  /**
   * Quantized/compressed feature vector (8 bit per value). Can be decoded by multiplying data_factor to each data byte.
   */
  export interface Schema$PhotosVisionObjectrecQuantizedFeatureVector {
    data?: string | null;
    dataFactor?: number | null;
  }
  /**
   * A region of interest in the image.
   */
  export interface Schema$PhotosVisionObjectrecROI {
    xMax?: number | null;
    xMin?: number | null;
    yMax?: number | null;
    yMin?: number | null;
  }
  /**
   * A protocol buffer to store the url, referer and porn flag for a url. and an optional image score. Next available tag id: 51.
   */
  export interface Schema$PornFlagData {
    /**
     * DebugInfo stores debug information from the overall classifier. This allows for instance to update counters related to blacklisting without running the full classifier again.
     */
    debugInfo?: Schema$ImagePornDebugInfo[];
    /**
     * Final offensive score based on image salient terms and image OCR vulgar and offensive scores.
     */
    finalOffensiveScore?: number | null;
    /**
     * Final violence score based on some image signals (brain pixel score, co-clicked images violence score, navboost queries score, etc.).
     */
    finalViolenceScore?: number | null;
    /**
     * A string that indicates the version of SafeSearch classifier used to compute final_violence_score.
     */
    finalViolenceScoreVersion?: string | null;
    /**
     * A proto that stores SafeSearch internal signals that are not exported to clients. SafeSearch team does not provide any guarantees about the presence or the semantics of these signals in the future.
     */
    internalSignals?: Schema$SafesearchInternalImageSignals;
    /**
     * number of faces
     */
    numberFaces?: number | null;
    /**
     * Information about image OCR text. For details see image/safesearch/content/public/ocr_annotation.proto.
     */
    ocrAnnotation?: Schema$ImageSafesearchContentOCRAnnotation;
    /**
     * Vulgar score of the text found by OCR in the image.
     */
    ocrVulgarScore?: number | null;
    /**
     * QuimbyCongas-based detection of offensive symbols in the image (currently swastika and Nazi yellow badge).
     */
    offensiveSymbolDetection?: Schema$ImageSafesearchContentOffensiveSymbolDetection;
    /**
     * Binary version of the PhotoDNA hash (144 bytes long). If not set (has_photodna_hash() == false) it means that it was not computed, if empty (has_photodna_hash() == true && photodna_hash() == "") it means that the computation failed (cannot be computed for images smaller than 50 x 50).
     */
    photodnaHash?: string | null;
    /**
     * This field is set to true when we are pretty confident that the image is porn (with higher precision than the img_porn_moderate restrict). In particular, it means that the image might be demoted for non-porn queries when SafeSearch is Off.
     */
    pornWithHighConfidence?: boolean | null;
    /**
     * QBST-based image offensive score, Navboost based
     */
    qbstOffensiveScore?: number | null;
    /**
     * QBST-based image spoof score, Navboost based, unrelated to the pixel-based score in PornAnnotation.
     */
    qbstSpoofScore?: number | null;
    /**
     * Query statistics from Navboost logs. For more details see classifier/porn/proto/image_porn_classifier_signals.proto.
     */
    queryStats?: Schema$ClassifierPornQueryStats;
    /**
     * Aggregated navboost query violence score.
     */
    queryTextViolenceScore?: number | null;
    /**
     * url of the referer page
     */
    referer?: string | null;
    /**
     * Information about referrers and their porn classification. For details see classifier/porn/proto/image_porn_classifier_signals.proto.
     */
    referrerCounts?: Schema$ClassifierPornReferrerCounts;
    /**
     * Starburst-based score predicting sexualization level of the image.
     */
    semanticSexualizationScore?: number | null;
    /**
     * url of the image
     */
    url?: string | null;
  }
  /**
   * Next free ID: 32
   */
  export interface Schema$PostalAddress {
    /**
     * These correspond to the "AddressLine" elements in xAL, which are used to hold unstructured text. This is an addendum to the structured values; when the address is formatted, the provided lines are prepended to the formatted version of the street component fields for Western countries, and appended for CJK countries. These lines are in display order. Formerly users of PostalAddress were discouraged from mixing address_line with structured address elements. Mixing is now encouraged if address_line has to be used at all.
     */
    addressLine?: string[] | null;
    /**
     * Top-level administrative subdivision of this country. Examples: US state, IT region, UK constituent nation, JP prefecture.
     */
    administrativeAreaName?: string | null;
    /**
     * Name corresponding to country code. Optional. This can usually be inferred from country_name_code.
     */
    countryName?: string | null;
    /**
     * xAL does not specify a scheme for country codes. We strongly recommend ISO 3166-1-alpha-2 (two letter codes, as used in DNS) if you use this field. (Use "GB", not "UK".)
     */
    countryNameCode?: string | null;
    /**
     * Dependent locality or sublocality. Used for UK dependent localities, or neighborhoods or boroughs in other locations. If trying to represent a UK double-dependent locality, include both the double-dependent locality and the dependent locality in this field, e.g. "Whaley, Langwith".
     */
    dependentLocalityName?: string | null;
    /**
     * Dependent thoroughfares are used to define UK-style dependent thoroughfares, and secondary streets in addresses in other locales, including intersections. Formatting is locale-dependent.
     */
    dependentThoroughfareName?: string | null;
    /**
     * NEW: The firm or organization. This goes at a finer granularity than address_lines in the address. Omit if not needed.
     */
    firmName?: string | null;
    /**
     * Required to support the suppression of country names from formatted results for addresses within geo-politically disputed areas. Note that we cannot achieve this by not setting the country, as this would prevent us from selecting a suitable formatting template. Addresses converted from Oyster, by the standard conversion libraries, will have this field set if the address lies within a geo-politically disputed area (ie, contained within features of type TYPE_DISPUTED_AREA) even if the disputed area itself is not a visible part of the formatted address. An example of a disputed area is "No Man's Land" near Jerusalem which has the flag FLAG_NEVER_DISPLAY set for all its names. See: go/disputed-areas-2014 for more information.
     */
    isDisputed?: boolean | null;
    /**
     * Language of the address. May affect address formatting for multi- lingual countries. Also allows storing multilingual location names as repeated PostalAddress. Not in xAL. Use language codes which are accepted by i18n_identifiers::LanguageCodeCoverter::FromOther(). Examples include "en" and "de-CH".
     */
    languageCode?: string | null;
    /**
     * Locality. This is something of a fuzzy term, but it generally refers to the city/town portion of an address. In regions of the world where localities are not well defined or do not fit into this structure well (for example, Japan), leave locality_name empty and use address_line. Examples: US city, IT comune, UK post town.
     */
    localityName?: string | null;
    /**
     * Despite the name, postal_code_number values are frequently alphanumeric. Examples: "94043", "SW1W", "SW1W 9TQ".
     */
    postalCodeNumber?: string | null;
    /**
     * Used for postal-code suffixes, such as the 4-digit extension of a US ZIP+4 code.
     */
    postalCodeNumberExtension?: string | null;
    /**
     * This corresponds to PostBoxNumber in xAL format. In xAL format, it's nested inside PostBox, which also contains a "Type" field to distinguish between PO Box, Private Bag etc. Current support in this proto is for PO Box only. Note that although this is modelled as a string, it should have the number only, with any necessary punctuation (such as "-"). For example, for "P.O. Box 123", this field would hold "123" - the template displaying this would prepend P.O. Box when formatting if necessary.
     */
    postBoxNumber?: string | null;
    /**
     * The "premise" is something like a house or building.
     */
    premiseName?: string | null;
    /**
     * NEW: The recipient. This goes at a finer granularity than address_lines in the address. Not present in xAL. Omit if not needed.
     */
    recipientName?: string | null;
    /**
     * This corresponds to the SortingCode sub-element of the xAL PostalServiceElements element. Use is very country-specific. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
     */
    sortingCode?: string | null;
    /**
     * Second-level administrative subdivision of this country. Examples: US county, IT province, UK county.
     */
    subAdministrativeAreaName?: string | null;
    /**
     * The "subpremise" is something like an apartment or suite. xAL offers more structured premise and subpremise values, but we don't.
     */
    subPremiseName?: string | null;
    /**
     * Name of thoroughfare. Intersections should be represented with this field or address_line. Examples: "Amphitheatre Parkway", "N Shoreline Blvd & Charleston Rd"
     */
    thoroughfareName?: string | null;
    /**
     * Thoroughfare numbers (street numbers) can be very complex indeed. xAL defines fancy structures like "ThoroughfareNumberRange" to represent the details, but we haven't included that yet. It is worth noting that this needs to be a string, not a number. Example: "1600"
     */
    thoroughfareNumber?: string | null;
  }
  /**
   * The restricts that are computed before building a Mustang index.
   */
  export interface Schema$PrecomputedRestricts {
    restricts?: string[] | null;
  }
  /**
   * Per-doc data for premium documents in the Google index.
   */
  export interface Schema$PremiumPerDocData {
    /**
     * type froogle/currency/currency.h
     */
    Currency?: number | null;
    /**
     * publishing date (seconds since 1970,
     */
    Date?: string | null;
    /**
     * entitlement data
     */
    Entitlement?: number[] | null;
    /**
     * True if a free document is archival in nature.
     */
    IsArchival?: boolean | null;
    /**
     * User is entitled to see the premium content for free.
     */
    IsEntitled?: boolean | null;
    /**
     * price * 100 if available
     */
    Price?: number | null;
    /**
     * negative values for prior dates) FP of the Premium publication name
     */
    Publication?: string | null;
  }
  /**
   * This is proto2's version of MessageSet.
   */
  export interface Schema$Proto2BridgeMessageSet {}
  /**
   * Available tags: 14+
   */
  export interface Schema$PseudoVideoData {
    /**
     * ASR model MPM version.
     */
    AsrModel?: string | null;
    /**
     * This should be the MustangDocId, we need to figure out how to generate a uint64 given the int64 we have in data_set
     */
    DocKey?: string | null;
    /**
     * Language of the recognizer used to generate transcript.
     */
    Lang?: string | null;
    /**
     * This is the videodocid associate to the http://video.google.com/videoplay?docid= NUMBER
     */
    MustangDocId?: string | null;
    s3Mode?: string | null;
    /**
     * S3 ASR model info.
     */
    s3ModelInfoLabel?: string | null;
    transcript?: Schema$PseudoVideoDataTranscript;
    /**
     * URL for document.
     */
    Url?: string | null;
  }
  /**
   * A time-coded transcription of the document's audio track.
   */
  export interface Schema$PseudoVideoDataTranscript {
    /**
     * The complete transcription text.
     */
    Text?: string | null;
    timestamp?: Schema$PseudoVideoDataTranscriptTimestamp[];
  }
  /**
   * Mapping of time/character correspondences. Used to map found snippets to the time and thumbnail nearest that snippet.
   */
  export interface Schema$PseudoVideoDataTranscriptTimestamp {
    CharOffset?: number | null;
    /**
     * quantized to values in range 0-127
     */
    Confidence?: number | null;
    TimeOffset?: number | null;
  }
  /**
   * PToken expresses policy-relevant properties of the data objects being processed and stored in Google's production systems. See go/ptoken to learn more. PTokens are intentionally opaque: go/ptokens-are-opaque. The following should be considered implementation details. Next ID: 9 LINT.IfChange INTERNAL: If both the Scalar and the Compound extensions are populated, we use the Compound and discard the Scalar. In principle, this should never happen.
   */
  export interface Schema$PtokenPToken {}
  /**
   * Information of the app to be annotated for the query. It contains the name of the app, the package name associated with it. It also contains the confidence associated with {app, package\} pair. This confidence is calculated from different signals like navboost, ranking etc. which later is used for ranking the apps for a particular query. The source of this app information is also indicated. This app info can either be from installed app (collected from device content) or from the fastmap. LINT.IfChange
   */
  export interface Schema$QualityActionsAppInfo {
    /**
     * The list of android intents that the app is capable of executing.
     */
    androidIntent?: string[] | null;
    /**
     * This is the string matched from the query.
     */
    appName?: string | null;
    /**
     * Category of this package.
     */
    category?: Schema$QualityActionsAppUnderstandingCategory;
    confidence?: number | null;
    /**
     * This is the display name of the app as shown below the app icon.
     */
    displayName?: string | null;
    /**
     * URL for the website associated with this app.
     */
    fallbackUrl?: string | null;
    /**
     * Note that the package_name could be empty for two reasons: - The AppInfo is annotated by device content. - The ngram exists in app name fastmap, but there are a lot of packages associated with it. e.g., there could be a lot of apps for app name "recipes app".
     */
    packageName?: string | null;
    /**
     * For the future source, use the field in source_data.source().
     */
    source?: string | null;
    sourceData?: Schema$QualityActionsAppInfoSourceData[];
  }
  /**
   * This deprecates the above: * confidence=3 * source=4 This allows us to merge AppInfo data per package_name.
   */
  export interface Schema$QualityActionsAppInfoSourceData {
    allowListSourceData?: Schema$QualityActionsAppInfoSourceDataAllowListSourceData;
    /**
     * Confidence from navboost.
     */
    confidence?: number | null;
    /**
     * Number of installs from marmot.
     */
    install?: string | null;
    isCategorical?: boolean | null;
    mediaProviderSourceData?: Schema$QualityActionsAppInfoSourceDataMediaProviderSourceData;
    source?: string | null;
    /**
     * Signals present when the source is TELEPORT.
     */
    teleportSourceData?: Schema$AssistantTeleportTeleportNicknameSignals;
  }
  /**
   * Additional signals when the source is ATV's allow list.
   */
  export interface Schema$QualityActionsAppInfoSourceDataAllowListSourceData {
    /**
     * Whether the app is in the pre-release stage and only available for testing.
     */
    preReleaseMode?: boolean | null;
    /**
     * Whether app compatibility is unknown. This field is needed for apps like apple tv that have different package names on different devices. Play Gateway Service (PGS) lookup is needed to validate that the app is available on the user's device. go/app-fulfillment-quality
     */
    unknownAppDeviceCompatibility?: boolean | null;
  }
  /**
   * The MEDIA_PROVIDER source can further specify information about the content served by the app.
   */
  export interface Schema$QualityActionsAppInfoSourceDataMediaProviderSourceData {
    /**
     * The unique provider key/enumeration string as used in KG. See also /base/mediaasset/provider/provider_enumerator.
     */
    providerKey?: string | null;
    /**
     * The type of content served by the App. See also chrome.dongle.pints.ProviderType.
     */
    providerType?: string | null;
  }
  /**
   * Category that this app falls into.
   */
  export interface Schema$QualityActionsAppUnderstandingCategory {
    category?: string | null;
    confidence?: number | null;
  }
  export interface Schema$QualityActionsCustomizedNotification {
    /**
     * Buttons on the notification
     */
    buttons?: Schema$QualityActionsCustomizedNotificationButton[];
    /**
     * Surface type for the notification
     */
    surfaceType?: string | null;
    /**
     * Tap action on the notification body. This overwrites the default tap action on reminder trigger notification (which on mobile, is the reminders hub page).
     */
    tapAction?: Schema$QualityActionsCustomizedNotificationPayload;
    /**
     * Notification text
     */
    text?: string | null;
  }
  export interface Schema$QualityActionsCustomizedNotificationButton {
    /**
     * REQUIRED. text for the button label
     */
    label?: string | null;
    /**
     * REQUIRED. tap action for the button
     */
    tapAction?: Schema$QualityActionsCustomizedNotificationPayload;
  }
  export interface Schema$QualityActionsCustomizedNotificationPayload {
    /**
     * Currently for payload we only support raw string url. More structured options may be added in the future
     */
    url?: string | null;
  }
  /**
   * Aqua annotation data for news provider. This proto is added as an extension to NimbleAnnotationData.semantics_proto for nimble annotation.
   */
  export interface Schema$QualityActionsNewsProviderAnnotationData {
    providers?: Schema$QualityActionsNewsProviderAnnotationDataProvider[];
  }
  /**
   * NextId: 6
   */
  export interface Schema$QualityActionsNewsProviderAnnotationDataProvider {
    /**
     * List of supported locales for this provider. Must follow the format from go/iii, e.g.: 'en', 'en-US', 'en-GB', etc. Short forms without regions codes, such as, 'en' match all possible regions: en-US, en-GB, en-IN, etc.
     */
    locales?: string[] | null;
    /**
     * The official name of the provider. Used in TTS and should be localized.
     */
    officialName?: string | null;
    /**
     * TTS hint for the pronunciation of the name. Should be left blank unless TTS performs poorly on official_name. Example: Without hinting, TTS mispronounces "The Daily 202" as "the daily two hundred and two". Feeding tts the string "the daily two oh two" produces correct TTS.
     */
    officialNamePronunciation?: string | null;
    /**
     * The provider id used for news source URL lookup in Kansas. See b/27250779 for details.
     */
    providerId?: number | null;
    /**
     * A score of how confident the annotated span is a news provider. For example, a high score is assigned for span "bbc news", but a low score for span "bbc", which only triggers narrative news aqua parse for a query with explicit news intent, e.g [play news from bbc].
     */
    score?: number | null;
  }
  /**
   * Next id: 33
   */
  export interface Schema$QualityActionsReminder {
    /**
     * OPTIONAL. True if the reminder is archived. Not present implies false.
     */
    archived?: boolean | null;
    /**
     * OPTIONAL. The time when this reminder is archived. Deprecated. Use `archived_timestamp` instead.
     */
    archivedTime?: Schema$AssistantApiDateTime;
    /**
     * OPTIONAL. When the reminder was completed (only present when archived == true). Maps to apps_intelligence.dialog.Task's complete_time field.
     */
    archivedTimestamp?: string | null;
    /**
     * REQUIRED. async_interaction_type of the reminder trigger notification
     */
    asyncInteractionType?: string | null;
    /**
     * OPTIONAL. Attachments associated with this Reminder. If the attachment has different behavior on different surfaces (e.g., deeplinks), specify multiple attachments here, and specify the surface types and links in the inner fields. There should be at most one attachment for each surface.
     */
    attachment?: Schema$AssistantRemindersAttachment[];
    /**
     * OPTIONAL. Populated only for assignable reminders (E.g. "buy milk"). It will be used in the post-execution card-rendering. If not poulated, i.e. in non-assignable mode, caller should fallback to use $title.
     */
    bareTitle?: string | null;
    /**
     * OPTIONAL. The reminders "client" id. This ID uniquely identifies a reminder instance and may be generated by any client that writes to our Reminder backend.
     */
    clientId?: string | null;
    /**
     * REQUIRED. The type of this attachment. This is used for frontends (e.g., Hubpage) to customize UX. And also for customized VE logging.
     */
    clientType?: Schema$QualityDialogManagerReminderClientType;
    /**
     * OPTIONAL. The create time of this reminder. This field is propagated only for the reminders fetched from backend.
     */
    createTime?: Schema$AssistantApiDateTime;
    /**
     * OPTIONAL. The create time of this reminder. This field is propagated only only for the reminders fetched from backend.
     */
    createTimestamp?: string | null;
    /**
     * OPTIONAL. Creator of a reminder (owned by the current user). Used in shared reminder RUD operations.
     */
    creator?: Schema$QualityActionsReminderPerson;
    /**
     * OPTIONAL. Contains fields needed to build the customized notification card
     */
    customizedNotificationCard?: Schema$QualityActionsCustomizedNotification[];
    /**
     * A representation of the Gregorian calendar date and timezone-relative time a reminder is scheduled for. This contains the date and time of either a single reminder or the upcoming instance of a recurring reminder.
     */
    datetime?: Schema$AssistantApiDateTime;
    /**
     * OPTIONAL. Full-length description of the reminder.
     */
    description?: string | null;
    documentAssignmentSource?: Schema$QualityActionsReminderDocument;
    dynamiteGroupAssignmentSource?: Schema$QualityActionsReminderDynamiteGroup;
    /**
     * OPTIONAL. Device ID for home notification which should have loud notification. See go/device-id-storage-in-tasks
     */
    extraNotificationDeviceId?: string | null;
    /**
     * DEPRECATED. Use `client_id` or `server_id` instead.
     */
    id?: string | null;
    location?: Schema$QualityActionsReminderLocation;
    /**
     * OPTIONAL. Associated logs to be plumbed through along with a reminder.
     */
    log?: Schema$AssistantLogsReminderLog;
    /**
     * OPTIONAL. Memory record payload which is associated with this reminder. This will be set for all Assistant reminders created after the first launch of the Reminder Memory integration, see go/reminders-memory for more details. Also, this might apply to all other types of reminders.
     */
    memoryPayload?: Schema$AssistantRemindersMemoryPayload;
    /**
     * OPTIONAL. True if the reminder is notifying on the device that is making the request to the server.
     */
    notifying?: boolean | null;
    /**
     * OPTIONAL. Populated if the reminder is based off of a personal reference, e.g. [my hotel] when the user has a hotel reservation. Contains the information needed for suggestion chip attribution, e.g. a link back to the email reservation.
     */
    personalReferenceMetadata?: Schema$CopleySourceTypeList;
    /**
     * OPTIONAL. Recipient of a reminder (created by the current user). Used for shared reminder CRUD operations.
     */
    recipient?: Schema$QualityActionsReminderPerson;
    recurrence?: Schema$QualityActionsReminderRecurrenceInfo;
    /**
     * OPTIONAL. The reminders backend "server" id. Only filled in some scenarios, e.g. to generate the reminders hubpage detailed-reminder view.
     */
    serverId?: string | null;
    symbolicTime?: string | null;
    /**
     * REQUIRED. The main textual representation of the reminder with the final title. For assignable reminders, this would be e.g. "From John: buy milk".
     */
    title?: string | null;
    /**
     * OPTIONAL. The last updated time of this reminder. This field is propagated only for the reminders fetched from ARIS (go/aris-dd).
     */
    updateTimestamp?: string | null;
  }
  /**
   * Message representing a Document (i.e. Google Docs, Sheets, Slides) This is currently only used to indicate the existence of said document and can be later extended to include more document information as needed.
   */
  export interface Schema$QualityActionsReminderDocument {}
  /**
   * Message representing a Dynamite Group (AKA Google Chat space) This is currently only used to indicate the existence of said group and can be later extended to include more group information as needed.
   */
  export interface Schema$QualityActionsReminderDynamiteGroup {}
  /**
   * A representation of reminder-triggering locations. They may be specific, resolved locations, non-specific location groups, or personal aliases. Next id: 12
   */
  export interface Schema$QualityActionsReminderLocation {
    categoryInfo?: Schema$QualityActionsReminderLocationCategoryInfo;
    chainInfo?: Schema$QualityActionsReminderLocationChainInfo;
    /**
     * Optional additional information about the types of the custom location. This field is not stored in backend, and is only used to plumb NLP information to fulfillment UI.
     */
    customLocationType?: string | null;
    /**
     * An address string that is suitable for displaying to the user in an application interface. It can be detailed, or brief. e.g. "80 Absolute Ave, Unit 1708, Mississauga, ON" e.g. "151 Charles Street West"
     */
    displayAddress?: string | null;
    /**
     * Filled if location_type is CUSTOM and this is a resolved instance of a business (not for specific address locations).
     */
    geoFeatureId?: Schema$GeostoreFeatureIdProto;
    lat?: number | null;
    lng?: number | null;
    locationType?: string | null;
    /**
     * Descriptive name, e.g. "43rd st new york", a user-edited place name (e.g. "Gym"), or a reverse geocoded business name. This can be any string.
     */
    name?: string | null;
    /**
     * Deprecated in favor of Reminder.personal_reference_metadata.
     */
    personalLocationMetadata?: Schema$CopleySourceTypeList;
    /**
     * A localized, shortened version of the address, suitable for TTS. This originates in the LocationFrame.
     */
    ttsAddress?: string | null;
  }
  /**
   * If LocationType is CATEGORICAL, this is info about the category. For example, the category "Grocery Stores" includes chains such as Safeway and Whole Foods.
   */
  export interface Schema$QualityActionsReminderLocationCategoryInfo {
    /**
     * A (localized) display string describing the category. This is s generic string describing the category, and may be different than the term the user actually said, e.g. name: "supermarket", display_name: "Grocery Stores"
     */
    displayName?: string | null;
    locationCategory?: string | null;
  }
  /**
   * If LocationType is CHAIN, this is info about the chain.
   */
  export interface Schema$QualityActionsReminderLocationChainInfo {
    /**
     * The freebase mid of the chain entity.
     */
    chainMid?: string | null;
    /**
     * The geostore.NameProto.text (corresponding to the user's language) at the time of reminder creation. In most cases, this is the same as name, but there may be corner cases where they differ, e.g. name: "bestbuy", chain_name: "Best Buy".
     */
    chainName?: string | null;
    /**
     * The (corporate entity) chain's MapFacts feature id.
     */
    featureId?: Schema$GeostoreFeatureIdProto;
  }
  /**
   * A representation of a person other than the current user, who may have created the reminder for the current user, or will receive it from them.
   */
  export interface Schema$QualityActionsReminderPerson {
    /**
     * REQUIRED. Their full name, which will be shown/spoken when referring to this person informally, e.g. "You have 2 reminders from Dave Smith."
     */
    displayName?: string | null;
    /**
     * OPTIONAL. Their email address.
     */
    emailAddress?: string | null;
    /**
     * REQUIRED. Their gaia id (used by the backend for CRUD operations).
     */
    gaiaId?: string | null;
    /**
     * REQUIRED. Their given name, which will be shown/spoken when referring to this person informally, e.g. "You have 2 reminders from Dave."
     */
    givenName?: string | null;
    /**
     * OPTIONAL. The URL of the photo. This field is read from photo field from go/people-api. Also see go/khdgk for URL formats. This field might be missing if user does not have photo URL available.
     */
    photoUrl?: string | null;
  }
  /**
   * Recurrence rule for specifying time-based repeating reminders.
   */
  export interface Schema$QualityActionsReminderRecurrenceInfo {
    /**
     * OPTIONAL. Client-assigned-id for the recurring reminder
     */
    clientId?: string | null;
    /**
     * The recurrence pattern.
     */
    recurrence?: Schema$AssistantApiRecurrence;
    /**
     * An id which uniquely identifies a recurrence series.
     */
    recurrenceId?: string | null;
    /**
     * REQUIRED. Server-assigned-id for the recurring reminder
     */
    serverId?: string | null;
  }
  /**
   * Ringtone information used for the notification of timer and alarm.
   */
  export interface Schema$QualityActionsRingtone {
    /**
     * The delay between each two sounds.
     */
    pauseDuration?: Schema$AssistantApiDuration;
    /**
     * The sound urls will be used to play.
     */
    soundUrl?: string[] | null;
  }
  /**
   * The room in which an alarm or timer resides
   */
  export interface Schema$QualityActionsRoom {
    homegraphId?: string | null;
    name?: string | null;
  }
  /**
   * Conceptually, timers are clocks that count down from an initial duration and notify when they reach 0. In practice, as a timer is running, it holds a stable expiration time and computes the remaining duration using the current time. When a timer is paused, it holds a stable remaining duration.
   */
  export interface Schema$QualityActionsTimer {
    /**
     * The time when this timer was created
     */
    creationTime?: Schema$AssistantApiTimestamp;
    /**
     * Identifies the device this timer belongs to.
     */
    device?: Schema$AssistantApiSettingsDeviceSettings;
    /**
     * When not paused: the time the timer is (or was) scheduled to expire, in milliseconds since the Unix epoch. This should be deprecated and replaced by the expire_timer_time with DateTime type once DateTime proto includes unix timestamp (b/63636831).
     */
    expireTime?: string | null;
    /**
     * This is currently being only used only for the response generation when the user describe the expired datatime as a search constraint. We will used it for everything else once that for filtering once DateTime proto includes unix timestamp (b/63636831) and expire_time is deprecated.
     */
    expireTimerTime?: Schema$NlpSemanticParsingDatetimeDateTime;
    /**
     * A string key used as an identifier to this timer, unique for a given Provider.
     */
    id?: string | null;
    /**
     * The label, provided by a user, associated with this timer.
     */
    label?: string | null;
    /**
     * The time when this timer was last updated (creation, paused, resumed, etc.)
     */
    lastUpdated?: Schema$AssistantApiTimestamp;
    /**
     * The duration of the timer when it was started, in milliseconds.
     */
    originalDuration?: string | null;
    /**
     * The duration set for the timer. The DateTimeModifier field is ignored. This field is currently only experimental until we switch the Dialog code and gramnar to the new format.
     */
    originalTimerDuration?: Schema$NlpSemanticParsingDatetimeDuration;
    /**
     * The provider that owns this alarm. For Android, this includes the app that owns this alarm, where an intent should be sent to modify it.
     */
    provider?: Schema$AssistantApiCoreTypesProvider;
    /**
     * When PAUSED: the remaining duration in milliseconds.
     */
    remainingDuration?: string | null;
    /**
     * The duration remained for the timer. This is needed because there is no expiration date for paused timer. The DateTimeModifier field is ignored. This field is currently only experimental until we switch the Dialog code and gramnar to the new format.
     */
    remainingTimerDuration?: Schema$NlpSemanticParsingDatetimeDuration;
    /**
     * The ringtone will be played when the timer fires, it will replace the beep sound if it is not empty.
     */
    ringtone?: Schema$QualityActionsRingtone;
    /**
     * Ringtone Task Metadata information used to generate sound for firing the timer.
     */
    ringtoneTaskMetadata?: Schema$AssistantApiCoreTypesGovernedRingtoneTaskMetadata;
    /**
     * Contains info about the room the timer is in
     */
    room?: Schema$QualityActionsRoom;
    /**
     * The current status of the timer.
     */
    status?: string | null;
    /**
     * Whether or not the device will vibrate when the timer fires.
     */
    vibrate?: boolean | null;
  }
  /**
   * Proto populated into shards and copied to superroot. Message storing a versioned TopicEmbeddings scores. This is copied from TopicEmbeddings in docjoins.
   */
  export interface Schema$QualityAuthorityTopicEmbeddingsVersionedItem {
    pageEmbedding?: string | null;
    /**
     * Compressed site/page embeddings.
     */
    siteEmbedding?: string | null;
    /**
     * Number denoting how much a site is focused on one topic.
     */
    siteFocusScore?: number | null;
    /**
     * The measure of how far page_embeddings deviate from the site_embedding.
     */
    siteRadius?: number | null;
    versionId?: number | null;
  }
  export interface Schema$QualityCalypsoAppsLink {
    applicationId?: string[] | null;
  }
  /**
   * Contains the needed information for serving a single LiveOp/LiveEvent on AU. Next ID: 9
   */
  export interface Schema$QualityCalypsoAppsUniversalAuLiveOpDetail {
    /**
     * Key is country, and value is the schedule information in that country.
     */
    countryLevelScheduleInformation?: {
      [key: string]: Schema$QualityCalypsoAppsUniversalAuLiveOpEvent;
    } | null;
    /**
     * Fallback option for the LiveOp format. We will try en-US -\> en -\> any locale and get the first one that is available.
     */
    defaultFormatInformation?: Schema$QualityCalypsoAppsUniversalAuLiveOpFormat;
    /**
     * Fallback option for the LiveOp event scheduling information. Will use earliest start time and last end time from PDC LiveOps data dump.
     */
    defaultScheduleInformation?: Schema$QualityCalypsoAppsUniversalAuLiveOpEvent;
    /**
     * android
     */
    eventId?: string | null;
    /**
     * [REQUIRED] type of live op event.
     */
    eventType?: string | null;
    /**
     * ios
     */
    eventUrl?: string | null;
    /**
     * Key is locale, and value is the format information for that locale.
     */
    localeLevelFormatInformation?: {
      [key: string]: Schema$QualityCalypsoAppsUniversalAuLiveOpFormat;
    } | null;
    priority?: string | null;
  }
  /**
   * Contains the schedule for a single live-op event. Next ID: 4
   */
  export interface Schema$QualityCalypsoAppsUniversalAuLiveOpEvent {
    /**
     * [REQUIRED] End time in UTC for the live-op event.
     */
    endTimestampMillis?: string | null;
    /**
     * If specified, a live-op event must be shown only after this preview-time (in UTC). Otherwise, the event can be shown at any time as long as its before the end time.
     */
    previewTimestampMillis?: string | null;
    /**
     * [REQUIRED] Start time in UTC for the live-op event.
     */
    startTimestampMillis?: string | null;
  }
  /**
   * Contains the format information for a single LiveOp/LiveEvent. Next ID: 11
   */
  export interface Schema$QualityCalypsoAppsUniversalAuLiveOpFormat {
    deeplink?: string | null;
    description?: string | null;
    /**
     * iOS only, kind of event type
     */
    eyebrow?: string | null;
    imageUrl?: string | null;
    originalImageUrl?: string | null;
    squareImageUrl?: string | null;
    /**
     * iOS only, sort of start schedule
     */
    status?: string | null;
    title?: string | null;
    videoId?: string | null;
    videoUrl?: string | null;
  }
  /**
   * Stores all possible LiveOps/LiveEvents that are eligible to be shown for an app.
   */
  export interface Schema$QualityCalypsoAppsUniversalAuLiveOpsDetailInfo {
    liveOpEvents?: Schema$QualityCalypsoAppsUniversalAuLiveOpDetail[];
    packageName?: string | null;
  }
  export interface Schema$QualityCalypsoAppsUniversalImage {
    fifeUrl?: string | null;
    height?: number | null;
    width?: number | null;
  }
  export interface Schema$QualityCalypsoAppsUniversalImageData {
    /**
     * iOS cover image, which includes the uni image from UAM only.
     */
    enhancedImage?: Schema$QualityCalypsoAppsUniversalImage;
    /**
     * aka. promotional image / cover image.
     */
    featureGraphic?: Schema$QualityCalypsoAppsUniversalImage;
    screenshot?: Schema$QualityCalypsoAppsUniversalImage[];
  }
  /**
   * Proto message containing site-level signal for search stack. Because firefly_stats.proto depends on "//segindexer:compositedoc_proto", we cannot make perdocdata contain it.
   */
  export interface Schema$QualityCopiaFireflySiteSignal {
    dailyClicks?: string | null;
    dailyGoodClicks?: string | null;
    dataTimeSec?: string | null;
    firstBoostedTimeSec?: string | null;
    impressionsInBoostedPeriod?: string | null;
    latestBylineDateSec?: string | null;
    latestFirstseenSec?: string | null;
    numOfArticles8?: string | null;
    /**
     * number of articles (lattice article score is 0.8 or more) sliced by 30 days (num_of_articles_by_periods[0] is the newest).
     */
    numOfArticlesByPeriods?: string[] | null;
    numOfGamblingPages?: string | null;
    numOfUrls?: string | null;
    /**
     * number of urls sliced by 30 days (num_of_urls_by_periods[0] is the newest).
     */
    numOfUrlsByPeriods?: string[] | null;
    recentImpForQuotaSystem?: string | null;
    /**
     * Hash value of the site. This will be used by our experiment and analysis.
     */
    siteFp?: string | null;
    totalImpressions?: string | null;
  }
  /**
   * Various external IDs that we may have for a given LocalResult. These IDs can map to the corresponding result in other Google systems (KnowledgeGraph) or in third-party systems (OpenTable).
   */
  export interface Schema$QualityDialogManagerExternalIds {
    /**
     * This field tells us whether this LocalResult supports any of the services that Blue Ginger offers.
     */
    blueGingerSupportedServices?: Schema$BlueGingerClientVisibleProtoBlueGingerSupportedServices;
    knowledgeGraphMid?: string | null;
    /**
     * Google-internal actions supported by go/madden for this LocalResult.
     */
    maddenSupportedActions?: Schema$GeoOndemandAssistantSupportedActions;
    openTableRestaurantId?: string | null;
  }
  export interface Schema$QualityDialogManagerLocalIntentOptions {
    /**
     * LINT.ThenChange( //depot/google3/googledata/nlp/generation/messages/assistant/\ dialog_LOCAL_LocalAssistantSchema/\ dialog.LOCAL.LocalAssistantSchema_zxx.genx.textpb, //depot/google3/quality/dialog_manager/verticals/local/assistant/\ suggestion_chip_util.cc)
     */
    intent?: string[] | null;
  }
  /**
   * A generic representation of a local result returned by a local backend. Next ID: 33
   */
  export interface Schema$QualityDialogManagerLocalResult {
    /**
     * This field can represent different areas depending on the country. For example in the US it is state but in Canada it would be a province.
     */
    adminArea1?: string | null;
    /**
     * The set of available intents changes with result. An intersection of available_intents and allowed_intents (See: local_config.proto), is shown to the user.
     */
    availableIntents?: Schema$QualityDialogManagerLocalIntentOptions;
    /**
     * Bitset of business types this result falls into. Many fields in this message may be unset - expect good coverage for restaurants and hotels for now, but not for other verticals.
     */
    businessType?: Schema$NlpSemanticParsingLocalBusinessType;
    country?: string | null;
    /**
     * The two-letter ISO 3166-1 country code of this result. Generated by FindFeatureCountryCode http://google3/geostore/base/public/country.h?l=39&rcl=154898119 so it should always be populated, but technically there is no guarantee.
     */
    countryCode?: string | null;
    /**
     * For a directions result, this field will be the distance from the origin to this result using the best measure we have available - the distance along a route, if we have one, or just the crow's flight distance. For a local result, this field will be the crow's flight distance from the user to the result.
     */
    distanceMeters?: string | null;
    /**
     * The standard units of the location where the user is based (not their current location). For example, miles for a user from the US, kilometers for the UK. A US user currently in the UK should have units read in miles.
     */
    distanceUnits?: string | null;
    /**
     * Various external IDs that we may have for this result.
     */
    externalIds?: Schema$QualityDialogManagerExternalIds;
    featureType?: string | null;
    /**
     * Internal Food ordering action (i.e food ordering via Google) metadata.
     */
    internalFoodOrderingMetadata?: Schema$LocalsearchProtoInternalFoodOrderingActionMetadata;
    /**
     * If true, this LocalResult is located in the same state as the user's location.
     */
    inUserAdminArea1?: boolean | null;
    /**
     * If true, this LocalResult is located in the same country as the user's location.
     */
    inUserCountry?: boolean | null;
    /**
     * Whether this result is in the same city or town that the user is in.
     */
    inUserLocality?: boolean | null;
    /**
     * If the original query had a chain intent, and this result is for a business chain.
     */
    isBusinessChain?: boolean | null;
    /**
     * City/Town.
     */
    locality?: string | null;
    /**
     * The name of the result, extracted from its FeatureProto's name field.
     */
    name?: string | null;
    /**
     * Neighborhood within a city. This field is not likely to be set for towns or smaller cities.
     */
    neighborhood?: string | null;
    /**
     * All info we will need to lookup this result in search.
     */
    resultId?: Schema$NlpSemanticParsingLocalLocalResultId;
    streetName?: string | null;
    streetNumber?: string | null;
    /**
     * A list of text synonyms the user could use to refer to the result.
     */
    synonym?: string[] | null;
    /**
     * The address of this result formatted for TTS output. This formatting removes acronyms like 2-letter state codes as they cannot be spoken well.
     */
    ttsAddress?: string | null;
  }
  /**
   * Define Reminder Client Type. This field is for the purposes of 1) UX Customization: Reminder frontends can be configured to have a slightly different UX (e.g., A customized button on Hubpage. A customized notification layout.) 2) Metrics: Client can count how many Reminders with a certain client type are retrieved/mutated. (e.g., VEIDs in go/oparaw.) 3) Index: ListReminder can list all Reminders with a certain client type. 4) Visibility control: some frontends (identified by provenance type, shortn/_xVC9nY2Eb8) only have access to a subset of client types.
   */
  export interface Schema$QualityDialogManagerReminderClientType {
    type?: string | null;
  }
  /**
   * Set of per-document markup restrictions based on go/eucd-indexing-design. Used for EUCD and global preview compliance. Next ID: 17
   */
  export interface Schema$QualityDniDocPreviewRestrictions {
    /**
     * Publish date set by webmaster. See detailed description here: http://shortn/_1eC0zzjR7k. Note that this will currently only be set for canonical documents where byline date could be extracted.
     */
    bylineDateSecs?: string | null;
    /**
     * The time that the info in this attachment was computed during crawl, in microseconds.
     */
    crawlTsUsec?: string | null;
    /**
     * Whether this document comes from a domain that is affected by Extended News Previews (ENP) and its status (approved/rejected).
     */
    extendedNewsPreviewsDomain?: Schema$QualityDniExtendedNewsPreviews;
    /**
     * Whether the favicon for a given domain should be displayed. FAVICON_DISPLAY_UNSPECIFIED - Display the favicon DISABLE_FAVICON - the favicon should not be rendered by the feature
     */
    faviconDisplay?: string | null;
    /**
     * Firstseen date populated by indexing. It works as fallback to byline_date if it doesn't exist. Note that this will currently only be set for canonical documents where firstseen date could be populated.
     */
    firstseenDateSecs?: number | null;
    /**
     * Only be true when the page itself is an AMP page. For paired AMP, the canonical page will have this bit as false.
     */
    isAmp?: boolean | null;
    isEucdDomain?: boolean | null;
    /**
     * The max number of snippet characters allowed. Based on document markup. No limit if value is less than 0, Google could use any length of snippets. Default value 0 is the strictest restriction, to avoid violating mistakenly If not set, there is no snippet length policy to enforce. Features must first check has_max_snippet_length to avoid applying an overly strict policy.
     */
    maxSnippetLength?: number | null;
    /**
     * Same as the max_snippet_length, max_thumbnail_size, max_video_preview_secs listed above. But values are based on publisher's preferences from Search Console's robots meta tag tool.
     */
    maxSnippetLengthFromPublisher?: number | null;
    maxSnippetLengthPublisherDefault?: number | null;
    /**
     * The max thumbnail size allowed. Based on document markup Default value NONE is the strictest restriction, to avoid violating mistakenly. If not set, there is no thumbnail policy to enforce.
     */
    maxThumbnailSize?: string | null;
    maxThumbnailSizeFromPublisher?: string | null;
    maxThumbnailSizePublisherDefault?: number | null;
    /**
     * The max seconds of video preview allowed. Based on document markup. No limit if value is less than 0, Google could show any seconds of video. Default value 0 is the strictest restriction, to avoid violating mistakenly If not set, there is no preview length policy to enforce. Features must first check has_max_video_preview_secs to avoid applying an overly strict policy.
     */
    maxVideoPreviewSecs?: number | null;
    maxVideoPreviewSecsFromPublisher?: number | null;
    maxVideoPreviewSecsPublisherDefault?: number | null;
  }
  /**
   * When making changes to this proto, make sure to run: blaze test commerce/datastore/tools/codegen:code_generator_test blaze run commerce/datastore/tools/codegen:code_generator See http://go/cds-schema-council for details. LINT.IfChange
   */
  export interface Schema$QualityDniExtendedNewsPreviews {
    /**
     * List of countries that desnippet the publisher. ISO 3166-1-alpha-2 country code (such as FR). See go/iiuse#region-identifiers. Used in V1.
     */
    desnippetedCountryCode?: string[] | null;
    /**
     * Search Console Signals that modifies how policy are calculated. Didn't add `wmconsole.EnpDesnippetingOverrideRules` direcly to avoid cicular dependency issue: go/enp-v2#bookmark=id.dvb1qcltabv9 ENPv2 proto (EnpDesnippetingOverrideRules): google3/crawler/wmconsole/proto/config_enp_desnippeting_override_rules.proto
     */
    policyCriteriaBase64?: string | null;
    /**
     * ENP status.
     */
    status?: string | null;
    /**
     * The default version is V0 (for backward compatibility).
     */
    version?: string | null;
  }
  /**
   * PerDocData for fringe-query-prior (built into the shards for eventual consumption at Fringe classification time). Not stored in DocJoins. NEXT ID: 13
   */
  export interface Schema$QualityFringeFringeQueryPriorPerDocData {
    encodedCalibratedFringeSitePriorScore?: number | null;
    /**
     * An encoding of the Chard XLQ-hoax prediction in [0,1].
     */
    encodedChardXlqHoaxPrediction?: number | null;
    /**
     * An encoding of the Chard XLQ prediction on translated content in [0,1].
     */
    encodedChardXlqTranslatedPrediction?: number | null;
    /**
     * An encoding of the Chard XLQ-YMYL prediction in [0,1].
     */
    encodedChardXlqYmylPrediction?: number | null;
    /**
     * An estimate of the vulnerability of this doc to show fringe content, based on the context around the document. Can be interpreted as a 'safe' QScore threshold to use (see go/doc-fringe-vulnerability for more info). Encoded for compactness and to restrict visibility. Please contact fringe-ranking@ to get access to quality_fringe::DocumentFringeVulnerabilityEncoding to decode this field.
     */
    encodedDocumentFringeVulnerability?: number | null;
    /**
     * Highest entity prior seen for document's Headline and SingleTopic entities (see go/topicality-score for definitions of entity topicalities). Represents probability that a query is fringe, given that the entity is in the result set with topicality \>= Headline. Scores scaled to integers between 0 and 1000 for compactness. Scores must be interpreted through FringeQueryPriorEncoding::Decode API.
     */
    encodedEntityPriorScore?: number | null;
    /**
     * Probability that a query is fringe, given this document is in the result set. Scores scaled to integers between 0 and 1000 for compactness. Scores must be interpreted through FringeQueryPriorEncoding::Decode API.
     */
    encodedFringePriorScore?: number | null;
    /**
     * Probability that a query is fringe, given this document's site is in the result set. Scores scaled to integers between 0 and 1000 for compactness. Scores must be interpreted through FringeQueryPriorEncoding::Decode API.
     */
    encodedFringeSitePriorScore?: number | null;
    /**
     * Probability that a query is fringe, given this document's site is in the result set. Does not use signals with a dependency on the QueryFringeScore of a document. Scores scaled to integers between 0 and 1000 for compactness. Scores must be interpreted through FringeQueryPriorEncoding::Decode API. Will NOT be present if the fringe_site_prior_score_for_qfs_training is not significantly different from the site_prior_score.
     */
    encodedFringeSitePriorScoreForQfsTraining?: number | null;
    /**
     * A combined encoding of the pXLQ score in [0,1] and the confidence with which that score should be interpreted in [0,1].
     */
    encodedPredictedXlqScoreAndConfidence?: number | null;
    /**
     * A score in [0, 1] representing the similarity of this doc to known fringe-vulnerable 'seeds'. See go/fringe-proximity for more information. Encoded for compactness and to restrict visibility.
     */
    encodedProximityScore?: number | null;
    /**
     * Indices on the repository_webref::WebrefEntities::entity field of entities that represent a person or a group of people (aka sensitive entities).
     */
    sensitiveEntitiesIndices?: number[] | null;
  }
  export interface Schema$QualityGenieComplexQueriesComplexQueriesOutputRewrite {
    entities?: Schema$QualityGenieComplexQueriesComplexQueriesOutputRewriteEntity[];
    rewriteType?: string | null;
    textualRewrite?: string | null;
  }
  export interface Schema$QualityGenieComplexQueriesComplexQueriesOutputRewriteEntity {
    mid?: string | null;
    name?: string | null;
  }
  /**
   * Compressed version of quality_geo_brainloc.goldmine.BrainlocAnnotation for indexing. (See BrainlocAnnotation for detailed documentation.) Next ID: 10
   */
  export interface Schema$QualityGeoBrainlocBrainlocAttachment {
    brainlocVersion?: number | null;
    topCitiesRawScores?: number[] | null;
    /**
     * Compressed top locations and their scores. *Locations are stored using their model vocab IDs. *Location scores are stored using 14 bits of precision (2 bytes).
     */
    topCitiesVocabIds?: number[] | null;
    topCountiesRawScores?: number[] | null;
    topCountiesVocabIds?: number[] | null;
    topCountriesRawScores?: number[] | null;
    topCountriesVocabIds?: number[] | null;
    topStatesRawScores?: number[] | null;
    topStatesVocabIds?: number[] | null;
  }
  export interface Schema$QualityLabelsGoogleLabelData {
    label?: Schema$QualityLabelsGoogleLabelDataLabel[];
  }
  export interface Schema$QualityLabelsGoogleLabelDataLabel {
    /**
     * If global_label_value is present, confidence is ignored. confidence is DEPRECATED.
     */
    confidence?: number | null;
    /**
     * A byte-size value representing 64 * (1 + global_label_value). Use this instead of global_label_value to save on label storage. See quality_prose::LabelValueToBucket() for more info.
     */
    globalLabelBucket?: number | null;
    globalLabelValue?: number | null;
    /**
     * At least one of label_id and label_name must be filled in
     */
    labelId?: number | null;
    labelName?: string | null;
    provider?: Schema$QualityLabelsGoogleLabelDataLabelProvider[];
    providerId?: string[] | null;
  }
  /**
   * If Provider group is not present the provider is the legacy classifiers (with id 0) and the label_value provided by Google is the global_label_value.
   */
  export interface Schema$QualityLabelsGoogleLabelDataLabelProvider {
    /**
     * This field is intended to be deprecated. If id == 0 and feed is true it means this label is from a feed. If id == 0 and feed is false, this label is from "Google" If id != 0, feed is meaningless.
     */
    feed?: boolean | null;
    /**
     * We are currently using this field to indicate an id of the set of classifiers that produced this label. This deviates from the original intention. Also see ClassifierDescription and refer to http://go/genre-labels-provider-id for further info.
     */
    id?: string | null;
    /**
     * A byte-size value representing 64 * (1 + global_label_value). Use it instead of global_label_value to save on label storage.
     */
    labelBucket?: number | null;
    labelValue?: number | null;
    /**
     * This name will only sometimes be filled in! Frontends can in general expect this to be filled in, but it will not usually be stored in backends.
     */
    name?: string | null;
  }
  export interface Schema$QualityNavboostCrapsAgingData {
    /**
     * Documents with byline date younger than month at the event time.
     */
    lastMonthBucket?: Schema$QualityNavboostCrapsAgingDataAgingAgeBucket;
    /**
     * Documents with byline date younger than week at the event time.
     */
    lastWeekBucket?: Schema$QualityNavboostCrapsAgingDataAgingAgeBucket;
    /**
     * Documents with byline date younger than year at the event time.
     */
    lastYearBucket?: Schema$QualityNavboostCrapsAgingDataAgingAgeBucket;
    /**
     * Documents with byline date older than year at the event time.
     */
    yearPlusBucket?: Schema$QualityNavboostCrapsAgingDataAgingAgeBucket;
  }
  export interface Schema$QualityNavboostCrapsAgingDataAgingAgeBucket {
    goodClicks?: number | null;
    impressions?: number | null;
  }
  /**
   * Click / impression signals for craps. The tag numbers are the same as they were in the original CrapsData (below). This is deliberate.
   */
  export interface Schema$QualityNavboostCrapsCrapsClickSignals {
    /**
     * Thus far this field is only used for host level unsquashed impressions. When compressed (e.g., in perdocdata.proto, CompressedQualitySignals), this value is represented individually and thus is generally incompatible with the other values which are compressed as click-ratios.
     */
    absoluteImpressions?: number | null;
    badClicks?: number | null;
    clicks?: number | null;
    goodClicks?: number | null;
    impressions?: number | null;
    lastLongestClicks?: number | null;
    /**
     * The subset of clicks that are associated with an event from a Unicorn user.
     */
    unicornClicks?: number | null;
    /**
     * This is not being populated for the current format - instead two instances of CrapsClickSignals (squashed/unsquashed) are used. We are migrating to the new format where this field will be populated.
     */
    unsquashedClicks?: number | null;
    /**
     * This is not being populated for the current format - instead two instances of CrapsClickSignals (squashed/unsquashed) are used. We are migrating to the new format where this field will be populated.
     */
    unsquashedImpressions?: number | null;
    unsquashedLastLongestClicks?: number | null;
  }
  /**
   * NEXT TAG: 27
   */
  export interface Schema$QualityNavboostCrapsCrapsData {
    /**
     * Contains counter for Aging signal (go/freshness-aging). It's used internally by Craps/Aging pipeline.
     */
    agingCounts?: Schema$QualityNavboostCrapsAgingData;
    badClicks?: number | null;
    clicks?: number | null;
    /**
     * The two-letter uppercase country slice of the CrapsData. Examples: "US", "FR", "BR"
     */
    country?: string | null;
    /**
     * The device interface and os slice of the CrapsData.
     */
    device?: Schema$QualityNavboostCrapsCrapsDevice;
    /**
     * Contains CrapsClickSignals for specific features. (i.e. for mobile, US, metro id - 123")
     */
    features?: Schema$QualityNavboostCrapsFeatureCrapsData[];
    goodClicks?: number | null;
    /**
     * These fields may become legacy fields; we may retire them and use the squashed field (below) instead, to allow for some nesting.
     */
    impressions?: number | null;
    /**
     * The language slice of the CrapsData. Examples: "en", "fr", "pt-BR",
     */
    language?: string | null;
    /**
     * The number of clicks that were last and longest in related user queries.
     */
    lastLongestClicks?: number | null;
    /**
     * DO NOT USE: Use the above mobile_signals fields instead. DO NOT REMOVE: Field is present in legacy protos in golden tests.
     */
    mobileData?: Schema$QualityNavboostCrapsCrapsData;
    /**
     * The portion of this CrapsData aggregated on data from tier 1/2 mobile interfaces in QSessions.
     */
    mobileSignals?: Schema$QualityNavboostCrapsCrapsClickSignals;
    /**
     * Contains a packed string in network byte order, as expected by CrapsIpPrior. Only populated if we looked up the ip_prior_bad_fraction at retrieval time.
     */
    packedIpAddress?: string | null;
    /**
     * Level of pattern. More general patterns get higher values. For URL patterns this field = 0. For example, if we have "http://abc.def.ghi/xyz.html" level 0 pattern will be "http://abc.def.ghi/xyz.html" level 1 pattern will be "p://abc.def.ghi" level 2 pattern will be "p://def.ghi"
     */
    patternLevel?: number | null;
    /**
     * For pattern data, this will contain stats of the SCC's of the individual urls contributing to the pattern.
     */
    patternSccStats?: Schema$QualityNavboostCrapsStatsWithWeightsProto;
    query?: string | null;
    /**
     * This field can be used by the craps pipeline to slice up signals by various attributes such as device type, country, locale etc. The slice_tag can be an arbitrary string, and the CrapsData values for each slice_tag are aggregated separately, together with the default empty slice_tag.
     */
    sliceTag?: string | null;
    /**
     * Not used yet - we will probably move the impressions / clicks / good_clicks bad clicks / last longest clicks into here from top level, and rename those fields to legacy.
     */
    squashed?: Schema$QualityNavboostCrapsCrapsClickSignals;
    /**
     * Used to assign a prior based on IP address. See quality/navboost/craps/craps-ip-prior.h. This value is prior to the linear transformation (scaling / offset / min / max) that's applied in craps-penalty.cc.
     */
    unscaledIpPriorBadFraction?: number | null;
    /**
     * We will start using this one for the retuning rollout.
     */
    unsquashed?: Schema$QualityNavboostCrapsCrapsClickSignals;
    unsquashedMobileSignals?: Schema$QualityNavboostCrapsCrapsClickSignals;
    url?: string | null;
  }
  /**
   * CrapsDevice has the gws interface, gws tier and operating system for events from QSessions.
   */
  export interface Schema$QualityNavboostCrapsCrapsDevice {
    os?: string | null;
    /**
     * An enum taken from GWSLogEntryProto that indicates what type of device a request came from. This includes an entry for DESKTOP(1), MOBILE(2), and TABLET(3) devices. Reference: - gwslog(608): GWSLogEntryProto.ux_interface
     */
    uxInterface?: number | null;
    /**
     * Indicates the device browser tier for the given request. 1 means modern browsers, 3 means very old browsers, and 2 is everything in the middle. See Reference: - gwslog(609): GWSLogEntryProto.ux_tier
     */
    uxTier?: number | null;
  }
  export interface Schema$QualityNavboostCrapsFeatureCrapsData {
    /**
     * Country, like "us". If not present, it's an aggregation for all countries. This is the same format as one used in Glue.
     */
    country?: string | null;
    /**
     * Device, like "m". If not present, it's an aggregation for all devices. "m" - mobile devices. "d" - destop devices.
     */
    device?: string | null;
    /**
     * Language, like "en". If not present, it's an aggregation for all languages. This is the same format as one used in Glue.
     */
    language?: string | null;
    /**
     * Location id for metro and city. If not present, it's an aggregation for all locations within current country.
     */
    locationId?: number | null;
    /**
     * CRAPS Signals for the locale.
     */
    signals?: Schema$QualityNavboostCrapsCrapsClickSignals;
  }
  export interface Schema$QualityNavboostCrapsStatsWithWeightsProto {
    hi?: number | null;
    kind?: number | null;
    lo?: number | null;
    mean?: number | null;
    median?: number | null;
    n?: number | null;
    pc10?: number | null;
    pc25?: number | null;
    pc75?: number | null;
    pc90?: number | null;
    stddev?: number | null;
    stdError?: number | null;
    variance?: number | null;
    varOfMean?: number | null;
    weightedN?: number | null;
  }
  /**
   * Experimental NsrTeam data. This is a proto containing versioned signals which can be used to run live experiments. This proto will not be propagated to MDU shards, but it will be populated at query time by go/web-signal-joins inside the CompressedQualitySignals subproto of PerDocData proto. See go/0DayLEs for the design doc. Note how this is only meant to be used during LEs, it should *not* be used for launches.
   */
  export interface Schema$QualityNsrExperimentalNsrTeamData {
    versionedSignals?: Schema$QualityNsrExperimentalNsrTeamScoringSignal[];
  }
  /**
   * The versioned signals used by the ExperimentalNsrTeamData proto.
   */
  export interface Schema$QualityNsrExperimentalNsrTeamScoringSignal {
    valueBool?: boolean | null;
    valueDouble?: number | null;
    valueFloat?: number | null;
    valueInt32?: number | null;
    valueString?: string | null;
    valueUint32?: number | null;
    versionId?: number | null;
  }
  /**
   * This is a wrapper needed for the WSJ corpus. We want the WSJ RPCs to inject both the experimental_data and the keys, and as of June 2022 these need to be first level members of the proto.
   */
  export interface Schema$QualityNsrExperimentalNsrTeamWSJData {
    experimentalNsrTeamData?: Schema$QualityNsrExperimentalNsrTeamData;
    /**
     * The key used to lookup this data in the WSJ corpus. The WSJ data is sitechunk-level, however the documents in the MDU shards are simply urls. WSJ does a mapping from url -\> {primary_chunk, secondary, fallbacks, etc.\} and retrieves all the keys from the corpus. This lookup key field will keep track of which key was used for this particular lookup.
     */
    lookupKey?: string | null;
  }
  /**
   * The NsrChunksProto corresponds to the NSRChunks class. The data saved by the proto and the class is the same. We provide utilities to go from one to the other.
   */
  export interface Schema$QualityNsrNsrChunksProto {
    /**
     * Primary NSR sitechunk. In most of the cases it's same as HOST_LEVEL_V3 sitechunked canonical url of the document. In rare, but important cases it's based on page markup (see quality/nsr/util/sitechunker.h for details).
     */
    primaryChunk?: string | null;
    /**
     * Secondary NSR sitechunk. When present, it provides more granular chunking than primary sitechunks (see quality/nsr/util/sitechunker.h for details). Note that the NSRChunks class does not store trivial secondary chunks. Be aware of this when constructing NsrChunksProto from scratch.
     */
    secondaryChunks?: string[] | null;
  }
  export interface Schema$QualityNsrNsrChunksWithSourceInfo {
    nsrChunks?: Schema$QualityNsrNsrChunksProto;
    /**
     * Annotated in the SitechunksAnnotator and copied over in NsrAnnotator.
     */
    siteChunkSource?: string | null;
  }
  /**
   * NOTE: When adding a new field to be propagated to Raffia check if NsrPatternSignalSpec needs to be updated. Next ID: 53
   */
  export interface Schema$QualityNsrNsrData {
    /**
     * Score from article classification of the site.
     */
    articleScore?: number | null;
    articleScoreV2?: number | null;
    /**
     * Site-level chard score: site quality predictor based on content.
     */
    chardEncoded?: number | null;
    chardVariance?: number | null;
    /**
     * An id for defining clusters of sites. Used in ecosystem experiments (project Tundra).
     */
    clusterId?: number | null;
    clusterUplift?: Schema$QualityNsrNsrDataClusterUplift;
    /**
     * Delta site-level signal in Q* penalizing sites with a large number of distracting/annoying resources loaded by the site (see go/clutter-v0).
     */
    clutterScore?: number | null;
    clutterScores?: Schema$QualityNsrVersionedFloatSignal[];
    directFrac?: number | null;
    /**
     * Categorical signals.
     */
    healthScore?: number | null;
    host?: string | null;
    /**
     * Currently corresponds to i18n_g42_bucket.
     */
    i18nBucket?: number | null;
    /**
     * Site-level impressions.
     */
    impressions?: number | null;
    /**
     * Bit to determine whether the site has the local authority covid signal, as computed by go/covid-local-authority
     */
    isCovidLocalAuthority?: boolean | null;
    /**
     * Bit to determine whether the site has the election authority signal, as computed by go/election-authority
     */
    isElectionAuthority?: boolean | null;
    /**
     * Bit to determine whether the site has mostly video content, but is not hosted on any known video-hosting domains. Site is considered to be video-focused, if it has \> 50% of the URLs with watch pages (with smoothing prior). ariane/4045246
     */
    isVideoFocusedSite?: boolean | null;
    language?: number | null;
    largeOrgId?: number | null;
    /**
     * Locality score of the site, i.e. the locality component of the LocalAuthority signal (see go/pq-localauthority).
     */
    localityScore?: number | null;
    metadata?: Schema$QualityNsrNsrDataMetadata;
    /**
     * This field used as a temporary field for clean transitions when we need to roll out Q* and NSR changes simultaneously.
     */
    newNsr?: number | null;
    nsr?: number | null;
    /**
     * If true indicates that we do not have NSR data computed for the chunk, and instead the data is coming from an average of other host chunks.
     */
    nsrdataFromFallbackPatternKey?: boolean | null;
    /**
     * The epoch from which this NSR value is coming from.
     */
    nsrEpoch?: string | null;
    /**
     * This signal is used to unconditionally override NSR as a bid in Q*. Should only be used in case of emergency (see go/nsr-override-bid). To have any effect, the value should be present and greater than 0.001.
     */
    nsrOverrideBid?: number | null;
    /**
     * NSR variance logodds [0, infinity).
     */
    nsrVariance?: number | null;
    /**
     * Fractional signals.
     */
    pnav?: number | null;
    /**
     * denominator for the pnav computation
     */
    pnavClicks?: number | null;
    /**
     * NSR - prior. Estimate of whether the site is above/below average NSR in its slice.
     */
    priorAdjustedNsr?: Schema$QualityNsrVersionedFloatSignal[];
    /**
     * Secondary NSR sitechunk. When present, it provides more granular chunking than primary sitechunks (see quality/nsr/util/sitechunker.h for details).
     */
    secondarySiteChunk?: string | null;
    shoppingScore?: number | null;
    /**
     * Aggregated value of url autopilot scores for this sitechunk.
     */
    siteAutopilotScore?: number | null;
    /**
     * Primary NSR sitechunk. In most of the cases it's same as HOST_LEVEL_V3 sitechunked canonical url of the document. In rare, but important cases it's based on page markup (see quality/nsr/util/sitechunker.h for details).
     */
    siteChunk?: string | null;
    /**
     * These are only annotated in the Goldmine NSR annotator.
     */
    siteChunkSource?: string | null;
    /**
     * Average value of the site_link_in for pages in the sitechunk.
     */
    siteLinkIn?: number | null;
    /**
     * Aggregated value of url link out scores for this sitechunk.
     */
    siteLinkOut?: number | null;
    sitePr?: number | null;
    /**
     * Estimate of site's PQ rating stddev--spread of the page-level PQ ratings of a site. Note this is different from nsr_variance which predicts error of NSR itself from the aggregated site-level rating.
     */
    siteQualityStddev?: number | null;
    /**
     * The SpamBrain LAVC score, as of July 2022. See more information at go/cloverfield-lavc-deck.
     */
    spambrainLavcScore?: number | null;
    spambrainLavcScores?: Schema$QualityNsrVersionedFloatSignal[];
    /**
     * Site-level tofu score: site quality predictor based on content.
     */
    tofu?: number | null;
    ugcScore?: number | null;
    url?: string | null;
    /**
     * Versioned map of NSR values for experimenting with the next release.
     */
    versionedData?: Schema$QualityNsrNSRVersionedData[];
    videoScore?: number | null;
    /**
     * Score of the Video LQ model.
     */
    vlq?: number | null;
    /**
     * NSR from a headroom model targeting low-quality video sites.
     */
    vlqNsr?: number | null;
    ymylNewsV2Score?: number | null;
  }
  /**
   * The uplift-per-cluster values used in Tundra's uplift arm.
   */
  export interface Schema$QualityNsrNsrDataClusterUplift {
    /**
     * Score for the local sites arm.
     */
    local?: number | null;
    /**
     * Score for the small sites arm.
     */
    small?: number | null;
  }
  /**
   * Contains meta information about this data. This field is only available in docjoins (and potentially MDU shards), it is not populated offline. NOTE: This is a new field (Nov 2022) and we do not want clients to depend on this; please contact qscore-team@ if you want to use this information.
   */
  export interface Schema$QualityNsrNsrDataMetadata {
    /**
     * Encoded lookup information. The fields set above are expensive to store. Storing them in docjoins is fine, but we cannot store them in MDU shards. In order for the MDU shards to display field provenance information, we store them as a bitfield. For details about the encoding and decoding scheme, see quality_nsr::util::EncodeMetadataLookupInformation. We expect this to occupy 8 bytes as long as there are less than 64 fields in NsrData proto, 12 bytes between 64 and 92 fields, etc.
     */
    encodedLookupInformation?: string | null;
    /**
     * Same as raffia_lookup_key_per_field. Note that the goldmine_lookups have priority; if a field appears in both goldmine and raffia entries, it means it was taken from goldmine. If it's missing here but present in raffia_lookup_key_per_field, it was taken from raffia.
     */
    goldmineLookupKeyPerField?: {[key: string]: number} | null;
    /**
     * The lookup keys attempted by goldmine. Note that goldmine only runs for urls which can be chunked differently than raffia; in those cases, goldmine related fields are empty.
     */
    goldmineLookupKeys?: string[] | null;
    lastTimeProcessedGoldmineInSeconds?: string | null;
    /**
     * This field is populated only during MDU population, so it's *not* present in docjoins, but it's present in production so that it can be displayed.
     */
    lastTimeProcessedMduInSeconds?: string | null;
    /**
     * Records the last time each system has processed the proto. These are recorded as seconds from the unix epoch. Ideally these fields would be google.protobuf.Timestamp, but the scoring bundle (which depends on this proto) does not understand proto3 syntax. See cl/500942047 for details.
     */
    lastTimeProcessedRaffiaInSeconds?: string | null;
    /**
     * Stores the NSRChunks (computed by goldmine) which were used to populate the data.
     */
    nsrChunksWithSourceInfo?: Schema$QualityNsrNsrChunksWithSourceInfo;
    raffiaLookupKey?: string | null;
    /**
     * Returns the raffia lookup key per each field in the NsrData proto (with exclusion of the Metadata sub-message (i.e. this)). It contains information like 3 : 1, meaning that the field inside NsrData with id '3' (in this case 'host') has been taken by raffia from the raffia lookup key at index 1.
     */
    raffiaLookupKeyPerField?: {[key: string]: number} | null;
    /**
     * This is an internal field set by Raffia, to indicate which lookup keys have been attempted to populate the NsrData for this document. This will allow us to determine which key has been used to populate each field in the proto. The keys are ordered by lookup priority; raffia will give priority to earlier keys, and only take fields from later keys if they are missing.
     */
    raffiaLookupKeys?: string[] | null;
    /**
     * The url used by NsrSignalMerger (http://google3/indexing/signals/signal-merger.h;l=1801;rcl=509297232) to select which NsrData value to keep. The SignalMerger merges all the NsrData coming from the dup url cluster, and select the NsrData value to return by choosing a single url in the cluster (see NsrSignalMerger class for details). NOTE: This field is populated only when there *is* a cluster. If there is no cluster, this is empty and the key used is the canonical (and only) url.
     */
    raffiaSignalMergerUrl?: string | null;
  }
  /**
   * Versioned NSR score data.
   */
  export interface Schema$QualityNsrNSRVersionedData {
    /**
     * The corresponding NSR value.
     */
    value?: number | null;
    /**
     * The unique id of the version, preferably just scaled: 19.1 x 10 = 191.
     */
    versionId?: number | null;
  }
  /**
   * Next id: 18
   */
  export interface Schema$QualityNsrPQData {
    /**
     * URL-level chard prediction (encoded as an int).
     */
    chard?: number | null;
    deltaAutopilotScore?: number | null;
    deltaLinkIncoming?: number | null;
    deltaLinkOutgoing?: number | null;
    /**
     * The delta score of the URL-level quality predictor.
     */
    deltaPageQuality?: number | null;
    /**
     * Total deltaNSR adjustment based on subchunks. This is a page-level adjustment (subchunks are retrieved based on the page classification).
     */
    deltaSubchunkAdjustment?: number | null;
    /**
     * Keto score.
     */
    keto?: Schema$QualityNsrVersionedFloatSignal[];
    linkIncoming?: number | null;
    linkOutgoing?: number | null;
    /**
     * The total number of offdomain anchors seen by the NSR pipeline for this page.
     */
    numOffdomainAnchors?: number | null;
    page2vecLq?: number | null;
    subchunkData?: Schema$QualityNsrPQDataSubchunkData[];
    /**
     * URL-level tofu prediction.
     */
    tofu?: number | null;
    urlAutopilotScore?: number | null;
    /**
     * URL-level score of the VLQ model.
     */
    vlq?: number | null;
  }
  /**
   * Data used to compute delta_subchunk_adjustment. (I.e, the subchunks looked up, with their confidences and weights). This data is not propagated to ascorer.
   */
  export interface Schema$QualityNsrPQDataSubchunkData {
    /**
     * Confidence associated with the chunk.
     */
    confidence?: number | null;
    /**
     * Subchunk delta in nsr.
     */
    deltaNsr?: number | null;
    /**
     * Weight with which this document belong to this subchunk (greater than 0).
     */
    pageWeight?: number | null;
    /**
     * Type of this chunk. Eg, ymyl_health, d2v, etc.
     */
    type?: string | null;
  }
  export interface Schema$QualityNsrVersionedFloatSignal {
    /**
     * The corresponding float value.
     */
    value?: number | null;
    /**
     * Unique version id.
     */
    versionId?: number | null;
  }
  /**
   * Next ID: 7
   */
  export interface Schema$QualityOrbitAsteroidBeltDocumentIntentScores {
    /**
     * Same as above, but for intents below triggering threshold. It can be assumed that any intent in this list has trigger=false. Most intents do not have below-threshold annotations.
     */
    belowThresholdIntents?: string[] | null;
    belowThresholdScores?: number[] | null;
    /**
     * Map of imageid key to ImageIntentScores, for images on cdoc.doc_images
     */
    imageIntentScores?: {
      [key: string]: Schema$QualityOrbitAsteroidBeltImageIntentScores;
    } | null;
    /**
     * The 'intents' and 'scores' fields are stored as parallel lists for compactness. The 'scores' field should not be accessed directly, but instead through the functions in document_intent_scores_utils.
     */
    intents?: string[] | null;
    /**
     * The intent scores, scaled to integers between 0 and 100 for compactness.
     */
    scores?: number[] | null;
    /**
     * DEPRECATED. DO NOT USE IT FOR ANY REASON! contact orbit@ if necessary.
     */
    version?: number | null;
  }
  export interface Schema$QualityOrbitAsteroidBeltImageIntentScores {
    /**
     * The unique identifier for an Asteroid Belt document intent is being reused here
     */
    intents?: string[] | null;
    /**
     * The intent scores, scaled to integers between 0 and 100 for compactness.
     */
    scores?: number[] | null;
  }
  /**
   * Information for chosen snippet. Next ID: 8
   */
  export interface Schema$QualityPreviewChosenSnippetInfo {
    /**
     * Whether this snippet is a vulgar candidate.
     */
    isVulgar?: boolean | null;
    leadingTextType?: string | null;
    /**
     * The rendered snippet html.
     */
    snippetHtml?: string | null;
    snippetType?: string | null;
    /**
     * Source of the chosen snippet, decided in PORC. String value of quality.porc.TextSnippetCandidate.TextSnippetSource defined at google3/quality/porc/proto/text_snippet.proto
     */
    source?: string | null;
    tidbits?: Schema$QualityPreviewChosenSnippetInfoTidbitInfo[];
    /**
     * Whether this snippet has trailing ellipsis.
     */
    trailingEllipsis?: boolean | null;
  }
  /**
   * Information to identify tidbits.
   */
  export interface Schema$QualityPreviewChosenSnippetInfoTidbitInfo {
    /**
     * Section name of current snippet.
     */
    sectionName?: string | null;
    /**
     * Separator to put before this tidbit.
     */
    separator?: string | null;
    /**
     * Tidbit text for validation.
     */
    tidbitText?: string | null;
    /**
     * Tidbit token range in the section.
     */
    tokenBegin?: string | null;
    tokenEnd?: string | null;
  }
  /**
   * Snippet candidate related information and signal scores. This message is used for both snippet scoring and ranklab features recording. Next ID: 12 ================== Features populated in production =======================
   */
  export interface Schema$QualityPreviewRanklabSnippet {
    /**
     * Features from SnippetFlow in Superroot.
     */
    brainFeatures?: Schema$QualityPreviewSnippetBrainFeatures;
    documentFeatures?: Schema$QualityPreviewSnippetDocumentFeatures;
    /**
     * For experimental usage, not populated yet.
     */
    experimentalFeatures?: Schema$QualityPreviewSnippetExperimentalFeatures;
    /**
     * The final score of this candidate.
     */
    finalScore?: number | null;
    /**
     * Is this the candidate chosen by Muppet scorer.
     */
    isMuppetSelectedSnippet?: boolean | null;
    /**
     * Query term (original terms only) coverage features.
     */
    originalQueryTermCoverageFeatures?: Schema$QualityPreviewSnippetQueryTermCoverageFeatures;
    qualityFeatures?: Schema$QualityPreviewSnippetQualityFeatures;
    /**
     * Core set of snippet features.
     */
    queryFeatures?: Schema$QualityPreviewSnippetQueryFeatures;
    /**
     * Query term (including synonyms) coverage features.
     */
    queryTermCoverageFeatures?: Schema$QualityPreviewSnippetQueryTermCoverageFeatures;
    /**
     * Radish related information.
     */
    radishFeatures?: Schema$QualityPreviewSnippetRadishFeatures;
    /**
     * Information to identify current chosen snippet.
     */
    snippetInfo?: Schema$QualityPreviewChosenSnippetInfo;
  }
  /**
   * A collection of data corresponding to a single title candidate. This will be used as: - a collection of signals to score and select titles in production - an input for training title models NOTE: When adding a floating point value for Ranklab purposes, use float32 instead of float64, because some of the Ranklab library still does not fully support float64. Next ID: 67
   */
  export interface Schema$QualityPreviewRanklabTitle {
    /**
     * `goldmine_final_score` value in base.
     */
    baseGoldmineFinalScore?: number | null;
    /**
     * The ranking index of this candidate (starting from 0) in base.
     */
    baseRank?: number | null;
    /**
     * Title source type.
     */
    dataSourceType?: string | null;
    /**
     * Document language for this title. It is used for model inference and hence flattened into RanklabTitle instead of RanklabDoc.
     */
    docLang?: string | null;
    docRelevance?: number | null;
    /**
     * Numbers of duplicated tokens. For example, duplicated tokens for a title "dog cat cat cat" is 2 (for 2 extra "cat").
     */
    dupTokens?: number | null;
    /**
     * A score assigned for candidates forced by experiments.
     */
    forcedExperimentScore?: number | null;
    /**
     * The score for `text` computed in Goldmine (AlternativeTitlesAnnotator) with additional scoring adjustments applied. Currently includes Blockbert scoring.
     */
    goldmineAdjustedScore?: number | null;
    /**
     * =============================================================== Internal boost feature signals used to compute `goldmine_page_score`. They are exposed only for debugging purpose.
     */
    goldmineAnchorFactor?: number | null;
    goldmineAnchorSupportOnly?: number | null;
    goldmineBlockbertFactor?: number | null;
    goldmineBodyFactor?: number | null;
    /**
     * Deprecated: use `goldmine_page_score` instead.
     */
    goldmineFinalScore?: number | null;
    goldmineForeign?: number | null;
    goldmineGeometryFactor?: number | null;
    goldmineHasBoilerplateInTitle?: number | null;
    goldmineHasTitleNgram?: number | null;
    goldmineHeaderIsH1?: number | null;
    goldmineHeadingFactor?: number | null;
    goldmineIsBadTitle?: number | null;
    goldmineIsHeadingTag?: number | null;
    goldmineIsTitleTag?: number | null;
    goldmineIsTruncated?: number | null;
    goldmineLocalTitleFactor?: number | null;
    goldmineLocationFactor?: number | null;
    goldmineNavboostFactor?: number | null;
    goldmineOgTitleFactor?: number | null;
    goldmineOnPageDemotionFactor?: number | null;
    /**
     * The number of BoostFeatures present in AlternativeTitlesGeneator but not populated above.
     */
    goldmineOtherBoostFeatureCount?: number | null;
    /**
     * The score for the `text` computed in Goldmine (AlternativeTitlesAnnotator).
     */
    goldminePageScore?: number | null;
    goldmineReadabilityScore?: number | null;
    goldmineSalientTermFactor?: number | null;
    goldmineSitenameFactor?: number | null;
    goldmineSubHeading?: number | null;
    goldmineTitleTagFactor?: number | null;
    goldmineTrustFactor?: number | null;
    goldmineUrlMatchFactor?: number | null;
    /**
     * Whether a title contains site information.
     */
    hasSiteInfo?: boolean | null;
    /**
     * Whether this title candidate is truncated or not.
     */
    isTruncated?: boolean | null;
    /**
     * Whether a title is valid (i.e., not empty).
     */
    isValid?: boolean | null;
    /**
     * Numbers of body title tokens covered by this title, in range of [0, 1]. Not set if body title is considered "bad".
     */
    percentBodyTitleTokensCovered?: number | null;
    /**
     * Numbers of tokens covered by body title, in range of [0, 1]. Not set if body title is considered "bad".
     */
    percentTokensCoveredByBodyTitle?: number | null;
    /**
     * How good or bad this title is as a `data_source_type` title type.
     */
    perTypeQuality?: string | null;
    /**
     * Rank of this title among titles of the same `data_source_type`.
     */
    perTypeRank?: number | null;
    /**
     * The number of (different) terms with a query match. It may include the match with any SQuery node (e.g., synonyms).
     */
    queryMatch?: number | null;
    /**
     * A number of matched query terms divided by the number of all terms in query. Synonyms or other terms that appear in squery but not in the raw query are excluded. Takes values in [0, 1].
     */
    queryMatchFraction?: number | null;
    /**
     * Deprecated experimental features.
     */
    queryRelevance?: number | null;
    sourceGeometry?: boolean | null;
    sourceHeadingTag?: boolean | null;
    sourceLocalTitle?: boolean | null;
    sourceOffdomainAnchor?: boolean | null;
    sourceOndomainAnchor?: boolean | null;
    sourceOnsiteAnchor?: boolean | null;
    /**
     * =============================================================== Title candidate's original source information. They are populated only for non-production environment for debugging purposes.
     */
    sourceTitleTag?: boolean | null;
    sourceTransliteratedTitle?: boolean | null;
    /**
     * `goldmine_final_score` value in test.
     */
    testGoldmineFinalScore?: number | null;
    /**
     * The ranking index of this candidate (starting from 0) in test.
     */
    testRank?: number | null;
    /**
     * Title text to display. Populated for debugging purpose only, and won't be used for model inferences. This represetns the exact display text in SERP, with modifications like truncations or site-title appending involved.
     */
    text?: string | null;
    /**
     * A rendered width of this title divided by the max allowed width for title. Takes values in [0, 1].
     */
    widthFraction?: number | null;
  }
  /**
   * Snippet brain scores.
   */
  export interface Schema$QualityPreviewSnippetBrainFeatures {
    /**
     * Is the bolding triggered.
     */
    isSnippetBrainBoldingTriggered?: boolean | null;
    /**
     * The score by SnippetBrain model.
     */
    modelScore?: number | null;
  }
  /**
   * Document related features used in snippets scoring. Next ID: 10
   */
  export interface Schema$QualityPreviewSnippetDocumentFeatures {
    experimentalTitleSalientTermsScore?: number | null;
    leadingtextDistanceScore?: number | null;
    metaBoostScore?: number | null;
    salientPositionBoostScore?: number | null;
    salientTermsScore?: number | null;
    schemaOrgDescriptionBoostScore?: number | null;
    unstableTokensScore?: number | null;
  }
  export interface Schema$QualityPreviewSnippetExperimentalFeatures {
    isLikelyHomepage?: boolean | null;
    numQueryItems?: number | null;
    numTidbits?: number | null;
    numVisibleTokens?: number | null;
    radish?: Schema$QualityPreviewSnippetRadishFeatures;
  }
  /**
   * Quality related features used in snippets scoring. Next ID: 10
   */
  export interface Schema$QualityPreviewSnippetQualityFeatures {
    foreignMetaScore?: number | null;
    hiddenRatioScore?: number | null;
    numTidbitsScore?: number | null;
    numVisibleTokensScore?: number | null;
    outlinkScore?: number | null;
    redundancyScore?: number | null;
    sentenceStartScore?: number | null;
  }
  /**
   * Query related features used in snippets scoring. Next ID: 7
   */
  export interface Schema$QualityPreviewSnippetQueryFeatures {
    experimentalQueryTitleScore?: number | null;
    passageembedScore?: number | null;
    queryHasPassageembedEmbeddings?: boolean | null;
    queryScore?: number | null;
    radishScore?: number | null;
  }
  /**
   * Snippet query term coverage features.
   */
  export interface Schema$QualityPreviewSnippetQueryTermCoverageFeatures {
    snippetQueryTermCoverage?: number | null;
    titleQueryTermCoverage?: number | null;
    titleSnippetQueryTermCoverage?: number | null;
  }
  export interface Schema$QualityPreviewSnippetRadishFeatures {
    /**
     * Answer score of the passage for this `navboost_query`.
     */
    answerScore?: number | null;
    /**
     * Navboost query for this radish signal.
     */
    navboostQuery?: string | null;
    /**
     * The ratio of overlapping tokens between the radish passage and snippet candidate.
     */
    passageCoverage?: number | null;
    /**
     * Integer value of indexing::annotations::wa_passages::Passage::Type.
     */
    passageType?: number | null;
    /**
     * The index of this passage under `navboost_query`.
     */
    queryPassageIdx?: number | null;
    /**
     * How the similarity score is computed. Integer value of mustang_repos_www_snippets::RadishSignalScoringInfo::SimilarityMethod.
     */
    similarityMethod?: number | null;
    /**
     * Similarity score between this `navboost_query` and the incoming query.
     */
    similarityScore?: number | null;
    snippetCoverage?: number | null;
  }
  /**
   * Protocol message for data related to product sites. This data is stored as signals data in docjoins.
   */
  export interface Schema$QualityProductProductSiteData {
    /**
     * Data for each locale.
     */
    locale?: Schema$QualityProductProductSiteDataLocaleData[];
  }
  /**
   * Data for one locale.
   */
  export interface Schema$QualityProductProductSiteDataLocaleData {
    /**
     * Site boosting multiplier.
     */
    boostFactor?: number | null;
    /**
     * Whether this is a gobi site, ie, a site from a gobi domain that should be boosted for a category query with this gobi domain. For example, amazon.com is a gobi store domain for category query [hdtv] but some sites (like askville.amazon.com) from amazon.com should not be boosted.
     */
    gobiSite?: boolean | null;
    /**
     * Locale for this data.
     */
    locale?: string | null;
  }
  export interface Schema$QualityProseCSEUrlInfo {
    /**
     * There were defined back in 2007, but were never used. optional string label = 2; optional uint64 user = 3; optional float score = 4;
     */
    cseId?: string | null;
  }
  /**
   * Used to annotate the source of cross-account personal data. See go/cross-account-understanding.
   */
  export interface Schema$QualityQrewriteAccountProvenance {
    dataSources?: string[] | null;
    googleAccount?: Schema$QualityQrewriteAccountProvenanceGoogleAccount;
    /**
     * Note google_account and third_party_account could both exist. For example, a user could share her Spotify account with other users registered on the same device.
     */
    thirdPartyAccount?: Schema$QualityQrewriteAccountProvenanceThirdPartyAccount;
  }
  /**
   * The Google account the annotated personal data belongs to.
   */
  export interface Schema$QualityQrewriteAccountProvenanceGoogleAccount {
    email?: string | null;
    gaiaId?: string | null;
    isDasherAccount?: boolean | null;
    isSecondaryAccount?: boolean | null;
  }
  /**
   * The 3P account the annotated personal data belongs to.
   */
  export interface Schema$QualityQrewriteAccountProvenanceThirdPartyAccount {
    /**
     * Email address of the linked account (eg foo@outlook.com).
     */
    email?: string | null;
    /**
     * Unique identifier for the third party provider. Defined by Google via AoG.
     */
    thirdPartyProviderId?: string | null;
  }
  /**
   * Alternative names with info like RecognitionAlternateSource indicating where is it from.
   */
  export interface Schema$QualityQrewriteAlternativeNameInfo {
    matchSignal?: Schema$AssistantVerticalsCommonContactMatchSignal;
    name?: string | null;
    source?: string | null;
  }
  export interface Schema$QualityQrewriteCalendarReference {
    calendarAlias?: Schema$QualityQrewriteQRewriteAccountAwareCalendarAliasWrapper;
    contactCalendarName?: Schema$QualityQrewriteContactCalendarName;
    familyCalendarAlias?: Schema$QualityQrewriteFamilyCalendarAlias;
    primaryCalendarAlias?: Schema$QualityQrewritePrimaryCalendarAlias;
  }
  export interface Schema$QualityQrewriteContactCalendarName {
    contact?: Schema$NlpSemanticParsingModelsPersonPerson;
  }
  export interface Schema$QualityQrewriteFamilyCalendarAlias {
    familyCalendarId?: string | null;
  }
  /**
   * Contact metadata Next Id: 36
   */
  export interface Schema$QualityQrewritePersonalContactData {
    /**
     * Tracks the account owner of this contact. See go/cross-account-understanding.
     */
    accountProvenance?: Schema$QualityQrewriteAccountProvenance;
    /**
     * Other metadata relating with the contact. This field is added so that the value can be copied to the corresponding field |additional_contact_metadata| in person.proto, that later will be logged to Assistant Interaction Event footprint from client side.
     */
    additionalContactMetadata?: Array<{[key: string]: any}> | null;
    /**
     * Populated only if matched_name_type is GIVEN_NAME_ALIAS or FULL_NAME_ALIAS.
     */
    commonNameAliasConfidence?: number | null;
    /**
     * Concept id for relationships in query language, e.g. "Mother" in English, "Mère" in French. It's only populated for source = RELATIONSHIP.
     */
    conceptId?: string | null;
    /**
     * Concept id for relationships in English, e.g. "Mother" for all non-English locales. It's only populated for source = RELATIONSHIP. It is used as the key to store relationship in memory (see http://go/assistant-relationship). For English, this field is not filled, and we will use concept_id field as the relationship key in memory.
     */
    conceptIdEn?: string | null;
    /**
     * TODO(shuaiwang) these are kept here temporarily because aqua regression tests are still referring to them, migrating aqua regression tests to use the new person_data field depends on binary change (i.e. this proto change) so there's a period we need to keep both.
     */
    displayName?: string | null;
    familyName?: string | null;
    /**
     * The ffrac score of the suggested contact from Starlight.
     */
    ffracScore?: number | null;
    gaiaId?: string | null;
    givenName?: string | null;
    /**
     * Whether we have address info for this contact. IMPORTANT, READ BEFORE USING THIS FIELD: - This is a temporary solution to export this info for device contacts. - This could only be set for device contacts, contacts from other sources won't have this bit set even if there's address available inside person_data. - This will go away once Starlight supports device contacts, addresses will be available inside person_data the same way as Focus contacts. TODO(shuaiwang) remove after b/20412551
     */
    hasAddressForDeviceContacts?: boolean | null;
    hasGplusProfile?: boolean | null;
    /**
     * If the contact data is from on device lookup.
     */
    isFromOnDeviceLookup?: boolean | null;
    /**
     * Indicate the contact matches the transliterated query.
     */
    isTransliteratedMatch?: boolean | null;
    /**
     * If the lookup was done using relationship which is visible to guests. This value will only be set if lookup was done using relationship. E.g. user has a guest relationship (doctor) -\> (John) And user says "call doctor", then this value will be true.
     */
    isVisibleToGuestsRelationship?: boolean | null;
    lookupNameSource?: string | null;
    /**
     * LINT.ThenChange(//depot/google3/assistant/verticals/communication/\ fulfillment/proto/contact_logging_enums.proto, //depot/google3/assistant/api/dialog_state/values/person.proto, //depot/google3/assistant/context/proto/person.proto)
     */
    matchedNameType?: string | null;
    /**
     * Alternate name from recognition that has contact matched. Need this to make name correction history log consistent.
     */
    matchedRecognitionAlternateName?: string | null;
    /**
     * Populate only if AlternateSource is not NONE.
     */
    matchSignal?: Schema$AssistantVerticalsCommonContactMatchSignal;
    /**
     * Log version of PersonalContactData. Holds e.g. FUZZY match results. It is populated in NamedContactFrame when fuzzy match is performed: http://google3/quality/dialog_manager/frames/contact/named_contact_frame.cc?l=255&rcl=331994299 Currently only fuzzy ngram match results are logged here.
     */
    personalContactDataLog?: Schema$AssistantLogsCommunicationPersonalContactDataLog;
    /**
     * Metadata such as name, email, phone, etc.
     */
    personData?: Schema$AppsPeopleOzExternalMergedpeopleapiPerson;
    /**
     * Contains information about a Copley Person resolution (go/copley-people). This field is used to propagate metadata related to the resolved person, used for attribution and logging. Meaningful data (addresses, phone numbers) are copied into person_data.
     */
    pkgPerson?: Schema$NlpSemanticParsingQRefAnnotation;
    pkgReferenceType?: string | null;
    /**
     * Populate only if AlternateSource is not NONE.
     */
    recognitionAlternateScore?: number | null;
    /**
     * If not none, then it indicates the personal contact data is alternate and how the alternate is fulfilled.
     */
    recognitionAlternateSource?: string | null;
    /**
     * Lexical information for relationships in query language, e.g. "Mother" in English, "Mère" in French. It's only populated for source = RELATIONSHIP.
     */
    relationshipLexicalInfo?: Schema$CopleyLexicalMetadata;
    /**
     * Resolved relationship names and contact pointers from Assistant Memory. This field is populated into both relationship annotation (source = RELATIONSHIP) and Focus/device contacts retrieved by that contact name. The data from Assistant Memory comes from two different columns: ASSISTANT_SETTINGS and PWS_CONTACT_ANNOTATION. We support multiple people with same relationship (e.g. multiple brothers) by using a repeated relationship_memory field. Examples are at go/person-subgrammar-relationship.
     */
    relationshipMemory?: Schema$QualityQrewriteRelationshipMemoryData[];
    /**
     * Gaia ID of the user this contact belongs to. Only populates if contact is shared from another user. See go/shared-contacts-assistant. E.g. user A triggers the request and uses user B's contact data (which is marked as visible to user A). This field will be populated with user B's gaia id.
     */
    sharedContactOwnerGaiaId?: string | null;
    /**
     * LINT.ThenChange(//depot/google3/assistant/verticals/communication/\ fulfillment/proto/contact_logging_enums.proto, //depot/google3/assistant/api/dialog_state/values/person.proto, //depot/google3/assistant/context/proto/person.proto) Data source of the contact data.
     */
    source?: string | null;
  }
  export interface Schema$QualityQrewritePrimaryCalendarAlias {}
  /**
   * A calendar alias wrapper used for query annotation. Aliases values are defined in the extension with build visibility restrictions as they may contain data from an account other than the user's primary account. This proto is used as an metadata output from the QRewrite annotation. It can be used for calendar aliases from different sources i.e. aliases based on the domain of the account associated with the calendar (go/calendar-aliases-annotation).
   */
  export interface Schema$QualityQrewriteQRewriteAccountAwareCalendarAliasWrapper {}
  /**
   * Relationship-\>contact data provided by Assistant Memory.
   */
  export interface Schema$QualityQrewriteRelationshipMemoryData {
    /**
     * The contact pointer. See http://go/assistant-contact-id.
     */
    contactPointer?: Schema$FocusBackendContactPointer;
    /**
     * The contact name copied from UserAttribute.value.
     */
    value?: string | null;
  }
  /**
   * Used as Mustang attachment DO NOT: - ACCESS THE PROTO FIELDS DIRECTLY - USE THE DECODING LIBRARY IN quality/rankembed/mustang/fixed_point_decoding_helpers.h INSTEAD. - USE HARDCODED MustangRankEmbedInfo TEXT PROTOS IN TESTS! USE quality/rankembed/test_utils/mustang_rankembed_info_utils.h INSTEAD.
   */
  export interface Schema$QualityRankembedMustangMustangRankEmbedInfo {
    /**
     * Each of the repeated elements in this field has the same scheme as 'fixed_point_encoding'; See go/rankembed-astro-rule-set-dd
     */
    additionalFixedPointEncodings?: string[] | null;
    /**
     * Each uint64 encodes 8 8-bit values for the quantized document embedding
     */
    compressedDocumentEmbedding?: Schema$QualityRankembedMustangMustangRankEmbedInfoCompressedEmbedding;
    /**
     * This field replaces the above 3 "per-encoding-type-fields", where the encoding type (and the embedding type) are part of the encoding, and is stored in the first byte. The remaining bytes are the same as the previous 3 fields, but shifted by 1 byte. - byte[0]: encoding type & embedding type - byte[1....]: similar to the above depending on the encoding type.
     */
    fixedPointEncoding?: string | null;
    /**
     * - byte[0]: version - bytes[1...4]: scalar - bytes[5,...]: the values, one byte per 2 values
     */
    scaledFixedPoint4Encoding?: string | null;
    /**
     * - byte[0]: version - bytes[1...4]: scalar - bytes[5,...]: the values, one byte per value
     */
    scaledFixedPoint8Encoding?: string | null;
    /**
     * - byte[0]: version - bytes[1...4]: scalar - bytes[5...8]: shift - bytes[9,...]: the values, one byte per 2 values
     */
    scaledShiftedFixedPoint4Encoding?: string | null;
    /**
     * First 7 bits encode the version, then each chunk of 5 bits encode the index of a potential improv query (lsb to msb) -------|-----|-----|-----|-----|----- version| id1 | id2 | id3 | id4 | id5 where id1 is the index of the first improv query in the improv debug table. As of cl/270008220, this field only contains the version info. For backward compatibility, version still only uses the first 7 bits, and is still prepended by 5 1 bits.
     */
    versionAndImprovInfo?: number | null;
  }
  export interface Schema$QualityRankembedMustangMustangRankEmbedInfoCompressedEmbedding {
    /**
     * using fixed64 instead of uint64 saves ~14% is storage
     */
    packedValue?: string[] | null;
    value?: string[] | null;
  }
  /**
   * A subset of LaunchableApplication, which is stored in the PerDocData proto (indexer/perdocdata/perdocdata.proto) and thus stored in the Search Mustang index. It is used to identify documents containing app links at serving time by SuperRoot. A subset of LaunchableApplication is used to save on storage requirements.
   */
  export interface Schema$QualityRichsnippetsAppsProtosLaunchableAppPerDocData {
    indexStatus?: string | null;
    /**
     * Android package id of the application associated with this document (example: 'com.imdb.mobile'), encoded with the Fingerprint2011() function.
     */
    packageIdFingerprint?: string | null;
    /**
     * A subset of the data in the PerAppInfo message, encoded to save on space. See quality/calypso/utils/app_info_utils.h for encoding/decoding.
     */
    perAppInfoEncoded?: string | null;
  }
  export interface Schema$QualityRichsnippetsAppsProtosLaunchAppInfoPerDocData {
    app?: Schema$QualityRichsnippetsAppsProtosLaunchableAppPerDocData[];
  }
  /**
   * This is a measure of how salient this country is for the document.
   */
  export interface Schema$QualitySalientCountriesSalientCountry {
    /**
     * 2-letter country format.
     */
    country?: string | null;
    /**
     * How salient this country is for the document. [0,1] range.
     */
    salience?: number | null;
  }
  /**
   * Set of SalientCountry for a document.
   */
  export interface Schema$QualitySalientCountriesSalientCountrySet {
    /**
     * Packed Country and salience optimized for index storage
     */
    packedCountry?: number[] | null;
    packedSalience?: number[] | null;
    salientCountry?: Schema$QualitySalientCountriesSalientCountry[];
  }
  /**
   * DocData contains additional salient-term-set-level information that complements a SalientTermSet.
   */
  export interface Schema$QualitySalientTermsDocData {
    /**
     * confidence is a measurement of how much data we had to compute the SalientTermSet. Range: [0.0, 1.0]
     */
    confidence?: number | null;
    /**
     * head_volume_ratio is the ratio of the sum of term frequency of the top K terms over the volume of all terms. Range: [0.0, 1.0]. K is defined by Accumulator2Params::head_size.
     */
    headVolumeRatio?: number | null;
    /**
     * language is the main language of this SalientTermSet.
     */
    language?: string | null;
    /**
     * signal_data contains signal-specific (e.g., body, anchors, clicks) data for this SalientTermSet.
     */
    signalData?: Schema$QualitySalientTermsSignalData[];
    /**
     * virtual_volume is a measurement of how much data we had to compute the SalientTermSet. Range: [0.0, +infinity)].
     */
    virtualVolume?: number | null;
  }
  /**
   * SalientTerm can be two things depending on where this message is. When right under a SalientTermSet, it is a normalized term and weight pair, along with other term-level data. When under another SalientTerm message, it is a non-normalized original term (see original_term field).
   */
  export interface Schema$QualitySalientTermsSalientTerm {
    /**
     * idf of the original_term. Used by Accumulator2. This field is only available in debug mode.
     */
    idf?: number | null;
    /**
     * label can be two things depending on where this message is. When right under a SalientTermSet, it is the normalized term returned by quality_salient_terms::utils::NormalizeTerm() from salient_terms_utils.h. When under another SalientTerm message, it is the original term as found in a signal (see original_term field).
     */
    label?: string | null;
    /**
     * original_term are the different ways we found this normalized term in the signals. They are in increasing idf order (the most common version first). An empty string means that this original term is the same as the label field in the parent SalientTerm message. NOTE: Please do not access this field directly. Use quality_salient_terms::utils::OriginalTermsIterator from salient_terms_utils.h instead.
     */
    originalTerm?: Schema$QualitySalientTermsSalientTerm[];
    /**
     * salience is the importance of the term as a descriptor in [0, 1] (the higher the more important). This field takes precedence over weight field below. NOTE: Please do not access this field directly. Use quality_salient_terms::utils::GetSalience() from salient_terms_utils.h instead.
     */
    salience?: number | null;
    /**
     * signal_term contains extra signal-specific (e.g., body, anchors, clicks) data for this term.
     */
    signalTerm?: Schema$QualitySalientTermsSignalTermData[];
    /**
     * virtual_tf is the accumulated corrected term frequency from all the signals. This field is only available in debug mode.
     */
    virtualTf?: number | null;
    /**
     * weight is the importance of the term as a descriptor in [0, 100] (the higher the more important). NOTE: Please do not access this field directly. Use quality_salient_terms::utils::GetSalience() from salient_terms_utils.h instead. DEPRECATED: prefer salience field above.
     */
    weight?: number | null;
  }
  /**
   * SalientTermSet is a collection of terms (unigrams and bigrams) with associated weights that can describe something. The "salient terms".
   */
  export interface Schema$QualitySalientTermsSalientTermSet {
    /**
     * doc_data contain additional salient-term-set-level data.
     */
    docData?: Schema$QualitySalientTermsDocData;
    /**
     * salient_term is the list of terms that are good descriptors, sorted in decreasing order of weight.
     */
    salientTerm?: Schema$QualitySalientTermsSalientTerm[];
    /**
     * version is the Salient Terms version used to create the SalientTermSet. This is specific to web documents salient terms.
     */
    version?: string | null;
  }
  /**
   * SignalData stores signal-specific salient-term-set-level information. Stores mostly internal data as it is one of the primary data structures used in the populators.
   */
  export interface Schema$QualitySalientTermsSignalData {
    /**
     * A fixed bias for this signal, the higher the stronger. This can be used to balance the weight of signals independently of the confidence we give it. This field is only available in debug mode.
     */
    bias?: number | null;
    /**
     * The measurement of how much we trust this signal. Range: [0.0, 1.0] This field is available is both debug and non-debug mode.
     */
    confidence?: number | null;
    /**
     * Raw saliences equal to half_salience will be equal to 0.5 normalized. Range: [0, volume]. This field is only available in debug mode.
     */
    halfSalience?: number | null;
    /**
     * The minimum TF for a term not to be considered noise. While the possible range of values for this field is [0, observed_volume], it is expected to be a somewhat small percentage of observed_volume (e.g. 5%). This field is only available in debug mode.
     */
    noiseCorrection?: number | null;
    /**
     * The measurement of how much we trust this signal, calculated using the observed volume. Range: [0.0, 1.0] This field is only available in debug mode.
     */
    observedConfidence?: number | null;
    /**
     * The amount of signal we observed for a document. Range: [0.0, +infinity) This field is only available in debug mode.
     */
    observedVolume?: number | null;
    /**
     * The amount of raw signal we observed for a document. Range: [0.0, +infinity) This field is only available in debug mode.
     */
    rawVolume?: number | null;
    /**
     * source is the type of the signal of this SignalData.
     */
    source?: string | null;
    /**
     * The amount of signal left after applying all corrections. Range: [0.0, +infinity) This field is only available in debug mode.
     */
    volume?: number | null;
  }
  /**
   * SignalTermData is signal-specific term-level information. Stores mostly internal data as it is one of the primary data structures used in the populators.
   */
  export interface Schema$QualitySalientTermsSignalTermData {
    /**
     * The deduction of bigram counts from its unigram children. This field is only available in debug mode.
     */
    bigramDiscountTf?: number | null;
    /**
     * How much we trust this bigram. For bigrams only. Range: [0.0, 1.0] This field is only available in debug mode.
     */
    bigramness?: number | null;
    /**
     * Measures how topical this term is to a particular signal. A term like "lincoln" in the Abraham Lincoln's Wikipedia page should have a centrality close to 1.0 while non-central terms like "florida" should have a centrality close to 0.0. Range: [0.0, 1.0] This field is only available in debug mode.
     */
    centrality?: number | null;
    /**
     * The final term frequency for a particular term. This field is only available in debug mode.
     */
    correctedTf?: number | null;
    /**
     * The term frequency we were expecting for a term given its IDF. Range: [0, observed_volume] This field is only available in debug mode.
     */
    expectedTf?: number | null;
    /**
     * Global NPMI. For bigrams only. This is a measure of the quality of bigrams calculated using IDF. Range: [-1.0, 1.0] This field is only available in debug mode.
     */
    globalNpmi?: number | null;
    /**
     * The IDF of the label of a particular term. For a canonical term, this is the mean IDF of its originals, weighted by their observed TF. This field is only available in debug mode.
     */
    idf?: number | null;
    /**
     * Whether or not this term is a bigram. This field is only available in debug mode.
     */
    isBigram?: boolean | null;
    /**
     * Raw string that identifies a particular term. This field is only available in debug mode.
     */
    label?: string | null;
    /**
     * Local NPMI (normalized pointwise mutual information). For bigrams only. This is a measure of the quality of bigrams calculated using observed TF. Range: [-1.0, 1.0] This field is only available in debug mode.
     */
    localNpmi?: number | null;
    /**
     * The observed term frequency in a particular signal. This field is only available in debug mode.
     */
    observedTf?: number | null;
    /**
     * The list of the original terms for a canonical. This is used in the pipeline and it is not present in the final output. This field is only available in debug mode.
     */
    originalTerm?: Schema$QualitySalientTermsSignalTermData[];
    /**
     * The raw term frequency in a particular signal. This field is only available in debug mode.
     */
    rawTf?: number | null;
    /**
     * The measure of how important this term is in this signal. Range: [0.0, 1.0] This field is only available in debug mode.
     */
    salience?: number | null;
    /**
     * source is the type of the signal of this SignalTermData.
     */
    source?: string | null;
  }
  export interface Schema$QualitySherlockKnexAnnotation {
    item?: Schema$QualitySherlockKnexAnnotationItem[];
  }
  export interface Schema$QualitySherlockKnexAnnotationItem {
    /**
     * in [0, 1].
     */
    calibratedScore?: number | null;
    debugName?: string | null;
    /**
     * in /m/ or /g/.
     */
    equivalentMid?: string | null;
    /**
     * in [0, 1].
     */
    score?: number | null;
    version?: number | null;
  }
  /**
   * This proto is a lightweight version of ShoppingAnnotation in docjoin attachment. We're doing a deep copy of protos defined in ShoppingAnnotation so that we can control individual fields that will sit in Muppet. Data here will be used for scoring organic shopping web results and previews. Many shopping related signals, e.g., product review score, are also served from this attachment. DEPRECATED: Please use UDR (go/udr) instead.
   */
  export interface Schema$QualityShoppingShoppingAttachment {
    /**
     * Score from the blockbert article classifier model. go/article-understanding-project
     */
    datasetModelArticleScore?: number | null;
    datasetModelBuyingGuideScore?: number | null;
    /**
     * From forum and qna confidence score * 100, http://go/sdu-ugc-page-intro
     */
    datasetModelForumListScore?: number | null;
    datasetModelForumSingleScore?: number | null;
    datasetModelIndirectAvailabilityScore?: number | null;
    datasetModelInStoreOnlyScore?: number | null;
    /**
     * From indexing.ml.PageType.confidence * 100 (DatasetModelAnnotation in cdoc) go/sdu-shopping-page-intro
     */
    datasetModelMultiProductScore?: number | null;
    datasetModelProductComparisonScore?: number | null;
    datasetModelProductReviewScore?: number | null;
    datasetModelProductTopnScore?: number | null;
    datasetModelQnaListScore?: number | null;
    datasetModelQnaSingleScore?: number | null;
    datasetModelSingleProductScore?: number | null;
    datasetModelSoldOutScore?: number | null;
    /**
     * From indexing.badpages.CollapserInfo.expired_shopping_page_score * 100
     */
    expiredShoppingPageScore?: number | null;
    /**
     * From MagicPageTypeAnnotation.multiplicity.confidence_score * 100 Deprecated as of July 2020 when dataset_model_multi_product_score and dataset_model_single_product_score were added.
     */
    multiProductScore?: number | null;
    product?: Schema$QualityShoppingShoppingAttachmentProduct[];
    /**
     * From ShoppingSiteClassifier.score * 100
     */
    shoppingSiteScore?: number | null;
    /**
     * From ShoppingSiteClassifierShopfab.score * 100
     */
    shoppingSiteScoreShopfab?: number | null;
    singleProductScore?: number | null;
  }
  export interface Schema$QualityShoppingShoppingAttachmentLocale {
    /**
     * Use integers for fast scoring. Note: 26 is UNKNOWN_LANGUAGE_ID, 0 is UNKNOWN region, see i18n::languages::Language and StableInternalRegionconverter Use -1 as default for both.
     */
    languageId?: number | null;
    regionId?: number | null;
  }
  /**
   * Moka product attribute facet (go/gx).
   */
  export interface Schema$QualityShoppingShoppingAttachmentMokaFacetValue {
    facetId?: string | null;
    measureValue?: number | null;
    tagId?: string | null;
  }
  export interface Schema$QualityShoppingShoppingAttachmentOffer {
    condition?: string | null;
    controlType?: string | null;
    /**
     * fingerprint of original offer item_urland mobile_offer_url (if present) to be able to understand if offer data came from different url.
     */
    fingerprintOfOfferUrls?: string[] | null;
    /**
     * Global trade item number (GTIN).
     */
    gtinValue?: string[] | null;
    /**
     * image_id is sorted and distinct for efficient search during serving.
     */
    imageId?: string[] | null;
    /**
     * inferred_images are sorted by inferred_image_id for efficient search during serving.
     */
    inferredImages?: Schema$ShoppingWebentityShoppingAnnotationInferredImage[];
    /**
     * Is the offer Lens buildable. The corresponding field in Shopping Annotation is SurfaceSelection.
     */
    isLensBuildable?: boolean | null;
    /**
     * information about methods used to match offer with indexed url. See shopping_annotation.proto
     */
    matchingType?: string | null;
    /**
     * account_id of the merchant in shopping systems.
     */
    merchantAccountId?: string | null;
    /**
     * merchant_item_id is meaningless without the merchant_account_id.
     */
    merchantItemId?: string | null;
    /**
     * direct to consumer brand merchant relationship
     */
    nonDisplayableBrandMerchantRelationship?: string | null;
    nonDisplayableCurrency?: string | null;
    /**
     * Normalized riskiness score for Organic destinations. It's in range [1,1000] with 1 being the worst score and 1000 being the best.
     */
    nonDisplayableOrganicScoreMillis?: number | null;
    /**
     * This is experimental, not filled in yet and not intended to be used. Please contact buyable-corpus@ before considering using this field.
     */
    nonDisplayableStaleAvailability?: Schema$ShoppingWebentityShoppingAnnotationOfferAvailabilityInfo;
    offerDocid?: string | null;
    refType?: string | null;
    soriVersionId?: Schema$ShoppingWebentityShoppingAnnotationSoriVersionId;
  }
  /**
   * Next ID: 18
   */
  export interface Schema$QualityShoppingShoppingAttachmentPBlock {
    /**
     * Field full_title may contain duplicate info from title and list_title.
     */
    fullTitle?: string | null;
    /**
     * Ordering for `image_docid`, and `image_info` are the same.
     */
    imageDocid?: string[] | null;
    imageInfo?: Schema$QualityShoppingShoppingAttachmentPBlockImageInfo[];
    isFreeDelivery?: boolean | null;
    isFreeReturn?: boolean | null;
    listTitle?: string | null;
    maxPriceValue?: number | null;
    minPriceValue?: number | null;
    price?: string | null;
    priceCurrency?: string | null;
    priceValue?: number | null;
    /**
     * Product info extracted by Product Blocks go/sdu-shopping-page-intro and go/product-block-extraction. Here is an example of a page with a ## list_title (Shoes) and 3 blocks with their own titles: | Shoes | | ---------------------| | * For Running | | ---------------------| | * Men's Hiking | | ---------------------| ## | * Dress Shoes | The field full_title is what we constructed to best describe the product in the block. For example, for the above 3 blocks, their full_titles will contain info from list_title: "Shoes For Running", "Shoes Men's Hiking", "Dress Shoes". Note that the list_title is not repeated for the 3rd block Real sample pages: http://screen/6UaoBtwWsLfbSKg http://screen/BDHRgDonKG3KcXu, http://screen/53tLwNaX8mmYzDz
     */
    title?: string | null;
  }
  export interface Schema$QualityShoppingShoppingAttachmentPBlockImageInfo {
    height?: number | null;
    width?: number | null;
  }
  export interface Schema$QualityShoppingShoppingAttachmentProduct {
    aggregateRating?: Schema$ShoppingWebentityShoppingAnnotationProductRating;
    brandEntityId?: string | null;
    catalogId?: string | null;
    globalProductClusterId?: string | null;
    images?: Schema$ShoppingWebentityShoppingAnnotationProductImage[];
    locale?: Schema$QualityShoppingShoppingAttachmentLocale;
    mokaFacet?: Schema$QualityShoppingShoppingAttachmentMokaFacetValue[];
    nonDisplayableDescription?: string | null;
    nonDisplayableTitle?: string | null;
    offer?: Schema$QualityShoppingShoppingAttachmentOffer;
    /**
     * Whether an outlink points to the same domain or off-domain. Only added if the relationship is known, and the Offer has ref_type of OUTLINK.
     */
    outlinkDomainRelationship?: string | null;
    /**
     * Client needs to make decision on which field to use when both non_displayable_title and pblock.final_title are present.
     */
    pblock?: Schema$QualityShoppingShoppingAttachmentPBlock;
    /**
     * Product level Browseonomy ids from shopping_annotation.product.browseonomy.
     */
    productBrowseonomyIds?: number[] | null;
    productClusterMid?: string | null;
    /**
     * Organic product popularity.
     */
    productPopularity?: number | null;
    /**
     * Relevance embedding from ShoppingAnnotation.Product
     */
    relevanceEmbedding?: Schema$QualityRankembedMustangMustangRankEmbedInfo[];
    /**
     * Matched/Inferred weak product identity - set only if the global_product_cluster_id is missing
     */
    weakGlobalProductClusterId?: string | null;
  }
  /**
   * Sitelink candidates that is generated from breadcrumbs.
   */
  export interface Schema$QualitySitemapBreadcrumbTarget {
    docs?: Schema$QualitySitemapBreadcrumbTargetDoc[];
  }
  export interface Schema$QualitySitemapBreadcrumbTargetDoc {
    /**
     * The number of web pages that contains the url in their breadcrumbs.
     */
    count?: number | null;
    title?: string | null;
    url?: string | null;
  }
  export interface Schema$QualitySitemapCoClickTarget {
    docs?: Schema$QualitySitemapCoClickTargetDoc[];
    language?: string | null;
  }
  export interface Schema$QualitySitemapCoClickTargetDoc {
    coClickByLocale?: Schema$QualitySitemapCoClickTargetDocCoClickByLocale[];
    title?: string | null;
    url?: string | null;
  }
  export interface Schema$QualitySitemapCoClickTargetDocCoClickByLocale {
    coClicks?: number | null;
    coClicksCapped?: number | null;
    coClicksParent?: number | null;
    locale?: string | null;
  }
  /**
   * Scoring signals for computing the sitelink score. This message is currently intended only for debugging. Accordingly, this is populated in CDoc but not in MDU. It is enforced by the [(exclude_from_mdu) = true] annotation of the corresponding fields in Target and TargetGroup.
   */
  export interface Schema$QualitySitemapScoringSignals {
    annotations?: string[] | null;
    chromeTransCount?: string | null;
    chromeTransProb?: number | null;
    chromeWeight?: number | null;
    country?: string[] | null;
    countryConfidence?: number[] | null;
    impressions?: string | null;
    langConfidence?: number[] | null;
    language?: string[] | null;
    localCountryIdentifier?: string[] | null;
    longClicks?: string | null;
    longCtr?: number | null;
    navboostScore?: number | null;
    navmenuScore?: number | null;
    pagerank?: number | null;
    recentLongCtr?: number | null;
    targetCdocLanguages?: number[] | null;
    titleScore?: number | null;
  }
  /**
   * Information about a single sub-result.
   */
  export interface Schema$QualitySitemapSubresult {
    docid?: string | null;
    itemMetadata?: Schema$QualitySitemapThirdPartyCarouselsListItemMuppetMetadata;
  }
  /**
   * A container for encapsulating a list of sub-results.
   */
  export interface Schema$QualitySitemapSubresultList {
    subresult?: Schema$QualitySitemapSubresult[];
  }
  /**
   * Represents a single sitelink target, contains basic information used to display the target (such as url and title) and to, maybe, dynamically change the way targets are selected and/or ranked (such as score and is_mobile). Please update the TargetInternal message if you make a change to this proto. See "Note on adding new fields".
   */
  export interface Schema$QualitySitemapTarget {
    DEPRECATEDSnippet?: string[] | null;
    isGoodForMobile?: boolean | null;
    isMobileN1dup?: boolean | null;
    /**
     * The languages of the document, taken from its cdoc.properties().languages()
     */
    languages?: number[] | null;
    /**
     * The image data will be copied from the DocInfo response, and will be retrieved online, so this field should not be populated during indexing. This is a temporary field for experimentation.
     */
    salientImage?: Schema$WWWResultInfoSubImageDocInfo;
    score?: number | null;
    scoringSignals?: Schema$QualitySitemapScoringSignals;
    /**
     * Section texts used for Page Anchors Preview (go/page-anchor-preview-dd).
     */
    sectionTexts?: string[] | null;
    /**
     * The snippet response for the target document for an empty query.
     */
    snippetResponse?: Schema$GenericSnippetResponse;
    sourceAnchor?: boolean | null;
    title?: string | null;
    twoLevelScore?: number | null;
    url?: string | null;
  }
  /**
   * Represents a set of targets. The group may have a label field to uniquely identify this target group among others - for instance, if these targets' titles were generated using an alternative title algorithm, the label can be "newtitles". See "Note on adding new fields".
   */
  export interface Schema$QualitySitemapTargetGroup {
    /**
     * If all the targets in this group are named anchors on the source page.
     */
    allTargetsNamedAnchors?: boolean | null;
    /**
     * If all the targets in this group are named topictags_scrollto on the source page.
     */
    allTargetsNamedTopictagsScrollto?: boolean | null;
    breadcrumbTarget?: Schema$QualitySitemapBreadcrumbTarget;
    coClickTarget?: Schema$QualitySitemapCoClickTarget[];
    countryCode?: string | null;
    DEPRECATEDCountry?: number | null;
    label?: string | null;
    language?: number | null;
    modifiedByHostcardHandler?: boolean | null;
    scoringSignals?: Schema$QualitySitemapScoringSignals;
    Target?: Schema$QualitySitemapTarget[];
    /**
     * A list of top urls with highest two_level_score, i.e., chrome_trans_clicks.
     */
    topUrl?: Schema$QualitySitemapTopURL[];
    twoLevelTarget?: Schema$QualitySitemapTwoLevelTarget[];
  }
  /**
   * A set of metadata about a list item that is passed on to Muppet from indexing.
   */
  export interface Schema$QualitySitemapThirdPartyCarouselsListItemMuppetMetadata {
    /**
     * DEPRECATED. No longer populated, and not used anywhere.
     */
    urlFoundOnPage?: boolean | null;
  }
  export interface Schema$QualitySitemapTopURL {
    score?: number | null;
    url?: string | null;
  }
  export interface Schema$QualitySitemapTwoLevelTarget {
    firstLevelTarget?: Schema$QualitySitemapTarget;
    secondLevelTarget?: Schema$QualitySitemapTarget[];
  }
  /**
   * A bolded range in printed snippet lines.
   */
  export interface Schema$QualitySnippetsTruncationSnippetBoldedRange {
    /**
     * Bolded range [begin, end)
     */
    begin?: Schema$QualitySnippetsTruncationSnippetBoldedRangePosition;
    end?: Schema$QualitySnippetsTruncationSnippetBoldedRangePosition;
    /**
     * Only populated for debugging.
     */
    text?: string | null;
    type?: string | null;
  }
  export interface Schema$QualitySnippetsTruncationSnippetBoldedRangePosition {
    byteOffset?: number | null;
    index?: number | null;
  }
  /**
   * Unreliable dates signals per URL. go/unreliable-dates-dd
   */
  export interface Schema$QualityTimebasedDateUnreliability {
    petacatScores?: Schema$QualityTimebasedPetacatDateUnreliability[];
    /**
     * If scores are missing, the date is reliable by default. max(petacat.unreliable_dates_score)
     */
    unreliableDatesScore?: number | null;
    /**
     * max(petacat.unreliable_dates_score * petacat.date_exposure_score)
     */
    unreliableDatesScoreExposureAdjusted?: number | null;
  }
  export interface Schema$QualityTimebasedLastSignificantUpdate {
    /**
     * This is stored only for debugging purposes. Please consult dates@ team before making a dependency on this field.
     */
    adjustmentInfo?: Schema$QualityTimebasedLastSignificantUpdateAdjustments;
    /**
     * LastSignificantUpdate as UNIX timestamp in seconds. This is the new signal (go/lsu-dd) from LSU Selector V2 (once that is enabled, see b/171879888 for status), falling back to the legacy V1 signal if the HIGH_PRECISION signal does not exist. Please use the 'source' field to determine where the value comes from.
     */
    date?: string | null;
    dateUnreliabilityInfo?: Schema$QualityTimebasedDateUnreliability;
    /**
     * The source the signal comes from.
     */
    source?: string | null;
  }
  export interface Schema$QualityTimebasedLastSignificantUpdateAdjustments {
    /**
     * If the selected LSU has been adjusted, i.e. the maximum passage timestamp, firstseen or contentage were assigned to LSU, the adjustment source is stored here.
     */
    adjustmentSource?: string | null;
    /**
     * The timestamp is precise when it's derived from existing (\>March 2022) passage timestamp.
     */
    isUpperboundTimestampPrecise?: boolean | null;
    /**
     * The timestamp that was picked up by the component indicated in the LastSignificantUpdateSource but was dropped due to exceeding the upper bound. Set only if it is not equal to final LSU.
     */
    unboundedTimestampInSeconds?: string | null;
    /**
     * The source that produced the unbounded timestamp.
     */
    unboundedTimestampSource?: string | null;
    /**
     * The upperbound value derived from passage timestamps. If present, the LSU date should never exceed this value. Design doc: go/lsu-max-passage-timestamp
     */
    upperboundTimestampInSeconds?: string | null;
  }
  export interface Schema$QualityTimebasedPageType {
    /**
     * Set to true if this page is classified as a forum page.
     */
    isForumPage?: boolean | null;
    /**
     * Set to true if this page has a fresh repeated date sequence.
     */
    isPageWithFreshRepeatedDates?: boolean | null;
    /**
     * Set to true if this page is classified as a question answers page.
     */
    isQnaPage?: boolean | null;
  }
  /**
   * Unreliable dates signals per Domain+Petacat. go/unreliable-dates-dd NOTE(tomwesolowski): As of now, we can safely keep up to 8 4-bytes fields in this proto due to Laelaps constraint of max. 50k bytes per single value. We keep all the petacats categories for a domain under the same key. The largest sites (Youtube, Wikipedia, Facebook) have up to 1.5k different petacat verticals. 1500 * 4 * 8 / 1024 bytes = 46.9k bytes
   */
  export interface Schema$QualityTimebasedPetacatDateUnreliability {
    contentageReliability?: number | null;
    dateExposure?: number | null;
    /**
     * This is date_exposure after sigmoid transformation.
     */
    dateExposureScore?: number | null;
    /**
     * Auxiliary scores. The unreliable_dates_score is a product of these scores excl. date_exposure. The definition for each of the scores you can find at go/unreliable-dates-dd
     */
    dateVsContentageDistributionSkew?: number | null;
    isForumQnaSocialMediaProbability?: number | null;
    /**
     * go/verticals4
     */
    petacatId?: number | null;
    /**
     * This is a final score excl. date exposure component.
     */
    unreliableDatesScore?: number | null;
  }
  /**
   * Next ID: 21
   */
  export interface Schema$QualityTimebasedSyntacticDate {
    /**
     * The following field is set only when the byline date is different from the "date" field above. Currently this happens when the byline date is within the 24 hours of the crawl time, or close but not exactly the same as blog post date due to time zone. The syntactic date is never later than the crawl time. NOTE: If this field is set, use_as_byline_date will be meaningless, and better to be cleared.
     */
    bylineDate?: string | null;
    /**
     * The number of seconds since epoch (Jan 1, 1970). This can be negative to indicate a publication date that is before 1970. For example, the ones from NY Times archive: "http://select.nytimes.com/gst/abstract.html?res=F10B13FB3D5A10728FDDAF089" "4DD405B8588F1D3&scp=91&sq=world+war+II&st=p"
     */
    date?: string | null;
    daterange?: Schema$QualityTimebasedSyntacticDateDateRange;
    debugInfo?: string | null;
    /**
     * If set to true, the source of the date has explicit time zone specification. Note: This is only used internally and should not be populated in docjoins.
     */
    fromExplicitTimeZone?: boolean | null;
    /**
     * Used to store extra information about the syntactic date. For now only two bits are set. Please refer to the encoding/decoding functions provided in: quality/timebased/syntacticdate/util.h Bit 1 = High confidence byline. This bit is set if the syntactic date has a byline date and this date is considered to be high confidence. Bit 2 = High confidence byline without content age. This bit is set if the syntactic date has a byline date and this date is considered to be high confidence without support from content age.
     */
    info?: number | null;
    position?: Schema$QualityTimebasedSyntacticDatePosition;
    /**
     * The precision mark should be of type PRECISION_MARK.
     */
    precisionMark?: number | null;
    /**
     * If this is true, do not use syntactic date in date restricts.
     */
    syntacticDateNotForRestrict?: boolean | null;
    /**
     * Indicates the time zone offset in seconds applied to derive `date' in UTC. Example: Annotation: "1pm PST" (UTC-8) =\> -8 * 3600 = -28800 Note: This is only used internally and should not be populated in docjoins.
     */
    timeZoneOffsetSeconds?: string | null;
    /**
     * This bit is set if we believe that the syntactic date is really high confidence, but does not qualify as a byline date.
     */
    trustSyntacticDateInRanking?: boolean | null;
    /**
     * Whether this date is good for display as the snippet byline date.
     */
    useAsBylineDate?: boolean | null;
    /**
     * This bit is set if the syntactic date is good to be used in site-level timezone guessing statistics calculation. (The date should be absolute date having a timestamp with hour and minute level information. It can come with or without time zone information, which is indicated in from_explicit_time_zone field defined below.)
     */
    useInTimeZoneGuessingMode?: boolean | null;
    /**
     * If true, the DateRange is used as date restrict, if false, the date is used as date restrict. Has no effect if syntactic_date_not_for_restrict is true.
     */
    useRangeInsteadOfDateForRestrict?: boolean | null;
  }
  /**
   * If the single date (plus the precision mark) is still not good enough, we will use the following fields for a date range. In this case, the fields above may all be empty.
   */
  export interface Schema$QualityTimebasedSyntacticDateDateRange {
    end?: string | null;
    start?: string | null;
  }
  /**
   * The following positions are the byte offset in doc body, which is consistent with the date annotations. (See google3/repository/annotations/proto/annotations.proto) These are given when we want to use the date as a byline date, so the snippet generating code will know the positions.
   */
  export interface Schema$QualityTimebasedSyntacticDatePosition {
    begin?: number | null;
    end?: number | null;
  }
  /**
   * Protocol message for data related to good travel sites. This data is stored as signals data in docjoins.
   */
  export interface Schema$QualityTravelGoodSitesData {
    i18n?: Schema$QualityTravelGoodSitesDataI18n[];
    isAggr?: boolean | null;
    isAttractionOfficial?: boolean | null;
    isEntity?: boolean | null;
    isHotelOfficial?: boolean | null;
    /**
     * Factor that determines how local anchor credit is scaled before being added to global anchors.
     */
    normalizationFactor?: number | null;
    signal?: Schema$QualityTravelGoodSitesDataSignal[];
    site?: string | null;
    /**
     * Site quality score, which determines the site type.
     */
    totalScore?: number | null;
    type?: string | null;
  }
  export interface Schema$QualityTravelGoodSitesDataI18n {
    locale?: string | null;
    type?: string | null;
  }
  /**
   * Raw signals that determine the site quality score.
   */
  export interface Schema$QualityTravelGoodSitesDataSignal {
    name?: string | null;
    value?: number | null;
  }
  /**
   * Audio-based language information about a Watch Page. For more information: https://g3doc.corp.google.com/video/timedtext/g3doc/ali.md
   */
  export interface Schema$QualityVidyaVideoLanguageVideoLanguage {
    /**
     * Audio language of video classified by Automatic Language Identification. It corresponds to the first language (the highest confidence) in ALIResults.lang_results.
     */
    language?: string | null;
    /**
     * Type of detected speech.
     */
    speechClass?: string | null;
  }
  /**
   * Stores cluster scoring information for an entity Next Id: 6
   */
  export interface Schema$QualityViewsExtractionClusterInfo {
    /**
     * The cluster_id represents the id of the set entity that WebRef provides.
     */
    clusterId?: string | null;
    /**
     * Cluster set qref confidence score.
     */
    clusterSetScore?: number | null;
    /**
     * The mids of cluster members that are part of the same cluster. Note that cluster members may end up having their own interpretation (EntityInfo which includes a ClusterInfo) or not (eg because they do not explain the full query, and so aqua does not output an interpretation for them). The latter case (a cluster member is output only as part of this field), is equivalent to its score being 0.
     */
    clusterSiblingMid?: string[] | null;
    /**
     * The score represents the score of the entity within the cluster.
     */
    score?: number | null;
    subCluster?: Schema$QualityViewsExtractionClusterInfo[];
  }
  /**
   * Wraps other annotations that are run over auto-generated video captions.
   */
  export interface Schema$QualityWebanswersTranscriptAnnotations {
    videoTranscriptAnnotations?: Schema$QualityWebanswersVideoTranscriptAnnotations[];
  }
  export interface Schema$QualityWebanswersVideoTranscriptAnnotations {
    /**
     * Should precisely match the amarna_docid in ContentBasedVideoMetadata.
     */
    amarnaDocid?: string | null;
    /**
     * The results of ASR transcript quality analysis.
     */
    asrRepair?: Schema$IndexingVideosAsrTranscriptRepairAnnotation;
    /**
     * The language of the transcript as recorded in Amarna.
     */
    lang?: string | null;
    punctuatedTranscript?: string | null;
    saftDocument?: Schema$NlpSaftDocument;
    saftSentenceBoundary?: Schema$SentenceBoundaryAnnotations;
    /**
     * Timing information that maps sentence boundaries in the punctuated transcript with timing offsets for the start and end of those sentences.
     */
    timingInfo?: Schema$QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotations;
    webrefEntities?: Schema$RepositoryWebrefWebrefEntities;
  }
  /**
   * YouTube caption timing information for http://go/video-answers.
   */
  export interface Schema$QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotations {
    durationMs?: number | null;
    instances?: Schema$QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsInstance[];
    uploaderName?: string | null;
  }
  /**
   * Byte-offset and timing information in videos. In CompositeDoc, we will store the instance per sentence.
   */
  export interface Schema$QualityWebanswersVideoYouTubeCaptionTimingInfoAnnotationsInstance {
    /**
     * Byte offsets in HTML. begin is inclusive and end is exclusive.
     */
    begin?: number | null;
    end?: number | null;
    videoBeginMs?: number | null;
    videoEndMs?: number | null;
  }
  /**
   * Domain registration information for the document. NEXT ID TO USE: 3
   */
  export interface Schema$RegistrationInfo {
    /**
     * This is the number of days since January 1st 1995 that this domain was last created. This should always fit in 15 bits.
     */
    createdDate?: number | null;
    /**
     * This is the number of days since January 1st 1995 that this domain last expired. This should always fit in 15 bits. Jan 1st 1995 was chosen by the history project as a special epoch date. Both the registrationinfo dates and the linkage dates are measured in days since this epoch.
     */
    expiredDate?: number | null;
  }
  /**
   * GeoTopicality of a document is a set of GeoTopics ordered by their normalized scores.
   */
  export interface Schema$RepositoryAnnotationsGeoTopic {
    /**
     * Stores parent/container information containing city, province & country.
     */
    address?: Schema$GeostoreAddressProto;
    /**
     * The raw scores used to calculate the normalized_score. Note that not all these scores may be exposed to the users.
     */
    componentScores?: Schema$RepositoryAnnotationsGeoTopicalityScore[];
    /**
     * A score [0, 1] indicating the confidence.
     */
    confidence?: number | null;
    /**
     * Is this a dense city (e.g., population \> 100k)?
     */
    denseCity?: boolean | null;
    /**
     * Sub type for POI types like ESTABLISHMENT_POI, ESTABLISHMENT_GROUNDS & ESTABLISHMENT_BUILDING
     */
    establishmentType?: number | null;
    /**
     * Latitude and Longitude of the location.
     */
    latE7?: number | null;
    lngE7?: number | null;
    /**
     * Name of the Geographic location. This is the normalized name.
     */
    locationName?: string | null;
    /**
     * A score [0, 1] indicating the likelihood of the location being the GeoTopicality.
     */
    normalizedScore?: number | null;
    /**
     * Oyster Feature ID of the location.
     */
    oysterId?: Schema$GeostoreFeatureIdProto;
    /**
     * Oyster Feature Type
     */
    oysterType?: number | null;
    /**
     * The sum of the normalized scores of POIs contained within a particular locality.
     */
    sumContainedPoiNormalizedScores?: number | null;
  }
  export interface Schema$RepositoryAnnotationsGeoTopicality {
    /**
     * The geotopics are ordered by normalized_score in descending order.
     */
    geotopics?: Schema$RepositoryAnnotationsGeoTopic[];
  }
  export interface Schema$RepositoryAnnotationsGeoTopicalityScore {
    rawScore?: number | null;
    type?: string | null;
  }
  /**
   * A conceptual structure for storing sentiment snippet information in mustang. Essentially an adaptation of PhraseAnnotationProperties from //repository/annotations/proto/annotations.proto.
   */
  export interface Schema$RepositoryAnnotationsMustangSentimentSnippetAnnotations {
    /**
     * Deprecated: use snippet_score instead
     */
    deprecatedMagnitude?: number | null;
    /**
     * Deprecated: use snippet_score instead
     */
    deprecatedPolarity?: number | null;
    end?: number | null;
    isTruncated?: boolean | null;
    phraseType?: string | null;
    snippetScore?: number | null;
    /**
     * This protobuffer is serving double duty as both a Mustang attachment and the response proto that gets returned by Mustang in the WWWSnippetResponse's info MessageSet. When stored as an attachment, this field will always be empty. However, when returned with the WWWSnippetResponse, Mustang will print and store the actual sentiment snippet's text here.
     */
    snippetText?: string | null;
    /**
     * begin and end are token offsets.
     */
    start?: number | null;
  }
  export interface Schema$RepositoryAnnotationsRdfaBreadcrumbs {
    /**
     * Each crumb represents one link of the breadcrumb chain.
     */
    crumb?: Schema$RepositoryAnnotationsRdfaCrumb[];
    /**
     * The URL of the document from which this breadcrumb trail was extracted.
     */
    url?: string | null;
  }
  /**
   * The information contained in a single crumb.
   */
  export interface Schema$RepositoryAnnotationsRdfaCrumb {
    /**
     * The text that represented this crumb in the document.
     */
    title?: string | null;
    /**
     * The URL linked from this crumb.
     */
    url?: string | null;
  }
  /**
   * This structure holds data for application information for rich snippets Next ID: 53
   */
  export interface Schema$RepositoryAnnotationsRdfaRdfaRichSnippetsApplication {
    /**
     * Fields for internal use
     */
    applicationUrl?: string | null;
    appTypeData?: Schema$RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationAppTypeData;
    breadcrumbs?: Schema$RepositoryAnnotationsRdfaBreadcrumbs;
    /**
     * Application information.
     */
    category?: string[] | null;
    /**
     * These are currently used only for Google Play.
     */
    countriesSupported?: string[] | null;
    countryPrices?: Schema$RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationCountryPrice[];
    currency?: string | null;
    description?: string | null;
    /**
     * Developer console ID of the app if it exists. The ID is available for an app registered to Google Developers Console, not Play Developer Console.
     */
    devConsoleId?: string | null;
    /**
     * Top 1 of extracted icon colors. We keep this field for backward compatibility.
     */
    extractedIconColor?: number | null;
    /**
     * Top 10 of extracted icon colors. r = (rgb \>\> 16) & 0xff; g = (rgb \>\> 8) & 0xff; b = rgb & 0xff;
     */
    extractedIconColors?: number[] | null;
    /**
     * Tags to be indexed for filtering, e.g. "ft_popular_score_gt_1m".
     */
    filteringTag?: string[] | null;
    genre?: string[] | null;
    /**
     * Whether the app has editors choice tag
     */
    hasEditorsChoiceBadge?: boolean | null;
    /**
     * Icon and Screenshots
     */
    iconUrlHref?: string | null;
    iconUrlThumbnail?: string | null;
    /**
     * Copied from google3/contentads/shared/boulder/mobile-app-data-image-data.proto.
     */
    imageData?: Schema$QualityCalypsoAppsUniversalImageData;
    /**
     * Whether the app offers in-app purchase.
     */
    inAppPurchase?: boolean | null;
    /**
     * Indicates if the localized data comes from default locale. This is needed because the default localized data does not specify its locale. If this is true, lang_locale may not be the correct locale and should be ignored.
     */
    isDefaultLangLocale?: boolean | null;
    /**
     * locale for the localized data, such as name, description and screenshots
     */
    langLocale?: string | null;
    lastUpdated?: string | null;
    /**
     * Unified proto for android LiveOps and iOS LiveEvents.
     */
    liveOpDetails?: Schema$QualityCalypsoAppsUniversalAuLiveOpsDetailInfo;
    localizedTrustedGenome?: Schema$RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationLocalizedTrustedGenome;
    /**
     * Market Android or itunes
     */
    marketplace?: string | null;
    name?: string | null;
    numDownloads?: string | null;
    /**
     * See google3/quality/richsnippets/schema/data/operating_systems_rules.txt for possible values.
     */
    operatingSystems?: string[] | null;
    /**
     * Whether this App is optional result for Grid UI.
     */
    optionalResult?: boolean | null;
    originalRating?: string | null;
    physicalDeviceTags?: string[] | null;
    platformTags?: string[] | null;
    popularScore?: number | null;
    /**
     * Price
     */
    price?: string | null;
    rankData?: Schema$RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankData;
    /**
     * Ratings and reviews Either for this version only or for all versions to be displayed.
     */
    rating?: string | null;
    ratingCount?: string | null;
    releaseDate?: string | null;
    reviewAuthor?: string | null;
    reviewCount?: string | null;
    /**
     * TODO(b/260128276) deprecate this field in favor of image_data.
     */
    screenUrlHref?: string[] | null;
    screenUrlThumbnail?: string[] | null;
    /**
     * bytes or numeric with MB or GB
     */
    size?: string | null;
    subcategory?: string[] | null;
    /**
     * Whether this App supports Android TV. Note that some App supports more than one platforms. So we would use boolean for a platform.
     */
    supportsAndroidTv?: boolean | null;
    /**
     * Whether this App supports Google Cast.
     */
    supportsChromecast?: boolean | null;
    totalRating?: number | null;
    /**
     * Rating_count including all versions of this application.
     */
    totalRatingCount?: number | null;
    /**
     * Trusted Genome data with categorical app information key: locale (e.g. en, en_US)
     */
    trustedGenomeData?: {
      [key: string]: Schema$VendingConsumerProtoTrustedGenomeAnnotation;
    } | null;
    /**
     * Vendor
     */
    vendor?: string | null;
    vendorCanonicalUrl?: string | null;
    vendorUrl?: string | null;
    version?: string | null;
  }
  export interface Schema$RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationAppTypeData {
    /**
     * Top level app category type (GAME or APPLICATION). Copied from playwright.
     */
    playStoreAppType?: string | null;
  }
  export interface Schema$RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationCountryPrice {
    countryCode?: string | null;
    /**
     * ISO 4217 currency code.
     */
    currencyCode?: string | null;
    /**
     * Price string converted from double value in a standard currency unit, like '199.35' or '1400'.
     */
    price?: string | null;
  }
  export interface Schema$RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationLocalizedTrustedGenome {
    /**
     * The chosen language
     */
    language?: string | null;
    /**
     * The TG tags matching the locale of the doc, if available
     */
    localizedTg?: Schema$VendingConsumerProtoTrustedGenomeAnnotation;
  }
  export interface Schema$RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRank {
    appStoreLink?: string | null;
    categoryId?: string | null;
    categoryName?: string | null;
    chartType?: string | null;
    rank?: string | null;
  }
  export interface Schema$RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRankData {
    /**
     * Copied from the category_id field from Playwright docs. It helps decide which category to show in app ranking info.
     */
    playwrightCategoryId?: string[] | null;
    rank?: Schema$RepositoryAnnotationsRdfaRdfaRichSnippetsApplicationRank[];
  }
  /**
   * Represents the aggregated score of the entities for a given name, aggregated over all sources. Next available tag: 3.
   */
  export interface Schema$RepositoryWebrefAggregatedEntityNameScores {
    entityScore?: Schema$RepositoryWebrefEntityNameScore[];
  }
  /**
   * Identifies a set of anchors in the CompositeDoc. Typically these anchors were collapsed by WebRef into a single anchor and they were treated by the annotator as equivalent. They all contain the same mentions (at the same offsets).
   */
  export interface Schema$RepositoryWebrefAnchorIndices {
    /**
     * The set of indices in the Anchors::anchor() array that belong to the collapsed anchors.
     */
    index?: number[] | null;
  }
  /**
   * Information about a category annotation on a name.
   */
  export interface Schema$RepositoryWebrefAnnotatedCategoryInfo {
    /**
     * A debug string for the category.
     */
    debugString?: string | null;
    /**
     * The mid of the entity representing the category.
     */
    mid?: string | null;
  }
  /**
   * Debug info about the concept annotations. Note that it might not be present in the output.
   */
  export interface Schema$RepositoryWebrefAnnotationDebugInfo {
    /**
     * Only use for debugging, this should not be displayed to user or used for any kind of logic/processing.
     */
    description?: string | null;
  }
  /**
   * Human ratings of webref annotations (document-level ratings, mention-level ratings, etc.).
   */
  export interface Schema$RepositoryWebrefAnnotationRatings {
    docLevelRelevanceRatings?: Schema$RepositoryWebrefDocLevelRelevanceRatings;
  }
  /**
   * Annotation statistics for each token type. Next available tag: 8.
   */
  export interface Schema$RepositoryWebrefAnnotationStatsPerType {
    /**
     * The average score for the open world for: - all ranges of this segment_type; - all capitalized ranges of this segment_type; - all uncapitalized ranges of this segment_type.
     */
    avgOpenWorld?: number | null;
    avgOpenWorldCap?: number | null;
    avgOpenWorldUncap?: number | null;
    /**
     * The number of ranges with candidates that made it past primary pruning for: - all ranges of this segment_type; - all capitalized ranges of this segment_type; - all uncapitalized ranges of this segment_type.
     */
    numRangesWithCandidates?: string | null;
    numRangesWithCandidatesCap?: string | null;
    numRangesWithCandidatesUncap?: string | null;
    /**
     * The segment type.
     */
    tokenType?: string | null;
  }
  /**
   * Holds annotator checkpoints which record the state of the annotations. This is useful for tracking down the source of diffs, in particular for non-determinism.
   */
  export interface Schema$RepositoryWebrefAnnotatorCheckpointFprint {
    fingerprint?: string | null;
    label?: string | null;
  }
  /**
   * A message to collect annotator performance data.
   */
  export interface Schema$RepositoryWebrefAnnotatorProfile {
    numCandidateMentions?: number | null;
    numEntities?: number | null;
    numMentions?: number | null;
    numTokens?: number | null;
    /**
     * Root/total of the timings from all the processors that worked on the given document or query.
     */
    processorTimingsRoot?: Schema$RepositoryWebrefProcessorTiming;
  }
  /**
   * Book editions metadata for a book entity. This metadata is a pair of "/book/book_edition" mid and its ISBN number.
   */
  export interface Schema$RepositoryWebrefBookEditionMetadata {
    /**
     * Use varint encoding to save space.
     */
    bookEditionIsbn?: string | null;
    bookEditionMid?: string | null;
  }
  export interface Schema$RepositoryWebrefBootstrappingScore {
    scoreRatio?: number | null;
  }
  /**
   * High level category annotations for documents and queries.
   */
  export interface Schema$RepositoryWebrefCategoryAnnotation {
    /**
     * Experimental scores to be used by Discover.
     */
    browsyTopic?: Schema$RepositoryWebrefCategoryAnnotationBrowsyTopic;
    /**
     * Title of the category. Eg "Politics", "Technology".
     */
    debugString?: string | null;
    /**
     * Sources asserting the category. In the future we may have one calibrated confidence score.
     */
    hitcat?: Schema$RepositoryWebrefCategoryAnnotationHitCatSource;
    /**
     * Mid representation of the category. Eg "/m/05qt0". WARNING: In UDR this field is not populated, use document_entity.entity.mid instead of document_entity.category.mid.
     */
    mid?: string | null;
    /**
     * Qprime asserting this category.
     */
    shopping?: Schema$RepositoryWebrefCategoryAnnotationShoppingSignals;
  }
  /**
   * Experimental scores for browsy topics, see * go/example-docs-with-implicit-fashion-styles * go/browsy-entities
   */
  export interface Schema$RepositoryWebrefCategoryAnnotationBrowsyTopic {
    confidence?: number | null;
  }
  /**
   * The HitCat page classifier. See go/hitcat2 If you use any HitCat score, please: 1. Add your use-case to go/hits-clients. 2. Subscribe to hits-users@ to receive general updates.
   */
  export interface Schema$RepositoryWebrefCategoryAnnotationHitCatSource {
    /**
     * Confidence of the category in the range [0.0, 1.0). If a page has the category "NBA" with high confidence we also expect it to have the "Basketball" with high confidence. Categories with a confidence lower than 0.05 are omitted. This can be interpreted as a confidence of 0, i.e. a strong signal that the category is not relevant for the page. For some categories this score is calibrated per-category to estimate the true precision. E.g., 70% of documents retrieved within the confidence range [0.7 - eps, 0.7 + eps] will be relevant when eps is close to 0.
     */
    confidence?: number | null;
    /**
     * Calibrated cumulative confidence guaranteeing maxmial recall for a precision target. E.g., At least 90% of documents retrieved with cumulative_confidence \>= 0.9 will be relevant. This score is always calibrated per-category to estimate the true cumulative precision and is not set for uncalibrated categories.
     */
    cumulativeConfidence?: number | null;
    /**
     * Note: For testing the next version. May change at any time. Experimental confidence of the category in the range (0.0, 1.0).
     */
    experimentalConfidence?: number | null;
  }
  /**
   * The QPrime query classifier signals.
   */
  export interface Schema$RepositoryWebrefCategoryAnnotationShoppingSignals {
    /**
     * Whether QPrime asserts that particular category.
     */
    isShoppingAnnotation?: boolean | null;
  }
  /**
   * All informations about category types of the entity.
   */
  export interface Schema$RepositoryWebrefCategoryInfo {
    /**
     * Contains all types relevant for this entity, along with their provenances and confidences. This field basically replicates information above in a unified way, so that Refcon scroing can make better use of it. If present, Refcon scoring will use all_types, and ignore other fields like freebase_type. Note: there is some basic conflict resolution applied when all_types are computed (implemented in type-extractor.cc, IsLikelyConflictingFreebase).
     */
    allTypes?: Schema$RepositoryWebrefFreebaseType[];
    freebaseType?: Schema$RepositoryWebrefFreebaseType[];
    kgCollection?: Schema$RepositoryWebrefKGCollection[];
    oysterType?: Schema$RepositoryWebrefOysterType;
    /**
     * verticals4 categories that cooccur with this entity, aggregated over D2E. See where we read from CompactDocClassification in http://google3/repository/webref/preprocessing/fatcat-categories.cc.
     */
    salientCategory?: Schema$RepositoryWebrefFatcatCategory[];
    wikipediaCategory?: Schema$RepositoryWebrefWikipediaCategory[];
    /**
     * WPCat CategotyResult classification.
     */
    wpCategory?: Schema$RepositoryWebrefFreebaseType[];
  }
  /**
   * Metadata about clusters. See go/webref-variants for details. Next available tag: 6.
   */
  export interface Schema$RepositoryWebrefClusterMetadata {
    /**
     * If true, this entity is a synthetic entity created to represent a "set" in a cluster, i.e. to represent a set of entities (its children in the cluster graph) when we cannot disambiguate among them. This is similar to a KG Collection, but this is not in KG.
     */
    isSet?: boolean | null;
    /**
     * Explanation of where this cluster, and this entity, come from. All entities in a cluster have this, not just entities that have been created because of the cluster.
     */
    ruleInstance?: Schema$RepositoryWebrefClusterProtoRuleInstance;
  }
  /**
   * A rule that defines a Cluster based on a list of mids. It creates a single Set, and makes it the parent of each of the mids in the list.
   */
  export interface Schema$RepositoryWebrefClusterProtoMidListRule {
    /**
     * Id of this rule; this is used to generate ids for the synthetic entities created for a cluster. Required.
     */
    id?: string | null;
    /**
     * The mids of the entities that will be made into a cluster.
     */
    mid?: string[] | null;
  }
  /**
   * An instance of a "mid list" rule. Each "mid list" rule defines exactly one cluster.
   */
  export interface Schema$RepositoryWebrefClusterProtoMidListRuleInstance {
    role?: string | null;
    /**
     * The rule that this is an instance of. Required.
     */
    rule?: Schema$RepositoryWebrefClusterProtoMidListRule;
  }
  /**
   * A rule that defines a Cluster based on a relation. Given a relation (a link type) R, then: For each entity B that has incoming links of type R This defines an instance of this rule, with argument=B We create a Set S We make B a child of S For each entity A that has a link R to B, we make A a child of S Next available tag: 6
   */
  export interface Schema$RepositoryWebrefClusterProtoRelationRule {
    /**
     * The topic_property_name for the link that defines the relation, e.g. "/tv/tv_series_episode/series". Can start with a "!" to indicate that this link is reversed during extraction and we want the reversed case. Required.
     */
    relation?: string | null;
  }
  /**
   * An instance of a "relation" rule. Each "relation" rule defines a number of clusters, one for each entity B that that has incoming links of a certain type R; all entities with an outgoing link to B of type R are part of that cluster.
   */
  export interface Schema$RepositoryWebrefClusterProtoRelationRuleInstance {
    role?: string | null;
    /**
     * The rule that this is an instance of. Required.
     */
    rule?: Schema$RepositoryWebrefClusterProtoRelationRule;
    /**
     * The one entity that the links of type R point to. Required.
     */
    target?: Schema$RepositoryWebrefWebrefEntityId;
  }
  /**
   * When we apply a rule to define a particular cluster, we have a RuleInstance. Some kinds of rules for clusters define more than one cluster. In those rules we say things like "for each entity X with this property, we create a cluster where..."; each particular cluster that we create is the result of an *instance* of that rule, where the argument X has been bound to a particular entity (note that this also applies to rules that define only one cluster; in that case, there are no arguments). An entity that is part of a cluster plays a "role" in such a cluster. This message describes such an instantiation of a rule with a role and with concrete values for the arguments.
   */
  export interface Schema$RepositoryWebrefClusterProtoRuleInstance {
    /**
     * Exactly one of these *RuleInstance fields needs to be present for clusters which have not been merged; it selects the specific kind of rule instance. For merged clusters both fields may be present.
     */
    midList?: Schema$RepositoryWebrefClusterProtoMidListRuleInstance;
    relation?: Schema$RepositoryWebrefClusterProtoRelationRuleInstance[];
  }
  /**
   * Flattened version of possibly nested compound values. This means that the `value` in here is *never* a `compound_value` and all predicate MIDs on the nested path are collapsed into the repeated `predicate_encoded_mid` field. When `predicate_encoded_mid` contains only one predicate, this is equivalent to a CompactKgPropertyValue.
   */
  export interface Schema$RepositoryWebrefCompactFlatPropertyValue {
    predicateEncodedMid?: string[] | null;
    /**
     * The property corresponding to predicte_encoded_mid above. This is populated in some non-serving tables.
     */
    propertyName?: string | null;
    value?: Schema$RepositoryWebrefCompactKgValue[];
  }
  /**
   * Analog to freebase::PropertyValue
   */
  export interface Schema$RepositoryWebrefCompactKgPropertyValue {
    encodedMid?: string | null;
    hrid?: string | null;
    value?: Schema$RepositoryWebrefCompactKgValue[];
    valueStatus?: string | null;
  }
  /**
   * Analog to freebase::Topic
   */
  export interface Schema$RepositoryWebrefCompactKgTopic {
    /**
     * Mid of the topic; only filled in if no values.
     */
    mid?: string | null;
    propertyValue?: Schema$RepositoryWebrefCompactKgPropertyValue[];
  }
  /**
   * Analog to freebase::Value TODO(b/144526840) This representation has several quality and performance issues. Next available tag number: 12
   */
  export interface Schema$RepositoryWebrefCompactKgValue {
    /**
     * Present when value is bool.
     */
    boolValue?: boolean | null;
    /**
     * Compound values are those that contain either a number of simple valued facets (such as a latitude/longitude pair), or "mediator" topics representing multi-dimensional relationships between topics. See metaweb/data/topictable/topic.proto for more details.
     */
    compoundValue?: Schema$RepositoryWebrefCompactKgTopic;
    /**
     * Present when value is datetime.
     */
    datetimeValue?: string | null;
    /**
     * Present when value is enum.
     */
    enumValue?: string | null;
    /**
     * Present when value is float.
     */
    floatValue?: number | null;
    /**
     * Present when value is an id.
     */
    idValue?: string | null;
    /**
     * Present when value is int.
     */
    intValue?: string | null;
    /**
     * Present when value is a serialized protocol buffer.
     */
    serializedProtoValue?: string | null;
    /**
     * Present when value is text.
     */
    textValue?: string | null;
    /**
     * Present when value is URI.
     */
    uriValue?: string | null;
    /**
     * 32-bit fprint of uri. Can be used instead of `uri_value` to save space. See `GetNormalizedUriFprint32()`.
     */
    uriValueFprint32?: number | null;
  }
  /**
   * The ArgumentValue reference to Mention.CompoundMention.Component. Next available tag number: 4
   */
  export interface Schema$RepositoryWebrefComponentReference {
    /**
     * Optionally the freebase_mid of the WebrefEntity which the Component identifies via entity_index. This is purely to help humans diagnose the WebrefEntities structure, may not always be present and should not be used by production code. Use QueryJoinToMeaningStructConverter to compose a proper value in place of the component reference.
     */
    debugEntity?: string | null;
    /**
     * The WebrefEntity referenced by `index` is equivalent to this function call in this context, but not universally such that we don't want to recursively expand its MRF. Use this for example if an entity corresponds to a category in an Intersect: CellPhones() & RelatedTo(/m/foo), where /m/cell_phones is equivalent to CellPhones() (and may or may not have an annotated span), but we don't want to generally assert that /m/cell_phones == CellPhones(). This cannot be an actual FunctionCall to avoid a circular dependency.
     */
    funcallName?: string | null;
    /**
     * The index of the Component of the CompoundMention which has the mrf_index of this MRF expression in WebrefEntity. Required.
     */
    index?: number | null;
  }
  /**
   * Metadata proto to be stored in concept tables. Note: Name table only stores name_type_mask for better performance. Remember to change NameToConceptEntry if you add a field to this proto. Note: in the annotator output only URL and PHONE_NUMBER are populated.
   */
  export interface Schema$RepositoryWebrefConceptNameMetadata {
    /**
     * Bitfield of ConceptNameMetadata::NameType bits.
     */
    nameTypeMask?: string | null;
  }
  /**
   * Detailed scores about the topicality of an entity. Next available tag: 17
   */
  export interface Schema$RepositoryWebrefDetailedEntityScores {
    /**
     * Represents how much the entity is connected/related to the other entities in the document. This signal partially influences the topicality score, but it is not totally aligned with it: an entity can be very related to the rest of the document, but not central for understanding it. Likewise, an entity can be central to understand a document, but not very related to the rest of the document. The value is in [0, 1].
     */
    connectedness?: number | null;
    /**
     * How well the document scores for the entity. The score is unnormalized, and serves as a relative ranking signal between different documents for an entity.
     */
    docScore?: number | null;
    /**
     * If the annotation corresponds to a geo topic, this is populated with GeoTopic::normalized_score.
     */
    geoTopicNormalizedScore?: number | null;
    /**
     * True if the entity is the author of the document. This was mainly developed and tuned for news articles (e.g. /m/02x27qn on "www.vogue.com/article/flint-town-netflix") but is also popluated for other content (e.g. scientific articles). Important: the semantics of this field may change in the future or it might be removed and replaced with a different API. If you want to use this field, please reach out to ke-authors@ first.
     */
    isAuthor?: boolean | null;
    /**
     * True if the entity is the publisher of the page (e.g. CNN on "http://www.cnn.com/foo/bar").
     */
    isPublisher?: boolean | null;
    /**
     * Set to true iff the entity matches the full URL of the document, meaning that it is a reference page or related page of the entity.
     */
    isReferencePage?: boolean | null;
    /**
     * If the annotation corresponds to a local entity, this is populated with LocalEntityAnnotations::Instance::location_confidence.
     */
    localEntityLocationConfidence?: number | null;
    /**
     * Representation of the topicality score that is normalized in [0, 1] and which sum over all entities in the document is 1. It represents the "proportion" of the document that talks about the entity. This score is less human interpretable as the bucketized topicality score (EntityAnnotations.topicality_score), but is more suited for some usages like aggregations.
     */
    normalizedTopicality?: number | null;
    /**
     * Contains the link to the author's profile url on the platform.
     */
    profileUrl?: string | null;
    /**
     * Signals used for mining new reference pages, set by the reference-page-scorer processor (that is turned off by default). This field is not populated, except for special reference page extraction runs.
     */
    referencePageScores?: Schema$RepositoryWebrefReferencePageScores;
    /**
     * Relevance score generated by a Machine Learning entity classifier. This signal is similar to topicality, but machine learning based and supported by EntitySignals, not Webref. See http://go/entityclassifier for details on the classifier.
     */
    relevanceScore?: number | null;
  }
  export interface Schema$RepositoryWebrefDetailedMentionScores {
    /**
     * How much support this mention received from the results for PostRef. This is populated only if explicitly requested and different from 0.
     */
    resultEntityScore?: number | null;
  }
  /**
   * Information that can be used to display the entity (e.g. title, image...).
   */
  export interface Schema$RepositoryWebrefDisplayInfo {
    /**
     * Per language display name from reliable sources.
     */
    displayName?: Schema$RepositoryWebrefDisplayName[];
  }
  /**
   * Per language display name from reliable sources (e.g. Freebase, Wikipedia). The name can be ambiguous (e.g. "Springfield" rather than "Springfield, Idaho"), and is thus to be used in a context which provides sufficient disambiguation. See: http://go/entity-names WARNING: This data is DEPRECATED and any user-visible entity names need to be fetched from TopicServer. Note that any display names included in this proto are merely a pass-through from KG and have no freshness guarantees.
   */
  export interface Schema$RepositoryWebrefDisplayName {
    /**
     * An encylopedia style topic name (e.g. "Dog", not "Dogs"). Corresponds to Freebase /type/object/name and similar sources.
     */
    canonicalName?: string | null;
    /**
     * The language of this name. See http://goto/iii for all the details on the language identifiers.
     */
    language?: string | null;
    /**
     * A name as it would be used for a news topic, an interest, the subject of a story. E.g. in list of things ("Related topics: Smartphones, computers, accidents". "Interests: Dogs"). *Fall back:* If the field is not populated, fall back to the "canonical_name" field. This field is usually not populated since (a) in most cases the subject form name is the same as the canonical name, and (b) data coverage of subject-form names is currently much lower than data coverage of canonical names. Note: In some languages (e.g. French) the difference between canonical names and subject names is larger than in English (not just plural vs. singular), but still strictly grammatical (including an article, capitalization, plural vs. singular). Corresponds to Freebase /freebase/linguistic_hint/subject_form.
     */
    subjectName?: string | null;
  }
  /**
   * List of PerDocRelevanceRatings for Precision@5 evals done via ewok (template 2282).
   */
  export interface Schema$RepositoryWebrefDocLevelRelevanceRatings {
    perDocRelevanceRatings?: Schema$RepositoryWebrefPerDocRelevanceRatings[];
  }
  /**
   * Information about the document which is not produced by webref, typically copied from the docjoin. Next available tag: 15
   */
  export interface Schema$RepositoryWebrefDocumentMetadata {
    /**
     * The timestamp of when the document was crawled (if known). Copied from CompositeDoc.Content.CrawlTime.
     */
    crawlTime?: string | null;
    /**
     * Fingerprint of the document. We compute and set this fingerprint when creating the pagesets that we use for evals. Otherwise, this field is not normally set. We use the field to make sure that the human ratings that we have are generated for the same version of the document, otherwise they might be invalid. We do not compute the fingerprint on the fly (e.g. as a fingerprint of the proto buffer serialization of the cdoc) because protocol buffer serialization is not stable.
     */
    docFp?: string | null;
    /**
     * DocId of the annotated document as read from cdoc.doc().docid().
     */
    docId?: string | null;
    /**
     * Urls that forward to this url. Needed for url -\> topical entity entries.
     */
    forwardingUrls?: Schema$RepositoryWebrefForwardingUrls;
    /**
     * Set to true if the document is a known disambiguation page, e.g. https://en.wikipedia.org/wiki/Orange.
     */
    isDisambiguationPage?: boolean | null;
    /**
     * The document language, as read from doc().content().language(). This is go/language-enum value.
     */
    language?: string | null;
    /**
     * The (weighted) number of incoming anchors (links from other documents).
     */
    numIncomingAnchors?: number | null;
    /**
     * The salient terms for this document. Only set if --webref_doc_metadata_copy_salient_terms is true. Same motivation as the title field above.
     */
    salientTerms?: Schema$QualitySalientTermsSalientTermSet;
    /**
     * The title of the document. Only set if --webref_doc_metadata_set_title is true. The idea is that we can use this to more easily learn things like: title contains "restaurants" -\> more likely to be a list page.
     */
    title?: string | null;
    /**
     * The total clicks on this document, taken from navboost data.
     */
    totalClicks?: number | null;
    /**
     * The url of the document.
     */
    url?: string | null;
  }
  /**
   * Represents a domain specific entity data.
   */
  export interface Schema$RepositoryWebrefDomainSpecificRepresentation {
    /**
     * The actual domain specific data. For example it can be freebase.Topic, repository_wikipedia.WikiJoin, ocean.WorkMetadata, geostore.Feature.
     */
    entityData?: Schema$Proto2BridgeMessageSet;
  }
  /**
   * Top level proto for enricher specific debug data that is only displayed in the Webref demo and should not be used for anything production-related. Next id: 4.
   */
  export interface Schema$RepositoryWebrefEnricherDebugData {
    /**
     * Contains selected properties (from KG) whose values are not other entities (in which case they would be represented in link_info) but scalar values, possibly reachable through (multiple) CVTs.
     */
    nonMidProperties?: Schema$RepositoryWebrefCompactFlatPropertyValue[];
    /**
     * This field contains reference pages for this entity. A reference page is a page that is highly topical for this entity, which can be used to mine additional information about this entity. Example reference pages for Apple Inc. would be the composite docs for "http://en.wikipedia.org/wiki/Apple_Inc." and http://www.apple.com. For actors or movies, you can also have the imdb page. Also see: http://go/refx-pages.
     */
    referencePage?: Schema$RepositoryWebrefSimplifiedCompositeDoc[];
    /**
     * This field contains mined related pages for the entity. A related page is a page that is moderately topical for this entity (More details: http://shortn/_KCE0GfQlpJ). This is mainly used to mine additional information for entities which do not have reference pages Unlike reference pages, a single doc can be a related page for multiple mids.
     */
    relatedPage?: Schema$RepositoryWebrefSimplifiedCompositeDoc[];
  }
  /**
   * All annotations for a given concept (in one document collection). Available tags: [10-15], [19-]
   */
  export interface Schema$RepositoryWebrefEntityAnnotations {
    /**
     * The overall confidence that the entity is annotated somewhere in the document or query. For WebRef it is computed as a function of the mention confidences weighted by the importance of each mention, where for documents a mention is of greater importance if it occurs in the title, h1 or anchors. For QRef it is just the maximum of the confidence over all mentions. NOTE: You probably want to use the mention-level segment_mentions.mention.confidence_score field instead of this one.
     */
    confidenceScore?: number | null;
    debugInfo?: Schema$RepositoryWebrefAnnotationDebugInfo;
    /**
     * Additional information about how the entity relates to the page, for example whether it is a business entity which published the page.
     */
    detailedEntityScores?: Schema$RepositoryWebrefDetailedEntityScores;
    /**
     * All ranges explained by the entity or any other entity it implies. Used in the context of partial query interpretation (go/partial-understanding).
     */
    explainedRangeInfo?: Schema$RepositoryWebrefExplainedRangeInfo;
    /**
     * An entity is marked as implicit if there is no explicit mention of the entity in the content of the page. For instance, all mentions of the entity are in query, url and/or anchors; or the entity has only implicit content mentions.
     */
    isImplicit?: boolean | null;
    /**
     * True if the entity is an MDVC summary entity, i.e. it might not be mentioned directly on the query, but it is the product of resolving a set of explicit annotations. E.g. "2014 FIFA World Cup" can be the summary for the query: [soccer world cup in brazil] even though none of the names of the entity is mentioned on the query. Summary nodes can also be synthetic, i.e. have a /t/ mid, as they represent the intersection between a set of regular annotations. For more information, see http://go/mdvc-output.
     */
    isResolution?: boolean | null;
    /**
     * All mentions of a given concept grouped by segments. For Webref, there are many different kinds of segment, such as content, title and anchors; while for QRef, there is only one segment called CONTENT. For QRef this field contains the primary output of the annotator, and for WebRef it together with topicality_score does.
     */
    segmentMentions?: Schema$RepositoryWebrefSegmentMentions[];
    /**
     * Rank of the entity when sorted by topicality score.
     */
    topicalityRank?: number | null;
    /**
     * The WebRef topicality score of the entity for this document. This score indicates how related is the entity to the overall topic of the document. See https://goto.google.com/topicality-score for details. This field is not present in QRef output. Note that the topicality and the confidence score are orthogonal measures. It is possible that the annotator is absolutely sure that an entity is mentioned in a given range in the document, but this entity may be unrelated to the overall topic of the page (e.g. the entity "RSS" is mentioned in the footer of appleinsider.com). In this case the mention has a very high confidence score, but very low topicality score.
     */
    topicalityScore?: number | null;
  }
  /**
   * Provides some debug info for the entity. This data shown to engineers (for debugging) and to raters (so it ultimately impacts eval metrics), but is also used to train ML models (see below). IMPORTANT: Despite the proto naming, this data has production quality impact. The data below is mostly human-readable text that is useful to help engineers with debugging. However the text is also used as input to machine-learned natural language processing models, which are used in production Webref.
   */
  export interface Schema$RepositoryWebrefEntityDebugInfo {
    /**
     * A human-readable description of the entity. This can range from brief, machine-generated notes to lengthy human-written paragraphs from Wikipedia.
     */
    description?: string | null;
    /**
     * The language (III LanguageCode) of the `title` and `description` fields.
     */
    language?: string | null;
    /**
     * Internal score to merge debug info. should not set in final entityjoins.
     */
    score?: number | null;
    /**
     * A short human-readable name/title of the entity, similar to what is displayed at the top of a Hume page. Suitable to be displayed in a list.
     */
    title?: string | null;
    /**
     * Link to a page with more information about the entity (internal Hume page, external Wikipedia page, etc.).
     */
    url?: string | null;
  }
  /**
   * Next available tag: 35. Represents all the information that we have for a given entity.
   */
  export interface Schema$RepositoryWebrefEntityJoin {
    /**
     * The id of this entity, prefer accessing through webref-entities-util.h functions.
     */
    annotatedEntityId?: Schema$RepositoryWebrefWebrefEntityId;
    /**
     * This field contains reference pages for this entity. A reference page is a page that is highly topical for this entity, which can be used to mine additional information about this entity. Example reference pages for Apple Inc. would be the composite docs for "http://en.wikipedia.org/wiki/Apple_Inc." and http://www.apple.com. For actors or movies, you can also have the imdb page. Also see: http://go/refx-pages.
     */
    cdoc?: Schema$RepositoryWebrefSimplifiedCompositeDoc[];
    /**
     * The context names (with scores) of this entity. The difference to regular names (aka name_info) is that context names are not used for finding mentions in a document as they consist of names somehow related to the entity (e.g. name "fisherman s wharf" for the entity "Gary Danko"). Used for reconciling freebase and oyster.
     */
    contextNameInfo?: Schema$RepositoryWebrefGlobalNameInfo[];
    /**
     * Debug information about the entity.
     */
    debugInfo?: Schema$RepositoryWebrefEntityDebugInfo[];
    /**
     * Optional profiling data from the enricher that enriched this entity (and produced this EntityJoin as debug output).
     */
    enricherAnnotatorProfile?: Schema$RepositoryWebrefAnnotatorProfile;
    /**
     * Contains debug data produced by enricher and only used for debug purpose (e.g. demo).
     */
    enricherDebugData?: Schema$RepositoryWebrefEnricherDebugData;
    /**
     * Additional metadata about the entity, that can be derived from the "raw data" (composite doc, domain specific data...), or come from other sources. Despite its name, this field often contains quite important information.
     */
    extraData?: Schema$RepositoryWebrefExtraMetadata;
    /**
     * Human ratings (e.g. ratings from EWOK). This is typically only populated in the evaluation pipelines (e.g. P@5).
     */
    humanRatings?: Schema$RepositoryWebrefHumanRatings;
    /**
     * Contains all links (with scores) that Webref knows for this entity. Links are relationships between entities. The data in this field is very important for the quality of the model.
     */
    linkInfo?: Schema$RepositoryWebrefGlobalLinkInfo[];
    /**
     * Contains all names (with scores) that Webref knows for this entity. The data in this field is very important for the quality of the model.
     */
    nameInfo?: Schema$RepositoryWebrefGlobalNameInfo[];
    /**
     * Contains names and names metadata used by Refcon.
     */
    refconNameInfo?: Schema$RepositoryWebrefRefconRefconNameInfo[];
    /**
     * An entity can have metadata from various data sources. Generally speaking all sources will be / should be reconciled into a single KG Topic entry. However, in some cases we pull in additional chunks of metadata from these sources; these are stored in this field. For example a local business could have a KG entry (topic proto), wikipedia entry (WikiJoin) and a MapFacts entry (Feature proto).
     */
    representation?: Schema$RepositoryWebrefDomainSpecificRepresentation[];
  }
  /**
   * Metadata about the nature of the link.
   */
  export interface Schema$RepositoryWebrefEntityLinkMetadata {
    /**
     * The aggregate kind flags for the link.
     */
    aggregateFlags?: Schema$RepositoryWebrefLinkKindFlags;
    /**
     * Information about all the link kinds associated with the link.
     */
    kindInfo?: Schema$RepositoryWebrefLinkKindInfo[];
  }
  /**
   * All link data for a given source.
   */
  export interface Schema$RepositoryWebrefEntityLinkSource {
    /**
     * KG-property if the SourceType is associated with a KG-property (TOPIC_PROPERTY, NEW_TOPIC_PROPERTY).
     */
    kgProperty?: string | null;
    /**
     * Score in [0, \infty) that represents how relatively likely it is to see that entity cooccurring with the main entity (in the entity join). A value of 1.0 means that the two entities are basically independent. The higher the more likely (relatively to the individual entity probabilities) they are to cooccur.
     */
    score?: number | null;
    type?: string | null;
  }
  /**
   * Stores all human ratings collected for a given entity name.
   */
  export interface Schema$RepositoryWebrefEntityNameRatings {
    language?: string | null;
    name?: string | null;
    /**
     * Every entity name receives one or a few ratings from human raters.
     */
    ratings?: Schema$RepositoryWebrefEntityNameRatingsEntityNameRating[];
    /**
     * Multiple tags can be assigned to a rated entity name. The tags can be used when computing metrics in the Name Eval, so that different metrics are computed separately for different sets of examples that have the same tag.
     */
    tags?: string[] | null;
  }
  export interface Schema$RepositoryWebrefEntityNameRatingsEntityNameRating {
    /**
     * Comment left by the rater to justify the rating decision.
     */
    comment?: string | null;
    label?: string | null;
    source?: string | null;
  }
  /**
   * Represents a score for an entity. Next available tag: 39.
   */
  export interface Schema$RepositoryWebrefEntityNameScore {
    /**
     * If the EntityNameScore is part of a bootstrapped model, then this field contains the score_ratio from the previous model ("Model 0"). If Model 0 does not have a corresponding entry, because it did not know about this name for this entity, then bootstrapping_previous_iteration is left empty.
     */
    bootstrappingPreviousIteration?: Schema$RepositoryWebrefBootstrappingScore;
    /**
     * Confidence that this name is a trusted name of the entity. A reasonable threshold for name trust is 0.6. A name can be trusted and still have very low score_ratio, esp. if it is ambiguous (e.g. 'mercury') and/or not the dominant interpretation (e.g. "siberian husky" -\> /m/06krnsr (a book)).
     */
    confidence?: number | null;
    /**
     * Debug information about the entity.
     */
    debugInfo?: Schema$RepositoryWebrefEntityDebugInfo[];
    /**
     * Source and score data, this is internal to refx (e.g. for demo/debug).
     */
    debugVariantSignals?: Schema$RepositoryWebrefPreprocessingNameVariantSignals[];
    /**
     * Stores region specific score ratios for the entity when it is significantly different from the language version above.
     */
    extendedScoreRatio?: Schema$RepositoryWebrefExtendedEntityNameScore[];
    /**
     * Include this name in the name lookup table.
     */
    includeInModel?: boolean | null;
    /**
     * Transient field, only used in bootstrap pipeline.
     */
    internalBootstrapIsOpenWorld?: boolean | null;
    internalIsClusterParent?: boolean | null;
    /**
     * Set to true iff the concept is cluster parent and the name can be a name for any child of the cluster. (e.g. 'starbucks' is cluster_global for the [Starbucks] chain cluster).
     */
    isClusterGlobal?: boolean | null;
    /**
     * Documented at: google3/repository/webref/enricher/core/data/scored_entity_name.h
     */
    isDropped?: boolean | null;
    /**
     * Only for context names: Whether this EntityNameScore represents an entity that was dominant in the search results but was not annotated by QRef during learning. Matchless result contexts are useful for bootstrapping, where different model iterations may have different names and thus context scores from Model 0 that are inconsistent with the names from Model 1.
     */
    isMatchlessResultContext?: boolean | null;
    /**
     * Documented at: google3/repository/webref/enricher/core/data/scored_entity_name.h
     */
    isPruned?: boolean | null;
    /**
     * The id of the entity.
     */
    mid?: string | null;
    /**
     * Metadata about this name aggregated from name signals.
     */
    nameMetadata?: Schema$RepositoryWebrefPreprocessingNameEntityMetadata;
    /**
     * Metadata of segment range, which is annotated by this entity.
     */
    rangeMetadata?: Schema$RepositoryWebrefRangeMetadata[];
    /**
     * The absolute score of that entity. score = artificial_score + volume_based_score
     */
    score?: number | null;
    /**
     * Ratio between this entity score and the total score over all entities. This is including the "open world" information if it was estimated.
     */
    scoreRatio?: number | null;
    /**
     * When this field is true, we consider this context name as candidate in Enricher's names pipeline.
     */
    useAsNameCandidate?: boolean | null;
    /**
     * Absolute score that comes from quantitative sources such as navboost clicks, anchors, etc. artificial_score = score - volume_based_score
     */
    volumeBasedScore?: number | null;
  }
  /**
   * Represents the data for a given source of names, including all entity scores. Notice that a source of name can be just a signal like a multiplier. Next available tag: 8.
   */
  export interface Schema$RepositoryWebrefEntityNameSource {
    /**
     * All the entity-name scores from that source. Keyed by the EntityNameScore.entity_id field.
     */
    entityScore?: Schema$RepositoryWebrefEntityNameScore[];
    /**
     * Describes where the data comes from.
     */
    type?: string | null;
  }
  /**
   * Keeps a set of scores about an entity. Next available tag: 20.
   */
  export interface Schema$RepositoryWebrefEntityScores {
    /**
     * This field is only for debugging and link weight experiments. It stores the entity's idf from the alpha model. Alpha idfs are used for link weight computations and available during model omega building via enricher_current_entity_idf_for_link_direction.
     */
    alphaEntityIdf?: number | null;
    /**
     * Probability that the entity is a common ngram (e.g. from dictionary).
     */
    commonNgramProb?: number | null;
    /**
     * The final (model omega) idf of an entity. Equals log2(1 / probability of the entity to appear in a document). This probability is currently estimated from its names (i.e. it is a sum of the name frequency weighted by P(entity | name)).
     */
    entityIdf?: number | null;
    /**
     * The following field is deprecated and should eventually be removed. It uses data and rules that have not been refreshed for ~10y and KG has changed a lot in the meantime.
     */
    nameCapitalizationProb?: number | null;
  }
  /**
   * Information about all ranges explained by the entity or any other entity it implies. For example, the Zurich entity may explain both tokens "Zurich" and "Switzerland" in [FIFA Zurich Switzerland], the first directly, the other via implication. Only used in the context of query annotation.
   */
  export interface Schema$RepositoryWebrefExplainedRangeInfo {
    /**
     * All ranges explained by the entity.
     */
    explainedRange?: Schema$RepositoryWebrefExplainedRangeInfoExplainedRange[];
    geoQueryCoverage?: string | null;
  }
  /**
   * A range of the annotated document explained by an entity.
   */
  export interface Schema$RepositoryWebrefExplainedRangeInfoExplainedRange {
    /**
     * SegmentMention describing the occurrence of the token in the document.
     */
    mention?: Schema$RepositoryWebrefSegmentMention;
  }
  /**
   * Used to store region-specific score ratio per entity. Next available tag: 4.
   */
  export interface Schema$RepositoryWebrefExtendedEntityNameScore {
    /**
     * The domain name of the website, e.g. "play.google.com".
     */
    domain?: string | null;
    /**
     * The region in the III standard (http://go/iii). Eg. "US", "GB"
     */
    region?: string | null;
    /**
     * Score ratio for the entity, same as the EntityNameScore score ratio.
     */
    scoreRatio?: number | null;
  }
  /**
   * Additional metadata about the entity, that can be derived from the "raw data" (composite doc, domain specific data...), or come from other sources. Next available tag is 35.
   */
  export interface Schema$RepositoryWebrefExtraMetadata {
    /**
     * For a book entity, store its book editions metadata. Used by Juggernaut to do /book/book_edition recon, see ariane/265006. This field is used by Juggernaut only.
     */
    bookEditionMetadata?: Schema$RepositoryWebrefBookEditionMetadata[];
    /**
     * Information about category types of the entity.
     */
    categoryInfo?: Schema$RepositoryWebrefCategoryInfo;
    /**
     * Metadata about clusters.
     */
    clusterMetadata?: Schema$RepositoryWebrefClusterMetadata;
    /**
     * Information for displaying the entity in applications.
     */
    displayInfo?: Schema$RepositoryWebrefDisplayInfo;
    /**
     * Additional scores for the entity.
     */
    entityScores?: Schema$RepositoryWebrefEntityScores;
    /**
     * An entity in KG that represents the same (or equivalent) entity in the real world. In particular, this is used for mid-forwarding: when de-duping entities in KG, the old ids represent the exact same entity as the one they were merged with. So when we see one id in the query and the other in a document, they are treated as the same entity.
     */
    equivalentEntityId?: Schema$RepositoryWebrefWebrefEntityId[];
    /**
     * Geo-specific entity metadata.
     */
    geoMetadata?: Schema$RepositoryWebrefGeoMetadataProto;
    /**
     * Metadata related to KC attributes and Question & Answer triggering.
     */
    kcAttributeMetadata?: Schema$RepositoryWebrefKCAttributeMetadata;
    /**
     * A list of entities that are latent given this entity. For example, "Lionel Messi" can have the latent entity "FC Barcelona". The latent entity links are materialized in an offline pipeline using r/w/scripts/latent_entities/latent-entities.pq. For more information, see go/latent-entities.
     */
    latentEntities?: Schema$RepositoryWebrefLatentEntities;
    /**
     * Metadata about MDVC.
     */
    mdvcMetadata?: Schema$RepositoryWebrefMdvcMetadata;
    /**
     * Other metadata.
     */
    otherMetadata?: Schema$Proto2BridgeMessageSet;
    /**
     * The primary recording mid of a recording cluster entity. Used by Juggernaut to do /music/recording recon, see b/139901317. The primary recording is unique to a recording cluster. This field is used by Juggernaut only.
     */
    primaryRecording?: string | null;
    /**
     * Products-specific entity metadata.
     */
    productMetadata?: Schema$RepositoryWebrefProductMetadata;
    /**
     * # LINT.ThenChange( //depot/google3/repository/webref/evaluation/query/metrics/util.cc)
     */
    specialEntityType?: string | null;
    specialWord?: Schema$MapsQualitySpecialWordsProto[];
    /**
     * Metadata about support transfer rules defined for this entity.
     */
    supportTransferRules?: Schema$RepositoryWebrefSupportTransferRule[];
  }
  export interface Schema$RepositoryWebrefFatcatCategory {
    /**
     * The category ID from verticals4. See go/verticals4 and where we read them in http://google3/repository/webref/preprocessing/fatcat-categories.cc
     */
    id?: number | null;
    /**
     * The relative weight of the category within a distribution.
     */
    score?: number | null;
  }
  /**
   * Submessage for forwarding urls in DocumentMetadata.
   */
  export interface Schema$RepositoryWebrefForwardingUrls {
    /**
     * Urls that forward to this url. Used for url -\> topical entity entries.
     */
    forwardingUrl?: string[] | null;
  }
  /**
   * --------------------------------------------------------------------------- Enums defining the available modifier options.
   */
  export interface Schema$RepositoryWebrefFprintModifierProto {
    capitalization?: string | null;
    enclosing?: string | null;
    /**
     * i18.languages.Language enum defined in i18n/languages/proto/languages.proto UNKNOWN_LANGUAGE
     */
    language?: number | null;
    namespaceType?: string | null;
    punctuation?: string | null;
    sentence?: string | null;
    sourceType?: string | null;
    stemming?: string | null;
    style?: string | null;
    tokenType?: string | null;
  }
  /**
   * The Freebase type information.
   */
  export interface Schema$RepositoryWebrefFreebaseType {
    /**
     * Optional - for inferred types the principal source of information.
     */
    provenance?: string[] | null;
    /**
     * Optional score. Not present in KG directly but e.g. in WPCat.
     */
    score?: number | null;
    /**
     * Fingerprint of type hrid http://cs/google3/repository/webref/universal/base/kg-schema.h;rcl=543911652;l=51
     */
    typeFprint?: string | null;
    /**
     * Mid of this type. Equivalent to type_name, but is more compact. When present, overrides type_name (which can be omitted in this case to save space). This field is deprecated and migrated to fprint.
     */
    typeMid?: string | null;
    /**
     * e.g.: "/business/industry", "/book/book_subject", "/people/person"... HRID of the type. May be missing for optimisation reasons in Refcon, but is present for Qref/Webref. At least one of type_name or type_fprint will be present at all times
     */
    typeName?: string | null;
  }
  /**
   * Identifies the segment index for Webref SegmentTypes not covered by other *Indices messages.
   */
  export interface Schema$RepositoryWebrefGenericIndices {
    /**
     * The segment index.
     */
    index?: number | null;
  }
  /**
   * Geo-specific information about the entity. Next available tag: 34.
   */
  export interface Schema$RepositoryWebrefGeoMetadataProto {
    /**
     * Stores parent/container information containing city, province & country.
     */
    address?: Schema$GeostoreAddressProto;
    /**
     * This field is only provided through the online qref interface (QrefMetadata). This is a fairly simple extraction from the /geo/type/feature/address_proto_blob triple.
     */
    addressSynonyms?: Schema$RepositoryWebrefGeoMetadataProtoAddressSynonym[];
    /**
     * Area in km^2 of the feature if the feature has polygon. Only set by qrefmetadata.
     */
    areaKm2?: number | null;
    /**
     * The tight bounds of this feature. Note that these are different from the FeatureProto.bound field.
     */
    bound?: Schema$GeostoreRectProto;
    /**
     * Country code of the country of the entity. Only available in qref-metadata.
     */
    countryCode?: string | null;
    /**
     * The geographic location (center) and geometry of this entity. See geostore.FeatureProto for more details.
     */
    location?: Schema$GeostorePointProto;
    /**
     * The best name from Oyster for this entity. Is only included for some types of entities, and is a trimmed version of the proto (some fields are cleared).
     */
    name?: Schema$GeostoreNameProto;
    /**
     * The oyster id of the entity
     */
    oysterId?: Schema$GeostoreFeatureIdProto;
    /**
     * Numerical country code, converted with i18n/identifiers/stableinternalregionconverter.h. It is the same as country_code, but it is available in the annotator model (and takes less space).
     */
    stableIntegerCountryCode?: number | null;
    /**
     * Timezone if the feature is contained inside one.
     */
    timezone?: string | null;
    /**
     * Information about the geographic location (center) extracted from the wikijoins.
     */
    wpLocation?: Schema$RepositoryWebrefWikipediaGeocode[];
  }
  /**
   * Terms from AddressComponent proto that we can use as address synonyms. At the time of annotation we have the entire AddressProto, however we can't use it all due to size. So only store relevant pieces of components (defined in superroot/impls/localweb/s2_synoyms.h).
   */
  export interface Schema$RepositoryWebrefGeoMetadataProtoAddressSynonym {
    language?: string | null;
    name?: string | null;
    /**
     * The type of the geocoded address. e.g. Road, Lake, Ocean, building. This comes from TypeCategory field in geostore/base/proto/feature.proto
     */
    type?: number | null;
  }
  /**
   * Groups together the LinkInfo for all locales.
   */
  export interface Schema$RepositoryWebrefGlobalLinkInfo {
    /**
     * A short human-readable name/title of the entity, similar to what is displayed at the top of a Hume page. Do not use for any production purpose as it does not provide guarantees for stability or policy checks (access requirements).
     */
    debugTitle?: string | null;
    /**
     * Whether this is a BoostedPrimaryWeight link. For these links in some cases a higher weight is used for primary scoring.
     */
    isBoostedPrimaryWeightLink?: boolean | null;
    /**
     * The mid of the linked entity.
     */
    targetMid?: string | null;
    /**
     * The information about this link for each locale.
     */
    variantInfo?: Schema$RepositoryWebrefLinkInfo[];
  }
  /**
   * Groups together the NameInfo for all variants of a given name. The variants of a name have the same normalized string, but they have a different original string and/or a different language/region. Example: For the name "apple", there may be variants such as "apple|en", "apple|en|US", "apple|de", "Apple|en"...
   */
  export interface Schema$RepositoryWebrefGlobalNameInfo {
    /**
     * The normalized name.
     */
    normalizedName?: string | null;
    /**
     * All the variants of this name together with associated information such as score, sources, etc.
     */
    variantInfo?: Schema$RepositoryWebrefNameInfo[];
  }
  export interface Schema$RepositoryWebrefHumanRatings {
    annotationRatings?: Schema$RepositoryWebrefAnnotationRatings;
  }
  /**
   * Identifies a set of Image NavBoost queries in the CompositeDoc. Each CompositeDoc can contain several images, so we store the image index from the CompositeDoc::doc_images with the index of the particular query inside ImageData::image_data_navboost.
   */
  export interface Schema$RepositoryWebrefImageQueryIndices {
    /**
     * The (canonical) image docid of the ImageData this image query is part of. Useful for identifying the ImageData even after doc_images are updated in between Webref annotation runs. Use docid only when canonical_docid == 0.
     */
    canonicalDocid?: string | null;
    docid?: string | null;
    /**
     * WARNING: The doc_images in docjoins are subject to updates including non-deterministic reordering of doc_images and their image_nb_data extensions. This means that without re-running WebrefAnnotator one cannot rely on the accuracy or even consistency of either image_index or query_index when parsing a cdoc from docjoins. In those situations one ought to rely on canonical_docid (or docid when canonical_docid is absent viz. 0). The index of the source image in CompositeDoc::doc_images.
     */
    imageIndex?: number | null;
    /**
     * Queries index in ImageData::image_data_navboost.
     */
    queryIndex?: Schema$RepositoryWebrefQueryIndices;
  }
  /**
   * Identifies the source of Spore segments in the CompositeDoc.
   */
  export interface Schema$RepositoryWebrefJuggernautIndices {
    /**
     * Index within the proto. Several indices are necessary in case of nested repeated fields. The data can be accessed as follows: TOPICS: topic_annotations.kg_schema_topic(index(0)) .property_value(index(1)) .value(index(2)); TRIPLES: reconcile_request.triple(index(0));
     */
    index?: number[] | null;
    type?: string | null;
  }
  /**
   * Metadata related to KC attributes and Question & Answer triggering. Next available tag: 2.
   */
  export interface Schema$RepositoryWebrefKCAttributeMetadata {
    /**
     * Equivalent kc attribute id for the given entity if applicable. E.g. for Daughter (/m/029wnx) this will be 'kc:/people/person:daughter'.
     */
    equivalentAttributeId?: string | null;
  }
  /**
   * See go/kg-collections
   */
  export interface Schema$RepositoryWebrefKGCollection {
    /**
     * A human friendly identifier (collection hrid). NOTE: The field name is a misnomer, this is the preferred field to use in production.
     */
    debugId?: string | null;
    /**
     * Identifier of the collection, usually a MID (/m/xyz or /g/zyw). NOTE: In most cases, this is not the id that should be used, debug_id is the preferred identifier. The main reason is the this is not a stable id (mid for collection sometimes shift around).
     */
    id?: string | null;
  }
  /**
   * A list of entities that are latent given this entity. For example, "Lionel Messi" can have the latent entity "FC Barcelona". See go/refx-latent-entities for detailed description.
   */
  export interface Schema$RepositoryWebrefLatentEntities {
    /**
     * Latent entities with associated metadata including source of the relationship. This is pruned ("compacted") from the concept table and will never reach the annotator.
     */
    latentEntity?: Schema$RepositoryWebrefLatentEntity[];
  }
  /**
   * Metadata about a latent entity and its relationship to a given child. See go/hits.
   */
  export interface Schema$RepositoryWebrefLatentEntity {
    /**
     * The relatedness score of the two entities corresponding to each source above.
     */
    broaderImportance?: number[] | null;
    /**
     * The mid of the latent entity.
     */
    mid?: string | null;
    /**
     * The sources this generalization relationship is coming from.
     */
    sources?: string[] | null;
  }
  /**
   * LexicalAnnotation is public lightweight serving structure for both WordGraph features and LWT annotations to expose lexical information downstream from RefX, e.g. in LooseParser.
   */
  export interface Schema$RepositoryWebrefLexicalAnnotation {
    lexicalRange?: Schema$RepositoryWebrefLexicalRange[];
  }
  /**
   * A single understood lexicon of the |category| on byte range from |begin_offset| (inclusive) to |end_offset| (exclusive). The offsets are all byte offsets relative to the full original query and cover both the mentions and surrounding markers.
   */
  export interface Schema$RepositoryWebrefLexicalRange {
    /**
     * Begin byte offset relative to the full original query.
     */
    beginOffset?: number | null;
    category?: string | null;
    /**
     * Direction defines the relation between the measurable aspect and the facet.
     */
    direction?: string | null;
    /**
     * End byte offset relative to the full original query.
     */
    endOffset?: number | null;
    /**
     * The mid of the facet associated with ASPECT category.
     */
    facetMid?: string | null;
  }
  /**
   * Necessary information of lightweight token pattern with entity retrieval to pass to downstream clients. For example: FpTokenRange: normalized_text: "zurichben" language: Hungarian retrieved_entity: /m/08966 (with name "zurich") will get: MatchedLightweightToken: LightweightTokenType: "LOCATIVE" begin_offset: 6 end_offset: 9 pattern_id: 8141703461898598811 source_entity_index: 0 FpTokenRange: normalized_text: "egyesult allamokott" language: Hungarian retrieved_entity: /m/09c7w0 (with name "egyesult allamok") will get: MatchedLightweightToken: LightweightTokenType: "LOCATIVE" begin_offset: 16 end_offset: 19 pattern_id: 10449962977910715124 source_entity_index: 0 Note that begin_offset and end_offset marks the input byte range of the matched input text. For example, if the input text is [tannlegas] in Norwegian, this matches with the rewrite rule "*e:*as" to transform "tannlegas" to "tannlege". The matched byte range is [7, 9) on "as", therefore begin_offset = 7 and end_offset = 9. This must not be confused with the rewritten range [7, 8) on "e". Also, keep in mind these are byte offsets, not codepoints.
   */
  export interface Schema$RepositoryWebrefLightweightTokensMatchedLightweightToken {
    /**
     * The byte offset of the beging of the additional lightweight token match. e.g. the prefix pattern of the circumfix.
     */
    additionalBeginOffset?: number | null;
    /**
     * The byte offset of the end of the additional lightweight token match. e.g. the suffix pattern of the circumfix.
     */
    additionalEndOffset?: number | null;
    /**
     * The byte offset of the begin of the lightweight token match within each range. The default value of -1 (std::string::npos) means that there's no affix or adposition detected.
     */
    beginOffset?: number | null;
    /**
     * The byte offset of the end of the lightweight token match within each range. The default value of 0 means that there's no affix or adposition detected.
     */
    endOffset?: number | null;
    /**
     * Matched pattern Id which will be used to retrieve back pattern features. Pattern id is only populated for Enricher model.
     */
    patternId?: string | null;
    /**
     * The index of the source entity in the resulting WebrefEntities or WebrefEntitiesWrapper, to which the lightweight token rule is applied. This field is only populated at the end of Qref scorer when we are sure which source entity should output.
     */
    sourceEntityIndex?: number | null;
    /**
     * The type of the lightweight token match, which provides the semantic information.
     */
    type?: string | null;
  }
  /**
   * Collects all lightweight token patterns for each CandidateMention or Mention.
   */
  export interface Schema$RepositoryWebrefLightweightTokensPerMentionLightweightToken {
    matchedLightweightToken?: Schema$RepositoryWebrefLightweightTokensMatchedLightweightToken[];
  }
  /**
   * Collects all lightweight token patterns for each NameToConceptEntry.
   */
  export interface Schema$RepositoryWebrefLightweightTokensPerNameLightweightToken {
    matchedLightweightToken?: Schema$RepositoryWebrefLightweightTokensMatchedLightweightToken[];
  }
  /**
   * Represents all information we have about a specific/localized link. Next available tag: 11.
   */
  export interface Schema$RepositoryWebrefLinkInfo {
    /**
     * The score aggregated from all sources.
     */
    aggregatedScore?: number | null;
    /**
     * The EntityJoin keeps bi-directional links, but for some applications we only need them in one direction. This value indicates whether this is the preferred direction to keep. (We usually prefer keeping the link from the less common to the more common entity for performance reasons). For categorical links the preferred direction is from child to parent.
     */
    isPreferredDirection?: boolean | null;
    /**
     * The metadata associated with the link.
     */
    metadata?: Schema$RepositoryWebrefEntityLinkMetadata;
    /**
     * The per-source scores.
     */
    source?: Schema$RepositoryWebrefEntityLinkSource[];
  }
  /**
   * A bitmap of bool values associated with a link kind. Next available tag: 12
   */
  export interface Schema$RepositoryWebrefLinkKindFlags {
    cluster?: string | null;
    geoContainment?: string | null;
    implication?: string | null;
    latentEntity?: string | null;
    mdvc?: string | null;
    property?: string | null;
  }
  /**
   * Information about one of the types of a linked entity.
   */
  export interface Schema$RepositoryWebrefLinkKindInfo {
    /**
     * The flags associated with the link kind.
     */
    flags?: Schema$RepositoryWebrefLinkKindFlags;
    /**
     * Link name extracted from Knowledge Card facts.
     */
    kcLinkName?: string | null;
    /**
     * If the link was extracted from a property, the name of the property. Can start with an exclamation mark "!" to indicate that the inverse relationship is specified. (e.g. "!/tv/tv_series_episode/series" is the inverse of "tv/tv_program/episodes").
     */
    topicPropertyName?: string | null;
  }
  /**
   * Next available tag: 8.
   */
  export interface Schema$RepositoryWebrefLocalizedString {
    /**
     * The domain name from which results come, e.g. "play.google.com".
     */
    domain?: string | null;
    /**
     * FprintModifier describing the formatting of the string. If fprint_modifier is set, then original_string, language and region should not be set.
     */
    fprintModifier?: Schema$RepositoryWebrefFprintModifierProto;
    /**
     * The language in the III standard (http://go/iii)
     */
    language?: string | null;
    normalizedString?: string | null;
    originalString?: string | null;
    /**
     * The region in the III standard (http://go/iii)
     */
    region?: string | null;
    /**
     * Which querybase pipeline the data comes from.
     */
    sourceType?: string | null;
  }
  /**
   * Metadata about MDVC (go/mdvc). Next available tag: 18.
   */
  export interface Schema$RepositoryWebrefMdvcMetadata {
    /**
     * Undergoing migration into the PerVertical message. Avoid using it. Concept ids of MDVC dimensions of this concept.
     */
    dimension?: string[] | null;
    /**
     * Undergoing migration into the PerVertical message. Avoid using it. List of encoded mids to be expanded in WebRef/QRef output whenever this entity gets annotated. Will be populated in the annotators once static data is deprecated. b/78866814.
     */
    expandedOutputConceptId?: string[] | null;
    /**
     * Undergoing migration into the PerVertical message. Avoid using it. Concept ids of MDVC generalizations of this concept.
     */
    generalization?: string[] | null;
    /**
     * True iff the topic is synthetically created during by MDVC extraction.
     */
    isSynthetic?: boolean | null;
    /**
     * Data, specific to particular verticals.
     */
    perVertical?: Schema$RepositoryWebrefMdvcMetadataPerVertical[];
    /**
     * Undergoing migration into the PerVertical message. Avoid using it. Resolution priority for this entity. In case a query has many possible resolutions, only the ones with the highest resolution priority are annotated.
     */
    resolutionPriority?: number | null;
  }
  /**
   * Per-vertical part. Next available tag: 19
   */
  export interface Schema$RepositoryWebrefMdvcMetadataPerVertical {
    /**
     * Concept ids compatible with this topic: specializations and/or ones having this concept as a dimension. Always includes the topic itself.
     */
    compatibleIds?: string[] | null;
    /**
     * Concept ids of the dimension values of this topic.
     */
    dimensionIds?: string[] | null;
    /**
     * Concept ids to annotate whenever this entity is annotated.
     */
    expandedOutputIds?: string[] | null;
    /**
     * Concept ids of the generalizations of this topic.
     */
    generalizationIds?: string[] | null;
    /**
     * True if the topic is considered a "core topic" for the vertical.
     */
    isCore?: boolean | null;
    /**
     * If true, the entity is a dimension for some entities in the vertical.
     */
    isDimension?: boolean | null;
    /**
     * If true, the entity is a generalization for some entities in the vertical.
     */
    isGeneralization?: boolean | null;
    /**
     * Resolution priority for this entity. If there are many possible resolutions to a MDVC understanding, only the ones with the highest priority are annotated.
     */
    resolutionPriority?: number | null;
    /**
     * Fingerprints that identify the topic's sub-verticals, if any.
     */
    subVerticalFp?: string[] | null;
    /**
     * Name of the vertical this message is about.
     */
    verticalName?: string | null;
  }
  /**
   * Multiple entities can be identified on a document or query. Each entity can be mentioned several times in different positions on the document or query. This message describes a single mention of the entity. Note that a mention can be either explicit or implicit mentions. All explicit mentions refer to exact range in the document where the entity occurred, but implicit mentions may or may not have corresponding range. Next available tag number: 40
   */
  export interface Schema$RepositoryWebrefMention {
    /**
     * Whether this mention was created by CloseAnswers on Postref. This bit is populated into corresponding intent_query through Aqua.
     */
    addedByCloseAnswers?: boolean | null;
    /**
     * If the mention's range is discontinuous, additional ranges that are a part of the mention but are not included in the begin/end range above.
     */
    additionalExplainedRange?: Schema$RepositoryWebrefMentionAdditionalExplainedRange[];
    /**
     * The [begin, end) byte offset, compatible with the Goldmine DocState representation. - For CONTENT, TITLE, META_CONTENT_TAG and IMG_ALT_TAG segments, the offsets are relative to the beginning of the document content. - For ANCHOR, QUERY, URL, IMAGE_QUERY, CONTEXT_ENTITY, CONTEXT_QUERY, SPORE_GRAPH, INSTANT_QUERY and VIDEO_TRANSCRIPT segments, the offsets are relative to the beginning of the corresponding (sub-)segment or text from doc attachment. The (indexing.annotations.goldmine) options are marks for Goldmine AnnotationsFinder to locate begin and end offsets in order to extract them
     */
    begin?: number | null;
    /**
     * The [begin end) token offsets in the Goldmine DocState. They follow similar rules as "begin" and "end" above, but for tokens rather than byte offsets. These fields are currently only populated by the query annotator.
     */
    beginTokenIndex?: number | null;
    /**
     * For a compound mention, the references to the entity and mention of the components. Each compound_mention claims one or more 'mrf' fields from the WebrefEntity owning this mention. Use QueryJoinToMeaningStructConverter to expand compound mentions into complete MRF.
     */
    compoundMention?: Schema$RepositoryWebrefMentionCompoundMention[];
    /**
     * A probabilistic score describing how certain the annotator is that this exact range in the document or query refers to the entity. Probability that a mention is correct corresponds to confidence score roughly as follows: 0.3 -\> 75% 0.5 -\> 87% 0.7 -\> 89% 0.9 -\> 94% 1.0 -\> 98% However if you consider all mentions with a score above 0.3, then most of these will have scores close to 1, so the overall precision of these mentions is around 95%.
     */
    confidenceScore?: number | null;
    /**
     * Debug information.
     */
    debugInfo?: Schema$RepositoryWebrefMentionDebugInfo;
    /**
     * Additional detailed scores about this mention.
     */
    detailedMentionScores?: Schema$RepositoryWebrefDetailedMentionScores;
    end?: number | null;
    endTokenIndex?: number | null;
    /**
     * Information used by the evaluation tools to mark mentions annotations as correct/incorrect. This will never be annotated in production (would be nice if was, though :-)).
     */
    evalInfo?: Schema$RepositoryWebrefMentionEvalInfo;
    /**
     * DEPRECATED and not populated anymore.
     */
    interpretationNumber?: number[] | null;
    /**
     * True if the entity is mentioned implicitly. Note that a mention can be implicit *and* have a non-empty range, for example if the entity is Sports, and this is inferred from the mention of "gym".
     */
    isImplicit?: boolean | null;
    /**
     * Provides a Wordgraph lexical signals for the mentioned range so it can be use in LooseParsing. Please don't use this field before consulting wordgraph-team.
     */
    lexicalAnnotation?: Schema$RepositoryWebrefLexicalAnnotation;
    /**
     * Qref & Postref only: Set to true for candidates part of qref candidate output for which there was no mention in qref. Internal to qref and LooseParsing. Do not use outside of these systems.
     */
    lowConfidence?: boolean | null;
    /**
     * Refcon-only: Annotated span in Refcon-normalized textual format, corresponding to the [begin end) offset interval in the CDoc. It will only be populated for CDocs originated from Docjoin extraction.
     */
    matchingText?: string | null;
    /**
     * Metadata attached to the name.
     */
    nameMetadata?: Schema$RepositoryWebrefConceptNameMetadata;
    /**
     * Whether the mention is a non-locational reference to a geographical entity. Ranges from 0 (locational) to 1 (non-locational).
     */
    nonLocationalScore?: number | null;
    /**
     * Provides concised access to all matched MatchedLightweightToken.
     */
    perMentionLightweightToken?: Schema$RepositoryWebrefLightweightTokensPerMentionLightweightToken;
    /**
     * Additional personalization output scores about this mention.
     */
    personalizationContextOutputs?: Schema$RepositoryWebrefPersonalizationContextOutputs;
    /**
     * The prior probability of the entity for this mention.
     */
    priorProbability?: number | null;
    /**
     * Whether the mention is a reference (e.g. it could be resolved to an entity coming from personal data) or not, currently only used for personal resolutions. Scores from 0 (not a reference) to 1 (reference). Use at your own risk as they are subject to change, advised to talk to refx-personal first.
     */
    referenceScore?: number | null;
    /**
     * Whether the mention is a resolution or not, currently only used for personal resolutions. Scores from 0 (not a resolution) to 1 (resolution). Use at your own risk as they are subject to change, advised to talk to refx-personal first.
     */
    resolutionScore?: number | null;
    /**
     * Assorted things that can be added to a Mention.
     */
    stuff?: Schema$Proto2BridgeMessageSet;
    /**
     * Identifies the sub-segment where the annotation occurs. See SubSegmentIndex for details. Not present in QRef, also deprecated for URL segment types.
     */
    subsegmentIndex?: Schema$RepositoryWebrefSubSegmentIndex;
    /**
     * Confidence for the time_offset_ms annotation, quantized to values in range 0-127 (see speech::VideoASRServerUtil::ConfidenceQuantize for how the quantization was done). Confidence can be empty for special characters (e.g. spaces).
     */
    timeOffsetConfidence?: number | null;
    /**
     * Timestamp that this mention appeared in the video. The field is only populated for VIDEO_TRANSCRIPT when the byte offset is the same. It is extracted from cdoc.doc_videos.content_based_metadata.transcript_asr.transcript.timestamp.
     */
    timeOffsetMs?: number | null;
    /**
     * Confidence that this name is a trusted name of the entity. This is set only in case the confidence is higher than an internal threshold (see ConceptProbability).
     */
    trustedNameConfidence?: number | null;
  }
  /**
   * Additional ranges covered by the mention. Next available tag: 5
   */
  export interface Schema$RepositoryWebrefMentionAdditionalExplainedRange {
    /**
     * Like begin/end, begin_token_index/end_token_index above.
     */
    begin?: number | null;
    beginTokenIndex?: number | null;
    end?: number | null;
    endTokenIndex?: number | null;
  }
  /**
   * Reference to a component of a compound mention. Next available tag: 5
   */
  export interface Schema$RepositoryWebrefMentionComponent {
    /**
     * The indices to identify the entity within the WebrefEntities.entities, the segment within its EntityAnnotations.segment_mentions, and the mention within that segment. entity_index is always guaranteed to be set, but segment_mentions_index and mention_index are omitted if the component reference is implicit.
     */
    entityIndex?: number | null;
    /**
     * The source of the compound has designated this component as the head. Only one of the components can be a head, but it's possible none are.
     */
    isHeadComponent?: boolean | null;
    mentionIndex?: number | null;
    segmentMentionsIndex?: number | null;
  }
  /**
   * A single compound mention. Next available tag: 3
   */
  export interface Schema$RepositoryWebrefMentionCompoundMention {
    /**
     * References to the component mentions which the MRF needs to be fully expanded. It is guaranteed that for a given set of components there exists only a single CompoundMention, i.e. the CompoundMentions are deduped to be unique so each set of components is present only once. The ArgumentValue of the WebrefEntity.mrf refer to these components via ComponentReference; it is guaranteed there are as many components as the MRF expression refers to.
     */
    component?: Schema$RepositoryWebrefMentionComponent[];
    /**
     * The WebrefEntity.mrf indices which this compound applies to. There can be at most one CompoundMention which claims an MRF index, but it is possible there are MRF expressions which are not claimed by any CompoundMention.
     */
    mrfIndex?: number[] | null;
  }
  export interface Schema$RepositoryWebrefMentionDebugInfo {
    /**
     * A clean version of text. This is mostly used for compatibility with other Goldmine annotators.
     */
    cleanText?: string | null;
    /**
     * Optional debug information.
     */
    infoString?: string[] | null;
    /**
     * A snippet of the parsed text (html tags removed) in the page around this mention. Useful for human evaluation of the quality of the annotations. Outputted by WebrefAnnotator if --webref_output_mention_snippet_size is set to a value greater than 0.
     */
    snippet?: string | null;
    /**
     * Original UTF-8 document text occurring in the range [begin, end).
     */
    text?: string | null;
  }
  export interface Schema$RepositoryWebrefMentionEvalInfo {
    /**
     * Weight of the mention used in the ATM score.
     */
    atmWeight?: number | null;
    /**
     * The aggregate numerical rating of this mention. 0.0 means completely incorrect, and 1.0 completely correct.
     */
    rating?: number | null;
  }
  /**
   * Per document mention ratings. Next id: 10
   */
  export interface Schema$RepositoryWebrefMentionRatings {
    /**
     * Byte offsets of the mention.
     */
    begin?: number | null;
    end?: number | null;
    mentionMatch?: string[] | null;
    singleMentionRating?: Schema$RepositoryWebrefMentionRatingsSingleMentionRating[];
  }
  /**
   * Next available tag: 11
   */
  export interface Schema$RepositoryWebrefMentionRatingsSingleMentionRating {
    /**
     * Set for mentions got from the new topicality template. True if the raters checked this range as being a good range for the entity. If the range is not correct we demote the mention score. This field is only used in template version V1. From template version V2 and forward it is now set via phrase_refer.
     */
    isCorrectRange?: boolean | null;
    mentionMatch?: string | null;
    mentionRelevant?: string | null;
    phraseRefer?: string | null;
    /**
     * Whether rater can understand the topic.
     */
    raterCanUnderstandTopic?: boolean | null;
    /**
     * The source of the rating, possibly a golden set external to EWOK.
     */
    ratingSource?: string | null;
    resultCount?: number | null;
    taskData?: Schema$RepositoryWebrefTaskData;
    topicMentionedInResult?: string[] | null;
  }
  /**
   * Collects signals from one query used for prior learning.
   */
  export interface Schema$RepositoryWebrefNameDebugInfo {
    /**
     * List of per-candidate signals derived from annotation of this query.
     */
    candidates?: Schema$RepositoryWebrefNameDebugInfoCandidateInfo[];
    /**
     * Query with region (language is set in parent NameInfo).
     */
    query?: Schema$RepositoryWebrefLocalizedString;
    /**
     * Query weight used in learning.
     */
    weight?: number | null;
  }
  /**
   * Collects signals from one query and one candidate. Next available tag: 9
   */
  export interface Schema$RepositoryWebrefNameDebugInfoCandidateInfo {
    /**
     * Whether the entity is purely from strong result entities, and is matchless in query annotation.
     */
    isMatchlessResultContext?: boolean | null;
    /**
     * Mid of the candidate entity or empty string for the full world.
     */
    mid?: string | null;
    /**
     * Debug name of the entity (not usually populated).
     */
    name?: string | null;
    resultEntityScore?: number | null;
  }
  /**
   * Represents all information we have about a specific/localized name. Next available tag: 13. NOTE: If you add a field to the NameInfo proto and wish to retain it *after* the GlobalNameInfo merging steps in //r/w/enricher/pipeline:topic-enricher-flume-main then the appropriate combining logic for turning a flume stream of NameInfo protos into a single NameInfo must be updated with the new field in mind, in either or both of CombineContextNameInfosFn/CombineNameInfosFn. If not, the newly added field will be ignored during the merging steps (presumably because it is a transient field or a debug field that is not necessary to be retained).
   */
  export interface Schema$RepositoryWebrefNameInfo {
    /**
     * The score aggregated from all sources.
     */
    aggregatedScores?: Schema$RepositoryWebrefAggregatedEntityNameScores;
    /**
     * Information on categories annotated on the range.
     */
    annotatedCategory?: Schema$RepositoryWebrefAnnotatedCategoryInfo[];
    /**
     * DEBUG ONLY: stores a list of queries with per-candidate scores about signals used for prior learning.
     */
    debugDetails?: Schema$RepositoryWebrefNameDebugInfo[];
    /**
     * Field which decides if this NameInfo should be included in model creation.
     */
    includeInModel?: boolean | null;
    /**
     * The specific name to which this information applies.
     */
    name?: Schema$RepositoryWebrefLocalizedString;
    /**
     * N-gram data (e.g. n-gram IDF).
     */
    ngramData?: Schema$RepositoryWebrefUniversalNgramData;
    /**
     * Lightweight token semantic metadata for inflected name.
     */
    perNameLightweightToken?: Schema$RepositoryWebrefLightweightTokensPerNameLightweightToken;
    /**
     * The name-specific scores. These scores only depend on the name and are independent of the entity.
     */
    scores?: Schema$RepositoryWebrefNameScores;
    /**
     * The per-source scores.
     */
    source?: Schema$RepositoryWebrefEntityNameSource[];
  }
  /**
   * Represents some name-specific scores. (Unlike EntityNameScore, these scores are independent of the entities the name is associated with). These scores are available for each name as well as for each name/source. Next available tag: 31.
   */
  export interface Schema$RepositoryWebrefNameScores {
    /**
     * Approximates volume of this name including entities we don't have in our set. This is useful to estimate the size of the "open world". For example, this field can be equal to the total number of clicks for the query. Note that for now, we ignore the number of clicks but just use the idf if available.
     */
    completeWorldVolume?: number | null;
    /**
     * The fringe score in [0, 1] for this context name. This is only populated for full-query context names.
     */
    contextFringeScore?: number | null;
    /**
     * The amount of evidence available for this context name.
     */
    contextWeight?: number | null;
    /**
     * The idf of this name.
     */
    idfScore?: number | null;
    /**
     * 'Raw' open world is computed based on ngram count data. For some names however, we modify the open world based on entities associated with them. This field contains the additive open world modifier. open_world_volume = raw open world + open_world_volume_modifier
     */
    openWorldVolumeModifier?: number | null;
    /**
     * The total score of that name/source. It describes how much data we have for that name/source. It can for example be the sum of all the entity scores for this name.
     */
    totalScore?: number | null;
  }
  /**
   * An N-gram context encountered on the document.
   */
  export interface Schema$RepositoryWebrefNgramContext {
    /**
     * The entities that were annotated on the context
     */
    mention?: Schema$RepositoryWebrefNgramMention[];
    /**
     * The context (original) text.
     */
    text?: string | null;
    /**
     * The weight of the context on the document; depends on how many times we saw the string in the document.
     */
    weight?: number | null;
  }
  /**
   * A mention that has been matched in the context (or a substring of it).
   */
  export interface Schema$RepositoryWebrefNgramMention {
    /**
     * The entity the mention was referring to.
     */
    mid?: string | null;
    /**
     * The average score the mention was given across all occurrences of the n-gram.
     */
    score?: number | null;
  }
  /**
   * Oyster type information.
   */
  export interface Schema$RepositoryWebrefOysterType {
    /**
     * The Oyster feature type, which provides a rough categorization. This is a value of the enum geostore.FeatureProto.TypeCategory.
     */
    featureType?: number | null;
    /**
     * Geo Ontology GConcept Instances from the FeatureProto. - Design doc linked off http://wiki/Main/GeoOntology - Use the accessor library to read this field: geostore/base/public/gconcept_instance.h
     */
    gconcepts?: Schema$GeostoreOntologyRawGConceptInstanceContainerProto;
  }
  /**
   * Per document ratings relevance ratings. Next id: 21.
   */
  export interface Schema$RepositoryWebrefPerDocRelevanceRating {
    contentRelevant?: string | null;
    /**
     * How this rating is displayed in the evals, pre-computed from the other fields.
     */
    displayString?: string | null;
    /**
     * The url of the ewok task that resulted in this rating. Example: https://furball.corp.google.com/project/view-item?itemId=1&projectId=2
     */
    furballUrl?: string | null;
    itemId?: string | null;
    /**
     * If the topic is about a business chain, whether the
     */
    pageIsAboutChain?: string | null;
    /**
     * Metadata for task-level ratings. Not filled for aggregated doc-level ratings.
     */
    projectId?: string | null;
    /**
     * Whether rater can understand the topic.
     */
    raterCanUnderstandTopic?: boolean | null;
    taskDetails?: Schema$RepositoryWebrefTaskDetails;
    taskId?: string | null;
    /**
     * Whether the topic is about a business chain.
     */
    topicIsChain?: string | null;
  }
  /**
   * Aggregates ratings by url/doc_fp.
   */
  export interface Schema$RepositoryWebrefPerDocRelevanceRatings {
    /**
     * - In topicality ratings this is Fingerprint2011() of the normalized cdoc. - In query-mention ratings this is a hash of the QueryJoin. - In doc-content-mention ratings this is a hash of a QueryJoin in which the mention rating task has been embedded. -
     */
    docFp?: string | null;
    entityNameRating?: Schema$RepositoryWebrefEntityNameRatings[];
    mentionRating?: Schema$RepositoryWebrefMentionRatings[];
    taskLevelRating?: Schema$RepositoryWebrefPerDocRelevanceRating[];
    /**
     * - In topicality ratings this is the url of the document. - In query-mention ratings this is the query in format "en:US:query text". - In doc-content-mention ratings this is %x:%s where %x is the hex doc_fp of the cdoc (TODO(b/139799592) or sometimes the doc_fp below), and %s is the text of the eval range. - In entity-name ratings this is the MID of the entity.
     */
    url?: string | null;
  }
  /**
   * Key-Value-like message to store values associated with a personalization type. Next id: 3
   */
  export interface Schema$RepositoryWebrefPersonalizationContextOutput {
    /**
     * Score corresponding to some kind of biasing strength which was applied. The exact semantics of this score is subject to further changes. Don't make assumptions about specific values or ranges. Values \> 0 represents that a boost was applied. Values < 0 represents that a penalty was appled.
     */
    score?: number | null;
    type?: string | null;
  }
  /**
   * Details about personalization and contextual scoring decisions from Personalized Query Understanding (go/pqu). This message represents information about what kind of biasing was applied, including what type of data were used and how strongly. Intended to be used by client code for fine-tuning necessary ranking or triggering logic if it's not possible to rely on the aggregated annotation confidence alone. To minimize unwanted dependencies and incorrect usage of the data this proto has restricted visibility. Please reach out to refx-pqu@google.com if you want to have access. Next id: 2
   */
  export interface Schema$RepositoryWebrefPersonalizationContextOutputs {
    /**
     * Detailed output scores per personalization type.
     */
    outputs?: Schema$RepositoryWebrefPersonalizationContextOutput[];
  }
  /**
   * Metadata about a name. There are two metadata protos, whose content is meant to be similar but their usage different: NameEntityMetadata for readability and ConceptNameMetadata for size / decoding speed. NameEntityMetadata is propagated to GlobalNameInfo and EntityJoin tables, while ConceptNameMetadata is propagated from EntityJoins to the name matching tables and later to the Webref's/QRef's output. To add a new metadata field in the Names pipeline, and propagate it to EntityJoins and Names matching tables, it is necessary to: (1) Add the field to NameEntityMetadata, and a corresponding data representation in ConceptNameMetadata. (2) Populate the field in NameVariantSignals.name_metadata, from any source. This can be done in a corresponding NameProcessor. (3) Update the library name-metadata.h/cc to make sure that the metadata field is: a) merged correctly when merging two NameSignals; and b) transformed to the corresponding field in ConceptNameMetadata proto. Next available tag: 22.
   */
  export interface Schema$RepositoryWebrefPreprocessingNameEntityMetadata {
    /**
     * There is a limit of entities per name for which we can keep name signals and score. This flag is set to true for names that by-passed per-name-scoring, as there were too many entities for the name.
     */
    isBypassedName?: boolean | null;
    /**
     * This name is a generated compound name to pass primary pruning.
     */
    isCompoundName?: boolean | null;
    /**
     * Indicates special compound retrieval keys, like "Compound $mid1 $mid2"
     */
    isCompoundRetrievalKey?: boolean | null;
    /**
     * This is set to true if the entity corresponds to a dictionary term.
     */
    isDictionaryTerm?: boolean | null;
    /**
     * If true, this name is an event retrieval key.
     */
    isEventRetrievalKey?: boolean | null;
    /**
     * This name is generated from other names.
     */
    isGeneratedName?: boolean | null;
    /**
     * This name is a generated street name.
     */
    isGeneratedStreetname?: boolean | null;
    /**
     * This name is added by name propagation in hierarchy.
     */
    isHierarchyPropagated?: boolean | null;
    /**
     * This name is an ISBN.
     */
    isIsbn?: boolean | null;
    /**
     * This name comes from recording lyrics content.
     */
    isLyricsContent?: boolean | null;
    /**
     * This name is a phone number.
     */
    isPhoneNumber?: boolean | null;
    /**
     * This name is used for refcon.
     */
    isRefconName?: boolean | null;
    /**
     * This name is a reference name, only for internal usage, this name should not go into matching table without support of other signals.
     */
    isReferenceName?: boolean | null;
    /**
     * This name is the URL of a reference page.
     */
    isRefpageUrl?: boolean | null;
    /**
     * This name is generated from a reverse unique property of the entity.
     */
    isReverseUniquePropertyName?: boolean | null;
    /**
     * This name is a strong identifier for this entity.
     */
    isStrongIdentifier?: boolean | null;
    /**
     * Set if the name is coming from synonyms.
     */
    isSynonymOrFuzzyMatch?: boolean | null;
    /**
     * If true, this name is a trusted name if it is in ALLCAPS.
     */
    isTrustedAllcapsName?: boolean | null;
    /**
     * If true, do not do tokenization when compute fprint hash for this name.
     */
    isUnnormalizedName?: boolean | null;
    /**
     * This name is clearly not generated(aka. at least one source of this name is not generated). This field is added for simplifying generated name tag while merging. Do not use this metadata directly.
     */
    notGeneratedName?: boolean | null;
    /**
     * Original versions of the name (before normalization). Used as query for the entity by Explicit Entity Search.
     */
    originalNames?: Schema$RepositoryWebrefPreprocessingOriginalNames;
    /**
     * Whether or not to suppress tokenization on this name.
     */
    suppressTokenization?: boolean | null;
  }
  /**
   * Abstract, source independent scores. Next available tag: 7
   */
  export interface Schema$RepositoryWebrefPreprocessingNameEntityScores {
    /**
     * An unnormalized measure of how much evidence we have that this name variant refers to the key entity. Should be comparable to all scores from the same source for: - other entities having the same name variant - the open world score computed for this name variant
     */
    priorScore?: number | null;
    /**
     * Prior score come from source that is quantifiable. artificial_score = prior_score - volume_based_score.
     */
    volumeBasedScore?: number | null;
  }
  /**
   * Next available tag: 33.
   */
  export interface Schema$RepositoryWebrefPreprocessingNameVariantSignals {
    /**
     * Common prior_score/trust proto This field is shared by all sources providing this kind of data, the information has to be considered in context with the source.
     */
    scores?: Schema$RepositoryWebrefPreprocessingNameEntityScores;
    /**
     * The source of this NameVariantSignals proto
     */
    source?: string | null;
  }
  export interface Schema$RepositoryWebrefPreprocessingOriginalNames {
    /**
     * The total number of original names that a normalized name has (all versions from all different sources).
     */
    count?: number | null;
    name?: Schema$RepositoryWebrefPreprocessingOriginalNamesOriginalName[];
  }
  export interface Schema$RepositoryWebrefPreprocessingOriginalNamesOriginalName {
    /**
     * The total number of different sources from where this version of the original name comes from.
     */
    count?: number | null;
    /**
     * Score estimating how good this original name is: - some sources are considered more authoritative than others (e.g. KG) - a name found in more sources is better.
     */
    score?: number | null;
    /**
     * The sources this name comes from.
     */
    source?: number[] | null;
    /**
     * One original name version.
     */
    text?: string | null;
  }
  /**
   * Proto with metadata related to why a particular cdoc was selected for an entityjoin.
   */
  export interface Schema$RepositoryWebrefPreprocessingUrlMatchingMetadata {
    /**
     * The sources the url was suggested by.
     */
    source?: Schema$RepositoryWebrefPreprocessingUrlSourceInfo[];
  }
  /**
   * Information about where the url comes from.
   */
  export interface Schema$RepositoryWebrefPreprocessingUrlSourceInfo {
    deprecatedOldSchema?: Schema$RepositoryWebrefPreprocessingUrlSourceInfoOldSchema;
    newSchema?: Schema$RepositoryWebrefPreprocessingUrlSourceInfoNewSchema;
    originalUrl?: string | null;
    source?: string | null;
  }
  /**
   * Source information for the new reference url Freebase schema.
   */
  export interface Schema$RepositoryWebrefPreprocessingUrlSourceInfoNewSchema {
    sourceProperty?: string | null;
  }
  /**
   * Source information for the old reference url Freebase schema.
   */
  export interface Schema$RepositoryWebrefPreprocessingUrlSourceInfoOldSchema {
    isOfficial?: boolean | null;
  }
  /**
   * A single processor counter stored as a pair of the counter name and the value.
   */
  export interface Schema$RepositoryWebrefProcessorCounter {
    name?: string | null;
    value?: number | null;
  }
  /**
   * Processor timings as produced by NestedPerfCounter, see google3/repository/webref/base/nested-perf-counter.h.
   */
  export interface Schema$RepositoryWebrefProcessorTiming {
    /**
     * Cpu instructions spent.
     */
    cpuInstructions?: string | null;
    /**
     * A string identifying the processor timing context.
     */
    name?: string | null;
    /**
     * Document counters defined by processors. A processor can add and increment counters with NestedPerfCounter::IncrementCounterBy. See go/webref-annotator-metrics.
     */
    processorCounters?: Schema$RepositoryWebrefProcessorCounter[];
    /**
     * Nested measurements, see NestedPerfCounter::ScopedPerfCounter.
     */
    processorTimings?: Schema$RepositoryWebrefProcessorTiming[];
    /**
     * Wall time (in nanoseconds).
     */
    wallTimeNs?: string | null;
  }
  /**
   * Products-specific information about the entity. Next available tag: 16.
   */
  export interface Schema$RepositoryWebrefProductMetadata {
    /**
     * Shopping product line ids (typically moka product line tag) of this entity. Represents shopping product lines, such as iPhone or Canon EOS. Typically, we expect only one id. But keeping repeated, in case we want to merge or aggregate product lines. Using int64, as tag_id in commerce/datastore/processors/moka/proto/moka_annotations.proto.
     */
    productLineId?: string[] | null;
    /**
     * All ShoppingIds for this MID that need to be copied to IntentQuery (FunctionCall) if this MID is used in intent generation. See go/iql-shopping-ids for details.
     */
    shoppingIds?: Schema$KnowledgeAnswersIntentQueryShoppingIds;
    type?: string | null;
    /**
     * All unique variant cluster ids (shopping's GPCs) of this entity.
     */
    variantClusterId?: string[] | null;
  }
  /**
   * Identifies a set of NavBoost queries in the CompositeDoc. Typically these queries were collapsed by WebRef into a single query and they were treated by the annotator as equivalent. They all contain the same mentions (at the same offsets).
   */
  export interface Schema$RepositoryWebrefQueryIndices {
    /**
     * The set of indices in the NavBoostQuery::features() array that belong to the collapsed features.
     */
    featuresIndex?: number[] | null;
    /**
     * The index of the query in NavBoostDocument::queries() array.
     */
    queriesIndex?: number | null;
  }
  /**
   * The fields hold "non-entity" annotations of text.
   */
  export interface Schema$RepositoryWebrefRangeAnnotations {
    /**
     * The actual mentions. Note SegmentMentions contains some fields specific to entity annotation, and those are typically not populated here.
     */
    segmentMentions?: Schema$RepositoryWebrefSegmentMentions[];
    /**
     * The type of ranges contained in this message.
     */
    type?: string | null;
  }
  /**
   * Metadata keeper for an annotated range of a segment. Next available tag: 3.
   */
  export interface Schema$RepositoryWebrefRangeMetadata {
    /**
     * Start index of range (within the segment) being annotated.
     */
    beginOffset?: number | null;
    /**
     * Number of tokens in the range being annotated.
     */
    tokenCount?: number | null;
  }
  /**
   * Encapsulates the textual mention spans extracted from a document, split per token.
   */
  export interface Schema$RepositoryWebrefRefconDocumentMentionSpans {
    /**
     * Per token mention spans.
     */
    mentionSpan?: Schema$RepositoryWebrefRefconMentionSpans[];
  }
  /**
   * Describes a mention annotated by Webref in the given document.
   */
  export interface Schema$RepositoryWebrefRefconMentionSpans {
    /**
     * Segment types in which the mention appears. Now deprecated, because we only care about CONTENT segments.
     */
    segment?: string[] | null;
    /**
     * Fingerprinted tokens which form the mention span. We are using 32-bit instead of usual 64bit fingerprints - this greatly reduces the memory footprint while still keeping the chance of collision reasonably low for our specific use case (1 in 4 billion).
     */
    shortToken?: number[] | null;
    /**
     * Fingerprinted tokens which form the mention span.
     */
    token?: string[] | null;
  }
  /**
   * Contains high level search query statistics of the document.
   */
  export interface Schema$RepositoryWebrefRefconQueryStats {
    /**
     * Total query count for the document from all the query terms. Can be used to estimate the popularity of the document.
     */
    aggregatedQueryCount?: number | null;
  }
  /**
   * Encapsulates additional CDoc metadata needed by Refcon.
   */
  export interface Schema$RepositoryWebrefRefconRefconDocumentMetadata {
    queryStats?: Schema$RepositoryWebrefRefconQueryStats;
  }
  /**
   * Refcon name representation in split concepts sstable. This is a simplified version of repository_webref.GlobalNameInfo.
   */
  export interface Schema$RepositoryWebrefRefconRefconNameInfo {
    confidence?: number | null;
    idfScore?: number | null;
    isGeneratedName?: boolean | null;
    isI18nName?: boolean | null;
    isStrongIdentifier?: boolean | null;
    isTranslatedName?: boolean | null;
    /**
     * Languages of the name, unknown language is not kept. TODO(b/145976266) Don't use the deprecated language enum.
     */
    language?: number[] | null;
    /**
     * Name prior to use. We read this from the prior for the "unknown" language.
     */
    namePrior?: number | null;
    /**
     * The normalized name.
     */
    normalizedName?: string | null;
    /**
     * Filled only if different than normalized_name.
     */
    originalName?: string | null;
    score?: number | null;
  }
  /**
   * Signals used for mining new reference pages, set by the reference-page-scorer processor.
   */
  export interface Schema$RepositoryWebrefReferencePageScores {
    /**
     * Stores score for later offline voting to choose reference pages. If zero, it's not a good book reference page.
     */
    bookScore?: number | null;
    /**
     * The raw topicality score of the primary entity.
     */
    firstScore?: number | null;
    /**
     * Whether the primary entity has any "special" links. Currently a link is considered special if it has a good implication probability and has no negative disambiguation probability.
     */
    hasSpecialLinks?: boolean | null;
    /**
     * The median mentions core of the primary entity.
     */
    medianMentionScore?: number | null;
    /**
     * The navboost token coverage ratio. All queries are taken into account.
     */
    navboostCoverage?: number | null;
    /**
     * Reference page score used to select the reference page owner.
     */
    referencePageScore?: number | null;
    /**
     * True if the entity is selected as the reference page owner.
     */
    selected?: boolean | null;
    /**
     * A score in [0, 1] which indicates the single topicness of the entity.
     */
    singleTopicness?: number | null;
    /**
     * This should have the same semantic as single_topicness, and should replace it in the long term.
     */
    singleTopicnessV2?: number | null;
    /**
     * =================================== Signals for the single topicness. Only filled in for the primary (i.e., top ranked) entity. The title token coverage ratio.
     */
    titleCoverage?: number | null;
    /**
     * The sum of raw topicality scores for all entities in this page.
     */
    totalSum?: number | null;
  }
  /**
   * A single Mention within a segment as defined by SegmentMentions.SegmentType
   */
  export interface Schema$RepositoryWebrefSegmentMention {
    mention?: Schema$RepositoryWebrefMention;
    segmentType?: string | null;
  }
  /**
   * Annotations of a single docjoin segment. A CDoc has several distinct data types which we call "segments" (see SegmentType for complete list). SegmentMentions contains all the mentions for a given (document, segment) pair. For queries there is only a single CONTENT segment.
   */
  export interface Schema$RepositoryWebrefSegmentMentions {
    /**
     * A list of all the places the entity in question was annotated within this segment. The (indexing.annotations.goldmine) option is for Goldmine AnnotationsFinder to include Mention only when segment_type="CONTENT"
     */
    mention?: Schema$RepositoryWebrefMention[];
    segmentType?: string | null;
  }
  /**
   * A date range for an entity. E.g. lifespan of a person, release date of a movie, ...
   */
  export interface Schema$RepositoryWebrefSemanticDateRange {
    /**
     * Indicates how confident we are this extracted range is relevant to a document (document to be infered from context).
     */
    confidence?: number | null;
    /**
     * End date extracted from the entity along end_source_property.
     */
    end?: string | null;
    /**
     * KG-property that links the entity to the end date.
     */
    endSourceProperty?: string | null;
    /**
     * Entity from which this range was extracted.
     */
    sourceEntityMid?: string | null;
    /**
     * Start date extracted from the entity along start_source_property.
     */
    start?: string | null;
    /**
     * KG-property that links the entity to the start date.
     */
    startSourceProperty?: string | null;
  }
  /**
   * Represents a subpart of the anchor data of the docjoins, but is much smaller. When we build this SimplifiedAnchor from the anchor data of the docjoins, by specifying the option separate_onsite_anchors to SimplifiedAnchorsBuilder, we can also separate the onsite anchors from the other (offdomain) anchors. So onsite anchors and offdomain anchors will have their own count, score, normalized score, and total volume (.._offdomain and .._onsite fields). For example, if there are 10 onsite anchors and 20 offdomain anchors for the anchor text "mountain view", then the count_from_onsite is 10, and the count_from_offdomain is 20 when we separate onsite anchors out. Otherwise (if we don't separate onsite anchors), the count is 30 (10 + 20) and we don't have values in the .._offdomain and .._onsite fields.
   */
  export interface Schema$RepositoryWebrefSimplifiedAnchor {
    /**
     * The set of (equivalent from WebRef point of view) anchors used to produce this segment.
     */
    anchorIndices?: Schema$RepositoryWebrefAnchorIndices;
    /**
     * The anchor text. Note that the normalized text is not populated.
     */
    anchorText?: Schema$RepositoryWebrefLocalizedString;
    /**
     * The number of times we see this anchor text.
     */
    count?: string | null;
    /**
     * Count, score, normalized score, and volume of offdomain anchors.
     */
    countFromOffdomain?: string | null;
    /**
     * Count, score, normalized score, and volume of onsite anchors.
     */
    countFromOnsite?: string | null;
    /**
     * The normalized score, which is computed from the score and the total_volume.
     */
    normalizedScore?: number | null;
    normalizedScoreFromOffdomain?: number | null;
    normalizedScoreFromOnsite?: number | null;
    /**
     * The sum/aggregate of the anchor scores that have the same text.
     */
    score?: number | null;
    /**
     * The sum/aggregate of the anchor scores that direct to a fragment and have the same text.
     */
    scoreFromFragment?: number | null;
    scoreFromOffdomain?: number | null;
    scoreFromOffdomainFragment?: number | null;
    scoreFromOnsite?: number | null;
    scoreFromOnsiteFragment?: number | null;
    /**
     * The sum/aggregate of the anchor scores that direct to a different wiki title and have the same text. NOTE: url direct to a fragment score is not included in this value.
     */
    scoreFromRedirect?: number | null;
    /**
     * The total score volume used for normalization.
     */
    totalVolume?: number | null;
    totalVolumeFromOffdomain?: number | null;
    totalVolumeFromOnsite?: number | null;
  }
  export interface Schema$RepositoryWebrefSimplifiedAnchors {
    anchor?: Schema$RepositoryWebrefSimplifiedAnchor[];
  }
  /**
   * Represents an information which is very close to composite doc, but compresses how the anchors are represented to save space. Next available tag: 17.
   */
  export interface Schema$RepositoryWebrefSimplifiedCompositeDoc {
    /**
     * The composite doc anchors trimmed and transformed in a smaller data structure and aggregated (if they have the exact same text).
     */
    anchors?: Schema$RepositoryWebrefSimplifiedAnchors;
    /**
     * IMPORTANT: do not access this field directly, use the simplified-cdoc-access library functions to get the composite doc out of this proto.
     */
    cdocContainer?: Schema$Proto2BridgeMessageSet;
    /**
     * The composite doc spans which were annotated with entities by Webref.
     */
    documentMentionSpans?: Schema$RepositoryWebrefRefconDocumentMentionSpans;
    /**
     * Forwarding dups generated by merging existing forwarding dups within cdoc_container and URLs from ReferencePageCandidateList. Populated only before writing to online CDocs Spanner table and used for keeping an index on non canonical URLs in table. [!] Do not use unless fetching CDocs from Enricher's online Spanner CDocs database knowledge-enricher-cdocs-spanner.
     */
    forwardingDups?: Schema$RepositoryWebrefSimplifiedForwardingDup[];
    /**
     * Metadata related to why this doc was matched to its owning entity.
     */
    matchingMetadata?: Schema$RepositoryWebrefPreprocessingUrlMatchingMetadata;
    /**
     * Additional document metadata needed by Refcon.
     */
    refconDocumentMetadata?: Schema$RepositoryWebrefRefconRefconDocumentMetadata;
    sourceSnapshotType?: string | null;
    /**
     * The URL, populated independently of whether we have a CompositeDoc proto. If the cdoc exists, the url is the same as CompositeDoc.doc.url.
     */
    url?: string | null;
    webrefOutlinkInfos?: Schema$RepositoryWebrefWebrefOutlinkInfos;
    webrefOutlinksLegacy?: Schema$Proto2BridgeMessageSet;
  }
  export interface Schema$RepositoryWebrefSimplifiedForwardingDup {
    url?: string | null;
  }
  /**
   * LINT.IfChange Some document segments may consist of multiple sub-segments (e.g. a document might have multiple anchors or navboost queries). SubSegmentIndex contains all information needed to identify the sub-segment (e.g. specific query, query feature or or anchor) where the mention is located.
   */
  export interface Schema$RepositoryWebrefSubSegmentIndex {
    /**
     * Pointer to the exact set of anchors in the cdoc.
     */
    anchorIndex?: Schema$RepositoryWebrefAnchorIndices;
    /**
     * Pointer to the Webref-internal Segment indices. Can't be mapped back to the CDoc.
     */
    genericIndex?: Schema$RepositoryWebrefGenericIndices;
    /**
     * Pointer to the exact set of image navboost queries in the cdoc.
     */
    imageQueryIndex?: Schema$RepositoryWebrefImageQueryIndices;
    /**
     * Pointer to the proto in the cdoc and index within the proto for Spore.
     */
    jgnIndex?: Schema$RepositoryWebrefJuggernautIndices;
    /**
     * Pointer to the exact set of queries in the cdoc.
     */
    queryIndex?: Schema$RepositoryWebrefQueryIndices;
  }
  /**
   * Each SupportTransferRule proto represents a single STBR (go/stbr) rule. These rules are attached to entities (called STBR sources). Each rule attached to an STBR source talks about a single entity (called STBR target). If an STBR source gets annotated, its attached rules result in creation of annotations for corresponding STBR targets. An STBR source might have more than one STBR rule attached to it. STBR rules allow us to address cases where otherwise annotations for what people say do not match what people mean. For example, a query [france vs spain] uses names of countries while in sports context the query would actually be about national sports teams of those countries. In other words, STBR rules have meaning of "in this particular context (see domain + target_collection fields below) a mention of this particular STBR source (the entity this rule is attached to) actually should be treated as that STBR target (see the target field below)". To describe the meaning of STBR settings (proto fields below), we are going to use a hypothetical example of an STBR rule making Search stack treat annotations for /m/France as annotations for /m/Louis_XIV, since he was the one saying "I am the state". In this example /m/France is going to be the STBR source. NOTICE: When adding new fields also update client::support_transfer::SortDeterministically to ensure deterministic sorting of the SupportTransferRule objects. Next available tag: 11. LINT.IfChange
   */
  export interface Schema$RepositoryWebrefSupportTransferRule {
    /**
     * If set to true, allow STBR targets to trigger intents like ShowEntity that do not have explicit lists of allowed collections, accepting entities with any collections instead. This setting together with target_collection define what intents are allowed to be triggered by the STBR target. Be careful with setting this option to 'true', as in the case of our example the query [france] would result in the knowledge panel for the monarch. Louis XIV might've wanted such a behaviour, but you are probably not him.
     */
    allowWildcardIntents?: boolean | null;
    /**
     * Name of Aqua grammar domain this STBR rule is restricted to. If the domain is set to anything other than "default", the STBR rule is only going to result in an annotation for the STBR target inside of the Aqua domain of the corresponding name. If there is no such Aqua domain, the rule is going to be ignored. The default value of string "default" for domain makes it possible for the STBR rule to be used inside Loose Parser.
     */
    domain?: string | null;
    /**
     * Whether this rule points from an STBR target to its STBR source. This field is an internal implementation detail that is not configurable by customers. Inside QRewrite we have to keep track of relations between entities. Among other things it is useful to remember which STBR target a given STBR source came from. For that purpose we attach an STBR proto to the STBR target, reversing the rule, i.e, putting STBR source's mid as the target etc. For this reversed rule we set is_reverse_link to true.
     */
    isReverseLink?: boolean | null;
    /**
     * STBR doesn't just create annotations for STBR targets. It also can modify search result support (useful in PostRef) in order for web pages supporting the STBR source to also support the STBR target. Otherwise in PostRef annotations for STBR targets are going to be demoted, resulting in the STBR rule potentially not affecting anything. Regarding treatment of this result support, STBR has 3 possible modes that for historical reasons are represented as 2 booleans - mentions_only and support_share. No more than one of these bools is supposed to be set to 'true' for a rule. Setting both to 'true' at once would lead to undefined behaviour. These 3 modes are: 1. (default) All the support gets assigned to the STBR target. The STBR source is left with no support. To be extra sure, interpretations that still managed to get triggered by STBR source are suppressed later unless STBR target has no interpretations of its own. In other words this is "we are pretty sure that if France is mentioned in a query that might be talking about a person, we want to treat the query as if it is about Louis XIV". This mode would result in a query [age of france] being treated as [age of louis xiv], while [population of france] still being about the country unless [population of louis xiv] matches some intents. For this mode both mentions_only and support_share should be set to 'false'. 2. Support is shared between STBR source ans STBR target. That allows both STBR source and STBR target to trigger some intents with KScorer later deciding which intent is better. In other words, this is "when it is not clear whether a query is about France of Louis XIV, provide KScorer with both options and let it decide". For this mode mentions_only should be set to 'false' and support_share should be set to 'true'. 3. While annotations for the STBR target are created, no support is given to those annotations. This is more like "we are mostly sure that a mention of France is about the country, but just for a rare case it is about the monarch, we would like to have Louis XIV annotated". For this mode mentions_only should be set to 'true' and support_share should be set to 'false'.
     */
    mentionsOnly?: boolean | null;
    supportShare?: boolean | null;
    /**
     * Mid of the STBR target, e.g. "/m/04pwg" for Louis XIV.
     */
    target?: string | null;
    /**
     * Collection that is going to be assigned to the target when the annotation for the target is created. This setting together with allow_wildcard_intents define what intents are allowed to be triggered by the STBR target. At the moment those annotations get created, we can not afford to fetch information about the STBR target from Topic Server, but the target mid by itself doesn't mean much for the Search stack. Setting up the collection for that annotated mid allows us to provide at least some information to the stack on how to treat the mid. This collection together with domain and allow_wildcard_intents fields (see below) defines what intents can be triggered by annotations created for this STBR target. Intents that accept only entities of specific collections can only be triggered if the value of this field matches one of the allowed collections for that intent. In our example, KGCollection.debug_id might be "/collection/people" if we care about context of the monarch as a person, e.g. if we would like to understand queries like [how many children does france have] as [how many childred does lous xiv have]. Or, if we would like to be more restrictive and to only apply the rule to contexts that only make sense for monarch, e.g. [how long did france reign], we might decide to use more specific "/collection/monarchs" instead.
     */
    targetCollection?: Schema$RepositoryWebrefKGCollection;
    /**
     * The user country this rule is for. Rules only take effect if the country is not set, set to an empty string or matches the country that is detected for the user - like the country user issued the query from. E.g. "US" for the United States.
     */
    userCountry?: string | null;
    /**
     * User language this rule is for. Rules only take effect if the language is not set, set to an empty string or matches the language that is detected for the user's query. E.g. set it to "en" if you want the STBR rule to only work for users working from computers with English being set as the main language. Keep it unset if you want the rule not to depend on local language settings of user's computer.
     */
    userLanguage?: string | null;
  }
  export interface Schema$RepositoryWebrefTaskData {
    /**
     * Signals about quality of data that was shown to raters. If document/query and concept description are readable.
     */
    isReadable?: boolean | null;
    itemId?: string | null;
    projectId?: string | null;
    taskDetails?: Schema$RepositoryWebrefTaskDetails;
    taskId?: string | null;
  }
  /**
   * Information about what the raters saw, how the information was presented to them, or how they interacted with the task. Next id: 6
   */
  export interface Schema$RepositoryWebrefTaskDetails {
    /**
     * The id of the experiment in case we are dealing with a refx data experiment. Should only be set in case of data experiments to gather topicality ratings, in order to allow separating these ratings from regular ratings.
     */
    experimentId?: string | null;
    lastSubmitTimestamp?: string | null;
    topicDescription?: string | null;
    topicName?: string | null;
    topicUrl?: string | null;
  }
  export interface Schema$RepositoryWebrefTripleAnnotation {
    /**
     * Triple annotation confidence_score (value between 0 and 1). Higher values correspond to higher confidence.
     */
    confidenceScore?: number | null;
    /**
     * The information in this triple is implied by other triple(s) in the document.
     */
    isImplied?: boolean | null;
    /**
     * Set to true if this triple is present in the webref model as either a link or property value. This implies that the information is in the Knowledge Graph. Note that it can happen that a triple is in KG but not present in the webref model.
     */
    kgVerified?: boolean | null;
    /**
     * Occurrences of the triple on the document
     */
    mentions?: Schema$RepositoryWebrefTripleMention[];
    /**
     * The mid of the predicate kg-property(-ies). In order, in the case of multihop links.
     */
    predMid?: string[] | null;
    /**
     * Generic container to hold additional data such as signals, debug data etc. Data that can be stored in this field and their TypeIds: repository_webref::evaluation::ECMDebug (TypeId 192627933), defined in repository/webref/evaluation/triple_annotations/triple-diff.proto Debugging data to be used in WebIt's ECM report.
     */
    stuff?: Schema$Proto2BridgeMessageSet;
    triple?: Schema$KnowledgeGraphTriple;
  }
  /**
   * Represents a collection of triples annotated by Webref/Webit. Included in WebrefEntities
   */
  export interface Schema$RepositoryWebrefTripleAnnotations {
    annotations?: Schema$RepositoryWebrefTripleAnnotation[];
  }
  export interface Schema$RepositoryWebrefTripleMention {
    /**
     * Document mention of the predicate
     */
    predMention?: Schema$RepositoryWebrefSegmentMention;
    /**
     * The [begin, end) byte offset of the document scope where this triple was annotated. This corresponds to a table row or a text sentence where the triple was identified. The sub_mention can be outside the scope when the subject is inferred from the table title.
     */
    scopeBegin?: number | null;
    scopeEnd?: number | null;
    /**
     * Fingerprint2011 of space-joined SAFT tokens in the scope.
     */
    scopeFprint?: string | null;
    /**
     * Generic container to hold additional data such as triple scoped signals. Data that can be stored in this field and their TypeIds: repository_webref::universal::webit::ScopeSignals (TypeId 192754198), defined in repository/webref/universal/processors/understanding/webit.proto
     */
    stuff?: Schema$Proto2BridgeMessageSet;
    /**
     * Document mention of the subject
     */
    subMention?: Schema$RepositoryWebrefSegmentMention;
    /**
     * Document mention of the value
     */
    valueMention?: Schema$RepositoryWebrefSegmentMention;
  }
  /**
   * This proto is filled with n-gram data during model building.
   */
  export interface Schema$RepositoryWebrefUniversalNgramData {
    /**
     * IDF of the n-gram.
     */
    idf?: number | null;
    /**
     * Probability that the n-gram is a plural form of a word. This information is extracted from SAFT annotations of queries. See HasPluralProperty().
     */
    pluralProb?: number | null;
  }
  /**
   * Detailed statistics about the annotations in the document. Contains, for example, the number of ranges with name matches, the number of entities matched, and the number of entities with mentions. This information can be used to tune some WebRef-internal scoring functions based on existing annotations (e.g., document-length normalization in global link support). Next available tag: 10.
   */
  export interface Schema$RepositoryWebrefWebrefAnnotationStats {
    /**
     * The relative weight of the document, used when aggregating information from multiple documents.
     */
    docWeight?: number | null;
    /**
     * Extracted n-grams context scores (in cdoc language, weighted by doc_weight) output if webref_populate_annotation_ngrams is enabled.
     */
    ngramContext?: Schema$RepositoryWebrefNgramContext[];
    /**
     * The total number of candidates.
     */
    numCandidates?: string | null;
    /**
     * The total number of concepts with at least 1 candidate.
     */
    numConceptsWithCandidates?: string | null;
    /**
     * The total number of concepts with at least 1 mention.
     */
    numConceptsWithMentions?: string | null;
    /**
     * The total number of RangeData objects with at least one candidate.
     */
    numRangesWithCandidates?: string | null;
    /**
     * Statistics for each token type.
     */
    statsPerType?: Schema$RepositoryWebrefAnnotationStatsPerType[];
  }
  /**
   * Annotation metadata for an individual entity.
   */
  export interface Schema$RepositoryWebrefWebrefAttachmentMetadata {
    /**
     * Oyster Feature Type.
     */
    featureType?: string | null;
    /**
     * Indicates which entity this message belongs to: encoded_mid[index].
     */
    index?: number | null;
    /**
     * Latitude and longitude of the location. Same format as geostore.PointProto.
     */
    latE7?: number | null;
    lngE7?: number | null;
    /**
     * Oyster Feature ID of the location.
     */
    oysterId?: Schema$GeostoreFeatureIdProto;
  }
  /**
   * All information that applies globally to the document. Next available tag: 11
   */
  export interface Schema$RepositoryWebrefWebrefDocumentInfo {
    /**
     * Information about the document copied from the docjoin. This will never be populated when WebrefEntities appears inside a CompositeDoc, but may we used when it stands alone.
     */
    documentMetadata?: Schema$RepositoryWebrefDocumentMetadata;
    /**
     * Optional extensions (e.g. taxonomic classifications).
     */
    extensions?: Schema$Proto2BridgeMessageSet;
    /**
     * Information about the outlinks of this document.
     */
    outlinkInfos?: Schema$RepositoryWebrefWebrefOutlinkInfos;
    /**
     * The content (CONTENT section 0) as parsed by WebrefParser. Only used by //r/w/postprocessing/idf/idf-pipeline for document ngram idf computation. Populated when the annotator is run with webref_populate_parsed_content Each webref_parsed_content_sentence represents one sentence of the context where saft annotations were used to determine the sentence boundaries. See r/w/universal/processors/saft/saft-sentence-helper.h for details.
     */
    webrefParsedContentSentence?: string[] | null;
  }
  /**
   * Represents a collection of entities returned by the WebRef service. Next available tag: 14.
   */
  export interface Schema$RepositoryWebrefWebrefEntities {
    /**
     * Detailed annotation statistics that can, e.g., be used to tune the WebRef scoring logic based on existing (Model-0) annotations.
     */
    annotationStats?: Schema$RepositoryWebrefWebrefAnnotationStats;
    /**
     * Fingerprints checkpointing annotator stages, can be used to track the source of diffs.
     */
    annotatorCheckpointFingerprints?: Schema$RepositoryWebrefAnnotatorCheckpointFprint[];
    /**
     * Categories of the document or query. This replaces the category_score found under EntityAnnotations.
     */
    category?: Schema$RepositoryWebrefCategoryAnnotation[];
    /**
     * Dates ranges that are most relevant to the document. E.g. on a document about Dune the 2021 movie, this might hold the release date of that movie.
     */
    dateRange?: Schema$RepositoryWebrefSemanticDateRange[];
    /**
     * Information that applies globally to the document. The exclude_field option is for Goldmine AnnotationsFinder to exclude document_info from retrieving annotation entities
     */
    documentInfo?: Schema$RepositoryWebrefWebrefDocumentInfo;
    /**
     * The annotated entities, with associated confidence scores and metadata. This is the primary output of WebRef/QRef. In case of Webref output, entities are sorted by decreasing topicality score.
     */
    entity?: Schema$RepositoryWebrefWebrefEntity[];
    /**
     * These messages contain non-entity annotations of ranges in the document. This might be used to hold part-of-speech annotations, stopword annotations, and other range based information. The exclude_field option is for Goldmine AnnotationsFinder to exclude ranged_annotations from retrieving annotation entities
     */
    rangeAnnotations?: Schema$RepositoryWebrefRangeAnnotations[];
    /**
     * The status message returned by the annotator. Might not be populated on success.
     */
    status?: Schema$RepositoryWebrefWebrefStatus;
    /**
     * A generic container to hold extra result data.
     */
    stuff?: Schema$Proto2BridgeMessageSet;
    /**
     * Triples inferred from the document When the annotator recognizes phrases, lists or tables associated with a property or relationship for an entity it generates triples that encode that information. This generated data is only substantiated by the document vs KG data which has been verified from multiple sources and/or human curators.
     */
    tripleAnnotations?: Schema$RepositoryWebrefTripleAnnotations;
  }
  /**
   * All information about a single entity available to WebRef. Next available tag: 7
   */
  export interface Schema$RepositoryWebrefWebrefEntity {
    /**
     * Information about links (e.g. implications) between the annotated entities.
     */
    annotatedRelationship?: Schema$RepositoryWebrefWebrefEntityRelationship[];
    /**
     * All annotations of this entity on the given document.
     */
    annotations?: Schema$RepositoryWebrefEntityAnnotations;
    /**
     * Information about the collections of this entity.
     */
    collections?: Schema$RepositoryWebrefWebrefEntityCollections;
    /**
     * Metadata and raw signals used by the annotator. Intended for internal use. Steer clear of adding new dependencies on fields in this proto, especially external dependencies. If you are a Refx client and would like to consume entity metadata, consider querying TopicServer instead.
     */
    entityJoin?: Schema$RepositoryWebrefEntityJoin;
    /**
     * An identifier (usually a MID) for the entity. Consider using GetWebrefEntityMid() in the adjacent webref-entities-util.h to read this.
     */
    id?: Schema$RepositoryWebrefWebrefEntityId;
    /**
     * MRF equivalent representations of this entity as a compound, one for each unique MRF representation. Populated for compounds. Each MRF expression contains a minimum FunctionCall structure wrapped in a nameless Argument without signals and range data. This is not meant to be directly usable as MRF, use QueryJoinToMeaningStructConverter to expand it into a usable form. References to entities are made as component_reference ArgumentValue. Each compound Mention of this entity (not all of its mentions need be compounds, some may be plain entity mentions) have one or more compound_value fields claiming these MRF expressions via their mrf_index. The compound_value has nested components, one for each unique component_reference.index in the MRF expression. The processing expectation is that each ArgumentValue which has a component_reference has its contents discarded and replaced with the MRF for the target entity and mention named by the compound_value.component. If the target is not a compound, the ArgumentValue becomes a simple mid value and the signals are taken from the entity and the mention. If the target is a compound itself, the expansion continues recursively. If the target is a compound with multiple MRFs, a cartesian product of recursive expansions may need to be produced. Along with the component_reference we also emit an example value, but this is purely for human consumption so it's easier to understand what the full compound is like. The processing expectation remains that the ArgumentValue containing a component_reference is completely discarded and rebuilt with the reference target value. If the target has more than one MRF expression, it's not specified which one will be used as an example, except that the choice is guaranteed to be deterministic from run to run.
     */
    mrf?: Schema$KnowledgeAnswersIntentQueryArgument[];
  }
  export interface Schema$RepositoryWebrefWebrefEntityCollections {
    collection?: Schema$RepositoryWebrefKGCollection[];
  }
  /**
   * The identifier of a WebrefEntity (see webref-entities.proto). IMPORTANT: Please consider reading this proto through GetWebrefEntityMid() in webref-entities-util.h, because this proto may: a) contain both freebase_mid and concept_id (this is frequently the case to avoid breaking downstream clients), b) only contain freebase_mid or only contain concept_id (as the other one is technically redundant), c) contain neither of them or be missing entirely (potentially in future).
   */
  export interface Schema$RepositoryWebrefWebrefEntityId {
    /**
     * The MID in integer format. Nowadays, this field contains the equivalent representation of `freebase_mid`, i.e. what metaweb::ParseId() returns.
     */
    conceptId?: string | null;
    /**
     * The MID in the same format that is returned by metaweb::MidToString(), e.g. "/m/02mjmr" or "/g/11b6vyscgb" or "/t/24bjj59_jbj9f".
     */
    freebaseMid?: string | null;
  }
  /**
   * Information regarding links between annotated entities. Next available tag: 5
   */
  export interface Schema$RepositoryWebrefWebrefEntityRelationship {
    /**
     * The index of the entry in WebrefEntities.entity that the entity carrying this field is linked to. This field must be set.
     */
    entityIndex?: number | null;
    /**
     * Information about the link.
     */
    linkMetadata?: Schema$RepositoryWebrefEntityLinkMetadata;
    /**
     * The weight of the link.
     */
    linkWeight?: number | null;
  }
  /**
   * *** THIS ATTACHMENT IS DEPRECATED, SEE go/udr/migrate-wma. ***. We still allow legacy use case to exist (no forced migration), but we will not accept any new usage of WMA, incl. from existing clients. UDR has the same features and can be used similarly: - To consume the topical entities (+properties, incl. hitcat, browsy, ...) go/udr/migrate-wma provides a migration with minimal changes. - To consume IQL, please consult go/udr/superroot#access and go/pianno team. The top-level proto used to store WebRef entities and IQL expressions in Mustang/TG. The proto uses packed repeated fields and variable-length integers in order to be as compact as possible. See http://b/5802389 and b/7473898 for details on other approaches that were considered and space/readability/extensibility trade-offs made. Note: It is not recommeded to read this proto directly. Clients of the attachment should use the decoder instead: repository/webref/tools/kc/indexing/webref-attachment-decoder.h Next available tag: 25
   */
  export interface Schema$RepositoryWebrefWebrefMustangAttachment {
    /**
     * The confidence of the category. In the range [0, 100].
     */
    categoryConfidenceE2?: number[] | null;
    /**
     * See go/category-annotations-api about the story behind various types of category annotations that are provided using the catmid token and category_encoded_mid fields below. Some of these annotation types are experimental, so please contact related-entities@ if you consider using this data. For production uses, please: 1. Add your use-case to go/hits-clients. 2. Subscribe to hits-users@ to receive general updates and info about deprecations. To convert it to the string form use metaweb::MidToString(encoded_mid) defined in metaweb/util/mid/mid.h The uint64-encoded MIDs of HitCat categories. See google3/repository/webref/hits/hitcat/category.textproto for the complete list of HitCat categories. Should have the same number of elements as the category_confidence_e2 field.
     */
    categoryEncodedMid?: string[] | null;
    /**
     * The confidence scores of all entities in the encoded_mid array. For space reasons this is also represented as a fixed-point integer with two decimal precision. Convert it to confidence_score using the following formula: float confidence_score = confidence_e2 / 100.0f Should have the same number of elements as the encoded_mid field.
     */
    confidenceE2?: number[] | null;
    /**
     * The int64-encoded MIDs of the entities in the document sorted by topicality score. To convert it to the string form use metaweb::MidToString(encoded_mid) defined in metaweb/util/mid/mid.h Should have the same number of elements as the topicality_e2 field.
     */
    encodedMid?: string[] | null;
    /**
     * Per-entity metadata. Not packed (not every entity has metadata). If you'd like to add per-document metadata, see document_metadata instead.
     */
    entityMetadata?: Schema$RepositoryWebrefWebrefAttachmentMetadata[];
    /**
     * A sub-proto to encode IQL expressions. To be used by Pianno page-level intents and Webref Compounds.
     */
    iqlAttachment?: Schema$KnowledgeAnswersIntentQueryIndexingIQLAttachment;
    /**
     * The indices of all the reference entities in encoded_mid that are authors of the page. Not packed as in most cases when populated, it contains 1 element.
     */
    isAuthorIndex?: number[] | null;
    /**
     * The indices of all the reference entities in encoded_mid that are publishers of the page (e.g. /m/cnn on "http://www.cnn.com/foo/bar"). Not packed as in most cases when populated, it contains 1 element.
     */
    isPublisherIndex?: number[] | null;
    /**
     * Only populated when the document is a reference page for an entity. Contains the indices of all reference entities in the encoded_mid and topicality_e2 arrays. Not packed as in most cases when populated, it contains 1 element.
     */
    referencePageIndex?: number[] | null;
    /**
     * The topicality scores of all entities in the encoded_mid array. For space reasons this is represented as a fixed-point integer with two decimal points precision. Convert it to topicality_score using the following formula: float topicality_score = topicality_e2 / 100.f Should have the same number of elements as the encoded_mid field.
     */
    topicalityE2?: number[] | null;
    /**
     * The uint64-encoded MID of the unbound intents generated by Pianno. An unbound intent is the annotation of an intent without slots arguments (e.g. Age) declared in Intent Catalog. See go/pianno-asteroid-belt-migration for details. We only keep the top unbound intents with the highest orbit scores. Should have the same number of elements as unbound_intent_score_e2.
     */
    unboundIntentMid?: string[] | null;
    /**
     * The confidence of the unbound intent. represented as a fixed-point integer with two decimal precision. In the range [0, 100]. Should have the same number of elements as unbound_intent_mid.
     */
    unboundIntentScoreE2?: number[] | null;
  }
  /**
   * Information about the outlinks for one specific target URL, from a given annotated document. Next available tag: 7
   */
  export interface Schema$RepositoryWebrefWebrefOutlinkInfo {
    /**
     * The length in bytes of such a link (including internal spaces); e.g. if the link text is "click here" then the length is 10.
     */
    byteLength?: string[] | null;
    /**
     * The byte offset of the start of a link with this target URL, in the content of the annotated document.
     */
    byteOffset?: string[] | null;
    /**
     * Whether this is a nofollow link (https://en.wikipedia.org/wiki/Nofollow). If the page has multiple links to the same url, all of them must be nofollow to set this field.
     */
    isNofollow?: boolean | null;
    /**
     * The topicality_weight for each link with this target URL.
     */
    topicalityWeight?: number[] | null;
    /**
     * The target URL of the link.
     */
    url?: string | null;
  }
  /**
   * Information about the outlinks of an annotated document. Next available tag: 3
   */
  export interface Schema$RepositoryWebrefWebrefOutlinkInfos {
    /**
     * Information about each target URL referred to in the document's outlinks. If a given URL has multiple links, they are grouped in a single WebrefLinkInfo.
     */
    outlinkInfo?: Schema$RepositoryWebrefWebrefOutlinkInfo[];
  }
  export interface Schema$RepositoryWebrefWebrefStatus {
    /**
     * The epoch of the Webref static data (the name-filter.data file). As of Dec 2020 in prod Goldmine (in webref_daily_full_model_static_data) this value is over from the alpha model static data, since this is where most of the parts come from. I.e. the value does not correspond to the actual model being used.
     */
    dataEpoch?: string | null;
    /**
     * Error that occurred during the annotation. This field is only populated by QRef (i.e. under QueryJoin.status) and never by WebRef (i.e. under WebrefEntities.status) anymore, which instead reports errors (and soon also taints) through standard Goldmine mechanisms.
     */
    utilStatus?: Schema$UtilStatusProto;
    /**
     * The version number of the annotator (the cl the binary was built from). Must be enabled via a command line flag. See also the Goldmine's indexing::annotations::AnnotationMeta proto.
     */
    version?: number | null;
  }
  /**
   * Information about a Wikipedia category (typically at the bottom of the page).
   */
  export interface Schema$RepositoryWebrefWikipediaCategory {
    categoryName?: string | null;
  }
  /**
   * Geocodes extracted from the wikijoins.
   */
  export interface Schema$RepositoryWebrefWikipediaGeocode {
    /**
     * The location as extracted from the wikijoins.
     */
    location?: Schema$GeostorePointProto;
    /**
     * The source contains the url field from the wikijoins.
     */
    sourceUrl?: string | null;
  }
  /**
   * ////////////////////////////////////////////////////////////////////////////// Conjunction: a single AND clause that contains multiple disjunctions.
   */
  export interface Schema$ResearchScamCoscamConjunction {
    /**
     * disjunction_id / is_positive *MUST* have the same length. They specify a set of disjunctions that make up this conjunction. The conjunction will be active iff *all* of the positive disjunctions are active and *all* of the negative disjunctions are inactive.
     */
    disjunctionId?: string[] | null;
    isPositive?: boolean[] | null;
  }
  /**
   * ////////////////////////////////////////////////////////////////////////////// Disjunction: a single OR clause that contains multiple group:token tuples.
   */
  export interface Schema$ResearchScamCoscamDisjunction {
    /**
     * key - a uint64 key that uniquely identifies this disjunction.
     */
    key?: string | null;
    /**
     * groups - the group:token tuples that make up this disjunction. The disjunction will be active if *any* off the group:token tuples are present in a request.
     */
    tokenGroups?: Schema$ResearchScamCoscamTokenGroup[];
  }
  /**
   * Each EasyConjunction represents an AND-of-ORs block.
   */
  export interface Schema$ResearchScamCoscamEasyConjunction {
    /**
     * disjunctions is the set of OR clauses that
     */
    disjunctions?: Schema$ResearchScamCoscamEasyDisjunction[];
  }
  /**
   * Each EasyDisjunction represents one OR clause.
   */
  export interface Schema$ResearchScamCoscamEasyDisjunction {
    /**
     * If is_positive is set to false, then the entire disjunction is negated, and will be true only if none of its members is true.
     */
    isPositive?: boolean | null;
    /**
     * token_groups - the group:token tuples that make up this disjunction. The disjunction will be active if *any* off the group:token tuples are present in a request.
     */
    tokenGroups?: Schema$ResearchScamCoscamTokenGroup[];
  }
  /**
   * Each EasyRestrictDefinition represents an OR-of-ANDs-of-ORs block.
   */
  export interface Schema$ResearchScamCoscamEasyRestrictDefinition {
    /**
     * conjunctions is the set of AND-of-ORs blocks.
     */
    conjunctions?: Schema$ResearchScamCoscamEasyConjunction[];
  }
  /**
   * ////////////////////////////////////////////////////////////////////////////// RestrictDefinition: the set of conjunctions and disjunctions that define a single OR-of-ANDs-of-ORs restrict definition.
   */
  export interface Schema$ResearchScamCoscamRestrictDefinition {
    /**
     * conjunctions - each conjunction is an AND-of-ORs; if any of these conjunctions match, then the entire restrict matches.
     */
    conjunctions?: Schema$ResearchScamCoscamConjunction[];
    /**
     * disjunctions - each disjunction is an OR clause.
     */
    disjunctions?: Schema$ResearchScamCoscamDisjunction[];
    /**
     * subs_key - ignore. Only used for testing.
     */
    subsKey?: string | null;
  }
  /**
   * ////////////////////////////////////////////////////////////////////////////// RestrictTokensV2: a set of group:token tuples, collated by group.
   */
  export interface Schema$ResearchScamCoscamRestrictTokensV2 {
    /**
     * token_groups - group:token tuples, collated by group.
     */
    tokenGroups?: Schema$ResearchScamCoscamTokenGroup[];
  }
  export interface Schema$ResearchScamCoscamTokenGroup {
    /**
     * debug_token_strings - (optional) strings that should be used for human-friendly printing. NOT used by the matching engine!
     */
    debugTokenStrings?: string[] | null;
    /**
     * name - the name of the token group.
     */
    name?: string | null;
    /**
     * tokens - a list of tokens, stored by their Fingerprint2011 hash.
     */
    tokens?: string[] | null;
  }
  /**
   * ===================================================================== # GenericFeatureVector Last tag used: 23
   */
  export interface Schema$ResearchScamGenericFeatureVector {
    /**
     * The class label of this datapoint. This should be populated if ScaM is being used for nearest-neighbor-based classification.
     */
    classLabel?: string | null;
    crowding?: Schema$ResearchScamGenericFeatureVectorCrowding;
    /**
     * Optional point id that can contain an arbitrary (unrestricted in content) value except when the data is provided via SSTable (sharded or not). In the case of SSTable the data_id_str must be set for _all_ points in all shards or the SSTable keys will be used as the values for the data_id_str of the respective points. In either SSTable case--data_id_str provided explicitly or via the key--the values must be unique across all shards.
     */
    dataIdStr?: string | null;
    /**
     * A timestamp after which this datapoint is considered no longer valid and is eligible for deletion. The exact meaning varies with application/configuration.
     */
    expirationTimestamp?: string | null;
    /**
     * DEPRECATED: - this field can safely be left unspecified. For dense vectors, dimensionality is inferred from the number of values specified, and must be identical to this, or unspecified. For sparse vectors, the default value is correct for most users, and allows use of 64-bit hash values for feature indices.
     */
    featureDim?: string | null;
    /**
     *  - for SPARSE vectors, specifies indices of the nonzero dimensions whose values are specified by the , , or field. This field is not used when specifying dense vectors.
     */
    featureIndex?: string[] | null;
    /**
     * Describes the type of feature values.
     */
    featureType?: string | null;
    featureValueDouble?: number[] | null;
    /**
     * Actual feature vector. Only one of the following should be populated. This list has to be kept in sync with FeatureType enum. NOTES: Binary features are stored as ones or zeroes in feature_value_int64. Floating point values (feature_value_float, feature_value_double) may not be NaN.
     */
    featureValueFloat?: number[] | null;
    featureValueInt64?: string[] | null;
    featureValueString?: string | null;
    fixedPointMetadata?: Schema$ResearchScamGenericFeatureVectorFixedPointMetadata;
    /**
     * copybara:strip_begin INTERNAL USE ONLY! The ScaM Team reserves the right to remove this field and reuse its proto tag without notice. DO NOT USE outside of build_shards_pipeline! This field is used inside build_shards_pipeline to indicate whether this GFV is residing in its secondary (vs. primary) partition. copybara:strip_end
     */
    internalOnlyIsSecondaryPartition?: boolean | null;
    /**
     * Describes if data has been normalized and the type.
     */
    normType?: string | null;
    /**
     * copybara:strip_begin A field that contains metadata information when the datapoint is acting as a query. copybara:strip_end
     */
    queryMetadata?: Schema$ResearchScamQueryMetadata;
    /**
     * copybara:strip_end_and_replace reserved 15;
     */
    restrictTokens?: Schema$ResearchScamGenericFeatureVectorRestrictTokens;
    tokens?: number[] | null;
    /**
     * This field allows application-specific metadata to be stored in a GFV. This information may be used by custom binaries or in pre- or postprocessing outside of ScaM. Use cases include but are not limited to: * Dataset IDs, if multiple datasets are multiplexed into one physical file or network location. * An alternative, possibly more human-readable representation of the data represented by this GFV, for e.g. debugging purposes. * Outputting the contents of this field verbatim to the metadata field of the NearestNeighbors.Neighbor proto.
     */
    userinfo?: string | null;
    /**
     * DEPRECATED fields. Ignored by ScaM binaries. Do not use.
     */
    weight?: number | null;
  }
  /**
   * This subproto contains configuration for crowding. Crowding is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k' of the k neighbors returned have the same value of crowding_attribute.
   */
  export interface Schema$ResearchScamGenericFeatureVectorCrowding {
    /**
     * The value of the crowding attribute for this document. The maximum number of neighbors to return per crowding attribute value (per_crowding_attribute_num_neighbors) is configured per-query. This field is ignored if per_crowding_attribute_num_neighbors is larger than the total number of neighbors to return for a given query.
     */
    crowdingAttribute?: string | null;
  }
  /**
   * Metadata that may be populated if this GFV was transformed into fixed-point from a floating-point GFV.
   */
  export interface Schema$ResearchScamGenericFeatureVectorFixedPointMetadata {
    /**
     * The squared L2 norm of the original (pre-fixed-point transformation) GFV. Used for computing squared L2 distance.
     */
    squaredL2Norm?: number | null;
  }
  /**
   * copybara:strip_begin RestrictTokens - used to perform "restricted searches" where boolean rules are used to filter the subset of the database eligible for matching. We currently support V1 and V3 restrict systems. V3 restrict is a superset of V1 restrict. New users are encouraged to use V3 directly for its rich features and cleaner semantics. See the document go/scam-v3-restricts, or read the comments in //research/scam/proto/restricts.proto for details. Nevertheless, V1 restrict is still supported by ScaM team. There's some minor tradeoff of performance between V1 and V3. User may prefer V1 over V3 if performance is the first priority. However, the CPU cost between V1 and V3 should be very minor. --------------------------------------------------------------------------- The semantics of V1 restrict is described below: V1 "forward" restricts: The dataset defines a many:many mapping between the database points and a token space. Each token names a set of tokens and each database point is a member of zero-to-many tokens. Queries specify zero-to-many whitelist and blacklist tokens that activate database points according to the following rules: * If whitelist_token is populated, the search will be restricted to points named by at least one whitelist token. If whitelist_token is empty, all points are whitelisted by default. * If blacklist_token is populated, it overrides the whitelist. Points named by a blacklisted token are *not* searched. * Note that, if neither whitelist_token nor blacklist_token is populated, the search remains unrestricted. --------------------------------------------------------------------------- V1 "reverse" restricts: Each database point is whitelisted and/or blacklisted for zero or more tokens, specified by whitelist_token and blacklist_token fields. Each query specifies zero or more tokens, and the same rules apply: * If a point's whitelist_token is populated, the point will only be searched if the query has at least one matching whitelist token. If whitelist_token is empty, the point is always whitelisted by default. * If a point's blacklist_token is populated, it overrides the whitelist. The point will be ignored for any query with a matching blacklist token. * Note that, if neither whitelist_token nor blacklist_token is populated, the point will always be searched. NEXT ID TO USE: 9
   */
  export interface Schema$ResearchScamGenericFeatureVectorRestrictTokens {
    blacklistToken?: string[] | null;
    /**
     * DEPRECATED
     */
    definition?: Schema$ResearchScamCoscamRestrictDefinition;
    /**
     * DEPRECATED
     */
    easyDefinition?: Schema$ResearchScamCoscamEasyRestrictDefinition;
    /**
     * B) Token Definitions (V1 Restricts) In "forward" mode: defined on database points In "reverse" mode: defined on queries
     */
    tokenMembership?: string[] | null;
    /**
     * DEPRECATED
     */
    tokens?: Schema$ResearchScamCoscamRestrictTokensV2;
    /**
     * Only ONE of the following sections should be used: A) V3 restricts. Defined in //research/scam/proto/restricts.proto
     */
    v3?: Schema$ResearchScamV3Restrict;
    /**
     * If this field is not empty, when query is in V1 restricts while database is in V3 restricts, SCaM will update V1 query to V3 automatically instead of sending error messages. When updating query from V1 to V3, SCaM server will use this field to fillin the 'namespace' field.
     */
    v3CompatibleNamespace?: string | null;
    /**
     * C) Whitelist / Blacklist Definitions (V1 Restricts) In "forward" mode: defined on queries In "reverse" mode: defined on database points
     */
    whitelistToken?: string[] | null;
  }
  /**
   * All nearest neighbors for one data point. Last tag used: 5
   */
  export interface Schema$ResearchScamNearestNeighbors {
    /**
     * Data point for which we computed nearest neighbors. This field is set based on the data_id_str field in the QueryRequest GFV (or SSTable key if data_id_str is not present), and thus can be arbitrary data, e.g. docid, URL, query string.
     */
    docid?: string | null;
    /**
     * Metadata about the query. This field is populated if and only if: 1) ScaM is running in offline query-database or online mode and; 2) The metadata is directly fetched from the userinfo field inside GFV and; 3) MetadataConfig.userinfo.set_user_info_for_query is set to true. The field name is kept as "metadata" for consistency with neighbors.
     */
    metadata?: string | null;
    /**
     * All its neighbors.
     */
    neighbor?: Schema$ResearchScamNearestNeighborsNeighbor[];
    /**
     * Propagate neighbor selection override information during offline search.
     */
    neighborSelectionOverride?: Schema$ResearchScamNeighborSelectionOverride;
    /**
     * The query vector for which we computed nearest neighbors.
     */
    query?: Schema$ResearchScamGenericFeatureVector;
    /**
     * The version ID of the server that responded to this query, if one was specified. This field is not populated for offline (i.e. Flume rather than RPC) search.
     */
    retrievedVersion?: string | null;
  }
  export interface Schema$ResearchScamNearestNeighborsNeighbor {
    /**
     * If crowding is enabled, the crowding attribute of this neighbor will be stored here.
     */
    crowdingAttribute?: string | null;
    /**
     * This could be exact or approximate distance.
     */
    distance?: number | null;
    /**
     * Neighbor data point. This field is set based on the data_id_str field in the GFV of the data point in the database (or SSTable key if data_id_str is not present), and thus can be arbitrary data, e.g. docid, URL, query string.
     */
    docid?: string | null;
    /**
     * The field isn't populated by default, but when enabled (eg, in the ground-truth pipeline), this field provides the original database GFV corresponding to this result.
     */
    gfv?: Schema$ResearchScamGenericFeatureVector;
    /**
     * Metadata about the neighbor. This is returned under some configurations as a serialized proto. The specific proto depends on which metadata is configured to be returned.
     */
    metadata?: string | null;
  }
  /**
   * Last used tag = 8
   */
  export interface Schema$ResearchScamNeighborSelectionOverride {
    /**
     * The distance threshold to use for approximate search before exact reordering is performed, if exact reordering is performed. If this is not set and exact reordering is enabled, a reasonable default value will be chosen using a heuristic specified in ScamConfig.ExactReordering.NeighborSelectionOverrideHeuristics. This field is ignored if exact reordering is not enabled. This value must be non-NaN if set.
     */
    approxEpsilonDistance?: number | null;
    /**
     * The number of neighbors to find via approximate search before exact reordering is performed. If this is not set and exact reordering is enabled, a reasonable default value will be chosen using the heuristic specified in ScamConfig.ExactReordering.NeighborSelectionOverrideHeuristics. This field is ignored if exact reordering is not enabled. This value must be \> 0 if set.
     */
    approxNumNeighbors?: number | null;
    /**
     * The maximum distance at which to return a neighbor. If this proto is used, at least one of this and num_neighbors must be set. The default is infinity, effectively returning num_neighbors neighbors regardless of distance. This value must be non-NaN if set.
     */
    epsilonDistance?: number | null;
    /**
     * The maximum number of neighbors to return. If this proto is used, at least one of this and epsilon_distance must be set. The default is the largest value representable as an int32, effectively returning all neighbors within epsilon_distance. This value must be \> 0 if set.
     */
    numNeighbors?: number | null;
    /**
     * If populated, this is the maximum number of neighbors that may be returned from a single shard. If not populated, up to num_neighbors neighbors are returned from each shard. Setting this to a smaller value than num_neighbors will increase speed at the expense of accuray by requiring cross-shard merging of fewer neighbors. If this value is set, num_neighbors must also be set and this value must be <= num_neighbors and \>= num_neighbors / number of shards. If set, this value must always be \> 0.
     */
    numSingleShardNeighbors?: number | null;
    /**
     * The maximum number of neighbors to return for a single value of the crowding attribute. The crowding attribute is specified per-datapoint in the GenericFeatureVector proto, or the Document proto for sparse logistic models. Crowding is described more thoroughly in research/scam/utils/crowding_top_n.h. NOTES: Crowding is effectivley enabled if this value is less than num_neighbors.
     */
    perCrowdingAttributeNumNeighbors?: number | null;
    /**
     * The maximum number of neighbors to return from the approximate portion of the nearest-neighbor search algorithm, within each shard, for a single value of the crowding attribute, before performing exact reordering. Ignored if exact reordering is disabled for this dataset.
     */
    perCrowdingAttributePreReorderingNumNeighbors?: number | null;
    /**
     * Note: currently not implemented for all database shard subclasses! Contact ScaM before using. Overrides max_spill_centers for tree-X hybrid searchers configured with FIXED_NUMBER_OF_CENTERS spilling. The max_spill_centers in the ScaM config is used if this field isn't set. Only valid if: * Used on a tree-X hybrid ScaM config with FIXED_NUMBER_OF_CENTERS. * Value is greater than zero and at most equal to num_children.
     */
    treeXHybridLeavesSearchedOverride?: number | null;
  }
  export interface Schema$ResearchScamNumericRestrictNamespace {
    /**
     * The name of this namespace.
     */
    namespace?: string | null;
    /**
     * This MUST be specified for queries and must NOT be specified for database points.
     */
    op?: string | null;
    valueDouble?: number | null;
    valueFloat?: number | null;
    /**
     * NOTE: Integers are represented in 64 bits here, but if all integer values for a given namespace fit in a narrower integer type (e.g. int8), we use the narrower integer type internally, increasing performance.
     */
    valueInt?: string | null;
  }
  /**
   * Structure to hold the response time for a node. Last used: 3
   */
  export interface Schema$ResearchScamOnlineSearchLatencyStats {
    /**
     * An estimate of the CPU time used for this query on the machine associated with task_id, from when the query was received to when the response was ready to send, in seconds. Caveats: 1. Does not account for CPU time spent serializing, deserializing, compressing or decompressing protos within Stubby. 2. Does not account for cleanup time after response has been sent.
     */
    cpuTime?: number | null;
    /**
     * Task number associated with response time measurements.
     */
    taskId?: number | null;
    /**
     * Wall time taken on the machine associated with task_id from when the query was received to when the response was ready to send, in seconds. This time excludes the time spent sending the response and the time to perform cleanup operations after the response is sent.
     */
    wallTime?: number | null;
  }
  /**
   * Metadata to encode query-specific information. This may include NeighborSelectionOverride, pre-computed query tokenization, etc..
   */
  export interface Schema$ResearchScamQueryMetadata {
    neighborSelectionOverride?: Schema$ResearchScamNeighborSelectionOverride;
  }
  /**
   * Response to a query. The main result is the nearest neighbor list, but we also optionally include debugging information if the appropriate field is set in the request. Last used: 8
   */
  export interface Schema$ResearchScamQueryResponse {
    /**
     * Debugging fields: The wall and CPU time used by each query on each machine. For successful queries, there will be one entry here for each machine that the query used if QueryRequest.enable_latency_stats was enabled. For unsuccessful queries, the contents of this field will be undefined. NOTE: The following accounting rules apply in batched mode, assuming there are
     */
    latency?: Schema$ResearchScamOnlineSearchLatencyStats[];
    /**
     * The number of non-root machines for which a DEADLINE_EXCEEDED error occurred when they were contacted. This value does NOT include machines for which no reply was received because their parent machine timed out. Therefore, num_total_machines may be larger than num_ok_machines + num_unreachable_machines + num_deadline_exceeded_machines.
     */
    numDeadlineExceededMachines?: number | null;
    /**
     * Number of machines that contributed to the results; this might be less than the total number of machines if a machine has failed. The impact of a single machine failure could be larger than just one machine, if it happens to be one of the machines involved in distributing the query and collecting results.
     */
    numOkMachines?: number | null;
    /**
     * The number of machines used in this service for the dataset that was queried. If everything went right, this should be equal to num_ok_machines. If num_ok_machines < num_total_machines, some neighbors may be missing from results.
     */
    numTotalMachines?: number | null;
    /**
     * The number of non-root machines for which an UNREACHABLE error occurred when they were contacted. This value does NOT include machines that were implicitly unreachable because their parent machine was not reachable. Therefore, num_total_machines may be larger than num_ok_machines + num_unreachable_machines + num_deadline_exceeded_machines.
     */
    numUnreachableMachines?: number | null;
    /**
     * The number of "active" datapoints for each dataset, i.e. points that are whitelisted by restricts and could be returned if they were close enough to the query. For successful queries, there will be one entry here for each dataset queried, if QueryRequest.enable_restrict_stats was true. For partially-successful successful queries, this field will contain results
     */
    restrictStats?: Schema$ResearchScamRestrictStats[];
    /**
     * The results for each dataset searched. If per_dataset_parameters was empty in QueryRequest then this will have one entry, the results for dataset 0. If per_dataset_parameters was not empty in QueryRequest, this will contain the results for each dataset queried, in order corresponding to the order of QueryRequest.per_dataset_parameters.
     */
    results?: Schema$ResearchScamNearestNeighbors[];
    /**
     * USEFUL ONLY IN CUSTOM BINARIES. In the stock ScaM server binary, all errors are relayed via the RPC's status. Thus, if RPC's status is ok, this field is guaranteed to be ok and if RPC's status is an error, no QueryResponse will be returned. The status of this query. This is useful when using a batched postprocessing lambda, which may ignore erroneous subqueries, continue postprocessing the valid ones and return OkStatus. In this case, this field will inform the client of any invalid subqueries.
     */
    status?: Schema$UtilStatusProto;
  }
  /**
   * Structure to hold the number of active and total datapoints for a given dataset, as defined below. Last used: 2
   */
  export interface Schema$ResearchScamRestrictStats {
    /**
     * The number of datapoints that are whitelisted by restricts specified for this query, across all shards for which the query executed successfully. In other words, this represents the number of datapoints that could potentially be returned if they were close enough to the query according to the selected distance measure. If restricts are disabled, this will be equal to num_total_datapoints.
     */
    numActiveDatapoints?: string | null;
    /**
     * The number of total datapoints in all shards of this dataset for which the query executed successfully. This is returned for convenience so that a ratio can be easily computed, and so that num_active_datapoints can be put in perspective for partially successful queries, i.e. queries where only some shards were successful.
     */
    numTotalDatapoints?: string | null;
  }
  export interface Schema$ResearchScamTokenNamespace {
    /**
     * //////////////////////////////////////////////////////////////////////////// NAMESPACE - the string name of the namespace that this proto is specifying, such as "color", "shape", "geo", or "tags". Recall that your overall query is an AND across namespaces.
     */
    namespace?: string | null;
    /**
     * //////////////////////////////////////////////////////////////////////////// BLACKLIST - Blacklisting can be used to implement more complex scenarios. The blacklist fields have exactly the same format as the token fields, but represents a negation. When a token is blacklisted, then matches will be excluded whenever the other datapoint has that token. For example, if a query specifies {color: red, blue, !purple\}, then that query will match datapoints that are red or blue, but if those points are also purple, then they will be excluded even if they are red/blue. Note that, due to symmetry, if one of the database points is {red, !blue\}, that point will be excluded from queries that specify blue. Lastly, note that namespaces with *only* blacklist tokens behave similar to empty namespaces, in that {color: !purple\} would match blue or red datapoints, as long as those datapoints don't also have the purple token.
     */
    stringBlacklistTokens?: string[] | null;
    /**
     * //////////////////////////////////////////////////////////////////////////// TOKENS - Conceptually, each token names a set datapoints. The field(s) below are for declaring the tokens that name the datapoint that this TokenNamespace proto is attached to. For convenience, we support either string or uint64 tokens. Internally, the restricts system is based on uint64s, but for many applications, strings are the more natural format, and they should be preferred whenever this is the case. * When only uint64s are specified, they will be used as-is. * When only strings are specified, they will be converted to uint64s via Fingerprint2011. (See "Note on the safety of Fingerprint2011"). * ADVANCED: When both fields are specified, the uint64s are used as-is. Note that, when both fields are used, they *must* have the same number of entries, and the system will assume that your strings correspond 1:1 with the list of uint64 tokens. * EDGE CASE: All matching is done in the uint64 space, so, I'm not sure why you'd do this, but if, eg, your database uses strings, and your queries specify the Fingerprint2011 hashes of those strings, matching will work, and this is a specified behavior. Note on the safety of Fingerprint2011: Unless you have well over 1M+ unique string tokens, you can safely assume that every string will map to a unique 64-bit token. Internally, both Mustang and PSI use Fingerprint2011 to hash arbitrary strings into uint64 tokens, and assume, without validation, that each 64-bit token is unique. And the math backs up this assumption: If we are using a "perfect" hashing function (and Fingerprint2011 is close-enough for our purposes), and we then hash 1M unique tokens into a 64-bit space, there's still better than 99.9999% odds that all tokens are collision-free, nearly as good as the odds for the datacenter's continued existence. Scenarios for having both the string and uint64 token forms: * Probably none that matter to you. Just use the strings directly. * You could have uint64 enum values, yet want to include the string values for debugging purposes. Note that it *is* supported to use a proprietary string =\> uint64 mapping, assuming that it is consistent, and that you always specify the uint64 values. * The mixer-tier in a multi-shard deployment might convert the strings into uint64s to avoid redundant hashing overhead on the leaves, yet keep the string tokens to preserve proto-level debugging. * When strings are present, I reserve the right to use them for making logging "better", but, thusfar, there are 0 examples of this.
     */
    stringTokens?: string[] | null;
    uint64BlacklistTokens?: string[] | null;
    uint64Tokens?: string[] | null;
  }
  export interface Schema$ResearchScamV3Restrict {
    /**
     * //////////////////////////////////////////////////////////////////////////// NAMESPACES - a repeating field, where each entry specifies the set of tokens, within a single namespace, that apply to the query, or database point, on which this V3Restrict proto is defined. Note that: * Your overall query is an AND across namespaces. * Explicitly specifying a namespace with 0 tokens is identical to omitting that namespace. ie, "{ns:\}" == "". * It is an error to specify the same namespace more than once per instance of the V3Restrict proto.
     */
    namespaces?: Schema$ResearchScamTokenNamespace[];
    /**
     * This field allows restricts to be based on numeric comparisons rather than categorical tokens. HINT: To allow a range of values in a namespace (e.g. 42 <= x < 128), specify the same namespace twice in the query, e.g.: {namespace: "x" op: LESS value_int: 128 \} {namespace: "x" op: GREATER_EQUAL value_int: 42 \}
     */
    numericNamespaces?: Schema$ResearchScamNumericRestrictNamespace[];
  }
  /**
   * Information on the catalog that this dataset comes from. Next ID: 5
   */
  export interface Schema$ResearchScienceSearchCatalog {
    /**
     * catalog description
     */
    description?: string | null;
    /**
     * catalog mid
     */
    mid?: string | null;
    /**
     * catalog name
     */
    name?: string | null;
    /**
     * catalog url
     */
    url?: string | null;
  }
  /**
   * Reference to the citation in Google scholar.
   */
  export interface Schema$ResearchScienceSearchCitation {
    citation?: string | null;
    /**
     * The citation after HTML sanitation. Used only by the front-end.
     */
    safeHtmlCitation?: Schema$WebutilHtmlTypesSafeHtmlProto;
  }
  /**
   * The dataset in downloadable form. There can be multiple data download entries for different file types. Next ID: 6
   */
  export interface Schema$ResearchScienceSearchDataDownload {
    /**
     * Size of the download, as a string from the provider. May include units.
     */
    contentSize?: string | null;
    /**
     * URL for downloading the data
     */
    downloadUrl?: string | null;
    /**
     * File format at the link (ASCII, CSV, etc.)
     */
    fileFormat?: string | null;
    /**
     * Pragmatic classification of file formats - for filtering purposes
     */
    fileFormatClass?: string | null;
    /**
     * Parsed content size
     */
    parsedContentSize?: Schema$ResearchScienceSearchDataSize;
  }
  /**
   * Data size information, consists of a numeric value and a unit. Next ID: 3
   */
  export interface Schema$ResearchScienceSearchDataSize {
    /**
     * Data size value, in the provided size unit
     */
    size?: number | null;
    /**
     * The data size unit
     */
    unit?: string | null;
  }
  /**
   * Representation of fields that contain dates. The formattes version, if present, contains ISO 8601 formatted date or range. Otherwise, it is an unformatted string. Next ID: 3
   */
  export interface Schema$ResearchScienceSearchDate {
    formatted?: string | null;
    unformatted?: string | null;
  }
  /**
   * Stores the classification info of each field of study label.
   */
  export interface Schema$ResearchScienceSearchFieldOfStudyInfo {
    /**
     * The classification source that determines the field of study label.
     */
    classificationSource?: string | null;
    /**
     * If set to true, it means that the probability is at least the threshold value specified from the corresponding saved model config. Thresholds for different fields may be different.
     */
    isAboveThreshold?: string | null;
    /**
     * A label that represents the field of study.
     */
    label?: string | null;
    /**
     * A score between [0, 1] outputted from the classifier indicating the probability for being a YES instance.
     */
    probability?: number | null;
  }
  /**
   * Distribution license information. Next ID: 6
   */
  export interface Schema$ResearchScienceSearchLicense {
    /**
     * A fingerprint id generated based on the license_class, URL or text. Since the knowledge graph requires a unique string id for the license but any filed of license can be empty, a fingerprint id can serve as a compact identifier representing the non-empty sub-fields.
     */
    id?: string | null;
    /**
     * A value from a controlled vocabulary that uniquely identifies a license. Unless this is set to LICENSE_CLASS_UNDEFINED_NO_MATCH or LICENSE_CLASS_UNDEFINED_CONTRADICTING_MATCHES other fields in this message should be empty.
     */
    licenseClass?: string | null;
    /**
     * mid for the license.
     */
    licenseMid?: string | null;
    /**
     * The text (usually, the name) of the distribution license.
     */
    text?: string | null;
    /**
     * The url for the distribution license.
     */
    url?: string | null;
  }
  /**
   * Describes the spatial information about a value in spatial-coverage definition of a dataset. Next ID: 9
   */
  export interface Schema$ResearchScienceSearchLocation {
    /**
     * Coordinates of the corners of the polygon in the form "lat1 long1 lat2 long2"
     */
    boxCoordinates?: string | null;
    /**
     * Coordinates for the circle area defined by its center and radius: "lat long, radius"
     */
    circleCoordinates?: string | null;
    /**
     * mids for locations that contain loctions in .
     */
    containedInMid?: string[] | null;
    /**
     * mids for locations covering the dataset, contained in the . A region may contain multiple locations that are identified by mids.
     */
    locationMid?: string[] | null;
    /**
     * Labels (in the preferred language of the dataset) for the mids in .
     */
    locationMidLabel?: string[] | null;
    /**
     * The original name for the area covered by the dataset.
     */
    locationName?: string | null;
    locationSource?: string | null;
    /**
     * Latitude and longitude for a single point in the form of "lat,long".
     */
    pointCoordinates?: string | null;
    /**
     * Unformatted coordinates describing the region.
     */
    unformattedCoordinates?: string | null;
  }
  /**
   * The information representing one navboost query for the dataset source_url.
   */
  export interface Schema$ResearchScienceSearchNavboostQueryInfo {
    /**
     * imp_count stores an estimate of the number of impressions for this tuple.
     */
    impCount?: number | null;
    /**
     * lcc_count stores an estimate of the number of long clicks for this tuple. NOTE: It is similar to query_doc_count, but calculated in different manner.
     */
    lccCount?: number | null;
    /**
     * The query string.
     */
    query?: string | null;
    /**
     * The query_count stores the counts on this query.
     */
    queryCount?: number | null;
    /**
     * The query_doc_count stores the number of long-clicks on this pair.
     */
    queryDocCount?: number | null;
  }
  /**
   * Organization, such as the source of a dataset or a funder NOTE: source_organization_mid and source_organization_mid_label should always have the same length: the mid and label correspond to each other. We don't use a map for consistency with Location and if we switch to map, we should switch to it in both. Next ID: 6
   */
  export interface Schema$ResearchScienceSearchOrganization {
    /**
     * KG mid for the organization or person.
     */
    organizationMid?: string[] | null;
    /**
     * Label (in the preferred language of the dataset) for the mid.
     */
    organizationMidLabel?: string[] | null;
    /**
     * Unreconciled organization name. We store it here only if there are no organization_mid values present.
     */
    organizationName?: string | null;
    /**
     * Original organization url
     */
    organizationUrl?: string | null;
    /**
     * Original name before reconciliation; empty if not reconciled.
     */
    originalOrganizationName?: string | null;
  }
  /**
   * A proto for storing inferred and reconciled metadata for Science Search. Next available tag: 73
   */
  export interface Schema$ResearchScienceSearchReconciledMetadata {
    /**
     * Alternate names and acronyms for the dataset.
     */
    alternateName?: string[] | null;
    /**
     * A string representation of the authors of the dataset, collected from author and creator in raw metadata. The exact format (e.g., comma-separated, etc.) is up to the extender that populates this field. The assumption is that this string may appear in the UI "as is".
     */
    authorList?: string | null;
    /**
     * A hash of the fields copied by BasicMetadataExtender and the importers. See cs/research/science_search/backend/extender/basic_metadata_extender.h for the list of fields.
     */
    basicFieldsHash?: string | null;
    /**
     * Catalog that this dataset is a part of.
     */
    catalog?: Schema$ResearchScienceSearchCatalog;
    /**
     * Compact Identifiers (for example "RRID:SCR_002088") that can be resolved by Identifiers.org or N2T.net meta-resolvers.
     */
    compactIdentifier?: string[] | null;
    /**
     * Compact Identifier(s) extracted from the citation field. Like in the case of DOI(s) those identify the articles related to the dataset rather than the dataset itself.
     */
    compactIdentifierFromCitation?: string[] | null;
    coverageEndDate?: Schema$ResearchScienceSearchDate;
    /**
     * The start and end date that the dataset covers. If the dataset covers a single timepoint, then start and end dates are the same. Use the ISO 8601 format for dates (e.g., 2006-05-23).
     */
    coverageStartDate?: Schema$ResearchScienceSearchDate;
    /**
     * The dataset in downloadable form. There can be multiple data download entries for different file types.
     */
    dataDownload?: Schema$ResearchScienceSearchDataDownload[];
    /**
     * A hash of the raw metadata fields used by the QualityExtender.
     */
    datasetClassificationFieldsHash?: string | null;
    /**
     * Probability that the entity is in fact a dataset (in contrast to spam or website labelled as dataset that does not describe a dataset).
     */
    datasetClassificationScore?: number | null;
    /**
     * The date when the dataset was created.
     */
    dateCreated?: Schema$ResearchScienceSearchDate;
    /**
     * The date when the dataset was modified.
     */
    dateModified?: Schema$ResearchScienceSearchDate;
    /**
     * The date when the dataset was published.
     */
    datePublished?: Schema$ResearchScienceSearchDate;
    /**
     * Most recent of the three dates (published, created, modified)
     */
    dateUpdated?: Schema$ResearchScienceSearchDate;
    denylistStatus?: string[] | null;
    /**
     * Description of the dataset.
     */
    description?: string[] | null;
    /**
     * Description of the dataset converted to HTML.
     */
    descriptionInHtml?: string[] | null;
    /**
     * The DOI for the dataset. We assume that there is only one.
     */
    doi?: string | null;
    /**
     * DOI(s) extracted from the citation field. In contrast to the "doi" field these DOIs identify the articles related to the dataset rather than the dataset itself.
     */
    doiFromCitation?: string[] | null;
    /**
     * Field of study: a general, high-level classification of the dataset. This is only populated during indexing time and it is only populated if the classification_source is KNOWLEDGE_GRAPH or it's above inference threshold.
     */
    fieldOfStudy?: Schema$ResearchScienceSearchFieldOfStudyInfo[];
    /**
     * The fingerprint of basic fields from DatasetMetadata, including: - name - description DEPRECATED
     */
    fingerprint?: string | null;
    /**
     * Funder of the dataset.
     */
    funder?: Schema$ResearchScienceSearchOrganization[];
    /**
     * Indicates if the dataset has croissant format (https://github.com/mlcommons/croissant).
     */
    hasCroissantFormat?: boolean | null;
    /**
     * Indicates if the dataset has table summaries. This field is only populated during indexing time.
     */
    hasTableSummaries?: boolean | null;
    /**
     * A unique id for the dataset. For the data from Spore, this is the spore id, such as, for example "http://accession.nodc.noaa.gov/8500223#__sid=js0" REQUIRED
     */
    id?: string | null;
    /**
     * An identifier as provided by the dataset itself.
     */
    identifierFromSource?: string[] | null;
    /**
     * The image urls provided by the dataset (e.g., for thumbnail images).
     */
    imageUrl?: string[] | null;
    /**
     * Index of this dataset in its cluster of replicas.
     */
    indexInCluster?: number | null;
    /**
     * Indicates if the dataset is available for free or behind a paywal http://schema.org/isAccessibleForFree
     */
    isAccessibleForFree?: string | null;
    /**
     * A resource (most likely another dataset) from which this dataset is derived or from which it is a modification or adaption. http://schema.org/isBasedOn
     */
    isBasedOn?: string[] | null;
    /**
     * Indicates whether the metadata was inferred using an ML model rather than from the schema.org fields. Use optional so that explicitly setting to false will ensure the value is passed along to the KG instead of being indistinguisable from being unset and thus not set in the KG. This field was originally non-optional; changing to optional is backwards compatible, but protos created prior to being optional won't have has_is_inferred() (go/proto-proposals/proto3-presence#wire-format-semantic-changes).
     */
    isInferred?: boolean | null;
    /**
     * Keywords describing the dataset.
     */
    keyword?: string[] | null;
    /**
     * The 2-letter language code for the source page for the dataset. Same as the language code in source_url_docjoin_info. Populated only when generating output for indexing.
     */
    languageCode?: string | null;
    /**
     * License for the dataset.
     */
    license?: Schema$ResearchScienceSearchLicense[];
    /**
     * License for the dataset. DEPRECATED
     */
    licenseDeprecated?: string[] | null;
    /**
     * A technique or technology used in a Dataset corresponding to the method used for measuring the corresponding variable(s) (described using variableMeasured). http://schema.org/measurementTechnique
     */
    measurementTechnique?: string[] | null;
    /**
     * Mentioned URLs in the description.
     */
    mentionedUrls?: string[] | null;
    metadataType?: string | null;
    /**
     * The names of the dataset.
     */
    name?: string[] | null;
    /**
     * The number of datasets at the same source url as this dataset.
     */
    numberOfDatasetsAtSourceUrl?: number | null;
    /**
     * The number of articles that reference this dataset.
     */
    numberOfScholarCitations?: number | null;
    publication?: Schema$ResearchScienceSearchCitation[];
    /**
     * The url for the article that (likely) describes this dataset.
     */
    relatedArticleUrl?: string | null;
    /**
     * The info of replicas of this dataset.
     */
    replica?: Schema$ResearchScienceSearchReplica[];
    /**
     * Ids for other instances (not different versions) of this dataset.
     */
    sameAs?: string[] | null;
    /**
     * For tables and figures, contains all of the metadata for a scholarly article that was the source of this table or figure. This field is populated only if metadata_type is 'TABLE' or 'FIGURE'.
     */
    scholarlyArticle?: Schema$ResearchScienceSearchScholarlyArticle;
    /**
     * Query string to send to Scholar to obtain the best approximation of citations to the dataset.
     */
    scholarQuery?: string | null;
    /**
     * Source of the dataset: unifies provider, creator, author, publisher etc.
     */
    sourceOrganization?: Schema$ResearchScienceSearchOrganization[];
    /**
     * Source url from which we gathered the metadata
     */
    sourceUrl?: string | null;
    /**
     * All the information extracted from docjoin, for the source_url of this dataset, aka DatasetMetadata.source_url.
     */
    sourceUrlDocjoinInfo?: Schema$ResearchScienceSearchSourceUrlDocjoinInfo;
    /**
     * Locations that describe spatial coverage of the data. If the data covers multiple locations then each value corresponds to one such location, describing its coordinates, mid, etc.
     */
    spatialCoverage?: Schema$ResearchScienceSearchLocation[];
    /**
     * Top salient term labels that describe the dataset document body.
     */
    topSalientTermLabel?: string[] | null;
    /**
     * urls for the dataset, including doi.
     */
    url?: string[] | null;
    /**
     * Variables that the data in the dataset captures (e.g., pressure, salinity, temperature). For now, these are just strings.
     */
    variable?: string[] | null;
    /**
     * Information on the version cluster that the dataset is a part of. This field is populated during the indexing time; the field is populated only if the dataset is part of a version cluster.
     */
    versionClusterInfo?: Schema$ResearchScienceSearchVersionClusterInfo;
    /**
     * A hash of the raw metadata fields used by the VersionEmbeddingExtender.
     */
    versionEmbeddingFieldsHash?: string | null;
    /**
     * An embedding for the dataset to be used by the VersionAggregator.
     */
    versionEmbeddingVector?: number[] | null;
    /**
     * A simhash value of the fields used for identifying versions of a dataset. This will be used by the VersionClusterInfoWriter.
     */
    versionsSimhash?: string | null;
  }
  /**
   * Stores the information about a dataset replica. Next ID: 5
   */
  export interface Schema$ResearchScienceSearchReplica {
    /**
     * The name of the catalog that the replica comes from.
     */
    catalogName?: string | null;
    /**
     * The url of the catalog that the replica comes from.
     */
    catalogUrl?: string | null;
    /**
     * The index of this replica in a cluster of replicas.
     */
    indexInCluster?: number | null;
    /**
     * Url for the replica.
     */
    url?: string | null;
  }
  /**
   * Data and associated metadata for a scholarly pdf article.
   */
  export interface Schema$ResearchScienceSearchScholarlyArticle {
    /**
     * Proto containing all of the Scholar Metadata for this article.
     */
    citation?: Schema$ScienceCitation;
    /**
     * contains the image of the figure or table cropped out of the pdf page encoded as a PNG.
     */
    figureOrTableImage?: string | null;
    /**
     * Contains the text (as detected by OCR) contained inside the image of the figure or table.
     */
    figureOrTableOcrText?: string | null;
    /**
     * The url of the landing page for the scholarly article.
     */
    landingPageUrl?: string | null;
    /**
     * The page number where the table and figure is located in the original pdf document.
     */
    pageNumber?: number | null;
    /**
     * The url where the pdf file is located for the scholarly article.
     */
    pdfDownloadUrl?: string | null;
  }
  /**
   * The proto containing all the information we extracted from docjoin, for the source_url of the dataset. NEXT TAG: 17
   */
  export interface Schema$ResearchScienceSearchSourceUrlDocjoinInfo {
    dataSource?: string | null;
    /**
     * The url used to display in the google search results.
     */
    displayUrl?: string | null;
    /**
     * The docid of the document.
     */
    docid?: string | null;
    /**
     * Index tiers (BASE, UNIFIED_ZEPPELIN, etc) that the document belongs to. NOTE: Each document may belong to multiple tiers. NOTE: The original data type is an enum CompositeDoc::SubIndexType. However we don't want to depend on segindexer/compositedoc.proto because the proto is too large. Instead, we use CompositeDoc::SubIndexType_Name( subindexid) to convert into a string representation. To convert string back to CompositeDoc::SubIndexType, use CompositeDoc::SubIndexType_Parse.
     */
    indexTier?: string[] | null;
    /**
     * The language of the document in the string representation of LanguageCode. Converts from Language Enum to LanguageCode through i18n/identifiers/langenclanguagecodeconverter.h Please use i18n/identifiers/languagecodeconverter.h for converting between LanguageCode and string representation.
     */
    languageCode?: string | null;
    /**
     * The syntactic date of a dataset document that reflects the publication date of the content.
     */
    latestPageUpdateDate?: string | null;
    /**
     * A sequence of Navboost queries for the dataset source_url.
     */
    navboostQuery?: Schema$ResearchScienceSearchNavboostQueryInfo[];
    /**
     * The page rank of the document.
     */
    pagerank?: number | null;
    /**
     * Petacat classifications for the web document. Normally the results from calling Petacat come in a PetacatResponse, which is very flexible and extensible. This proto takes most of the flexibility away - only rephil clusters, taxonomic classifications, and binary classifications, with discretized weights.
     */
    petacatInfo?: Schema$FatcatCompactDocClassification;
    /**
     * A set of salient terms extracted fromthe document. DEPRECATEAD. Moved to DatasetMetadata for performance reasons.
     */
    salientTerms?: Schema$QualitySalientTermsSalientTermSet;
    /**
     * Science per-doc data for inclusion in websearch.
     */
    scholarInfo?: Schema$ScienceIndexSignal;
    /**
     * A set of entities from WebRef annotations that are in SPORE_GRAPH.
     */
    sporeGraphMid?: string[] | null;
    /**
     * The title of the document.
     */
    title?: string | null;
    /**
     * A set of top entities from WebrefAnnotation, top is defined by topicality score, see go/topicality-score for detail. DEPRECATED. See label_to_mids_map instead.
     */
    topEntity?: Schema$RepositoryWebrefWebrefEntity[];
    /**
     * The url of the document.
     */
    url?: string | null;
    /**
     * A set of entities copied from WebRefEntities on cDoc.
     */
    webrefEntity?: Schema$ResearchScienceSearchSourceUrlDocjoinInfoWebrefEntityInfo[];
  }
  /**
   * The mid and description of a WebRefEntity.
   */
  export interface Schema$ResearchScienceSearchSourceUrlDocjoinInfoWebrefEntityInfo {
    /**
     * DEPRECATED. See entity_type instead.
     */
    deprecatedEntityType?: string | null;
    /**
     * The English description of the mid from the KG.
     */
    description?: string | null;
    entityCollectionType?: string[] | null;
    /**
     * HRID of the KG collections
     */
    kgCollection?: string[] | null;
    /**
     * The KG identifier of the WebrefEntity.
     */
    mid?: string | null;
  }
  /**
   * Stores the information about each cluster of versions. Versions are defined in go/s2-versioning. Next available tag: 4
   */
  export interface Schema$ResearchScienceSearchVersionClusterInfo {
    /**
     * Index of this dataset in its cluster of versions.
     */
    indexInVersionCluster?: number | null;
    /**
     * The number of versions in a Version Cluster. This is equivalent to cluster size.
     */
    numVersions?: number | null;
    /**
     * A fingerprint id of the cluster of versions this dataset belongs to. This is a hash of a dataset_id in the cluster.
     */
    versionClusterId?: string | null;
  }
  /**
   * Next ID: 11
   */
  export interface Schema$RichsnippetsDataObject {
    AccessKey?: string | null;
    attribute?: Schema$RichsnippetsDataObjectAttribute[];
    source?: string | null;
    /**
     * The object type.
     */
    type?: string | null;
  }
  /**
   * Other attributes of the object.
   */
  export interface Schema$RichsnippetsDataObjectAttribute {
    cdata?: string | null;
    /**
     * idata holds integer data under the attribute name, and could be interpreted differently according to the attribute name. Example: stores the ImadeData.docid used to generate thumbnails. idata will not be automatically converted into xml (the default behavior), but the behavior can be overwritten if necessary.
     */
    idata?: string | null;
    name?: string | null;
    /**
     * A data object can have other data objects nested inside it. This is needed to represent Microformats and RDFa which have nestings e.g., a review with a business with an address, or a review with a rating object. See the Webmaster Central 2009/05 blog on "Introducing Rich Snippets".
     */
    subobject?: Schema$Proto2BridgeMessageSet;
    /**
     * Whether we should tokenize the value and cdata when generating restricts from this attribute.
     */
    tokenize?: boolean | null;
    /**
     * Either of cdata or value should be present.
     */
    value?: string | null;
  }
  export interface Schema$RichsnippetsPageMap {
    DataObject?: Schema$RichsnippetsDataObject[];
    /**
     * If ignore_data_object is set to true, pagemap attachment is processed regardless of whether data object is present or not.
     */
    ignoreDataObject?: boolean | null;
    src?: string | null;
    templatetype?: Schema$RichsnippetsPageMapTemplateType[];
  }
  /**
   * Unused fields
   */
  export interface Schema$RichsnippetsPageMapTemplateType {
    src?: string | null;
  }
  /**
   * S3 based Audio language information about a Watch Page.
   */
  export interface Schema$S3AudioLanguageS3AudioLanguage {
    /**
     * Audio language of video classified by Automatic Language Identification. It corresponds to the langid_result in S3LangIdSignals.
     */
    language?: string | null;
    /**
     * Confidence interval of the recognized language.
     */
    languageConfidence?: string | null;
    /**
     * Type of detected speech.
     */
    speechClass?: string | null;
  }
  /**
   * A proto that stores SafeSearch internal signals that are not exported to clients.
   */
  export interface Schema$SafesearchInternalImageSignals {
    imageEntitiesViolenceScore?: number | null;
    /**
     * Additional SafeSearch signals that are used to compute final scores.
     */
    starburstPornScore?: number | null;
    starburstViolenceScore?: number | null;
  }
  /**
   * Flexible multi-vertical classification output. The output for each vertical should be defined as a proto extension to this proto. When defining an extension for a new vertical please follow the format: message NewVertical { extend safesearch.VideoClassifierOutput { optional NewVertical classifier_output_extension = ; \} optional safesearch.VideoVerticalOutput vertical_output = 1; \} SafeSearch verticals only: Please also update this message with a new extension declaration. For more details on extension declaration please refer to http://go/proto-proposals/extension-declarations. Please refer to http://go/proto2-extensions for details on message extensions. LINT.IfChange next extension id: 7
   */
  export interface Schema$SafesearchVideoClassifierOutput {}
  /**
   * SafeSearch video content classification scores are computed based on go/golden7 video features. To access these scores see the library at: google3/quality/safesearch/video/api/video_score_info.h Next ID: 6
   */
  export interface Schema$SafesearchVideoContentSignals {
    internalMultiLabelClassification?: Schema$SafesearchVideoContentSignalsMultiLabelClassificationInfo;
    /**
     * This is used by Amarna to determine whether it should notify Raffia for immediate reprocessing. This field will be generated in Amarna's image_metadata corpus and exported to references_video_search corpus and written to ExportState.module_state.critical_metadata_checksum for determining whether Amarna should immediately notify Raffia whenever is_abuse_with_high_confidence's value changes.
     */
    isAbuseWithHighConfidence?: boolean | null;
    scores?: {[key: string]: number} | null;
    versionTag?: string | null;
    /**
     * Output of all SafeSearch video classifiers in Amarna.
     */
    videoClassifierOutput?: Schema$SafesearchVideoClassifierOutput;
  }
  /**
   * Information about multi-label classification result (the scores and whether frame features were used).
   */
  export interface Schema$SafesearchVideoContentSignalsMultiLabelClassificationInfo {
    frameFeaturesPresent?: boolean | null;
    output?: Schema$SafesearchVideoContentSignalsMultiLabelOutput;
  }
  /**
   * Output of Multi-Label video classifier.
   */
  export interface Schema$SafesearchVideoContentSignalsMultiLabelOutput {
    ageIndeterminate?: number | null;
    csam?: number | null;
    porn?: number | null;
    racy?: number | null;
    violence?: number | null;
  }
  export interface Schema$ScienceCitation {
    /**
     * The source of abstract text that is chosen by science docid assigner.
     */
    AbstractCitationSource?: number | null;
    AbstractDisplay?: string | null;
    /**
     * Version of abstract field for display. Contains unsanitized XML/HTML.
     */
    AbstractHtml?: string | null;
    /**
     * Leftovers from AbstractHtml. These are usually unrecognized xml/html entities or xml/html tags
     */
    AbstractHtmlLeftOver?: string | null;
    AbstractLanguage?: string | null;
    AbstractSource?: string | null;
    AbstractText?: string | null;
    /**
     * The original (unnormalized) type of an abstract. AbstractDisplay holds a normalized type deduced from things like tagnames, tag-attributes, keywords in documents or the placement of the abstract in the document. This field is meant for the type of the abstract identified explicitly by the source document. E.g., the value of the 'abstract-type' attribute from a tag in XML ('primary abstract', 'summary', 'highlights' etc.).
     */
    AbstractTypeFromSource?: string | null;
    accessurl?: Schema$ScienceCitationAccessURL[];
    alternateabstract?: Schema$ScienceCitationAlternateAbstract[];
    alternatetitle?: Schema$ScienceCitationAlternateTitle[];
    /**
     * Fingerprint of the URL after applying crawl and aggregate rewrites. Different citations with the same AlternateVersionID must have the same VersionID, but not necessarily vice versa. Omitted when identical to the VersionID.
     */
    AlternateVersionID?: string | null;
    /**
     * All the anchor text (before, after, formal, etc) for this citation in the referring page.
     */
    Anchors?: Schema$ScienceCitationAnchor[];
    /**
     * e.g. hep-ph
     */
    ArxivSection?: string | null;
    author?: Schema$ScienceCitationAuthor[];
    /**
     * whether this citation had an "et al" in the author list
     */
    AuthorListHasEtAl?: boolean | null;
    AuthorMetatagLeftOver?: string | null;
    /**
     * Global document identifier - only available when building increments over a known base index. This id is from the base index.
     */
    BaseGlobalID?: string | null;
    /**
     * Set when building an incremental index. Whereas BaseGlobalID is the ID of the corresponding base cluster, the local ID is the ID of an individual citation within that base cluster that corresponds to this reparse.
     */
    BaseLocalID?: string | null;
    /**
     * one bit per author
     */
    BorrowedAuthors?: number | null;
    /**
     * OR of FieldType
     */
    BorrowedFields?: number | null;
    category?: Schema$ScienceCitationCategory[];
    Chapter?: string | null;
    /**
     * citation src: dblp/crossref/paper etc
     */
    CitationSource?: number | null;
    /**
     * Seconds since the epoch, should be consistent with CitationSourceUrl.
     */
    CitationSourceCrawlTimestamp?: string | null;
    /**
     * url where record came from
     */
    CitationSourceUrl?: string | null;
    /**
     * DEPRECATED: use CitationSource
     */
    CitationSrc?: string | null;
    ClearedReason?: string | null;
    /**
     * Used for logging, recommendations, and sort-by-date. Contains the earliest discovery date of the cluster, adjusted for earlier publication dates. Stored in Universal time scale (100 ns ticks since 0001 AD) because Unix timestamp would lead to negative dates for pre-1970 docs.
     */
    ClusterDiscoveryDate?: string | null;
    /**
     * Identifier for conference series - issn-lite
     */
    ConferenceId?: string | null;
    /**
     * 27 in the "27th conference on magical realism"
     */
    ConferenceNumber?: number | null;
    /**
     * If a citation is merged from a crawled version and a metadata version, keep the normal docid fp of the crawled version for clustering FP of normal docid of crawl version
     */
    CrawledDocid?: string | null;
    DblpId?: string | null;
    DEPRECATEDMetadataSourceFile?: string | null;
    /**
     * these fields moved to DownloadURL where they belong
     */
    DEPRECATEDPublisherDisplayName?: string | null;
    /**
     * Local document identifier - url fingerprint if we know the url, or fingerprint of all fields if we don't. Different urls have different local docids.
     */
    DocumentID?: string | null;
    /**
     * Digital Object Identifier
     */
    DOI?: string | null;
    downloadurl?: Schema$ScienceCitationDownloadURL[];
    /**
     * Dspace uses handle.net handles
     */
    DspaceID?: string | null;
    Edition?: string | null;
    Editor?: string[] | null;
    FileCreationDay?: number | null;
    /**
     * zero-indexed field
     */
    FileCreationMonth?: number | null;
    /**
     * date of creation of the pdf/doc
     */
    FileCreationYear?: number | null;
    funding?: Schema$ScienceCitationFunding[];
    /**
     * Is this article expected to have been indexed in the incremental?
     */
    IncrementalExpected?: boolean | null;
    ISBN?: string | null;
    ISBNVariant?: string[] | null;
    ISSN?: string | null;
    ISSNVariant?: string[] | null;
    JOI?: string | null;
    Keywords?: string[] | null;
    Language?: string | null;
    /**
     * library of congress call number
     */
    LCCN?: string | null;
    /**
     * The ScienceCitation is how metadata passes through the scholar system. For legal, we use the normal ScienceCitation for the metadata/citation of legal journals. For court/government documents (like opinions or statues), we wrap it in the following embedded message
     */
    LegalCitation?: Schema$LegalCitation;
    /**
     * If this is a target reference, the level of discussion of this reference.
     */
    LevelOfDiscussion?: number | null;
    /**
     * random string data - unparsed
     */
    Note?: string | null;
    /**
     * for display in gws
     */
    NumBackwardLinks?: number | null;
    /**
     * hack for legal rollout
     */
    NumBackwardLinksFromLegal?: number | null;
    /**
     * numcited in WoS
     */
    NumBackwardLinksInWoS?: number | null;
    /**
     * can be 1-3
     */
    Number?: string | null;
    /**
     * for display in gws
     */
    NumForwardLinks?: number | null;
    /**
     * good embedded refs
     */
    NumGoodEmbeddedRefs?: number | null;
    /**
     * If set, then we host this many pages of this citation's content. Note that this field may be set to 0, in which case we should be hosting this content but have failed. DEPRECATED, moved to DownloadURL
     */
    NumHostedPages?: number | null;
    /**
     * for display in gws
     */
    NumKeyQuotes?: number | null;
    /**
     * for display in gws
     */
    NumRelated?: number | null;
    /**
     * for experiments
     */
    NumRelated2?: number | null;
    /**
     * for experiments
     */
    NumRelated3?: number | null;
    /**
     * refs in marked section
     */
    NumSectionRefs?: number | null;
    /**
     * for display in gws
     */
    NumVersions?: number | null;
    OnlineDay?: number | null;
    /**
     * OnlineMonth is a zero-indexed field (0 is January).
     */
    OnlineMonth?: number | null;
    OnlineYear?: number | null;
    /**
     * eg ERIC doc number or TR number
     */
    OtherID?: string | null;
    /**
     * Using string to handle all kinds of page specifications. Internal structure is not really needed.
     */
    Pages?: string | null;
    ParseSource?: number | null;
    /**
     * Note that an issued patent has a PatentNumber and can also have a PatentApplicationNumber, whereas a patent application has a PatentApplicationNumber and can also have a PatentPublicationNumber.
     */
    PatentApplicationNumber?: string | null;
    /**
     * patent classification e.g., "B24B 3100"
     */
    PatentClassification?: string[] | null;
    /**
     * 2-letter country code where patent was issued, see ocean/metadata/patent_record.proto::Patent_Record::country_code for EPO one patent pertains to a list of countries.
     */
    PatentCountry?: string[] | null;
    /**
     * number according to USPTO/EPO/JPO scheme.
     */
    PatentNumber?: string | null;
    /**
     * one of the above
     */
    PatentOffice?: number | null;
    PatentPublicationNumber?: string | null;
    PMCID?: string | null;
    /**
     * Pubmed ID
     */
    PMID?: string | null;
    /**
     * for patents, publicationD/M/Y is the date of issue, not application
     */
    PublicationDay?: number | null;
    /**
     * month from bibtex PublicationMonth is a zero-indexed field (0 is January).
     */
    PublicationMonth?: number | null;
    /**
     * where published - subsumes booktitle, howpublished and journal from bibtex
     */
    PublicationVenue?: string | null;
    PublicationVenueVariant?: string[] | null;
    /**
     * year from bibtext full year
     */
    PublicationYear?: number | null;
    /**
     * address from bibtex
     */
    PublisherAddress?: string | null;
    PublisherId?: string | null;
    /**
     * subsumes organization, school and institution from bibtex
     */
    PublisherOrg?: string | null;
    /**
     * local journal number
     */
    PubvenueID?: string | null;
    referencediscussion?: Schema$ScienceCitationReferenceDiscussion[];
    /**
     * bitmap of ReviewArticleTypeReasons
     */
    ReviewTypeReason?: number | null;
    Series?: string | null;
    SICI?: string | null;
    subject?: Schema$ScienceCitationSubject[];
    Title?: string | null;
    /**
     * Version of title for display. Contains unsanitized HTML/XML.
     */
    TitleHtml?: string | null;
    /**
     * Leftovers from TitleHtml. These are usually unrecognized xml/html entities or xml/html tags
     */
    TitleHtmlLeftOver?: string | null;
    translatedauthor?: Schema$ScienceCitationTranslatedAuthor[];
    /**
     * etal marker for the translated author list - just in case
     */
    TranslatedAuthorListHasEtAl?: boolean | null;
    /**
     * ArticleType
     */
    Type?: number | null;
    unioncatalog?: Schema$ScienceCitationUnionCatalog[];
    /**
     * Email addresses found in the document that we weren't able to match
     */
    UnmatchedEmailAddr?: string[] | null;
    /**
     * Author affiliations found in the document that we weren't able to match up to specific authors.
     */
    UnmatchedInstitution?: string[] | null;
    /**
     * Document version identifier - fingerprint of an id computed from the url, or of bibliographic data from a publisher. Different urls for the same article from the same source have the same version id (e.g., abstract, pdf version, and html version).
     */
    VersionID?: string | null;
    Volume?: number | null;
    /**
     * Is this version of the article world viewable?
     */
    WorldViewable?: boolean | null;
    /**
     * Web of Science ID
     */
    WOSID?: string | null;
  }
  /**
   * User-defined URL and its last access data for citation manager.
   */
  export interface Schema$ScienceCitationAccessURL {
    AccessDay?: number | null;
    /**
     * AccessMonth is a zero-indexed field (0 is January).
     */
    AccessMonth?: number | null;
    AccessYear?: number | null;
    UrlStr?: string | null;
  }
  /**
   * There are templated functions that fill the abstract fields designed to take either ScienceCitation or ScienceCitation::AlternateAbstract, so these field names must match those used for the primary abstract.
   */
  export interface Schema$ScienceCitationAlternateAbstract {
    AbstractDisplay?: string | null;
    /**
     * Version of abstract field for display. This may contain XML/HTML tags.
     */
    AbstractHtml?: string | null;
    /**
     * Leftovers from AbstractHtml. These are usually unrecognized xml/html entities or xml/html tags
     */
    AbstractHtmlLeftOver?: string | null;
    AbstractLanguage?: string | null;
    AbstractText?: string | null;
    /**
     * The original (unnormalized) type of an abstract. AbstractDisplay holds a normalized type deduced from things like tagnames, tag-attributes, keywords in documents or the placement of the abstract in the document. This field is meant for the type of the abstract identified explicitly by the source document. E.g., the value of the 'abstract-type' attribute from a tag in XML ('primary abstract', 'summary', 'highlights' etc.).
     */
    AbstractTypeFromSource?: string | null;
  }
  /**
   * alternate titles (including language where available)
   */
  export interface Schema$ScienceCitationAlternateTitle {
    Language?: string | null;
    Title?: string | null;
    /**
     * Version of title for display. Contains unsanitized HTML/XML.
     */
    TitleHtml?: string | null;
    /**
     * Leftovers from TitleHtml. These are usually unrecognized xml/html entities or xml/html tags
     */
    TitleHtmlLeftOver?: string | null;
  }
  /**
   * The anchor class holds content relevant to a citation, for example, the text before or after the citation that explains what the citation is about.
   */
  export interface Schema$ScienceCitationAnchor {
    /**
     * Number of times this anchor text appears, only consider the text itself
     */
    count?: number | null;
    /**
     * Fingerprint of the referral document. The fingerprint should resist to small variance in the document content. DO NOT USE IT!
     */
    DEPRECATEDSrcFP?: string | null;
    /**
     * font face bitmask: kBold, kItalic, etc.
     */
    face?: number | null;
    /**
     * font size, in px
     */
    size?: number | null;
    /**
     * Space-delimited anchor words. Text that needs segmentation (like CJK or Thai) is unsegmented. Generated by ScienceParseUtils::AppendTokenSeqToString()
     */
    text?: string | null;
    /**
     * one of the "Type" value defined below.
     */
    type?: number | null;
    /**
     * weight of the anchor by looking where we get this anchor text. It can be PR, court level, year, or the combination of differerent aspects. weights are 1 - 128 defined as "Weights"
     */
    weight?: number | null;
  }
  /**
   * author names should be in the order specified in the paper
   */
  export interface Schema$ScienceCitationAuthor {
    Comment?: string | null;
    /**
     * not in bibtex - from paper
     */
    Department?: string | null;
    Email?: string | null;
    /**
     * Tracks the GuessNameOrder case used to parse this author name, defaults to 0 simply means that GuessNameOrder wasn't used.
     */
    GuessOrderType?: number | null;
    /**
     * Author ID. Formatted as idtype:id
     */
    ID?: string[] | null;
    /**
     * not in bibtex - from paper
     */
    Institution?: string | null;
    IsCJKForeignName?: boolean | null;
    IsCorrespondingAuthor?: boolean | null;
    LastName?: string | null;
    OtherNames?: string | null;
    SourceText?: string | null;
    /**
     * Type is one of the contributors types. Writers are the default.
     */
    Type?: number | null;
  }
  export interface Schema$ScienceCitationCategory {
    Name?: string | null;
    /**
     * ontology/set of categories for the category
     */
    Type?: string | null;
  }
  /**
   * Download URL mentioned in citation; we keep up to K of them LINT.IfChange
   */
  export interface Schema$ScienceCitationDownloadURL {
    /**
     * set if we know the landing page is broken
     */
    BrokenLandingPage?: boolean | null;
    CanonicalUrlfp?: string | null;
    /**
     * checksum of the page
     */
    ContentChecksum?: string | null;
    /**
     * makes gws display nicer :)
     */
    ContentType?: number | null;
    /**
     * seconds since the epoch
     */
    CrawlTimestamp?: string | null;
    /**
     * publisher display name
     */
    DisplayOrg?: string | null;
    /**
     * display preference score
     */
    DisplayPriority?: number | null;
    /**
     * metatag: URL; result was taken down
     */
    DMCANotice?: string | null;
    DownloadDay?: number | null;
    /**
     * DownloadMonth is a zero-indexed field (0 is January).
     */
    DownloadMonth?: number | null;
    /**
     * no abbrv
     */
    DownloadYear?: number | null;
    /**
     * first few lines of abstract'ish excerpt
     */
    ExcerptContent?: string | null;
    /**
     * label for excerpt (abstract, summary, ..)
     */
    ExcerptDebugLabel?: string | null;
    /**
     * seconds since the epoch
     */
    FirstDiscovered?: string | null;
    /**
     * explicit zero means hosting failed
     */
    HostedNumPages?: number | null;
    HostedStartPage?: number | null;
    /**
     * html title of the page
     */
    HtmlTitle?: string | null;
    /**
     * indexing preference score
     */
    IndexPriority?: number | null;
    /**
     * is url included in a previous index
     */
    InPrevIndex?: boolean | null;
    /**
     * e.g., in law_articles.pat
     */
    LegalMustInclude?: boolean | null;
    /**
     * Whether this is likely the URL for an ahead print, at indexing time.
     */
    LikelyAheadPrint?: boolean | null;
    /**
     * In the context of a given venue in Scholar Metrics, whether this URL likely does not link to the current venue.
     */
    LikelyDifferentMetricsVenue?: boolean | null;
    /**
     * e.g., in legal_journals.pat
     */
    LikelyLegalJournal?: boolean | null;
    /**
     * badurls_nocache at indexing time
     */
    LikelyNoCache?: boolean | null;
    /**
     * badurls_noreturngws at indexing time
     */
    LikelyNoIndex?: boolean | null;
    /**
     * Likely to be free-to-read for everyone, after accounting for library links etc.
     */
    LikelyWorldViewable?: boolean | null;
    /**
     * number of long paragraphs
     */
    LongChunkCount?: number | null;
    /**
     * Incremental only: mark as NoIndexed if this is a reparse and the base version is NoIndexed.
     */
    MaybeNoIndexReparse?: boolean | null;
    /**
     * url of publisher metadata file
     */
    MetadataUrl?: string | null;
    /**
     * e.g., in science_articles.pat
     */
    MustInclude?: boolean | null;
    /**
     * metatag: don't show cached version
     */
    NoArchive?: boolean | null;
    /**
     * metatag: don't display this url
     */
    NoIndex?: boolean | null;
    /**
     * metatag: don't show snippet
     */
    NoSnippet?: boolean | null;
    /**
     * describes whether url is viewable in ocean
     */
    OceanView?: Schema$ScienceOceanView;
    /**
     * number of external URLs (in PDF).
     */
    OutLinkCount?: number | null;
    /**
     * Number of pages in the pdf2html conversion output. Only set for PDFs. For a partitioned PDF, this is the page count of the entire volume.
     */
    PageCount?: number | null;
    /**
     * were references parsed in a previous index
     */
    ReferencesInPrevIndex?: boolean | null;
    /**
     * ArticleType for this particular url
     */
    Type?: number | null;
    UrlAfterRedirects?: string | null;
    UrlStr?: string | null;
    /**
     * number of words in content/body
     */
    WordCount?: number | null;
    /**
     * metatag: is viewable by world
     */
    WorldViewable?: boolean | null;
  }
  export interface Schema$ScienceCitationFunding {
    /**
     * values are from FundingAgency enum
     */
    Agency?: number | null;
    /**
     * Text name of the agency. For analysis. Plus for agencies that don't have an enum.
     */
    AgencyName?: string | null;
    /**
     * Funding entries for the same agency and grant number can be merged during our extraction process so we maintain a record of all the deduped ExtractionInfo messages within the remaining entry.
     */
    DebugExtractionInfo?: Schema$ScienceCitationFundingExtractionInfo[];
    /**
     * Text block from which the funding entry was extracted. Intended to be used for offline analysis. DEPRECATED
     */
    DebugFundingTextBlock?: string | null;
    GrantNumber?: string | null;
    /**
     * funding recipient
     */
    Recipient?: string | null;
    /**
     * Original text for the funding acknowledgement
     */
    SourceText?: string | null;
    /**
     * Whether this funding info was added because this article was at the exclusive repository for this agency.
     */
    UrlBasedFundingSource?: boolean | null;
  }
  /**
   * Holds information about the source of the funding entry.
   */
  export interface Schema$ScienceCitationFundingExtractionInfo {
    /**
     * Set when we clear all extracted funding from this citation in the parser.
     */
    ClearedFunding?: string | null;
    /**
     * Text block context from which the funding entry was extracted. Optionally filled and intended to be used for offline analysis.
     */
    DebugFundingTextBlock?: string | null;
    DocPart?: string | null;
    ParseSection?: string | null;
    Source?: string | null;
  }
  /**
   * If this is a source document, the levels of discussion of the references this document cites.
   */
  export interface Schema$ScienceCitationReferenceDiscussion {
    Level?: number | null;
    TargetID?: string | null;
  }
  /**
   * subject classification
   */
  export interface Schema$ScienceCitationSubject {
    /**
     * e.g., "eng"
     */
    Name?: string | null;
    /**
     * [0,1]
     */
    Probability?: number | null;
  }
  /**
   * translated author names. we usually get these for non-english papers which provide english title/author/abstract info
   */
  export interface Schema$ScienceCitationTranslatedAuthor {
    Department?: string | null;
    Email?: string | null;
    GuessOrderType?: number | null;
    Institution?: string | null;
    Language?: string | null;
    LastName?: string | null;
    OtherNames?: string | null;
    SourceText?: string | null;
    Type?: number | null;
  }
  /**
   * Create UnionCatalog as a group if we want to later add book level informations.
   */
  export interface Schema$ScienceCitationUnionCatalog {
    CanonicalUrlfp?: string | null;
    /**
     * url of catalog metadata file
     */
    MetadataUrl?: string | null;
    /**
     * Information about the number of libraries the citation appears. It should be useful for ranking.
     */
    NumLibraries?: number | null;
    /**
     * Categories classification of the citation
     */
    Subject?: string[] | null;
    /**
     * UnionCatalog url to display to users
     */
    Url?: string | null;
  }
  export interface Schema$ScienceIndexSignal {
    author?: Schema$ScienceIndexSignalAuthor[];
    /**
     * Fingerprint of the html title of the page. This is useful for checking if we have the same version of the page as websearch.
     */
    HtmlTitleFp?: string | null;
    /**
     * Index selection score for websearch, bigger is better: (0.5,1.0] - prefer selection into the base index, (0.0,0.5] - prefer selection into the supplemental index.
     */
    IndexSelectionScore?: number | null;
    /**
     * Summary statistics.
     */
    NumBackwardLinks?: number | null;
    NumRelated?: number | null;
    NumVersions?: number | null;
    PublicationDay?: number | null;
    PublicationMonth?: number | null;
    /**
     * Publication date.
     */
    PublicationYear?: number | null;
    /**
     * Remove this URL from the index - error page, broken landing page, etc. DEPRECATED, was never used or even filled correctly.
     */
    RemoveLink?: boolean | null;
    /**
     * For links from websearch to scholar.
     */
    ScholarId?: string | null;
    /**
     * Title of the article. Its only filled in when the html title of the page isn't good.
     */
    Title?: string | null;
    /**
     * Length of document prefix that most users are likely to see. Only filled in when we index subscription fulltext but most users see abstracts. This is a conservative guesstimate - e.g., ACM shows fulltext to university/company subscribers (including Google employees) based on user's IP address, but we don't know subscriber IPs, so ACM's PDF pages would have ~500 in this field (estimated length of abstract).
     */
    VisiblePrefixTerms?: number | null;
  }
  export interface Schema$ScienceIndexSignalAuthor {
    LastName?: string | null;
    OtherNames?: string | null;
  }
  /**
   * Describes the viewability of ocean content.
   */
  export interface Schema$ScienceOceanView {
    countryview?: Schema$ScienceOceanViewCountryView[];
  }
  export interface Schema$ScienceOceanViewCountryView {
    /**
     * No CountryCode means default viewability. two letter code
     */
    CountryCode?: string | null;
    /**
     * enum in ocean::LocaleViewability::ViewType
     */
    ViewType?: number | null;
  }
  export interface Schema$SdrEmbedding {
    compressedEmbeddings?: Schema$QualityRankembedMustangMustangRankEmbedInfo;
    values?: number[] | null;
    version?: number | null;
  }
  export interface Schema$SdrPageAnchorsDocInfo {
    articleness?: number | null;
    pageAnchors?: Schema$SdrPageAnchorsSitelink[];
    qscore?: number | null;
    sitelinkWrapper?: Schema$SdrPageAnchorsSitelinkWrapper[];
    textRichness?: number | null;
  }
  export interface Schema$SdrPageAnchorsSitelink {
    /**
     * Needed for relevance scoring.
     */
    embedding?: Schema$SdrEmbedding;
    /**
     * aggregate score from Section Geometry.
     */
    geometryScore?: number | null;
    /**
     * Heading Abbreviation score.
     */
    headingAbbrvScore?: number | null;
    /**
     * Needed for heading/passage filtering.
     */
    hpScore?: number | null;
    level?: number | null;
    scrollTo?: Schema$SdrScrollTo;
    /**
     * Needed for Geometry Scoring and backoffs. from Section Geometry.
     */
    sectionHeight?: number | null;
    /**
     * Heading/Reformulated text is needed to display.
     */
    text?: string | null;
  }
  /**
   * This wrapper is used for passing in additional information to generate embeddings in Goldmine.
   */
  export interface Schema$SdrPageAnchorsSitelinkWrapper {
    abbreviatedHeadingText?: string | null;
    abbrvEmbedding?: Schema$SdrEmbedding;
    headingEmbedding?: Schema$SdrEmbedding;
    normalizedHeadingText?: string | null;
    passageEmbedding?: Schema$SdrEmbedding;
    passageText?: string | null;
  }
  /**
   * Data needed to construct a go/scroll-to text fragment. The url fragment is: #:~:text=[prefix-,]text_start,text_end
   */
  export interface Schema$SdrScrollTo {
    onpageMatches?: Schema$SdrScrollToOnPageMatches;
    /**
     * Prefix to help with disambiguating between multiple text matches on page. Optional.
     */
    prefix?: string | null;
    /**
     * Suffix to help with disambiguating between multiple text matches on page. Optional.
     */
    suffix?: string | null;
    /**
     * End of the text span to be highlighted. Optional.
     */
    textEnd?: string | null;
    /**
     * Start of the text span to be highlighted.
     */
    textStart?: string | null;
  }
  /**
   * Number of matches in the page when using text alone, prefix + text, text + suffix, and prefix + text + suffix. The match is case-insensitive to align with go/scroll-to behavior.
   */
  export interface Schema$SdrScrollToOnPageMatches {
    text?: number | null;
    textWithPrefix?: number | null;
    textWithPrefixSuffix?: number | null;
    textWithSuffix?: number | null;
  }
  /**
   * Encapsulates sensitivity mode, source, and other metadata, used for ranking when there are multiple sensitivies set by default sources (eg, followon, query understanding, attentional entity).
   */
  export interface Schema$SearchPolicyRankableSensitivity {
    /**
     * Propagated from knowledge.answers.sensitivity.Sensitivity account_provenance. Any ambiguity between the data here and dasher_user should be resolved by the conversion to pToken in http://source/search?q=symbol:CreatePTokenFromSensitivity
     */
    accountProvenance?: Schema$QualityQrewriteAccountProvenance[];
    attentionalEntity?: Schema$SearchPolicyRankableSensitivityAttentionalEntity;
    /**
     * True iff the query is from a Dasher user.
     */
    dasherUser?: boolean | null;
    followon?: Schema$SearchPolicyRankableSensitivityFollowOn;
    groundingProvider?: Schema$SearchPolicyRankableSensitivityGroundingProvider;
    prefilter?: Schema$SearchPolicyRankableSensitivityPrefilter;
    qu?: Schema$SearchPolicyRankableSensitivityQueryUnderstanding;
    /**
     * Key of a sensitivity.
     */
    sensitivityMode?: string | null;
    syntheticIntent?: Schema$SearchPolicyRankableSensitivitySyntheticIntent;
    winningFulfillment?: Schema$SearchPolicyRankableSensitivityFulfillment;
  }
  /**
   * Attentional entities (AE) can be pulled from arguments of interpretations, entities annotated by Aqua or QRef annotators, and entities mentioned in Assistant's response and annotated by the fulfillment logic (see https://g3doc.corp.google.com/quality/dialog_manager/attentional_entities/g3doc/overview.md#overview). Sensitivity of AEs can be marked by (1) feature developers in a Monastery frame, (2) code to infer the sensitivity from Argument provenance, and (3) entity annotators, such as Aqua annotator and QRef annotator. See go/sensitive-ae.
   */
  export interface Schema$SearchPolicyRankableSensitivityAttentionalEntity {
    aeOrigin?: string | null;
  }
  /**
   * Sensitivity is marked at end of the last turn. See go/followon-sensitivity for more details.
   */
  export interface Schema$SearchPolicyRankableSensitivityFollowOn {
    /**
     * Should e2e search candidates running in parallel with QU (eg. GBot) be blocked.
     */
    blockNonV2SearchBackends?: boolean | null;
    /**
     * Iff true this follow-on sensitivity will rank above the ones determined by query understanding (QU).
     */
    ignoreQueryUnderstanding?: boolean | null;
  }
  /**
   * Marks that this sensitivity is from fulfillment.
   */
  export interface Schema$SearchPolicyRankableSensitivityFulfillment {}
  /**
   * Marks that sensitivity is from a Grounding Provider.
   */
  export interface Schema$SearchPolicyRankableSensitivityGroundingProvider {}
  /**
   * Deprecated, do not use.
   */
  export interface Schema$SearchPolicyRankableSensitivityPrefilter {
    propagateOnly?: boolean | null;
  }
  /**
   * Sensitivity is produced by QU.
   */
  export interface Schema$SearchPolicyRankableSensitivityQueryUnderstanding {
    /**
     * QU dectects a sensitive intent with no sensitive content (eg., [Send email]). This flag is only used to trigger a sensitive feature because as a precaution all sensitive features should check current sensitivity mode before triggering; but will NOT block any backends, which means all other features can compete fairly.
     */
    intentOnlyNoPii?: boolean | null;
    /**
     * The rewritten query this sensitivity is for. Note different query rewrites could produce different sensitivities.
     */
    rewrittenQuery?: string | null;
  }
  /**
   * Marks that this sensitivity is from a synthetic intent.
   */
  export interface Schema$SearchPolicyRankableSensitivitySyntheticIntent {}
  /**
   * Represents a principal who has authenticated as any kind of user which the application understands. This is typically used for "wiki-like" security, where anyone is allowed access so long as they can be held accountable for that access. Since the purpose is knowing whom to blame, it is up to the application to decide what kinds of users it knows how to blame. For example, an application might choose to include GAIA users in "all authenticated users", but not include MDB users. Nothing here.
   */
  export interface Schema$SecurityCredentialsAllAuthenticatedUsersProto {}
  /**
   * Represents a principal which possesses a particular secret string whose cryptographic hash is specified here. CapTokens ("Capability Tokens") are used in ACLProto. It's expected that ACLs with CapTokenHolders will strongly enforce them by Keystore-wrapping crypto keys for the corresponding CapTokens.
   */
  export interface Schema$SecurityCredentialsCapTokenHolderProto {
    /**
     * The hash of the corresponding capability token. The value is defined to be identical to the one in acl.proto's CapTokenMetadata: 10-byte prefix of HMAC-SHA1 of the token. The HMAC key is the following fixed (non-secret) 512-bit value: 79b1c8f4 82baf523 b8a9ab4a e960f438 c45be041 11f1f222 e8a3f64d aeb05e3d c3576acc ec649194 aede422c 4e48e0d1 ff21234a a6ed6b49 a7fa592e efd7bba3
     */
    tokenHmacSha1Prefix?: string | null;
  }
  /**
   * Represents the invitees or other users associated with a Babel Chat (see http://goto/babel). Corresponds to GroupType CHAT in //social/graph/storage/proto/data.proto.
   */
  export interface Schema$SecurityCredentialsChatProto {
    /**
     * Chat IDs consist of alphanumeric characters and colons. Currently required.
     */
    chatId?: string | null;
    /**
     * The type of Chat members to consider, e.g. "all members" vs. "invitee" These are defined by legacy_relation_id values in social.graph.storage.EdgeTypeEnum.EdgeType enum options in social/graph/storage/proto/id.proto. See chat.pb (defined in production/config/cdd/socialgraph/mixer_config/prod/node_type_config) for all valid edge types associated with chat. Currently required.
     */
    memberType?: number | null;
  }
  /**
   * Represents a Google+ Circle. Currently (12/2011), a Circle is identical to the ContactGroup with matching parameters, but Circle must only be used for true Circles and not other Focus groups, and should be preferred over ContactGroup where applicable. Soon it may become more efficient to check membership in a Circle than in a ContactGroup (see http://go/superglue). Support for this principal type is currently (12/2011) incomplete -- e.g., Keystore does not support it yet (see b/5703421).
   */
  export interface Schema$SecurityCredentialsCircleProto {
    /**
     * Circle ID is unique only relative to the owner's Gaia ID. Currently required.
     */
    circleId?: string | null;
    /**
     * The owner of the circle. Currently required.
     */
    ownerGaiaId?: string | null;
    /**
     * If present, then tests for membership in this circle must use data known to be at least as fresh as the given (FBS-assigned) timestamp. See http://go/fbs-consistent-read-after-important-write Before using this, be sure that any service checking authorization against this circle supports checking consistency timestamps. For example, as of 12/2011, Keystore only supports this for the Moonshine configuration, and in others authorization checks will fail if the timestamp is present.
     */
    requiredConsistencyTimestampUsec?: string | null;
  }
  /**
   * Principal associated with a Cloud Principal representing third party user.
   */
  export interface Schema$SecurityCredentialsCloudPrincipalProto {
    /**
     * Format: "{identity-pool\}:{subject\}#" Details: go/cloud-principal-identifiers
     */
    id?: string | null;
  }
  /**
   * A group of contacts for a given user, as described in http://cs/p#google3/focus/backend/proto/backend.proto Historically (and in still-existing ACLs), this was used to represent Google+ circles as well as contact groups, but this use is now deprecated. New code should use the CIRCLE principal type to represent Google+ circles.
   */
  export interface Schema$SecurityCredentialsContactGroupProto {
    /**
     * Group ID is unique only relative to the owner's Gaia ID.
     */
    groupId?: string | null;
    ownerGaiaId?: string | null;
    /**
     * If present, then tests for membership in this ContactGroup must use data known to be at least as fresh as the given (FBS-assigned) timestamp. See http://go/fbs-consistent-read-after-important-write Before using this, be sure that any service checking authorization against this group supports checking consistency timestamps. For example, as of 12/2011, Keystore only supports this for the Moonshine configuration, and in others authorization checks will fail if the timestamp is present.
     */
    requiredConsistencyTimestampUsec?: string | null;
  }
  /**
   * Represents a verified owner of the given email address. Note that a single address may have many owners, and a single user may own many addresses. (All lower-case, in display form -- see com.google.gaia.client.GaiaEmail)
   */
  export interface Schema$SecurityCredentialsEmailOwnerProto {
    email?: string | null;
  }
  /**
   * Represents the invitees or other users associated with a Google+ Event (see http://goto/events-backend-design).
   */
  export interface Schema$SecurityCredentialsEventProto {
    /**
     * Event IDs consist of alphanumeric characters and colons. Currently required.
     */
    eventId?: string | null;
    /**
     * The type of Event members to consider, e.g. "all members" vs. "owners" vs. "admins". These are defined by legacy_relation_id values in social.graph.storage.EdgeTypeEnum.EdgeType enum options in social/graph/storage/proto/id.proto. See event.pb (defined in production/config/cdd/socialgraph/mixer_config/prod/node_type_config) for all valid edge types associated with event. Currently required.
     */
    memberType?: number | null;
  }
  export interface Schema$SecurityCredentialsGaiaGroupProto {
    groupId?: string | null;
  }
  /**
   * A Gaia account, which may represent a user, device, service account, etc. For prod (@prod.google.com) accounts, use MdbUserProto instead.
   */
  export interface Schema$SecurityCredentialsGaiaUserProto {
    userId?: string | null;
  }
  /**
   * Represents a single host. Optionally, the MDB owner of the host can be specified.
   */
  export interface Schema$SecurityCredentialsHostProto {
    /**
     * Lower-case, fully qualified hostname.
     */
    hostName?: string | null;
    /**
     * If present, then any checks that compare this Principal to LOAS peer info must confirm the peer's machine owner is equal to 'host_owner'. If absent, then any peer machine owner is acceptable.
     */
    hostOwner?: string | null;
  }
  export interface Schema$SecurityCredentialsLdapGroupProto {
    groupName?: string | null;
  }
  export interface Schema$SecurityCredentialsLdapUserProto {
    userName?: string | null;
  }
  /**
   * An entity from the MDB namespace that is to be interpreted as a group. If using this for authorization, you should do an exact match of the peer role against group_name or any of the names in the Chubby expansion of the MDB group named group_name.
   */
  export interface Schema$SecurityCredentialsMdbGroupProto {
    groupName?: string | null;
  }
  /**
   * An entity from the MDB namespace that is to be interpreted as a user. If using this for authorization, you should only do an exact match on the peer role against user_name.
   */
  export interface Schema$SecurityCredentialsMdbUserProto {
    /**
     * Do not set this field. Contact credentials-eng@ if you believe you absolutely need to use it. This is the @prod.google.com Gaia ID that corresponds to the MDB user, see go/authn-merge for details. This field may always be safely ignored when performing an authorization check.
     */
    gaiaId?: string | null;
    userName?: string | null;
  }
  /**
   * Represents an OAuth consumer, a/k/a AuthSub target. These principals are identified by domain name (e.g., example.com). Historically, Dasher domain GAIA group IDs have been used instead, but that doesn't work: http://go/tricky-gaia-ids
   */
  export interface Schema$SecurityCredentialsOAuthConsumerProto {
    domain?: string | null;
  }
  /**
   * See http://s/?fileprint=//depot/google3/security/authentication/postini/auth_token.proto
   */
  export interface Schema$SecurityCredentialsPostiniUserProto {
    postiniUserId?: string | null;
  }
  /**
   * A Principal represents something to which permissions are assigned, often but not always a user or group of some kind. It is most appropriate for use in ACLs and authorization checks. Callers should prefer to use the wrapper classes in google3/security/credentials/public/principal.h google3/java/com/google/security/credentials/Principal.java google3/security/credentials/go/principal.go unless direct proto access is essential. If you update this protocol buffer, please update the wrapper classes as well. LINT.IfChange
   */
  export interface Schema$SecurityCredentialsPrincipalProto {
    /**
     * scope = ALL_AUTHENTICATED_USERS
     */
    allAuthenticatedUsers?: Schema$SecurityCredentialsAllAuthenticatedUsersProto;
    /**
     * scope = CAP_TOKEN_HOLDER
     */
    capTokenHolder?: Schema$SecurityCredentialsCapTokenHolderProto;
    /**
     * scope = CHAT
     */
    chat?: Schema$SecurityCredentialsChatProto;
    /**
     * scope = CIRCLE
     */
    circle?: Schema$SecurityCredentialsCircleProto;
    /**
     * scope = CLOUD_PRINCIPAL
     */
    cloudPrincipal?: Schema$SecurityCredentialsCloudPrincipalProto;
    /**
     * scope = CONTACT_GROUP
     */
    contactGroup?: Schema$SecurityCredentialsContactGroupProto;
    /**
     * scope = EMAIL_OWNER
     */
    emailOwner?: Schema$SecurityCredentialsEmailOwnerProto;
    /**
     * scope = EVENT
     */
    event?: Schema$SecurityCredentialsEventProto;
    /**
     * scope = GAIA_GROUP
     */
    gaiaGroup?: Schema$SecurityCredentialsGaiaGroupProto;
    /**
     * scope = GAIA_USER
     */
    gaiaUser?: Schema$SecurityCredentialsGaiaUserProto;
    /**
     * scope = HOST
     */
    host?: Schema$SecurityCredentialsHostProto;
    /**
     * scope = LDAP_GROUP
     */
    ldapGroup?: Schema$SecurityCredentialsLdapGroupProto;
    /**
     * scope = LDAP_USER
     */
    ldapUser?: Schema$SecurityCredentialsLdapUserProto;
    /**
     * scope = MDB_GROUP
     */
    mdbGroup?: Schema$SecurityCredentialsMdbGroupProto;
    /**
     * scope = MDB_USER
     */
    mdbUser?: Schema$SecurityCredentialsMdbUserProto;
    /**
     * scope = OAUTH_CONSUMER;
     */
    oauthConsumer?: Schema$SecurityCredentialsOAuthConsumerProto;
    /**
     * scope = POSTINI_USER
     */
    postiniUser?: Schema$SecurityCredentialsPostiniUserProto;
    /**
     * scope = RBAC_ROLE
     */
    rbacRole?: Schema$SecurityCredentialsRbacRoleProto;
    /**
     * scope = RBAC_SUBJECT
     */
    rbacSubject?: Schema$SecurityCredentialsRbacSubjectProto;
    /**
     * scope = RESOURCE_ROLE
     */
    resourceRole?: Schema$SecurityCredentialsResourceRoleProto;
    /**
     * This is only optional because required enums cannot be extended. Currently required.
     */
    scope?: string | null;
    /**
     * scope = SIGNING_KEY_POSSESSOR
     */
    signingKeyPossessor?: Schema$SecurityCredentialsSigningKeyPossessorProto;
    /**
     * scope = SIMPLE_SECRET_HOLDER
     */
    simpleSecretHolder?: Schema$SecurityCredentialsSimpleSecretHolderProto;
    /**
     * scope = SOCIAL_GRAPH_NODE
     */
    socialGraphNode?: Schema$SecurityCredentialsSocialGraphNodeProto;
    /**
     * scope = SQUARE
     */
    square?: Schema$SecurityCredentialsSquareProto;
    /**
     * scope = YOUTUBE_USER
     */
    youtubeUser?: Schema$SecurityCredentialsYoutubeUserProto;
    /**
     * scope = ZWIEBACK_SESSION
     */
    zwiebackSession?: Schema$SecurityCredentialsZwiebackSessionProto;
  }
  /**
   * Principal associated with a given RBAC role. This principal is used by Sphinx Provisioning Service for RBAC provisionable (go/sphinx-rbacz).
   */
  export interface Schema$SecurityCredentialsRbacRoleProto {
    name?: string | null;
    objectId?: string | null;
    /**
     * DEPRECATED as of 01.11.2019
     */
    rbacNamespace?: string | null;
    /**
     * Format: "role/z?" - "role" is the Sphinx globally unique name of the Sphinx role that provisions the RBAC role. - "/z?" suffix indicates which Zanzibar environment stores the role membership data ("/zd": dev, "/zs": staging, "/zp": prod, "/zt": local test instance). Example: "mysystem_myrole/zp"
     */
    rbacRoleName?: string | null;
  }
  /**
   * Principal associated with a given RBAC subject. This principal is used by Sphinx Provisioning Service for RBAC provisionable (go/sphinx-rbacz).
   */
  export interface Schema$SecurityCredentialsRbacSubjectProto {
    /**
     * Format "username" without "@domain", e.g., "bogdand".
     */
    username?: string | null;
  }
  /**
   * A type of sharing target that points to some resource's ACL. Used to refer to the set of Principals that have the given privilege ('role_id') for the given resource ('application_id', 'object_id', 'object_part'). The meaning of 'role_id' is interpreted only by implementations of AclRpcService and is usually dependent on 'application_id' All fields except object_part are required. If present, object_part must be non-empty.
   */
  export interface Schema$SecurityCredentialsResourceRoleProto {
    applicationId?: string | null;
    objectId?: string | null;
    objectPart?: string | null;
    roleId?: number | null;
  }
  /**
   * Represents a principal who possesses a signing key corresponding to the verification key or keyset described here.
   */
  export interface Schema$SecurityCredentialsSigningKeyPossessorProto {
    /**
     * This value must be from the KeyMetadata.Type enum in keymaster.proto.
     */
    keymasterKeyType?: number | null;
    /**
     * The actual verification key bytes corresponding to the above type.
     */
    serializedVerificationKey?: string | null;
    /**
     * The binary serialized Keymaster SerializedReader of a public keyset. The keyset must contain exactly one key. N.B.: If this field is populated, serialized_verification_key should be set to the empty string and keymaster_key_type should be set to zero.
     */
    serializedVerificationKeyset?: string | null;
  }
  /**
   * Represents a principal which possesses a particular, presumably secret, string. Useful for things like "auth keys," used for anonymous sharing. Since representing this principal with the actual secret included reveals the secret, it's best if the requisite condition is enforced in some other way, for example via Keystore wrapping attributes (Keystore will unwrap only if the specified secret, aka "attribute", is presented). All that's stored here is an identifying label.
   */
  export interface Schema$SecurityCredentialsSimpleSecretHolderProto {
    /**
     * A descriptive label to help identify a relevant ACL entry or otherwise disambiguate this instance.
     */
    label?: Schema$SecurityCredentialsSimpleSecretLabelProto;
  }
  /**
   * SimpleSecretProto (in authenticator.proto) and SimpleSecretHolderProto (below) share the notion of a "label", which identifies a particular secret without (hopefully) revealing the secret. Note that a SimpleSecretLabel only disambiguates between secrets used to get access to some particular object. Two different secrets that apply to two different objects could have the same label. For example, in the common sharing model, each object has no more than one "auth key". Therefore, the label for an auth key simply has type = AUTH_KEY with no additional information. In theory, we could add some sort of resource ID to SimpleSecretLabel to make it more explicit. However, in practice, this is never really needed. A SimpleSecret for one object is never used to authorize a request on some other object, so there is no ambiguity. Also, since SimpleSecrets must obviously be unguessable, there is no risk that a SimpleSecret intended for one object will accidentally grant access to another.
   */
  export interface Schema$SecurityCredentialsSimpleSecretLabelProto {
    /**
     * ***DEPRECATED (3-Oct-2011) *** This field should be deleted when code stops using CAP_TOKEN labels. Used when type = CAP_TOKEN. When a CAP_TOKEN label appears in a SimpleSecretHolder Principal, |capability_id| must be filled in to identify one of the capabilities on the ACL. When a CAP_TOKEN label appears in a SimpleSecret Authenticator, it is NOT necessary to fill in |capability_id| -- ACL Service will find the ID by searching all capabilities on the ACL for one associated with the token given by the SimpleSecret's secret data. If |capability_id| is specified, though, then the Authenticator will only be accepted if it actually matches that particular token ID.
     */
    capabilityId?: number | null;
    /**
     * Used when type = GENERIC_SECRET
     */
    genericLabel?: string | null;
    /**
     * Used when type == INVITE.
     */
    inviteId?: string | null;
    /**
     * This is optional because required enums cannot be extended.
     */
    type?: string | null;
  }
  /**
   * Represents a user pseudonym. Pseudonyms are linked accounts on Google and third-party services (e.g. YouTube or Twitter) and are described by a Social Graph Node.
   */
  export interface Schema$SecurityCredentialsSocialGraphNodeProto {
    /**
     * The fields from ccc/socialgraph/socialgraphnode.proto:SgnNode that uniquely identify a social graph node. The 'ident' field is not included here because its value can be changed.
     */
    sgnDomain?: string | null;
    sgnPk?: string | null;
  }
  /**
   * Represents the set of members (of a given type) in a Google+ Square (see http://go/squares). A Square with default member_type is currently (1/2012) identical to the GaiaGroup with the same ID, but that is expected to change soon (see http://go/superglue). Support for this principal type is currently (1/2012) incomplete -- e.g., Keystore does not support it yet (see b/5703421).
   */
  export interface Schema$SecurityCredentialsSquareProto {
    /**
     * The type of Square members to consider, e.g. "all members" vs. "owners" vs. "admins". These are defined by legacy_relation_id values in social.graph.storage.EdgeTypeEnum.EdgeType enum options in social/graph/storage/proto/id.proto. See square.pb (defined in production/config/cdd/socialgraph/mixer_config/prod/node_type_config) for all valid edge types associated with square. Currently required.
     */
    memberType?: number | null;
    /**
     * Currently required.
     */
    squareId?: string | null;
  }
  export interface Schema$SecurityCredentialsYoutubeUserProto {
    youtubeUserId?: string | null;
  }
  /**
   * See go/zwieback. New uses of Zwieback sessions must be approved via go/zwieback-request.
   */
  export interface Schema$SecurityCredentialsZwiebackSessionProto {
    zwiebackSessionId?: string | null;
  }
  /**
   * Sentence boundaries.
   */
  export interface Schema$SentenceBoundaryAnnotations {
    /**
     * Used for application-specific information about the whole set of SentenceBoundaryAnnotations. Example: SAFT Team uses this to store an nlp_saft.Document proto giving any processing errors encountered.
     */
    info?: Schema$Proto2BridgeMessageSet;
    instance?: Schema$SentenceBoundaryAnnotationsInstance[];
  }
  export interface Schema$SentenceBoundaryAnnotationsInstance {
    begin?: number | null;
    /**
     * A clean version of .text() generated by using CleanText() and stripping unnecessary whitespace.
     */
    cleanText?: string | null;
    /**
     * Plain text context from the page within which the annotation occurred.
     */
    context?: string | null;
    /**
     * Byte offsets for the clean text context above.
     */
    contextBegin?: number | null;
    contextEnd?: number | null;
    end?: number | null;
    /**
     * Used for application-specific information about this annotation.
     */
    info?: Schema$Proto2BridgeMessageSet;
    /**
     * Original UTF-8 document text occurring in the range [begin, end).
     */
    text?: string | null;
    /**
     * Used to mark the annotations selected to be indexed.
     */
    toIndex?: boolean | null;
  }
  /**
   * This proto contains the sentiment and emotions that the user is exhibiting at the time of the query. NEXT ID: 4
   */
  export interface Schema$SentimentSentiment {
    /**
     * Polarity represents the sentiment towards the subject.
     */
    polarity?: string | null;
    userBehaviors?: Schema$SentimentSentimentBehaviors;
    /**
     * The emotions that the user is feeling.
     */
    userEmotions?: Schema$SentimentSentimentEmotions;
  }
  /**
   * The set of behavior signals that the user is expressing/demonstrating that is detected by the sentiment analysis. These signals are used to help assistant determine the proper response behavior. NEXT ID = 2
   */
  export interface Schema$SentimentSentimentBehaviors {
    /**
     * The degree to which the user is showing politeness.
     */
    politeness?: number | null;
  }
  /**
   * Basic emotions. NEXT ID: 7
   */
  export interface Schema$SentimentSentimentEmotions {
    anger?: number | null;
    disgust?: number | null;
    fear?: number | null;
    happiness?: number | null;
    sadness?: number | null;
    surprise?: number | null;
  }
  /**
   * This message represents shingle-related information obtained from a document.
   */
  export interface Schema$ShingleInfoPerDocData {
    /**
     * Total number of shingles in the document.
     */
    numShingles?: number | null;
    /**
     * A list of all sources.
     */
    source?: Schema$ShingleSource[];
  }
  /**
   * This message represents a source of shingles. Used by ShingleInfoPerDocData.
   */
  export interface Schema$ShingleSource {
    /**
     * Hash-value of the URL.
     */
    id?: number | null;
    /**
     * Number of shingles originating from this source.
     */
    numShingles?: number | null;
    /**
     * First-seen timestamp of the source.
     */
    timestamp?: number | null;
  }
  /**
   * Images inferred from context instead of propagated from Shopping backends. The same image might be inferred via different means; then it may appear multiple times in Offer.inferred_images list with different values of inferred_image_type field.
   */
  export interface Schema$ShoppingWebentityShoppingAnnotationInferredImage {
    inferredImageId?: string | null;
    inferredImageSource?: string | null;
    inferredImageType?: string | null;
    /**
     * This field will only be populated if the inferred image is a neardup of an inferred image. It stores the type and source of the images it is a neardup of.
     */
    neardupInfo?: Schema$ShoppingWebentityShoppingAnnotationInferredImageNeardupInfo[];
  }
  export interface Schema$ShoppingWebentityShoppingAnnotationInferredImageNeardupInfo {
    inferredImageSource?: string | null;
    inferredImageType?: string | null;
  }
  export interface Schema$ShoppingWebentityShoppingAnnotationOfferAvailabilityInfo {
    availability?: string | null;
  }
  /**
   * Images from the product-level representation (i.e. GPC). These images are currently only annotated 1) when no offers are available 2) on the product level
   */
  export interface Schema$ShoppingWebentityShoppingAnnotationProductImage {
    imageDocid?: string | null;
    productImageType?: string | null;
  }
  /**
   * Information about a rating provided for a product. This can represent an aggregated rating if count is set. Next Id: 7
   */
  export interface Schema$ShoppingWebentityShoppingAnnotationProductRating {
    /**
     * Number of ratings/reviews aggregated to create this product rating. If there are no ratings yet, this field will be explicitly set to zero, so whether this field is set should be checked using has_count.
     */
    count?: string | null;
    maxValueMillis?: string | null;
    /**
     * The lower and upper bounds of the rating values that could be submitted for the product. (Note that it is not the min/max ratings submitted for the product, it is the min/max that can hypothetically be submitted.)
     */
    minValueMillis?: string | null;
    source?: string | null;
    /**
     * The value of this rating normalized between 0 and 5. This will not be set if count is set to 0.
     */
    value?: number | null;
    /**
     * The non-normalized aggregated value of the ratings for this product.
     */
    valueMillis?: string | null;
  }
  /**
   * Versioning Information used for Logging Purposes. See go/sori-logjoining.
   */
  export interface Schema$ShoppingWebentityShoppingAnnotationSoriVersionId {
    f1CommitTimestampMicros?: string | null;
    opaqueSoriId?: Schema$AdsShoppingReportingOffersSerializedSoriId;
  }
  /**
   * Note: If you are going to populate any new field in this proto, you probably need to go through the go/dj-new-field and go/index-changes process.
   */
  export interface Schema$Sitemap {
    /**
     * DEPRECATED DEPRECATED DEPRECATED In case you didn't realize, these fields are (and have been for some time) deprecated. We'll stop pushing their data to production soon (probably Feb/09) and after a few weeks we'll probably remove them.
     */
    DEPRECATEDSourceTitle?: string | null;
    deprecatedTarget?: Schema$SitemapDEPRECATED_Target[];
    /**
     * This field is populated in the Sitemap MDU subpopulator from cdoc data. This is used to store page anchors information for TopicTagsScrolltoFlow.
     */
    pageAnchorsDocInfo?: Schema$SdrPageAnchorsDocInfo;
    /**
     * Enable site search.
     */
    searchInSite?: boolean | null;
    sitemapType?: string | null;
    /**
     * prevents cross-domain forwarding
     */
    sourceOrgfp?: string | null;
    sourceUrl?: string | null;
    /**
     * This field is populated in the Sitemap MDU subpopulator from cdoc data. It's not set in the cdoc Sitemap.
     */
    subresultList?: Schema$QualitySitemapSubresultList;
    /**
     * One Sitemap can contain multiple TargetGroups, but only one of them will be displayed to the user - this decision will be made at displaying time and can take into account various factors, such as the users' language and country, currently running experiments, etc.
     */
    TargetGroups?: Schema$QualitySitemapTargetGroup[];
  }
  export interface Schema$SitemapDEPRECATED_Target {
    DEPRECATEDAnchor?: string | null;
    DEPRECATEDRunningAnchor?: boolean | null;
    DEPRECATEDTitle?: string | null;
    displaytitle?: string | null;
    /**
     * optional, exclude to save space
     */
    score?: number | null;
    url?: string | null;
  }
  /**
   * This message is used for storing smartphone related information. Note: MobilePerDocData is a similar message, but it's for lowend mobile.
   */
  export interface Schema$SmartphonePerDocData {
    /**
     * Indicates if the page is violating mobile ads density interstitial policy and the violation strength. See go/interstitials-for-ads and http://ariane/268642 for details. To save indexing space, we convert the double values in [0.0, 1.0] to intergers in range [0, 1000] by using floor(value * 1000).
     */
    adsDensityInterstitialViolationStrength?: number | null;
    /**
     * If set, this page is a smartphone dup, a page serving equivalent contents as another URL (desktop canonical), but in smartphone-optimized style. This field holds the docid of the desktop canonical.
     */
    DEPRECATEDDesktopCanonicalDocid?: string | null;
    /**
     * Mobile URL for homepages, predicted by the URL rewrite rules. See go/mobile-homepage-prediction.
     */
    DEPRECATEDMobileHomepageDocid?: string | null;
    /**
     * Indicates if the page serves error to smartphone crawler. go/ramsey-sp404demotion
     */
    isErrorPage?: boolean | null;
    /**
     * Indicates if the page has mobile N-1 redirection. go/ramsey-n1demotion
     */
    isN1Redirect?: boolean | null;
    /**
     * Indicates if the page is rendered in a friendly manner on smartphones. We use this field as tri-state: "unset" means the rendering result classification is not available, and "set as false" means that the page is rendered in unfriendly manner on smartphones. See also go/modena-ranking.
     */
    isSmartphoneOptimized?: boolean | null;
    /**
     * Indicates if the current URL serves error page to desktop crawler and non error page to smartphone crawler.
     */
    isWebErrorMobileContent?: boolean | null;
    /**
     * The ratio of the area of the largest Flash to the render area.
     */
    maximumFlashRatio?: number | null;
    /**
     * Indicates if the page is violating mobile interstitial policy and should be demoted. See go/interstitials-ranking-dd for details.
     */
    violatesMobileInterstitialPolicy?: boolean | null;
  }
  /**
   * For legacy purposes, cdocs contain a repeated list of *Entry, whereas it's more convenient elsewhere to contain this information within its own protocol buffer.
   */
  export interface Schema$SmearedWebLandingPageEntry {
    /**
     * Source imagesearch docid
     */
    imagesearchDocid?: string | null;
    /**
     * Docid of web landing page
     */
    webDocid?: string | null;
  }
  /**
   * A simple 2D box represented by an (x, y) co-ordinate, width and height. Copied from htmlrender_webkit_headless_proto.Document to avoid additional dependency.
   */
  export interface Schema$SnapshotBox {
    height?: number | null;
    width?: number | null;
    x?: number | null;
    y?: number | null;
  }
  export interface Schema$SnapshotImageNode {
    boundingBox?: Schema$SnapshotBox;
    /**
     * An image is considered external iff both: 1. The image appears in a link that is not in the same org as the document, or the target URL is in a different org. 2. The image src is not in the same org as the document.
     */
    isExternal?: boolean | null;
    /**
     * The absolute url of the image as present in the page.
     */
    url?: string | null;
  }
  export interface Schema$SnapshotSnapshotDocument {
    imageNode?: Schema$SnapshotImageNode[];
    metaNoPreview?: boolean | null;
    /**
     * These are set from tags in the web page:
     */
    metaNoSnippet?: boolean | null;
    /**
     * If this is present it supercedes all the above data.
     */
    teradoc?: Schema$TeragoogleDocumentInfo;
    textNode?: Schema$SnapshotTextNode[];
    title?: string | null;
  }
  export interface Schema$SnapshotSnapshotMetadata {
    /**
     * The number of distinct resources fetched to render the content. This may aid the calculation of total page load time for user experience. For example, if total_content_length is only a few dozen kilobytes, but that is from fetching 100 distinct resources, total page load time might be much higher than the total_content_length would otherwise infer.
     */
    countDistinctResources?: number | null;
    /**
     * The time at which the main resource of the Snapshot was fetched, in seconds since epoch. Note that the various page dependencies may have been fetched at much earlier points in time (hours, maybe days) and that this could be off from the actual rendering time.
     */
    crawlTimestamp?: string | null;
    snapshotDocument?: Schema$SnapshotSnapshotDocument;
    /**
     * The score here corresponds to the score in Snapshot, a number between 0.0 and 1.0 (higher the better).
     */
    snapshotQualityScore?: number | null;
    /**
     * Number of bytes fetched to render the content. For example, to render a web page, this value would include the HTML, stylesheets, images, and all other dependencies. This can be used to calculate a coarse estimate of the total page load time a user might experience.
     */
    totalContentSize?: string | null;
  }
  /**
   * The SnapshotDocument contains a list of TextNode's. Each node contains a string of text of the webpage, its bounding box in the agove snapshot image, and its font size (in number of pixels in the snapshot, which could be a fraction number since the snapshot image is typically shrinked). This list of text nodes are extracted from the output from the rendering service: htmlrender_webkit_headless_proto.Document The extraction is done by TrimDocument defined in ./shared/doctrimmer.cc
   */
  export interface Schema$SnapshotTextNode {
    boundingBox?: Schema$SnapshotBox;
    fontSize?: number | null;
    /**
     * One if the current text node is within a link; otherwise zero/not present.
     */
    inLink?: number | null;
    /**
     * A value in the range [0,7] (zero if not present) indicating the most "powerful" splitting tag since the last text node. See "enum Category" in mustang/snippets/taginfo.h.
     */
    maxSplit?: number | null;
    text?: string | null;
  }
  export interface Schema$SnippetExtraInfo {
    /**
     * Candidates are ordered by their id.
     */
    candidateInfo?: Schema$SnippetExtraInfoSnippetCandidateInfo[];
    /**
     * Indicates that the snippet candidates all contain uesr quotes.
     */
    containUserQuotes?: boolean | null;
    /**
     * Indicates if there are any vulgar snippet candidates.
     */
    containVulgarCandidates?: boolean | null;
    /**
     * Indicates that SR side should disable the ng3 scoring and soly rely on the SnippetBrain scoring for selecting the final candidate. E.g. this can happen when the offline snippet generation routine is triggered.
     */
    disableNg3Scoring?: boolean | null;
    /**
     * Indicates whether the query relevance features is disabled or not in Muppet scoring.
     */
    disableQueryFeatures?: boolean | null;
    /**
     * Snippet candidate index selected by snippet brain model. This field will get populated in SnippetFlow in superroot. go/snippets-brain
     */
    snippetBrainSelectedCandidateIndex?: number | null;
    /**
     * SnippetsBrain model information for snippets popup debug.
     */
    snippetsbrainModelInfo?: Schema$SnippetExtraInfoSnippetsBrainModelInfo;
  }
  /**
   * Next ID: 15
   */
  export interface Schema$SnippetExtraInfoSnippetCandidateInfo {
    /**
     * Bolded ranges in the printed snippet lines.
     */
    boldedRanges?: Schema$QualitySnippetsTruncationSnippetBoldedRange[];
    extendedSnippet?: Schema$SnippetExtraInfoSnippetCandidateInfoExtendedSnippet;
    /**
     * Candidate identifier number, unique among all snippet candidates under each document in each request. What does this number mean: - Muppet candidates: This equals to the candidate's rank by Muppet snippets scorer. - Superroot candidates: No specific meaning, this number should be larger than that of Muppet candidates. This field is used to: - Verify whether snippet brain chooses a different snippet from Muppet (the one chosen by Muppet is always in id 0). - Print debugging information and sort candidates in debug output.
     */
    id?: number | null;
    /**
     * If this snippet is chosen by Muppet.
     */
    isMuppetSelectedSnippet?: boolean | null;
    /**
     * If SnippetsBrain bolding model triggered and a bolding span is generated.
     */
    isSnippetBrainBoldingTriggered?: boolean | null;
    /**
     * List information for this candidate, only populated for RADISH_LIST snippets.
     */
    listInfo?: Schema$MustangReposWwwSnippetsOrganicListSnippetResponse;
    scoringInfo?: Schema$SnippetExtraInfoSnippetScoringInfo;
    /**
     * Sentence starting positions in the printed snippet lines.
     */
    sentenceStarts?: Schema$QualitySnippetsTruncationSnippetBoldedRangePosition[];
    /**
     * Muppet fills snippet lines in `snippet` field.
     */
    snippet?: string[] | null;
    /**
     * `snippet_text` will be filled by snippet brain flow in SR for model scoring and debugging purpose.
     */
    snippetText?: string | null;
    snippetType?: string | null;
  }
  /**
   * The extended version of this snippet.
   */
  export interface Schema$SnippetExtraInfoSnippetCandidateInfoExtendedSnippet {
    numChars?: number | null;
    snippetText?: string | null;
  }
  /**
   * Log model name, partition and input processor used to generate SnippetsBrain scores, if SnippetsBrain debugging is enabled.
   */
  export interface Schema$SnippetExtraInfoSnippetsBrainModelInfo {
    ng3ModelName?: string | null;
    /**
     * The below fields are populated by SnippetFlow in superroot.
     */
    snippetsbrainModelName?: string | null;
    snippetsbrainModelPartition?: string | null;
    snippetsbrainTokenizerType?: string | null;
  }
  /**
   * Next ID: 9
   */
  export interface Schema$SnippetExtraInfoSnippetScoringInfo {
    brainNg3Score?: number | null;
    /**
     * The below fields are populated by SnippetFlow in superroot. Score generated from snippet brain model. go/snippets-brain
     */
    brainScore?: number | null;
    /**
     * Snippets ranklab features generated by scorer V2.
     */
    features?: Schema$QualityPreviewRanklabSnippet;
    /**
     * Final snippet score by chooser.
     */
    finalScore?: number | null;
    /**
     * Final rank given by SnippetFlow.
     */
    rankBySnippetFlow?: number | null;
  }
  /**
   * Leading text which may consist of multiple pieces.
   */
  export interface Schema$SnippetsLeadingtextLeadingTextAnnotation {
    piece?: Schema$SnippetsLeadingtextLeadingTextAnnotationPiece[];
    pieceType?: string | null;
    /**
     * Type of this leading text. Should be an enum of LeadingTextInfo.LeadingTextType
     */
    type?: number | null;
  }
  export interface Schema$SnippetsLeadingtextLeadingTextAnnotationPiece {
    /**
     * A piece of leading text is text within [begin, end). For example, a document is "ABCDEF". If we want to set leading text as 'CD', the value of begin is byte offset of 'C', the value of end is byte offset of 'E'. end == -1 means to the end of document.
     */
    begin?: number | null;
    /**
     * UTF8 text, for alignment when using reusableinfo. Those text are not available in docjoins.
     */
    beginText?: string | null;
    end?: number | null;
    endText?: string | null;
    /**
     * Matched dom path string for debugging.
     */
    matchedPattern?: string | null;
  }
  export interface Schema$SnippetsLeadingtextLeadingTextInfo {
    /**
     * Leading text start position, byte offset of page content. The offset is got in ParseMaster. So it is the offset after the content is converted to UTF8.
     */
    beginPos?: number | null;
    /**
     * Note: You can also use it to save multiple leading text candidates.
     */
    leadingtext?: Schema$SnippetsLeadingtextLeadingTextAnnotation[];
    /**
     * UTF8 text, for alignment when using reusableinfo. The text is not available in docjoins.
     */
    text?: string | null;
    /**
     * Type of leading text which is optimized for this type of document.
     */
    type?: string | null;
  }
  /**
   * An Attachment represents a linked entity associated with a piece of social content. This may be a 1st-party or 3rd-party entity. In the Papyrus context, an Attachment is part of a Cent, and sits alongside the main content of the cent, which is represented as a sequence of Segments. Right now an Attachment is just a wrapper around an Embed, but we provide the extra layer of abstraction since, as Embeds move to separate storage in Briefcase, we may want to add additional fields that are not part of the Embed proper, but that (for example) relate to the usage of the linked content within the particular post/cent.
   */
  export interface Schema$SocialCommonAttachmentAttachment {
    /**
     * An embed represents an external entity. See go/es-embeds.
     */
    embedItem?: Schema$EmbedsEmbedClientItem;
    /**
     * An id to uniquely identify an attachment when several attachments are in a collection.
     */
    id?: string | null;
  }
  /**
   * Formatting information for a segment.
   */
  export interface Schema$SocialCommonFormatting {
    bold?: boolean | null;
    /**
     * This indicates that the segment should be rendered as highlighted or visually emphasized.
     */
    highlight?: boolean | null;
    italics?: boolean | null;
    strikethrough?: boolean | null;
    /**
     * If set, this indicates that the segment should be rendered with the specified style. The absence of an explicit style represents "no style", i.e. the segment can be rendered with the default style chosen by the application.
     */
    style?: string | null;
    underline?: boolean | null;
  }
  /**
   * Hashtag metadata, for HASHTAG segments. For a hashtag, the "text" field should contain the display text, and the search_text field should represent the topic being referenced, without the hash symbol; for example, we might have: text = "#Google" hashtag_data.search_text = "Google" Another example: text = "#pikachu" hashtag_data.search_text = "Pokemon" Both strings should be considered part of the searchable text. In go/sbe, both are indexed and searchable.
   */
  export interface Schema$SocialCommonHashtagData {
    searchText?: string | null;
  }
  /**
   * Link metadata, for LINK segments. Anchor text should be stored in the "text" field of the Segment, which can also serve as a fallback.
   */
  export interface Schema$SocialCommonLinkData {
    /**
     * An Attachment represents the structured entity to which we are linking. It contains an Embed (apps/tacotown/proto/embeds/embed_client.proto) with fields specific to the appropriate type of linked entity. For example, if we are linking to a photo album, the Embed may include the album ID and gaia ID of the creator. Clients that understand the Embed type within the Attachment may construct and/or decorate their link appropriately e.g. to make use of type-specific functionality or first-party integrations. The link_target and (if appropriate) display_url fields must still be set even when an Attachment is present, so that clients who do not know how to interpret the Attachment can fall back to those fields, and render the Segment as an ordinary web link. N.B. Even when an Attachment is present, the intention of a "LINK" Segment is for the Segment to be presented inline with the rest of the text of a post or comment, with a clickable link or other UI suitable for inlining (though the client may modify the UI based on Attachment data, e.g. to add appropriate hovers, icons, etc.). When an entity is intended to be rendered separately from the main body of the post/comment, a separate Attachment proto can be added outside the set of Segments. N.B. Within the Attachment, fields of EmbedClientItem have their own visibility annotations, which should be enforced separately from Segment visibility annotations. See: apps/tacotown/proto/embeds/embed_annotations.proto
     */
    attachment?: Schema$SocialCommonAttachmentAttachment;
    /**
     * The hint to use when rendering the associated attachment. Ignored if there is no associated attachment.
     */
    attachmentRenderHint?: string | null;
    /**
     * If we wish to show the user a different (e.g. shortened) version of the URL for display purposes, then that version should be set here. If this field isn't set, link_target will be used for both purposes.
     */
    displayUrl?: string | null;
    /**
     * link_target is the URL to navigate to when clicked. This could be the original URL, or a URL signed by the GWS URL signing service.
     */
    linkTarget?: string | null;
    /**
     * LinkType is an optional field that provides additional information regarding link target. For example, link type can be identified as the SELF_LINK when the request was executed from the same link as the link target.
     */
    linkType?: string | null;
    /**
     * Title is an optional field that provides a short string that describes the link or its destination. User interfaces often use title as a tooltip or for accessibility purposes. However, they are of course free to present this data in any form. This field is plain text.
     */
    title?: string | null;
  }
  /**
   * SearchLink metadata, for SEARCH_LINK segments. For a search link, the "text" field should contain the display text. This is currently not indexed.
   */
  export interface Schema$SocialCommonSearchLinkData {
    /**
     * For lightweight scoring in serving time.
     */
    kgEntityConfidence?: number | null;
    /**
     * MID of the KG entity being linked.
     */
    mid?: string | null;
    queryBroadnessScore?: number | null;
  }
  export interface Schema$SocialCommonSegment {
    /**
     * Formatting to be applied when rendering the Segment. For all segment types, this is the standard way of representing that the Segment should be rendered in bold, italics, etc.
     */
    formatting?: Schema$SocialCommonFormatting;
    /**
     * For HASHTAG type:
     */
    hashtagData?: Schema$SocialCommonHashtagData;
    /**
     * Type-specific metadata. At most one of these should be populated, and the one that is populated should correspond to the type of the Segment. For LINK type:
     */
    linkData?: Schema$SocialCommonLinkData;
    /**
     * For SEARCH_LINK type:
     */
    searchLinkData?: Schema$SocialCommonSearchLinkData;
    /**
     * Text content of the Segment. As a general rule, this field should contain the actual text that should be rendered in the UI. Thus, for a hashtag, it should be "#Foo", and for a link, it should be the display text. Clients that do not understand a particular segment type may use this text, along with the Formatting info below, as a fallback for display. The field is not required -- if all relevant information is carried in other metadata fields and there is no need for a fallback, or it is not practical for a fallback to be provided for any other reason, the field may be left blank. A standard example would be a user reference being transmitted between server layers, where a gaia-ID representation may be sufficient and there is no need for a textual fallback. In such a case, it would be valid and useful - though not required - for servers to compute and populate a fallback on the serving path.
     */
    text?: string | null;
    /**
     * Type of Segment.
     */
    type?: string | null;
    /**
     * For USER_MENTION type:
     */
    userMentionData?: Schema$SocialCommonUserMentionData;
  }
  /**
   * Segments (go/social-segments) represent structured social content, e.g. the contents of a G+ stream post or chat message. A single post or message may consist of a sequence of segments, each representing a type of content, e.g. plain text, hash tag, mention, etc. Segments correspond approximately to units of content delimited by HTML tags, so that a piece of bolded text would be a distinct Segment, a link would be a distinct Segment, and so forth. A single Segment may have multiple such qualifiers; e.g. it may be a bold link; in this case, information about all such qualifiers will be encoded in the Segment proto.
   */
  export interface Schema$SocialCommonSegments {
    segments?: Schema$SocialCommonSegment[];
  }
  /**
   * Person metadata, for USER_MENTION segments. Should always contain at least one of user_gaia_id, user_id, email or user. The exact set of populated fields may differ depending on the context and the level in the serving stack; for example, emails will be elided on the viewing path. But as a general rule, a proto having any one of the four is valid, subject to the standard constraints of the applied annotations -- that is, communication between servers and clients will ignore jspb.ignore fields, and communication between servers and other servers (or between servers and storage) will ignore client_only fields. For more on the annotations, see the comments in social/common/segment_annotations.proto
   */
  export interface Schema$SocialCommonUserMentionData {
    email?: string | null;
    /**
     * If the principal is backed by a gaia id, DO NOT use this field. Use user_gaia_id/user_id fields instead.
     */
    user?: Schema$SecurityCredentialsPrincipalProto;
    /**
     * An unobfuscated gaia ID:
     */
    userGaiaId?: string | null;
    /**
     * An obfuscated gaia ID:
     */
    userId?: string | null;
  }
  /**
   * An entity key with an obfuscated gaia id that can be used externally.
   */
  export interface Schema$SocialDiscoveryExternalEntityKey {
    email?: string | null;
    phone?: string | null;
    /**
     * Obfuscated GAIA id.
     */
    profileId?: string | null;
  }
  /**
   * Contains a mimetype supported by a third-party app together with additional ids and other data that the apps use to complete the action for the given mimetype. For example, an app_specific_endpoint_id that corresponds to a WhatsApp Profile. Full Design: go/3p-contact-upload LINT.IfChange
   */
  export interface Schema$SocialGraphApiAppContactData {
    /**
     * Set of column-name and value for the given mimetype. The semantic meaning of the column values is mime-type specific. For example they may contain app_specific_endpoint_ids for WhatsApp. This is uploaded from CP2 http://go/cp2-data1 through http://go/cp2-data14.
     */
    data?: Schema$SocialGraphApiDataColumn[];
    /**
     * The mimetype of the action defined by the third-party app.
     */
    mimetype?: string | null;
  }
  /**
   * LINT.IfChange
   */
  export interface Schema$SocialGraphApiDataColumn {
    /**
     * The name of the column in CP2 for raw_contact_data.
     */
    columnName?: string | null;
    /**
     * The value of the data inside column.
     */
    value?: string | null;
  }
  export interface Schema$SocialGraphApiProtoAndroidDeviceInfo {
    /**
     * This string will represent either the device make and model in the case of FSA2, or the device model in the case of FSA1.
     */
    id?: string | null;
  }
  export interface Schema$SocialGraphApiProtoBirthdayDecoration {
    birthdayDecorationVisibility?: string | null;
  }
  /**
   * The ContactEditContext message is a wrapper around the generic ContactMutationContext data to represent when and where a contact create was performed.
   */
  export interface Schema$SocialGraphApiProtoContactCreateContext {
    mutationContext?: Schema$SocialGraphApiProtoContactMutationContext;
  }
  /**
   * The ContactDeletionContext message is a wrapper around the generic ContactMutationContext data, and will include any needed delete specific data. NOTE: Before using this message please review go/people-api-contact-deletion-context
   */
  export interface Schema$SocialGraphApiProtoContactDeletionContext {
    /**
     * The general mutation context data
     */
    mutationContext?: Schema$SocialGraphApiProtoContactMutationContext;
  }
  /**
   * The ContactEditContext message is a wrapper around the generic ContactMutationContext data to represent when and where a contact edit was performed.
   */
  export interface Schema$SocialGraphApiProtoContactEditContext {
    mutationContext?: Schema$SocialGraphApiProtoContactMutationContext;
  }
  /**
   * This message is the generic mutation message which will encapsulate the fields which are shared between the create, update, and delete actions, including source of change, timestamp, and metadata messages passed in from the source for any source specific data (such as phone name/model from FSA).
   */
  export interface Schema$SocialGraphApiProtoContactMutationContext {
    /**
     * Android device info should always be set when using either ANDROID_FSA1 or ANDROID_FSA2 as the source of the delete.
     */
    androidDeviceInfo?: Schema$SocialGraphApiProtoAndroidDeviceInfo;
    /**
     * Host app info should always be set when using CONTACTS_COMPANION as the source.
     */
    hostAppInfo?: Schema$SocialGraphApiProtoHostAppInfo;
    /**
     * The source of a mutate should provide all needed information a user should know, and should be enough information for the front end to generate a proper human readable string to describe the mutate to the user.
     */
    source?: string | null;
    /**
     * Third party info should always be set when using THIRD_PARTY as the source.
     */
    thirdPartyInfo?: Schema$SocialGraphApiProtoThirdPartyInfo;
    /**
     * Timestamp representing when the contact was mutated. This should not be set on write, as it is the job of focus backend to determine this timestamp. This field will be populated on read with the data written by FBS.
     */
    timestamp?: string | null;
  }
  export interface Schema$SocialGraphApiProtoContactPromptSettings {
    /**
     * Indicates if any reminders are active for entire contact. This will affect both connection reminders and date reminders such as birthday reminders. This is required.
     */
    contactActiveState?: string | null;
  }
  /**
   * Contact state and related metadata. See go/fbs-contacts-trash.
   */
  export interface Schema$SocialGraphApiProtoContactState {
    /**
     * A trashed contact may have deletion context set, which indicates where and when the contact was trashed. Deletion context is cleared when the contact is untrashed.
     */
    deletionContext?: Schema$SocialGraphApiProtoContactDeletionContext;
    deletionState?: string | null;
  }
  /**
   * Pattern for a DAILY (or every N day) recurrence. Time of the day that the notification will occur is taken from the Prompt that owns this recurrence. Used in PeopleAPI layers + FBS/ContactsService (not in ProfileService)
   */
  export interface Schema$SocialGraphApiProtoDailyRecurrence {}
  /**
   * Settings that control how a SIBS decoration overlay is displayed.
   */
  export interface Schema$SocialGraphApiProtoDecorationOverlay {
    /**
     * Settings that describe how the decoration should be overlaid on the photo.
     */
    overlay?: Schema$SocialGraphApiProtoPhotoOverlay;
    /**
     * SIBS ID of the decoration that is overlaid on the photo.
     */
    sibsId?: string | null;
  }
  /**
   * Represents a delegated group id, delegated groups refer to groups that are owned by another gaiaId, but this user has access to.
   */
  export interface Schema$SocialGraphApiProtoDelegatedGroupId {
    /**
     * Required. The id for a delegated group.
     */
    id?: string | null;
  }
  export interface Schema$SocialGraphApiProtoDisplayNameSource {
    source?: string | null;
  }
  export interface Schema$SocialGraphApiProtoHostAppInfo {
    /**
     * This string will represent the info for the host app to the Companion sidebar
     */
    hostAppName?: string | null;
  }
  /**
   * A reference to a photo in either Photos Backend or SGI storage. This message should be treated as an opaque blob to avoid a dependency on a specific storage backend. This version of ImageReference is visible outside of SGBE. Do not add fields that should not be exposed outside of Profile Service and Image Service.
   */
  export interface Schema$SocialGraphApiProtoImageReference {
    /**
     * Identifies the most recent version of this photo. Use this as a FIFE param (ie -iv12) to prevent reads of a stale version.
     */
    contentVersion?: string | null;
    /**
     * Unique identifier for the photo. For now, this will always be a Photos Backend media key.
     */
    mediaId?: string | null;
  }
  export interface Schema$SocialGraphApiProtoLimitedProfileNameSettings {
    /**
     * Required. Describes which shortening option the user implicitly chose for their limited profile. E.g., if 'John Doe' chose 'John D.', they implicitly chose: partial_name_options { given_name_spec { show_all: true \} family_name_spec: { show_initial: true truncation_indicator: PERIOD \} \} While we'll in all cases serve the actual name chosen by the user for limited profiles (stored below), we'll use this information to recompute the default limited profile to be rendered to users when they change their core name.
     */
    partialNameOptions?: Schema$SocialGraphApiProtoPartialNameOptions;
    /**
     * The actual textual name that was chosen by the user in the UI. E.g., if 'John Doe' chose 'John D.', this holds 'John D.'. While `partial_name_options` allows the limited profile name to be computed from the core name, the resulting shortened name might change across different versions of the name shortening logic, and we want to preserve the user's choice verbatim whenever possible. This field will be cleared when the two conditions below are met: (1) A successful core name change is not accompanied by a limited profile settings update and (2) The shortened name computed from `partial_name_options` yields a different result than what is originally stored in `verbatim_full_name`. When this happens, the limited profile is effectively *disabled*. E.g., if 'John Doe' from the example above changes their name to 'Jane Doe' and no LimitedProfileSettings are provided, `Jane D.` is the resulting shortened name. Therefore `verbatim_full_name` will be cleared and the limited profile settings will be disabled. On the other hand, if they change their name to `John Dõe`, the resulting shortened name remains `John D.`, and `verbatim_full_name` is kept as is.
     */
    verbatimFullName?: string | null;
  }
  export interface Schema$SocialGraphApiProtoLimitedProfilePictureSettings {
    profilePictureOption?: string | null;
  }
  /**
   * Next ID: 10
   */
  export interface Schema$SocialGraphApiProtoLimitedProfileSettings {
    /**
     * Created with user input in Android Messages.
     */
    androidMessages?: boolean | null;
    /**
     * Indicates why the limited profile has been disabled. Will be set iff the limited profile is disabled. Note: When mutating limited profiles, in order to disable them, MutateDataRequest.DisableLimitedProfile must be true. Currently, disables are only performed server-side, so this is read-only for clients.
     */
    disableReason?: string | null;
    /**
     * Created with user input in GPay OOBE. This is not currently used because GPay does not setup mini profile, this might change in the future.
     */
    gpayOobe?: boolean | null;
    /**
     * Timestamp indicating when the settings were last stored. Read-only field.
     */
    lastUpdateTime?: string | null;
    /**
     * A user who had legacy discoverability had a Limited Profile autogenerated for them, either through a healer or in the live path in FBS.
     */
    legacyDiscoverability?: string | null;
    /**
     * Created with user input in MyAccount UI.
     */
    myAccount?: boolean | null;
    /**
     * Required. Defines how the name should be formatted in the limited profile.
     */
    nameSettings?: Schema$SocialGraphApiProtoLimitedProfileNameSettings;
    /**
     * DEPRECATED. Profile picture choices are controlled through the ACL of the Photo field.
     */
    profilePictureSettings?: Schema$SocialGraphApiProtoLimitedProfilePictureSettings;
  }
  /**
   * Pattern for a MONTHLY recurrence. This Monthly reccurence supports: 1. Absolute days of the month (i.e. the 1st and 15th) 2. Relative day from the end of the month (i.e. -1 for last day, -2 for second-to-last day). Used in PeopleAPI layers + FBS/ContactsService (not in ProfileService)
   */
  export interface Schema$SocialGraphApiProtoMonthlyDayRecurrence {
    /**
     * Absolute day of the month (if positive) or relative day from the end of the month (if negative). Example: 2nd and 20th of the month [2, 20]. Example: Last day of the month [-1]. Positive values should correspond to actual calendar day number (indexing starts at 1).
     */
    monthDay?: number[] | null;
    /**
     * If true, month_day beyond the end of month (i.e. month_day=31 in February) will default to the last day of the month.
     */
    useLastDayIfMonthDayPastEnd?: boolean | null;
  }
  /**
   * A MONTHLY recurrence can be one of a MonthlyDayRecurrence or MonthlyWeekdayRecurrence but not both. Used in PeopleAPI layers + FBS/ContactsService (not in ProfileService)
   */
  export interface Schema$SocialGraphApiProtoMonthlyRecurrence {
    monthlyDayRecurrence?: Schema$SocialGraphApiProtoMonthlyDayRecurrence;
    monthlyWeekdayRecurrence?: Schema$SocialGraphApiProtoMonthlyWeekdayRecurrence;
  }
  /**
   * Pattern for a MONTHLY recurrence. This Monthly reccurence supports: 1. The nth specific weekday of the month. For example, the 3rd Wednesday of the month. This represents the 3rd instance of a Wednesday of the month, regardless of what weekday the month started on. It does not necessarily mean the Wednesday on the 3rd week of the month. Used in PeopleAPI layers + FBS/ContactsService (not in ProfileService)
   */
  export interface Schema$SocialGraphApiProtoMonthlyWeekdayRecurrence {
    /**
     * The nth occurrence of week_day to match. I.e. For 3rd Wednesday of the month, week_day = WEDNESDAY and week_day_number = 3. Values beyond the end of the month are skipped.
     */
    weekDay?: string | null;
    weekDayNumber?: number | null;
  }
  /**
   * Metadata for a user's name pronunciation audio. Proto message is shared between merged_person and FBS.
   */
  export interface Schema$SocialGraphApiProtoNamePronunciationAudioMetadata {
    /**
     * Stored. Updated on pronunciation creates and updates.
     */
    audioSource?: string | null;
    /**
     * Stored.
     */
    audioState?: string | null;
  }
  /**
   * Used in PeopleAPI layers + FBS/ContactsService (not in ProfileService)
   */
  export interface Schema$SocialGraphApiProtoNotificationTrigger {
    /**
     * Positive number of days before active date. The value 0 will denote a notification on the same day.
     */
    daysBeforeActiveDate?: number | null;
    /**
     * Time of day that notification is sent to user. This is local to the user's device.
     */
    notificationTimeOfDay?: Schema$GoogleTypeTimeOfDay;
  }
  /**
   * For general information about Limited Profiles, see go/limited-profiles-api. LINT.IfChange
   */
  export interface Schema$SocialGraphApiProtoPartialNameOptions {
    /**
     * IETF BCP-47 language code that should be used for localizing the name computation (go/bcp-47). If not provided, we'll use the name origin detector to infer it. If unable to detect, "en" will be assumed.
     */
    language?: string | null;
    parsedDisplayNameSpec?: Schema$SocialGraphApiProtoPartialNameOptionsParsedDisplayNameSpec;
    twoPartNameSpec?: Schema$SocialGraphApiProtoPartialNameOptionsTwoPartNameSpec;
  }
  /**
   * Specifies how each piece of the name should be handled. Names are structured into given name and family name and this allows an independent specification for each of these pieces. Very limited preprocessing is done for this option (leading whitespace trimming mostly). Composed names are treated as a single unit and are not broken down.
   */
  export interface Schema$SocialGraphApiProtoPartialNameOptionsNamePartSpec {
    /**
     * Completely omit that part of the name.
     */
    hideAll?: boolean | null;
    /**
     * Show the complete name. Note that this does not express the same semantics as show_first_n_chars=length_of_name, because when regenerating a shortened name the new name could have more characters, thus yielding a different result.
     */
    showAll?: boolean | null;
    /**
     * Show first `n` characters. Same note about characters referring to "grapheme_clusters" applies.
     */
    showFirstNChars?: number | null;
    /**
     * Show only the initial, i.e., a single character. Note that "character" refers to "user-perceived" characters, aka a "grapheme cluster". See go/morphology for more details.
     */
    showInitial?: boolean | null;
    /**
     * Which truncation indicator to use after the shortened piece of the name. Will be ignored for the `hide_all` or `show_all` options.
     */
    truncationIndicator?: string | null;
  }
  /**
   * These options use more sophisticated logic from a location-aware name detector to parse the full name of a user into structured parts and operate on those parts. For more information on how names are parsed, see the NameOccurrence proto definition: http://google3/quality/peoplesearch/namedetector/detector/proto/name_occurrence.proto?l=50&rcl=334484707 In general, when parsing display names the following rules will apply to *all* specs: - Hyphenated names are broken down: "Angelina Jollie-Pit" is pre-processed as "Angelina Jollie Pitt"; - Prefixes are ignored: "Prof. Albus Dumbledore" is pre-processed as "Albus Dumbledore"; - Auxiliaries are ignored: "Luís de Camões" is pre-processed as "Luís Camões". Next ID: 8
   */
  export interface Schema$SocialGraphApiProtoPartialNameOptionsParsedDisplayNameSpec {
    /**
     * Extract an initial from each parsed name. For example, "Niels Henrik David Bohr" yields "N. H. D. B.". Other special cases are treated as follows:
     */
    allInitialsFromParsedName?: boolean | null;
    /**
     * Show the initial of the very first name and the first last name, e.g. "Hugo Daniel Hernandez Garcia" yields "H. Hernandez".
     */
    firstInitialAndFirstLastName?: boolean | null;
    /**
     * Show the initial of the very first name and the very last name, e.g. "Ana Maria Silva" yields "A. Silva".
     */
    firstInitialAndVeryLastName?: boolean | null;
    /**
     * Shorten the display name using the Knowledge Graph name shortener (go/short-names).
     */
    knowledgeGraphNameShortening?: boolean | null;
    /**
     * Which truncation indicator to use after each shortened part of the name. Will be ignored for the `knowledge_graph_name_shortening` option.
     */
    truncationIndicator?: string | null;
    /**
     * Show the full very first name and all the other initials, e.g. "Ana Maria Silva" yields "Ana M. S.".
     */
    veryFirstNameAndAllInitials?: boolean | null;
    /**
     * Show the very first name only, e.g. "Ana Maria Silva" yields "Ana".
     */
    veryFirstNameOnly?: boolean | null;
  }
  /**
   * Holds the name specs for the two parts of a name, as they are structured in storage (given and family).
   */
  export interface Schema$SocialGraphApiProtoPartialNameOptionsTwoPartNameSpec {
    familyNameSpec?: Schema$SocialGraphApiProtoPartialNameOptionsNamePartSpec;
    givenNameSpec?: Schema$SocialGraphApiProtoPartialNameOptionsNamePartSpec;
  }
  /**
   * Settings that control how a photo overlay is displayed.
   */
  export interface Schema$SocialGraphApiProtoPhotoOverlay {
    /**
     * Top left position of the overlay relative to the user's avatar.
     */
    relativePosition?: Schema$SocialGraphApiProtoRelativePosition;
    /**
     * Scale of the overlay relative to the user's avatar.
     */
    relativeScale?: Schema$SocialGraphApiProtoRelativeScale;
  }
  /**
   * Used in PeopleAPI layers + FBS/ContactsService (not in ProfileService)
   */
  export interface Schema$SocialGraphApiProtoPrompt {
    /**
     * Indicates if this prompt is active regardless of its reccurrence date, dismiss date or notification triggers. This is required.
     */
    activeState?: string | null;
    content?: Schema$SocialGraphApiProtoPromptContent;
    /**
     * The most recent day the user dismissed this prompt. Empty means the user has never dismissed the prompt.
     */
    lastDismissDate?: Schema$GoogleTypeDate;
    /**
     * If this is empty, only the "Prompt Spark" will be displayed (in the time-range read from per type config), no push notifications will be shown. If push notification are configured with this field, the "Prompt Spark" time-range will be determined by earliest notification value here.
     */
    notificationTriggers?: Schema$SocialGraphApiProtoNotificationTrigger[];
    /**
     * Read-only. This is derived from the containing field value.
     */
    purpose?: string | null;
    /**
     * How frequently will this prompt occur and how many times.
     */
    recurrence?: Schema$SocialGraphApiProtoRecurrence;
    /**
     * Prompt ID is generated by server on initial mutate.
     */
    uniquePromptId?: string | null;
  }
  /**
   * Used in PeopleAPI layers + FBS/ContactsService (not in ProfileService) and in Custard response to client apps that read Prompts.
   */
  export interface Schema$SocialGraphApiProtoPromptContent {
    /**
     * Title of prompt/spark being sent.
     */
    title?: string | null;
  }
  /**
   * Design doc: go/pronouns-backend Represents a user's preferred pronouns.
   */
  export interface Schema$SocialGraphApiProtoPronounData {
    pronounEntry?: Schema$SocialGraphApiProtoPronounEntry[];
  }
  export interface Schema$SocialGraphApiProtoPronounEntry {
    /**
     * Locale option in which the pronouns were set, in the BCP-47 format. Set by the client at write time.
     */
    languageCode?: string | null;
    /**
     * The pronoun entry type that the user has selected. This indicates which locale-independent classification of pronoun was selected (or optionally, if it is a custom field).
     */
    pronounType?: string | null;
    /**
     * The user's preferred pronouns. Eg. "they / them". This is a human-readable string to be displayed as the user's pronoun. Set at write-time, regardless of pronoun-type. Value is returned as it was set (no localization).
     */
    value?: string | null;
  }
  /**
   * Stores the pronunciation as phoneme for the given word/text. Next ID: 8
   */
  export interface Schema$SocialGraphApiProtoPronunciation {
    /**
     * All pronunciations with the same learning_session_id were learnt in the same learning flow, e.g. multiple name segments learnt simultaneously from a recording in the Your People UI.
     */
    learningSessionId?: string | null;
    learningSource?: string | null;
    /**
     * The locale used when learning the pronunciation. BCP-47 language code, e.g. "en-US".
     */
    locale?: string | null;
    /**
     * Phoneme sequence representing how the user pronounces |token|. Format is specified by the phonology_type type field, e.g. go/psampa is the preferred phonology type used by the TTS team.
     */
    phonemes?: string | null;
    phonologyType?: string | null;
    /**
     * An optional user-specified spelling of this token, to improve pronunciation learning success rate. E.g. the token may be "Jana" and the spelling hint "jah-nah".
     */
    spellingHint?: string | null;
    /**
     * Corresponds to a word segment of the contact name. E.g. for a contact with given name "John Doe", last name "Smith" and nickname "Best Dad", |token| can be any of {John, Doe, Smith, Best, Dad\}.
     */
    token?: string | null;
  }
  /**
   * Container proto for repeated pronunciation objects. For example, a set of pronunciations that can be added to a single name field.
   */
  export interface Schema$SocialGraphApiProtoPronunciations {
    pronunciation?: Schema$SocialGraphApiProtoPronunciation[];
  }
  /**
   * Flexible Recurrence proto to be used with People Prompts. Examples: Single recurrence that occurs on a specific date: single_recurrence { date { year: 2022 month: 11 day: 17 \} \} Yearly recurrence such as a birthday or anniversary: yearly_recurrence { monthly_pattern { monthly_day_recurrence { month_day: 17 \} \} months: JULY \} Weekly reccurrence such as: every two weeks on Monday: every: 2 weekly_recurrence { week_day: MONDAY \} Monthly recurrence such as: third Thursday of every month: monthly_recurrence { monthly_weekday_recurrence { week_day: THURSDAY week_day_number: 3 \} \} Used in PeopleAPI layers + FBS/ContactsService (not in ProfileService) The canonical recurrence validation function is located here: http://google3/java/com/google/social/people/prompts/util/PromptValidators.java?q=func:%5CbvalidateRecurrence%5Cb
   */
  export interface Schema$SocialGraphApiProtoRecurrence {
    dailyRecurrence?: Schema$SocialGraphApiProtoDailyRecurrence;
    /**
     * Multiplier on the frequency of the recurrence. Use this to specify patterns that recur every X days, months, years, etc. Must be a positive int. Example: [remind me to call mom every 2nd week]. If this field isn't set, it will default to 1 (every day,every week, etc). This field is ignored when recurrence_data is a SingleRecurrence. Optional.
     */
    every?: number | null;
    monthlyRecurrence?: Schema$SocialGraphApiProtoMonthlyRecurrence;
    /**
     * Ends at abstract DateTime. (inclusive)
     */
    recurrenceEndDate?: Schema$GoogleTypeDateTime;
    /**
     * The start of the recurrence can be represented as a DateTime. This field is ignored when recurrence_data is a SingleRecurrence.
     */
    recurrenceStart?: Schema$GoogleTypeDateTime;
    /**
     * Will repeat only a finite number of times. This is the original number of times the recurrence will repeat and not how many times are left for it to repeat. This end type is not currently supported.
     */
    repeatCount?: number | null;
    /**
     * Will continue to repeat until prompt is deleted.
     */
    repeatForever?: Schema$SocialGraphApiProtoRecurrenceRepeatForever;
    singleRecurrence?: Schema$SocialGraphApiProtoSingleRecurrence;
    weeklyRecurrence?: Schema$SocialGraphApiProtoWeeklyRecurrence;
    yearlyRecurrence?: Schema$SocialGraphApiProtoYearlyRecurrence;
  }
  /**
   * An internal message to signal that this recurrence has no end date.
   */
  export interface Schema$SocialGraphApiProtoRecurrenceRepeatForever {}
  /**
   * Position relative to the user's avatar. 0 = top/left, 1 = bottom/right.
   */
  export interface Schema$SocialGraphApiProtoRelativePosition {
    x?: number | null;
    y?: number | null;
  }
  /**
   * Scale relative to the user's avatar. x and y range from 0 (exclusive) to 1 (inclusive).
   */
  export interface Schema$SocialGraphApiProtoRelativeScale {
    x?: number | null;
    y?: number | null;
  }
  /**
   * Data contained in every search profile. go/janata-profile-in-sgbe.
   */
  export interface Schema$SocialGraphApiProtoSearchProfileData {
    /**
     * A free-text summary that the user inputs. E.g. "Coder by day, jazz guitarist by night."
     */
    description?: string | null;
    education?: Schema$SocialGraphApiProtoSearchProfileEducation[];
    interest?: Schema$SocialGraphApiProtoSearchProfileEntity[];
    /**
     * Indicates the language of this search profile. Use ISO-639 2-letter language code to specifying the language that this profile is created in.
     */
    language?: string | null;
    location?: Schema$SocialGraphApiProtoSearchProfileLocation[];
    metadata?: Schema$SocialGraphApiProtoSearchProfileMetadata;
    occupation?: Schema$SocialGraphApiProtoSearchProfileEntity[];
    /**
     * This is the email that the user has chosen to display on their "SearchCard" publicly.
     */
    publicEmail?: string[] | null;
    /**
     * This is the phone number that the user has chosen to display on their "SearchCard" publicly.
     */
    publicPhoneNumber?: string[] | null;
    socialLink?: Schema$SocialGraphApiProtoSearchProfileSocialLink[];
    website?: string[] | null;
    workplace?: Schema$SocialGraphApiProtoSearchProfileWorkplace[];
  }
  /**
   * Wraps information about a user's eductational background.
   */
  export interface Schema$SocialGraphApiProtoSearchProfileEducation {
    endTime?: Schema$GoogleTypeDate;
    fieldOfStudy?: Schema$SocialGraphApiProtoSearchProfileEntity[];
    institution?: Schema$SocialGraphApiProtoSearchProfileEntity;
    startTime?: Schema$GoogleTypeDate;
  }
  /**
   * This proto represents either a KG-entity, as represented by it's MID, or free-string text.
   */
  export interface Schema$SocialGraphApiProtoSearchProfileEntity {
    /**
     * Corresponding country code. Refer to go/people-search-dashboard for code list.
     */
    countryCode?: string | null;
    /**
     * Corresponding mid in KG.
     */
    entity?: string | null;
    /**
     * Custom name of entity if there is no corresponding place/entity in KG (mid)
     */
    name?: string[] | null;
  }
  /**
   * Wraps information about a user's location, if they have chosen to share it on their SearchCard.
   */
  export interface Schema$SocialGraphApiProtoSearchProfileLocation {
    endTime?: Schema$GoogleTypeDate;
    lengthOfStay?: string | null;
    place?: Schema$SocialGraphApiProtoSearchProfileEntity;
    point?: Schema$SocialGraphApiProtoSearchProfileLocationInfo;
    startTime?: Schema$GoogleTypeDate;
    type?: string | null;
  }
  export interface Schema$SocialGraphApiProtoSearchProfileLocationInfo {
    /**
     * Degrees [-90 .. 90]
     */
    lat?: number | null;
    /**
     * Degrees [-180 .. 180]
     */
    lon?: number | null;
    /**
     * Meters
     */
    radius?: number | null;
  }
  /**
   * This proto represents metadata of the users SearchProfile like profile state, GOG account id etc.,
   */
  export interface Schema$SocialGraphApiProtoSearchProfileMetadata {
    /**
     * Unique contributor account id allocated by presence/janata infrastructure. This will be used in the frontend for various actions like reporting errors, photo uploads etc., go/boba-janata, go/cleanup-contributor-creation
     */
    accountId?: string | null;
    /**
     * Account KG entity mid assigned to this user required by old janata serving stack. This is not required anymore for serving. But might need it for historical purposes. See https://hume.google.com/edit/g/11gg6cyvch for more details.
     */
    accountMid?: string | null;
    /**
     * Ares id used for tracking the auto moderation.
     */
    aresId?: string | null;
    /**
     * Current state of the Search Profile.
     */
    state?: Schema$SocialGraphApiProtoSearchProfileState[];
  }
  /**
   * Wraps social profile information about the user.
   */
  export interface Schema$SocialGraphApiProtoSearchProfileSocialLink {
    link?: string | null;
    type?: string | null;
  }
  export interface Schema$SocialGraphApiProtoSearchProfileState {
    /**
     * Timestamp of when the state was changed.
     */
    changeTimestamp?: string | null;
    /**
     * This will be used to display status to the user at a set time. If set to a value after `change_timestamp`, the change will not be 'reflected' until this time.
     */
    displayTimestamp?: string | null;
    /**
     * State that the UserProfile was changed to.
     */
    type?: string | null;
  }
  /**
   * Wraps information about a user working at a specific place.
   */
  export interface Schema$SocialGraphApiProtoSearchProfileWorkplace {
    company?: Schema$SocialGraphApiProtoSearchProfileEntity;
    endTime?: Schema$GoogleTypeDate;
    startTime?: Schema$GoogleTypeDate;
  }
  /**
   * This prompt will occur one time only. Could be a single event such as a graduation or a single connection reminder e.g. remind me to call X on 2022/03/19. Used in PeopleAPI layers + FBS/ContactsService (not in ProfileService)
   */
  export interface Schema$SocialGraphApiProtoSingleRecurrence {
    date?: Schema$GoogleTypeDate;
  }
  /**
   * LINT.IfChange
   */
  export interface Schema$SocialGraphApiProtoSyncInfo {
    /**
     * CP2 sourceid column.
     */
    sourceId?: string | null;
    /**
     * CP2 sync1 column.
     */
    sync1?: string | null;
    /**
     * CP2 sync2 column.
     */
    sync2?: string | null;
    /**
     * CP2 sync3 column.
     */
    sync3?: string | null;
    /**
     * CP2 sync4 column.
     */
    sync4?: string | null;
  }
  export interface Schema$SocialGraphApiProtoThirdPartyInfo {
    /**
     * Not to be used. We have since moved to a lookup string at read time approach as opposed to storing data at write time. b/146072927
     */
    clientName?: string | null;
    /**
     * Project number of the third party application performing the delete to be looked up via ClientAuthConfig during display time for users to know the current name of an application which has deleted contact data.
     */
    projectNumber?: string | null;
  }
  /**
   * Usage information. This is currently used for device contacts. Next ID: 3
   */
  export interface Schema$SocialGraphApiProtoUsageInfo {
    /**
     * Last time a contact was contacted.
     */
    lastTimeContacted?: string | null;
    /**
     * Number of times a contact was contacted.
     */
    timesContacted?: string | null;
  }
  /**
   * Pattern for a WEEKLY recurrence. You must specify at least one week_day. Used in PeopleAPI layers + FBS/ContactsService (not in ProfileService)
   */
  export interface Schema$SocialGraphApiProtoWeeklyRecurrence {
    /**
     * Set of weekdays the recurrence applies to.
     */
    weekDay?: string[] | null;
  }
  /**
   * Pattern for a YEARLY recurrence. A YEARLY recurrence is specified using a monthly pattern and a set of months the pattern applies to. Some examples: "Every January 16" : monthly_pattern { monthly_day_recurrence { month_day: 16 \} \} months: JANUARY "Fourth Thursday of November and December" : monthly_pattern { monthly_weekday_recurrence { week_day: THURSDAY week_day_number: 4 \} \} months: NOVEMBER months: DECEMBER Used in PeopleAPI layers + FBS/ContactsService (not in ProfileService)
   */
  export interface Schema$SocialGraphApiProtoYearlyRecurrence {
    /**
     * The monthly pattern to recur.
     */
    monthlyPattern?: Schema$SocialGraphApiProtoMonthlyRecurrence;
    /**
     * The months of the year to apply the pattern.
     */
    months?: string[] | null;
  }
  /**
   * Extra ranking info returned with affinity data. This info is returned by DAS and passed to PAPI clients (Yenta), where it is used for ranking and filtering device and server suggestions together.
   */
  export interface Schema$SocialGraphWireProtoPeopleapiAffinityMetadata {
    /**
     * Information regarding client interactions.
     */
    clientInteractionInfo?: Schema$SocialGraphWireProtoPeopleapiAffinityMetadataClientInteractionInfo;
    /**
     * Device information about the candidate available in the cloud.
     */
    cloudDeviceDataInfo?: Schema$SocialGraphWireProtoPeopleapiAffinityMetadataCloudDeviceDataInfo;
    /**
     * Affinity score for the cloud contact.
     */
    cloudScore?: number | null;
  }
  export interface Schema$SocialGraphWireProtoPeopleapiAffinityMetadataClientInteractionInfo {
    /**
     * Whether this suggestion is an edge directly from the client. E.g., a suggestion with which the user shared a photo on photos app.
     */
    isDirectClientInteraction?: boolean | null;
  }
  export interface Schema$SocialGraphWireProtoPeopleapiAffinityMetadataCloudDeviceDataInfo {
    /**
     * The partial affinity score only counting device features.
     */
    deviceScore?: number | null;
    /**
     * Whether device data about this candidate were available in the cloud.
     */
    isDeviceDataKnown?: boolean | null;
  }
  /**
   * Waldo-related extension data.
   */
  export interface Schema$SocialGraphWireProtoPeopleapiExtensionAppsWaldoExtendedData {
    availabilities?: Schema$GoogleInternalAppsWaldoV1alphaUserAvailabilities;
  }
  /**
   * Dynamite-related extension data.
   */
  export interface Schema$SocialGraphWireProtoPeopleapiExtensionDynamiteExtendedData {
    /**
     * Avatar image URL for a Google Group, based on the member count.
     */
    avatarUrl?: string | null;
    /**
     * Short description of this bot. Only set if EntityType == BOT.
     */
    description?: string | null;
    /**
     * Display name of bot developer. Only set if EntityType == BOT.
     */
    developerName?: string | null;
    dndState?: string | null;
    entityType?: string | null;
    /**
     * Whether caller has visibility into the direct members of the roster. NEXT TAG: 11
     */
    isMembershipVisibleToCaller?: boolean | null;
    /**
     * DEPRECATED: use segmented_membership_counts instead. Number of members (direct or indirect) in a Google Group. Only an estimate for large groups (currently \> 1K direct / indirect members).
     */
    memberCount?: string | null;
    organizationInfo?: Schema$AppsDynamiteSharedOrganizationInfo;
    presence?: string | null;
    /**
     * Represents the direct membership counts of a Google Group. May contain counts based on member type and membership state.
     */
    segmentedMembershipCounts?: Schema$AppsDynamiteSharedSegmentedMembershipCounts;
  }
  /**
   * Next tag number: 3
   */
  export interface Schema$SocialGraphWireProtoPeopleapiExtensionPaisaExtendedData {
    /**
     * Actor ID of the person, if available (if the person has used the Paisa app).
     */
    actorId?: string | null;
    /**
     * Display subtitle, which may be used in suggestion/autocompletion results. Generally, this will be the Actor's registered Paisa phone number, in unmasked or masked form (e.g. +1 ***-***-1234) depending on visibility rules.
     */
    subtitle?: string | null;
  }
  export interface Schema$SocialGraphWireProtoPeopleapiExtensionPeopleStackExtendedData {
    /**
     * Whether the person is in the same family as the requesting user. Family here refers to https://families.google.com/families. This information is read from SuperGlue, and can be consumed by clients, e.g. Assistant and Photos. If this field is not set, the person is not in the user's family.
     */
    familyStatus?: string | null;
    /**
     * The full list of hidden keys associated with this person. These are the external equivalent to the keys stored by the ConnectionLabelService, and they can be passed to the MutateConnectionLabel endpoint to unhide this person. This field will only be set if hide_type is HIDDEN.
     */
    hiddenKeys?: Schema$SocialDiscoveryExternalEntityKey[];
    /**
     * If this field is not set, the person is visible (implicit).
     */
    hideType?: string | null;
  }
  /**
   * NEXT_ID: 5
   */
  export interface Schema$SocialGraphWireProtoPeopleapiExtensionPeopleStackPersonExtendedData {
    /**
     * Whether the person has birthday field populated.
     */
    birthdayStatus?: string | null;
    /**
     * Whether the person is in the same family as the requesting user. Family here refers to https://families.google.com/families. This information is read from SuperGlue, and can be consumed by clients, e.g. Assistant and Photos. If this field is not set, the person is not in the user's family.
     */
    familyStatus?: string | null;
    /**
     * The full list of hidden keys associated with this person. These are the external equivalent to the keys stored by the ConnectionLabelService, and they can be passed to the MutateConnectionLabel endpoint to unhide this person. This field will only be set if hide_type is HIDDEN.
     */
    hiddenKeys?: Schema$SocialDiscoveryExternalEntityKey[];
    /**
     * If this field is not set, the person is visible (implicit).
     */
    hideType?: string | null;
  }
  export interface Schema$SocialPersonalizationKnexAnnotation {
    item?: Schema$SocialPersonalizationKnexAnnotationItem[];
  }
  /**
   * Next Tag: 8
   */
  export interface Schema$SocialPersonalizationKnexAnnotationItem {
    confidence?: number | null;
    /**
     * Description of the item for debugging. Note that this field is populated only in a few select places.
     */
    description?: string | null;
    /**
     * If this field exists, then there exists a commonly used MID (typically a public MID, i.e., one in /m/) that approximates the meaning for this particular k'nex topic. For example, the value of this field for k'nex topic Tennis (/t/236) is /m/07bs0. The difference between k'nex /m/07bs0 and webref /m/07bs0 is as follows. If a content is annotated with webref /m/07bs0, then the content has to explicitly mention "Tennis" in some way, whereas if a content is annotated with k'nex /m/07bs0, then the content simply needs to talk about stuff related to tennis. Note that this field is not populated for all queries. For example, the compound concept "Tennis in California" does not have an associated mid. This field is intended to help external clients transit to k'nex.
     */
    equivalentMid?: string | null;
    /**
     * A score that measures how broad / narrow a topic is, independent of the document and/or user profile. This is an experimental score and is not populated by default. Currently, it is in the range of [0, 1], where the higher the score is, the more general a topic is. Please talk to sherlock-dev@ before using this score. Populated when debug_level \> 0.
     */
    generality?: number | null;
    /**
     * This is an MID in the /t/ namespace. We will migrate them to /g/ in Q3'15.
     */
    mid?: string | null;
    relatedEntity?: Schema$SocialPersonalizationKnexAnnotationItemTopic[];
    topicality?: number | null;
  }
  export interface Schema$SocialPersonalizationKnexAnnotationItemTopic {
    mid?: string | null;
    score?: number | null;
  }
  /**
   * Restrictions that affect the delivery of the stanza. By default, Stanzas are publishable, which means that they are eligible for indexing, aggregation, and other delivery options (Goops, Moonshine, notifications). A stanza can be created in a "do not publish" state; the stanza will not be published anywhere. The restriction can subsequently be removed with an UpdateStanza call, at which point the post will be treated as if it were newly created. A few notes/limitations about this option: 1. Client should keep a stanza unpublishable for a small period of time (if possible to) so that our ranking system does not consider this as a stale post (thus downranking the post). 2. Client should keep the number of unpublishable stanzas to a minimum, to reduce under-serving. 3. Updating a stanza from publishable to unpublishable after creation is not supported 4. At this time, publishing options are only supported on root stanzas; let us know if you require this for child stanzas. 5. Similarly, this is only supported as a global restriction. It may not be set as a per-destination-stream restriction.
   */
  export interface Schema$SocialStanzaDeliveryRestriction {
    doNotPublish?: boolean | null;
  }
  /**
   * ModerationInfo stores the information of moderation for a stanza in a specific destination stream. Including who moderated and why.
   */
  export interface Schema$SocialStanzaModerationInfo {
    /**
     * The reason why this stanza was moderated provided by client.
     */
    moderationReason?: string | null;
    moderator?: Schema$SecurityCredentialsPrincipalProto;
    /**
     * Type of moderation. Semantically REQUIRED, http://go/required At write time, only ModeratorType.AUTO_MODERATOR is allowed. For all other cases, this information is inferred from the request at write time.
     */
    moderatorType?: string | null;
  }
  /**
   * Contains various restriction information about a stanza, derived from properties of the stanza, the viewer and the creator. Restrictions stored in this message are not related to direct/indirect relationship between the viewer and the creator of stanza. Some examples are: - Abusive - Legal - Racy - Content not suitable for age - Porn - Blocked by country/geo of viewer. - Restricted by stanza creator (not the user specific block). - etc... Please see go/stanza-abuse-flow for more details.
   */
  export interface Schema$SocialStanzaStanzaRestriction {
    /**
     * The abuses.
     */
    abuseTypes?: Schema$AbuseiamAbuseType[];
    /**
     * The appeal state.
     */
    appealState?: string | null;
    /**
     * Field to explain various restrictions of the Stanza. Some examples of restrictions are: - Not permitted because of legal restrictions of geography/country of viewer or creator. - Content not suitable for current viewer i.e. porn, abusive, racy. - Creator restricted the content to an age group. - etc...
     */
    contentRestriction?: Schema$AbuseiamContentRestriction;
    /**
     * Delete reasons. This is a repeated field because an stanza can be deleted multiple times due to different reasons such as user_delete, admin_delete.
     */
    deleteReason?: string[] | null;
    /**
     * Delivery restrictions, if present.
     */
    deliveryRestriction?: Schema$SocialStanzaDeliveryRestriction;
    destinationStream?: Schema$AppsPeopleActivityBackendDestinationStream;
    /**
     * The moderation info. At write time, this field is only allowed to be set when moderator_type is AUTO_MODERATOR. For other moderator types, moderation_reason is the only field that can be set by clients.
     */
    moderationInfo?: Schema$SocialStanzaModerationInfo;
    /**
     * The moderation state.
     */
    moderationState?: string | null;
  }
  /**
   * This holds SpamBrain values which will be populated to docjoins & muppet. Proto is copied from spam_brain::SpamBrainData and populated at sitechunked site level (as opposed to the spambrain page classifier score).
   */
  export interface Schema$SpamBrainData {
    /**
     * Sitechunker site granularity for this result
     */
    site?: string | null;
    /**
     * Versioned scores of SB classifiers
     */
    versionedData?: Schema$SpamBrainScore[];
  }
  /**
   * Message representing versioned scores
   */
  export interface Schema$SpamBrainScore {
    /**
     * The value corresponding to this version.
     */
    sbScore?: number | null;
    /**
     * The version id.
     */
    versionId?: number | null;
  }
  /**
   * This protocol buffer indicates actions that we take based on Cookbook recipes (see http://cookbook/) matching a particular document.
   */
  export interface Schema$SpamCookbookAction {
    dropInServing?: boolean | null;
  }
  export interface Schema$SpamMuppetjoinsMuppetSignals {
    hackedDateNautilus?: number | null;
    hackedDateRaiden?: number | null;
    raidenScore?: number | null;
    site?: string | null;
  }
  /**
   * Response proto for the LangId service running on a Greco server in prod. Next Tag: 6
   */
  export interface Schema$SpeechS3LanguageIdentificationResult {
    /**
     * The end time of the input audio that this result refers to. This value should increase across LanguageIdentificationResult emitted by the Greco server running LangId, and reflects the server having processed more of the input audio.
     */
    endTimeUsec?: string | null;
    /**
     * Ranked list of top-N language codes. Ranking is based on ConfidenceIntervals of supported languages, and N is defined in the LanguageIdentificationConfig.
     */
    rankedTopSupportedLanguages?: Schema$SpeechS3Locale[];
    /**
     * Global start time. This value should be fixed across all LanguageIdentificationResults for a given utterance.
     */
    startTimeUsec?: string | null;
    /**
     * Confidence interval of the top recognized language.
     */
    topLanguageConfidence?: string | null;
    /**
     * Identifies when the provided audio sample does or doesn't contain voiced samples. E.g. an unvoice utterance happens when the EOS signal is received before any frame because all frames were filtered by the endpointer. For events where voiced_utterance is false, ranked_top_supported_languages is defined but scores are not to be trusted. All LanguageIdentificationResults contains a valid value of voiced_utterance.
     */
    voicedUtterance?: boolean | null;
  }
  export interface Schema$SpeechS3Locale {
    /**
     * The format of the string in "locale". Should be one of LocaleFormat.
     */
    format?: number | null;
    locale?: string | null;
  }
  /**
   * A general-purpose buffer to contain sequences of samples. When representing a waveform, the samples are the scalar values of an acoustic signal. When representing a sequence of feature frames, the samples are vector-valued frames.
   */
  export interface Schema$SpeechWaveHeader {
    /**
     * Size of atomic type, in bytes.
     */
    atomicSize?: number | null;
    /**
     * Numeric type of data elements (if generic)
     */
    atomicType?: string | null;
    /**
     * For compressed signals with fixed bitrate, this is the number of bits per second.
     */
    bitRate?: number | null;
    /**
     * Byte-order of the atomic_type When atomic_type == "char", byte_order should be always "1". When atomic_type == "int16", byte_order can be either "01" (Intel) or "10" (Motorola). Byte order should default to Intel when in question.
     */
    byteOrder?: string | null;
    /**
     * Typically contains the parameter settings of the program that created the file.
     */
    details?: string | null;
    /**
     * Array dimensions for a single sample. * For audio samples: * mono: rank==0, dimension==[1] * stereo: rank==0, dimension==[2] (samples are interleaved) * For typical ASR features representing energy, 12 MFCC coefficients, and first and second derivatives: * rank==1 and dimension==[39].
     */
    dimension?: number[] | null;
    /**
     * The number of atomic elements stored per sample. This is the product of all the entries in the dimension array. Written "out of order" in this file to be close to the dimension field, from which it can always be computed.
     */
    elementsPerSample?: number | null;
    /**
     * The rank of each sample. For a waveform (signals that are sequences of scalar values), this is 0. For vector-valued signals (used as signals containing sequences of features, for example), this is 1. scalar=0, vector=1, matrix=2, ...
     */
    rank?: number | null;
    /**
     * Sample encoding. Can be "ulaw".
     */
    sampleCoding?: string | null;
    /**
     * For periodic signals, this is the number samples per second, else 0.0
     */
    sampleRate?: number | null;
    /**
     * Size of a single sample, in bytes.
     */
    sampleSize?: number | null;
    /**
     * Structure of each sample. "generic" means that the samples are multi-dimensional arrays of atomic_type with the specified rank.
     */
    sampleType?: string | null;
    /**
     * Time origin for the signal, in seconds. Warning: Using float can result in rounding errors: float's smallest distance between two representable values (1 ULP; see https://en.wikipedia.org/wiki/Unit_in_the_last_place) between 1024 and 2048 (representing ~17-34 min) is 0.0001220703125, what is approximately double of what we need to represent 1 sample in a 16 kHz sample rate audio. The error is double in the 2048s-4096s, 4x in the 4096s-8192s range etc. Higher sample rate encounters rounding errors earlier: with 96 kHz, rounding errors start at ~2 min (128s).
     */
    startTime?: number | null;
    /**
     * The number of samples in file. Can be inferred for generics from file size.
     */
    totalSamples?: string | null;
  }
  /**
   * go/entity-authority NB: currently all facts associated with Authority Feedback are externally traceable to the requests from which they originate.
   */
  export interface Schema$StorageGraphBfgAuthorityFeedbackMetadata {}
  export interface Schema$StorageGraphBfgLegalRequestMetadata {
    /**
     * The buganizer ID associated with this legal request. This is required.
     */
    bugId?: string | null;
  }
  /**
   * Metadata on source assertions that isn't part of the user-visible Triple payload, and that doesn't really represent data provenance, but that's used to affect the way Livegraph and possibly other horizontal KG infra systems *process* the triple. Read: fields below really shouldn't be part of the cross-system Triple proto at all. But because Triple is used both as an internal and an external KG API, we at least want to "hide" those fields that ought to be purely part of the internal source <-\> LG contract. Next id: 6
   */
  export interface Schema$StorageGraphBfgLivegraphProvenanceMetadata {
    /**
     * If one triple is directly-written after recon by LG without going through Composer, we add the record id it's from. Otherwise, it's empty. Note: 1) LG will dedup record ids before updating it. So this field shouldn't see duplicated record ids. 2) This is used internally by LG only. So if set by clients, they will be dropped by LG.
     */
    directWriteRecordIds?: string[] | null;
    /**
     * Identifies the LG internal writers that asserted the triple. This is the same as 'origin_id' in LG. This will only be populated by the LG writers to FactStore
     */
    lgInternalWriterId?: string | null;
    /**
     * Whether this provenance is a provenance only addition or not. A provenance is considered an "addition" if it belongs to a triple that we expect FactStore to contain on its own (i.e through some inference), and thus we will *not* attempt to write it explicitly. This is a composer only populated field. Clients are not expected to populate this field.
     */
    provenanceOnlyAddition?: boolean | null;
    /**
     * Triples typically have a single triangulation key. This field supports \> 1 keys to allow staged transition to a different key scheme. To successfully triangulate in the Livegraph Composer, the triple must have \>=3 instances and each triple instance having a pairwise disjoint set of triangulation keys. The triangulation keys supplied for a single input triple are treated part of the same set, so a single triple cannot self-triangulate, regardless of how many triangulation keys it has. Note2: If a triple has multiple provenances, each one is expected to set the same triangulation_keys.
     */
    triangulationKey?: string[] | null;
    /**
     * WARNING! The feature is still under active development and the exact semantics may be subject to change pending KE Design Review. Data marked as weak will be less preferred to regular data which does not have the marker. This allows ingesting data with a lower chance of negatively affecting existing features and products, at the cost of potentially not showing the data when competing data is available. Specifically, weak data is less preferred by conflict resolution inside of Livegraph composition. Additionally, RefX triggering will prefer to trigger based on signals computed from regular data. Aside from data providers choosing to mark their data as weak, Livegraph and RefX are the only horizontal systems expected to use this information. Please contact livegraph-team@ if you see a need for this to change. See go/weak-data for more information.
     */
    weakData?: boolean | null;
  }
  /**
   * Metadata fields for LMS. See go/lms-online-restrictions for details.
   */
  export interface Schema$StorageGraphBfgLmsPolicyMetadata {
    clientIdsAllowed?: string[] | null;
    isEditorial?: boolean | null;
    /**
     * Int values corresponds to the values of image_repository.licensed.api.restrictions.Modification enum.
     */
    modificationsAllowed?: string[] | null;
    regionsAllowed?: Schema$KeGovernanceTypedRegions;
    regionsDisallowed?: Schema$KeGovernanceTypedRegions;
    requiresAttribution?: boolean | null;
    requiresFirstPartyOnly?: boolean | null;
    requiresLinkback?: boolean | null;
    requiresShareAlike?: boolean | null;
  }
  /**
   * Metadata about data governance policies. For more context, see go/ke-triple-dg-policy-and-metadata. If any attribute is not set, then there's no specific restrictions associated with the missing attribute. For example, if `availability_start_timestamp` is not set, the data won't be embargoed automatically; if `availability_end_timestamp` is not set, they won't expire automatically. LINT.IfChange
   */
  export interface Schema$StorageGraphBfgPolicyMetadata {
    /**
     * Timestamp after which data with this policy cannot be used. This value must be strictly larger/later than availability_start_time, if both are set.
     */
    availabilityEndTimestamp?: string | null;
    /**
     * Timestamp before which data with this policy cannot be used. This value must be strictly smaller/earlier than availability_end_time, if both are set.
     */
    availabilityStartTimestamp?: string | null;
    /**
     * List of regions in which the data with this policy is allowed to be used, while the data need to be removed in all regions outside this list according to legal request. This field should be used when the data is only allowed in a few regions and it is inconvenient to enumerate all of the regions in `legal_removal_regions` field. `legal_allowed_regions` and `legal_removal_region` together should include all possible regions, setting one field implies the other. Please set only one of them so the other field's values are implied. See details: http://go/ke-allowed-countries-policy-1p WARNING: This field is for legal purposes only. Please do not populate it without consulting ke-data-governance@.
     */
    legalAllowedRegions?: Schema$KeGovernanceTypedRegions[];
    /**
     * List of regions in which the data with this policy need to be removed according to legal request. WARNING: This field is for legal purposes only. Please do not populate it without consulting ke-data-governance@.
     */
    legalRemovalRegions?: Schema$KeGovernanceTypedRegions[];
    /**
     * Policy metadata fields for LMS data. Only expected to be used by LMS providers -- please consult ke-data-governance@ before populating this field.
     */
    lmsPolicyMetadata?: Schema$StorageGraphBfgLmsPolicyMetadata;
    /**
     * This triple is protected by the policies with PolicyDataScope identified by these global unique ids.
     */
    policyDataScopeKeys?: number[] | null;
    /**
     * Policy metadata are VERTICAL by default. Vertical policy makers / providers does not need to set this field explicitly.
     */
    policySourceType?: string | null;
    /**
     * Policy metadata fields for Real World Journey (RWJ) data. Only expected to be used by RWJ providers -- please consult ke-data-governance@ before populating this field.
     */
    rwjPolicyMetadata?: Schema$StorageGraphBfgRwjPolicyMetadata;
    /**
     * Policy metadata fields for UMP data. Only expected to be used by UMP providers -- please consult ke-data-governance@ before populating this field.
     */
    umpPolicyMetadata?: Schema$StorageGraphBfgUmpPolicyMetadata;
  }
  export interface Schema$StorageGraphBfgPublicInformationMetadata {
    /**
     * Publicly-visible URLs claiming this fact. Can not be empty -- at least one URL must be provided.
     */
    attributionUrl?: string[] | null;
    /**
     * Most recent date at which 'attribution_url's were verified, as UNIX epoch time in milliseconds. This is required.
     */
    lastVerifiedDate?: string | null;
  }
  /**
   * Metadata fields for Real World Journey. See go/rwj-kg-dg for details.
   */
  export interface Schema$StorageGraphBfgRwjPolicyMetadata {
    /**
     * Int values correspond to the usecases used in CDS. See: google3/googlebase/verticals/model/usecase_id.proto.
     */
    eligibleSurfaces?: string[] | null;
  }
  /**
   * A fact about potentially sensitive personal info (http://what/SPII) can be "certified" iff it meets specific requirements. See go/kg-spii-certification for details.
   */
  export interface Schema$StorageGraphBfgSpiiCertification {
    /**
     * This fact was provided via KGO / Entity Authority.
     */
    authorityFeedback?: Schema$StorageGraphBfgAuthorityFeedbackMetadata;
    /**
     * This fact was provided via a legal request.
     */
    legalRequest?: Schema$StorageGraphBfgLegalRequestMetadata;
    /**
     * This fact is public information. (See go/kg-spii-certification for a description of what qualifies as public information -- simply finding a fact online is not sufficient to certify a fact as public.)
     */
    publicInformation?: Schema$StorageGraphBfgPublicInformationMetadata;
  }
  /**
   * a message containing information about the source of this triple. Note for freebase data: that this is an unpacking of the creator/attribution chain. The creator below is the actual creator of the attribution node, and the rest of the attribution data sits along side. Next id: 22
   */
  export interface Schema$StorageGraphBfgTripleProvenance {
    /**
     * Data providers shall use this to specify access requirement.
     */
    accessRequired?: string | null;
    /**
     * For KE internal use only. Data providers shall *not* set this. At ingress, LG Record service will read access_required and properly translate it to access_required_int. KE horizontal systems shall use this field instead of access_required; so that binaries would not depend on the release of a newly introduced AccessRequirement enum. (go/easy-ar-onboarding)
     */
    accessRequiredInt?: number | null;
    authoringTimestamp?: string | null;
    /**
     * Freebase: the freebase user id in the form '/user/userid' KG: the Google LDAP of the developer or MDB group that set up the triplification and import pipeline for this data source.
     */
    creator?: string | null;
    /**
     * Freebase & KG: the dataset the assertion was loaded from
     */
    dataset?: string | null;
    extractionPattern?: string | null;
    extractionTimestamp?: string | null;
    /**
     * Below are deprecated Provenance fields. They are not indexed or served in KE infrastructure (they are stripped at ingress in Livegraph).
     */
    freebaseAttribution?: string | null;
    /**
     * Indicates that the corresponding data is supporting evidence for reconciliation only, and is *not* an assertion that should be visible to other systems or to external users. Note that this also means that no provenances indicating supporting data will be visible in the composed graph. Please see go/supporting-kg-triples-design-doc for additional details and background. If a triple is sent to Livegraph with multiple provenances each of them must have is_supporting_data bit set for it to be considered valid supporting evidence triple.
     */
    isSupportingData?: boolean | null;
    /**
     * Internal metadata used by Livegraph and possibly other horizontal KG infra systems. This is not part of the logical triple or its provenance, and contents may not be visible downstream of LG.
     */
    lgMetadata?: Schema$StorageGraphBfgLivegraphProvenanceMetadata;
    /**
     * Metadata specifying data governance policies. This information will be processed and enforced in KE systems. For more context, see go/ke-triple-dg-policy-and-metadata. WARNING: This field is WIP and please do not populate it without consulting ke-data-governance@.
     */
    policyMetadata?: Schema$StorageGraphBfgPolicyMetadata;
    /**
     * Used to uniquely identify data sources. Freebase: the OAuth application KG: the name of the source directory the triple was loaded from (eg, "amg", "tms ", "collections"). KV: identifier of an extraction system, e.g., SAFT or Tractzor.
     */
    process?: string | null;
    provenanceExtension?: Schema$Proto2BridgeMessageSet;
    /**
     * 'ranking_token' (which must be accompanied by the 'process' field above or will be ignored) is used to distinguish subsets of data within a single process, solely for the purposes of composition in Livegraph. This field is useful when partitioning of data is needed, but using a separate process is intractable due to organizational or infrastructure limitations. For example, if a process such as "geo" wishes to distinguish some of their /type/object/name triples as higher priority in Composer's conflict resolution rules, then they can add a config entry with a dedicated ranking_token and tag the relevant triples with that ranking_token. This field should only be used in conjunction with a Composer-side configuration to use it for value selection. It is not appropriate to use this field as free-form metadata. This value must match [[:alnum:]][[:alnum:]_-]{0,127\} (i.e., [a-zA-Z0-9]+[a-zA-Z0-9_-]* and must be less than 128 characters in length) , or else its containing triple will be considered malformed and will be rejected by Livegraph at ingress. As of 2018-02-14, this field is used within Livegraph's Composer and is exposed in Livegraph's Lookup APIs to aid debugging, but it is not indexed or served by TopicServer.
     */
    rankingToken?: string | null;
    /**
     * When specified as part of triples input to Livegraph (go/livegraph), this indicates that the triple needs to be triangulated by 3 different sources before it can be served in production. A triple's source is identified by its URL(provenance.source).host(). Please see go/baike-triangulation for more background on this. WARNING: If you're a new client trying to enable triangulation for your feed, please contact lg-composition@/kashk@ before using this feature.
     */
    requiresTriangulation?: boolean | null;
    restrictions?: string[] | null;
    /**
     * Freebase & KG: if the triples were extracted from the web, the source URL where the assertion was found. (generally empty in freebase-sourced triples) TopicServer will serve/populate/retain if REQUIRES_CITATION is also set, or if the process is explicitly allowed. http://g/topic-server/vn9PBWtVKqI/arQEDqKTAgAJ
     */
    source?: string | null;
    sourceCategory?: string[] | null;
    sourceDocId?: string[] | null;
    spiiCertification?: Schema$StorageGraphBfgSpiiCertification;
  }
  /**
   * Metadata fields for UMP. A piece of data satisfies UMP policy if: (data access region is in the `regions_allowed` list) AND (data access time \>= availability_start_timestamp) AND (data access time < availability_end_timestamp)
   */
  export interface Schema$StorageGraphBfgUmpPolicyMetadata {
    /**
     * Timestamp after which data with this policy cannot be used.
     */
    availabilityEnds?: string | null;
    /**
     * Timestamp before which data with this policy cannot be used.
     */
    availabilityStarts?: string | null;
    regionsAllowed?: Schema$KeGovernanceTypedRegions;
  }
  /**
   * LINT.IfChange Next ID: 101
   */
  export interface Schema$SuperrootPodcastsRecommendationsPodcastRecsFeatures {
    /**
     * Average duration listened per episode. Ignores duration < 10s. Computed offline
     */
    averageDurationSecondsEpisode?: string | null;
    /**
     * Average duration listened per show. Ignores duration < 10s. Computed offline
     */
    averageDurationSecondsShow?: string | null;
    /**
     * Average fraction of podcast listened per episode. Ignores duration < 10s. Computed offline
     */
    averageFractionEpisode?: number | null;
    /**
     * Average fraction of podcast listened per show. Ignores duration < 10s. Computed offline
     */
    averageFractionShow?: number | null;
    /**
     * Per cluster lift where the lift_squashing_factor is set to 0.4
     */
    balancedLift?: number | null;
    /**
     * category_match is a 0 to 1 score depicting how much of the user's listening history matches the categories of this podcast recommendation.
     */
    categoryMatch?: number | null;
    /**
     * The total minutes listened to this podcast show by users in this cluster
     */
    clusterFeedMinutes?: string | null;
    /**
     * This captures the probability that this show could have been listened by the user in lieu of what they have subscribed or listened to.
     */
    colistenedShowColistenAffinity?: number | null;
    /**
     * This captures the rank of the podcast show in the colisten candidate generator.
     */
    colistenedShowLevelRank?: string | null;
    convAiToxicitySevereScore?: number | null;
    /**
     * Score of csai safe search score go/safesearch
     */
    csaiScore?: number | null;
    /**
     * Ordinal rank features like this have been found to be useful in Hermione Recipes, where the top ranked items from a candidate generator is always retained. Ranks are integral values starting with 1 for the highest affinity show.
     */
    dnnShowLevelRank?: string | null;
    /**
     * Dot product of user embedding and podcast show embedding from the two tower model v2a
     */
    dnnV2aScore?: number | null;
    /**
     * Sigmoid of the score obtained by dot product of user embedding and show embedding. See https://b.corp.google.com/issues/158602034#comment2 for intuition.
     */
    dnnV2aScoreSigmoid?: number | null;
    /**
     * Total duration listened for this episode by all users. Ignores duration < 10s. Computed offline
     */
    durationTotalSecondsEpisode?: string | null;
    /**
     * Total duration listened for this show by all users. Ignores duration < 10s. Computed offline
     */
    durationTotalSecondsShow?: string | null;
    /**
     * The duration of a single episode, in seconds. - For show documents, this is a duration of a typical recent episode, or an approximation thereof. - For episode documents, this is the duration of the episode itself.
     */
    episodeDurationSec?: string | null;
    /**
     * Number of all episode impressions.
     */
    episodeImpressions?: string | null;
    /**
     * Number of episode impressions during the past week.
     */
    episodeImpressionsPastWeek?: string | null;
    /**
     * How frequently are podcasts published by this show. To see publishing frequency calculation go here: http://shortn/_6zzfyEpBRq
     */
    episodesPublishedPerMonth?: string | null;
    /**
     * Whether the show is marked as explicit by the authors
     */
    explicitShow?: string | null;
    /**
     * Scaled pagerank score for the feed url in [0..1]. Not to be confused with pagerank above, which measures the pagerank for the feed's homepage.
     */
    feedPagerank?: number | null;
    /**
     * final reaction boost score computed from positive_reaction_boost_score and negative_reaction_boost_score. The score will be applied as a multiplier on the ranking score to adjust the ranking.
     */
    finalReactionBoostScore?: number | null;
    /**
     * Some of all fraction of this listened by users. Ignores duration < 10s. Computed offline
     */
    fractionTotalEpisode?: number | null;
    /**
     * Some of all fraction of this show listened by users. Ignores duration < 10s. Computed offline
     */
    fractionTotalShow?: number | null;
    /**
     * Score of fringe safe search score go/safesearch
     */
    fringeScore?: number | null;
    /**
     * Probability of a random user listening to this podcast randomly
     */
    globalProb?: number | null;
    /**
     * Probability of a random user from this cluster listening to this podcast randomly (K-means specific feature)
     */
    inClusterProb?: number | null;
    /**
     * A binary value based on whether this is a canonical source for a cluster.
     */
    isCanonical?: boolean | null;
    /**
     * Ranks are integral values starting with 1 for the highest affinity show.
     */
    kmeansShowLevelRank?: string | null;
    /**
     * How much of user listening history match the language of this episode
     */
    languageMatch?: number | null;
    /**
     * Ownership verification status for the episode page URL.
     */
    linkOwnershipVerified?: boolean | null;
    /**
     * The rank of the show in the top listened shows candidate generator. Ranks are integral values starting with 1 for the highest affinity show.
     */
    listenedShowLevelRank?: string | null;
    /**
     * This captures the fraction of total listening time accounted for by this show.
     */
    listenedShowListeningAffinity?: number | null;
    /**
     * Number of minutes of podcasts listened by the user
     */
    listenTimeMin?: number | null;
    /**
     * Feature ID of a location. For more info, see go/feature-id.
     */
    locationFeatureId?: string | null;
    /**
     * Match score between user listening mids and episode webref entities, where the listening can have happened at any time in the past. Values are in a 0.0 to 1.0 range.
     */
    longUserListeningWebrefSimilarity?: number | null;
    /**
     * Score of medical safe search score go/safesearch
     */
    medicalScore?: number | null;
    /**
     * Match score between user listening mids and episode webref entities, where the listening is limited to last two mohths activity. Values are in a 0.0 to 1.0 range.
     */
    mediumUserListeningWebrefSimilarity?: number | null;
    /**
     * boost score from the similarity between the candidate and the shows with user negative feedback, currently the score will be applied directly to the final ranking score: go/podcast-reaction-reranking-v1, but can be used as reranker model feature in the future.
     */
    negativeReactionBoostScore?: number | null;
    /**
     * Per cluster lift where the lift_squashing_factor is set to +2
     */
    nicheLift?: number | null;
    /**
     * The number of users in this k-means cluster.
     */
    numListenersInKmeansCluster?: string | null;
    /**
     * The number of users in the k-means cluster who have listened to this feed.
     */
    numListenersToShowInKmeansCluster?: string | null;
    /**
     * Number of podcasts listened by the user
     */
    numListens?: number | null;
    /**
     * From: indexing/speech/proto/colisten-matrix.proto The number of subscribers for this podcast series.
     */
    numSubscribersShow?: string | null;
    /**
     * From: indexing/speech/proto/colisten-matrix.proto Absolute number of unique listeners during the past month.
     */
    numUniqueListenersShow?: string | null;
    /**
     * Score of offensive safe search score go/safesearch
     */
    offensiveScore?: number | null;
    peDurationScoreEpisode?: number | null;
    peDurationScoreShow?: number | null;
    peDurationTotalScoreEpisode?: number | null;
    peDurationTotalScoreShow?: number | null;
    peFractionScoreEpisode?: number | null;
    peFractionScoreShow?: number | null;
    peFractionTotalScoreEpisode?: number | null;
    peFractionTotalScoreShow?: number | null;
    peListenScoreEpisode?: number | null;
    /**
     * Anima User Embedding based features. Dot product of Anima User Embedding and podcast embeddings from UserEmbeddingBasedSignals (podcasts/quality/proto/ranking_signals.proto)
     */
    peListenScoreShow?: number | null;
    peListenTotalScoreEpisode?: number | null;
    peListenTotalScoreShow?: number | null;
    /**
     * Per cluster lift where the lift_squashing_factor is set to -3
     */
    popularLift?: number | null;
    /**
     * Score of porn safe search score go/safesearch
     */
    pornScore?: number | null;
    /**
     * boost score from the similarity between the candidate and the shows with user positive feedback, currently the score will be applied directly to the final ranking score: go/podcast-reaction-reranking-v1, but can be used as reranker model feature in the future.
     */
    positiveReactionBoostScore?: number | null;
    /**
     * This is the language extracted from the query_language.
     */
    queryLanguage?: string | null;
    /**
     * The index in the list of most popular podcasts.
     */
    rank?: string | null;
    /**
     * rank_percent_contrib = 100 / ( 1 + rank_percent ) Here rank_percent was derived from show level data in Wernicke corpus So if rank_percent of a feed was 3, then the feature value would be: 100 / (1 + 3) = 25. This indicator falls off quickly from 100 to almost 1 as we go from rank_percent 0 to 100.
     */
    rankPercentContrib?: number | null;
    /**
     * Match score between user listening mids and episode webref entities, where the listening is limited to recent activity. Values are in a 0.0 to 1.0 range.
     */
    recentUserListeningWebrefSimilarity?: number | null;
    /**
     * A reranking feature showing the age of the episode that is being recommended. This is computed as (current time - publication_time) publication_time of the episode is defined: (http://shortn/_S46Ouk5ZWW) publication_time is specified as seconds since Unix Epoch.
     */
    secondsSincePublication?: string | null;
    /**
     * Base quality of the document, used as a multiplier for the query-specific score. Should be in [0, 1] range. See: http://g3doc/indexing/moonshine/generic/g3doc/doc/scoring
     */
    showBaseQuality?: number | null;
    /**
     * Number of show episode impressions.
     */
    showImpressions?: string | null;
    /**
     * Number of show impressions during the past week.
     */
    showImpressionsPastWeek?: string | null;
    /**
     * Language of the show from show data.
     */
    showLanguage?: string | null;
    /**
     * Show only impressions. Doesn't include shows of episode impressions.
     */
    showOnlyImpressions?: string | null;
    showOnlyImpressionsPastWeek?: string | null;
    /**
     * Expresses the absolute popularity rank within all documents.
     */
    showPopularRank?: string | null;
    /**
     * Score of spoof safe search score go/safesearch
     */
    spoofScore?: number | null;
    /**
     * This captures the fraction of total listening time accounted for by this subscribed show.
     */
    subscribedShowListeningAffinity?: number | null;
    /**
     * The rank of the show in the subscription candidate generator. Ranks are integral values starting with 1 for the highest subscribed affinity show.
     */
    subscriptionShowLevelRank?: string | null;
    surface?: string | null;
    /**
     * Show level trending score percent from Wernicke corpus.
     */
    trendingScorePercent?: string | null;
    /**
     * Inferred language preferences of the user with their probabilities.
     */
    ulpLanguage?: Schema$SuperrootPodcastsRecommendationsPodcastRecsFeaturesUserLanguage[];
    /**
     * How much of ulp match the language of this episode
     */
    ulpLanguageMatch?: number | null;
    /**
     * The distance between user's Anima embedding and the centroid of the cluster in k-means.
     */
    userClusterDistance?: number | null;
    /**
     * Match score between user interest mids and episode salient entities. in a 0.0 to 1.0 range.
     */
    userInterestsSalientSimilarity?: number | null;
    /**
     * Match score between user interest mids and episode webref entities. in a 0.0 to 1.0 range.
     */
    userInterestsWebrefSimilarity?: number | null;
    /**
     * Language of shows in user history and how much they listened to each.
     */
    userLanguage?: Schema$SuperrootPodcastsRecommendationsPodcastRecsFeaturesUserLanguage[];
    /**
     * Score of violence safe search score go/safesearch
     */
    violenceScore?: number | null;
    /**
     * Score of vulgar safe search score go/safesearch
     */
    vulgarScore?: number | null;
  }
  export interface Schema$SuperrootPodcastsRecommendationsPodcastRecsFeaturesUserLanguage {
    lang?: string | null;
    score?: number | null;
  }
  export interface Schema$TelephoneNumber {
    /**
     * The local "area code", if there is such a concept.
     */
    areaCode?: string | null;
    /**
     * The international direct dialing code for the country, as per ITU E.164: http://www.itu.int/itudoc/itu-t/ob-lists/icc/e164_763.html
     */
    countryCode?: number | null;
    /**
     * Extension (to be dialed after connection).
     */
    extension?: string | null;
    /**
     * To call this number from within the same country, the national call prefix may be necessary. This is 1 in the US, 0 in the UK, etc. In the US, it's reasonable to omit the leading 1 when writing the number, but in other countries it is less optional.
     */
    nationalPrefix?: string | null;
    /**
     * The actual number, broken down into sections as per local convention. Note that the actual formatting of these sections (hyphen vs space, usage of parentheses) will vary according to local custom.
     */
    number?: string[] | null;
  }
  /**
   * The docshards are a FlatSSTable from (64-bit) urlfp to data containing the information found in this protocol buffer. (It's not actually one of these PBs for various performance reasons; instead, the DocumentFormat class handles serialization and deserialization in our own way) Next available ID: 37
   */
  export interface Schema$TeragoogleDocumentInfo {
    attachment?: Schema$TeragoogleDocumentInfoAttachment[];
    /**
     * The average weight of terms in the document. If not available, there will be no term weight averaging: font sizes will be taken literally from the document HTML.
     */
    averageTermWeight?: number | null;
    /**
     * The document itself. If present, the docservers parse the contents to create a mustang repository.
     */
    doc?: Schema$GDocumentBase;
    /**
     * The serialized ExtendedDocId, needed to construct a proper docinfo response if the docinfo request is missing it and it's present.
     */
    extendedDocid?: string | null;
    /**
     * the global docid, we need it in the docservers (Continuum mode) to construct proper docinfo response when the docinfo request does not contain a valid global docid
     */
    globalDocid?: string | null;
    /**
     * If the original encoding isn't UTF8
     */
    originalEncoding?: number | null;
    section?: Schema$TeragoogleDocumentInfoSection[];
    /**
     * Indicates format of 'tokens' field in all Section entries.
     */
    sectionType?: string | null;
  }
  /**
   * Misc. attachments to be added to the dynamic repository the docservers build. These override any attachments created by parsing the GDocumentBase.
   */
  export interface Schema$TeragoogleDocumentInfoAttachment {
    name?: string | null;
    options?: Schema$TeragoogleRepositoryAttachmentOptions;
    value?: string | null;
  }
  /**
   * Sections to be added to the dynamic repository the docservers build. 'tokens' is either a sequence of tokens encoded using the TokenSequenceEncoder (MDU), or a TokenspaceRepository (depends on what's set in section_type. If 'doc' is present, then the contents of these sections override what was created by parsing 'doc'.
   */
  export interface Schema$TeragoogleDocumentInfoSection {
    /**
     * List of field repository (subsection) names within the section.
     */
    fieldName?: string[] | null;
    name?: string | null;
    tokens?: string | null;
  }
  /**
   * Compression type to be applied to section/attachment.
   */
  export interface Schema$TeragoogleRepositoryAttachmentOptions {
    compression?: string | null;
  }
  /**
   * Data related to title sizing calculations in Muppet.
   */
  export interface Schema$TitleSizeParams {
    /**
     * Total max length of title in deciems
     */
    muppetTitleLengthInDeciems?: number | null;
    /**
     * Number of lines for title
     */
    muppetTitleNumLines?: number | null;
  }
  /**
   * DO NOT USE THIS FOR ANYTHING LIVE WITHOUT PERMISSION! If you want to use this for anything user-facing file a logs-access ticket describing what you want to do. This data is currently only available in the freshdocs pipeline, so it will only be present in instant mustang and certain librarian shards. Email freshdocs-indexing with questions.
   */
  export interface Schema$ToolBarPerDocData {
    /**
     * Indicates how many distinct toolbar visitors this page had in the past day. Will only be present if the number is reasonably large.
     */
    VisitorsPastDay?: number | null;
  }
  /**
   * Next ID: 29
   */
  export interface Schema$TravelFlightsAirlineConfig {
    /**
     * STAR_ALLIANCE
     */
    alliance?: string | null;
    /**
     * Default url for baggage fee information.
     */
    baggageCarryonLimitationsUrls?: Schema$TravelFlightsNameCatalogProto;
    /**
     * Default url for baggage fee information.
     */
    baggageFeeUrls?: Schema$TravelFlightsNameCatalogProto;
    /**
     * ISO 3166-1 alpha-2 country code in which this airline is domestic.
     */
    countryCode?: string | null;
    /**
     * LocalizedContactInfo allows localization by country and language. Once the data is ready, we will start filling both fields. After that the old field will be deprecated and deleted at some point.
     */
    countryContactInfo?: Schema$TravelFlightsAirlineConfigCountryContactInfo[];
    /**
     * true, if this carrier's IATA code is a "controlled duplicate" (goto/controlled-duplicate).
     */
    dupFlag?: boolean | null;
    fareFamilyUrls?: Schema$TravelFlightsNameCatalogProto;
    /**
     * IATA codes of airlines who this airline's travel can be credited to for mileage accrual.
     */
    fqtvPartnerCode?: string[] | null;
    greenFaresInfo?: Schema$TravelFlightsAirlineConfigGreenFaresInfo;
    /**
     * Note that some iata_codes are reused (`dup_flag` field). For details, including how to resolve collisions for airlines shown in Google Flights, see: go/controlled-duplicate go/flights-data/airlines#resolving-iata-code-collisions cs/go/controlled-duplicate U2 - some have no IATA code
     */
    iataCode?: string | null;
    /**
     * EZY - some have no ICAO code
     */
    icaoCode?: string | null;
    /**
     * U2! - with optional dedup sign ('!')
     */
    innovataCode?: string | null;
    localizedContactInfo?: Schema$TravelFlightsAirlineConfigLocalizedContactInfo[];
    /**
     * Note: fields #16 and #17 are ununused. The identifier of the airline, e.g. /m/07y2s for United Populated using airlines_mids.csv.
     */
    mid?: string | null;
    /**
     * EasyJet/イージージェット
     */
    names?: Schema$TravelFlightsNameCatalogProto;
    /**
     * Default url for passenger assistance information.
     */
    passengerAssistanceUrls?: Schema$TravelFlightsNameCatalogProto;
    /**
     * Number of flights with this airline over the next 180 days.
     */
    popularity?: number | null;
    /**
     * KLM - instead of 'KLM Royal Dutch Airlines'
     */
    shortNames?: Schema$TravelFlightsNameCatalogProto;
    /**
     * URLs for airlines' sustainability programs.
     */
    sustainabilityProgramUrls?: Schema$TravelFlightsNameCatalogProto;
    type?: string | null;
    /**
     * http://www.airfrance.us/
     */
    urls?: Schema$TravelFlightsNameCatalogProto;
    /**
     * Default url for waiver information.
     */
    waiverSummaryUrls?: Schema$TravelFlightsNameCatalogProto;
  }
  export interface Schema$TravelFlightsAirlineConfigContactInfo {
    /**
     * Typically, formatted phone number.
     */
    data?: string | null;
    type?: string | null;
  }
  /**
   * Airline contact info grouped by country.
   */
  export interface Schema$TravelFlightsAirlineConfigCountryContactInfo {
    contactInfo?: Schema$TravelFlightsAirlineConfigContactInfo[];
    /**
     * Two char country code, e.g. "US"
     */
    countryCode?: string | null;
  }
  export interface Schema$TravelFlightsAirlineConfigGreenFaresInfo {
    bonusMilesProgramName?: string | null;
    bonusMilesQuantity?: string | null;
    bonusMilesQuantityType?: string | null;
    bonusMilesType?: string | null;
    contributionFraming?: string | null;
  }
  /**
   * Airline contact info grouped by language. The language locale subcode will determine the country.
   */
  export interface Schema$TravelFlightsAirlineConfigLocalizedContactInfo {
    contactInfo?: Schema$TravelFlightsAirlineConfigContactInfo[];
    /**
     * IETF BCP-47, e.g. "en" or "zh-HK-Hant"
     */
    language?: string | null;
  }
  export interface Schema$TravelFlightsNameCatalogEntry {
    language?: string | null;
    text?: string | null;
  }
  export interface Schema$TravelFlightsNameCatalogProto {
    name?: Schema$TravelFlightsNameCatalogEntry[];
  }
  /**
   * ClientServiceInfo is meant for trawler/harpoon clients which are in turn services to store some data specific to their clients. E.g., Kodachrome may serve multiple other clients. In this case they can store their client name here. Webmirror may also store the feed name here even though a feed is technically not a service client. ClientServiceInfo is in nature similar to ClientInfo, except it's stored in FetchReplyData (i.e., trawler logs), whereas ClientInfo is copied to FetchReply (outside FetchReplyData), thus it's not stored in trawler logs.
   */
  export interface Schema$TrawlerClientServiceInfo {
    clientLabels?: Schema$TrawlerClientServiceInfoClientLabels[];
    /**
     * Project delegation name to support bandwidth enforcement. Harpoon will call SetDelegatedUser() with the specified DelegatedProjectName and a domain associated with the RequestorID provided in the client capatibility file.
     */
    DelegatedProjectName?: string | null;
    ServiceClientID?: string | null;
  }
  /**
   * ClientLabels contains client-specified key/value pairs, used to annotate individual FetchRequests and FetchReplies. This is primarily useful when the Multiverse Nexus performs postprocessing of fetchreplies. ClientLabels essentially allow clients to use the Nexus UI to slice statistics computed on fetchreplies by the specified key/value pairs. Note: we don't use "map" type here delibrately in order to avoid the non-deterministric serialization of the "map" field. See b/69064361 for more details.
   */
  export interface Schema$TrawlerClientServiceInfoClientLabels {
    /**
     * ======================== End of Deprecated Part ========================
     */
    labelsDeprecated?: {
      [
        key: string
      ]: Schema$TrawlerClientServiceInfoClientLabelsClientLabelValues;
    } | null;
    name?: string | null;
    values?: string[] | null;
  }
  /**
   * ===================== Beginning of Deprecated Part ======================
   */
  export interface Schema$TrawlerClientServiceInfoClientLabelsClientLabelValues {
    value?: string[] | null;
  }
  /**
   * Parsed version of a Content-Range field, which in http might look like: Content-Range: bytes 500-999/3156
   */
  export interface Schema$TrawlerContentRangeInfo {
    EndPos?: string | null;
    /**
     * In ContentRange, the first byte is 0 (rather than 1), and the positions are inclusive. Thus, length is EndPos+1-StartPos
     */
    StartPos?: string | null;
    TotalLength?: string | null;
  }
  /**
   * This is similar to CrawlDates group in FetchReplyData, except that 1) it's a message; 2) it's filled in each Redirects hop; and 3) the timestamps are in ms rather than seconds since Unix Epoch.
   */
  export interface Schema$TrawlerCrawlTimes {
    /**
     * fetched from the web. Time when the page was last
     */
    NotChangedTimeMs?: string | null;
    /**
     * Time when the page was
     */
    OriginalCrawlTimeMs?: string | null;
    /**
     * checked but found to be the same as before. If set, timestamp to indicate
     */
    ReuseTimeMs?: string | null;
  }
  /**
   * Event is for logging interesting events that happen during a url fetch. Interesting events include "fetch start", "url rejected", etc. The events are written to binary logs together with the request and reply messages. If the same event occurs multiple times consecutively, We record the time of the first three instances in EarliestTimeStamp but omit the rest. We keep track the total number of occurrences in NumOccurrences and the timestamp of the last occurrence is kept in TimeStamp field.
   */
  export interface Schema$TrawlerEvent {
    ID?: string | null;
    Msg?: string | null;
    NumOccurrences?: number | null;
    /**
     * Limited to 3.
     */
    OldestTimeStampInUS?: string[] | null;
    TimeStampInUS?: string | null;
  }
  export interface Schema$TrawlerFetchBodyData {
    compression?: string | null;
    content?: string | null;
    /**
     * Size hint. Set if compression != NO_COMPRESSION
     */
    uncompressedSize?: string | null;
  }
  /**
   * Fetcher -\> FetchClient FetchReplyData is the metadata for a reply from a FetchRequest. For metadata + document body, FetchReply is further below. NOTE: FetchReplyData (and FetchReply) is the output interface from Multiverse. Teams outside Multiverse/Trawler should not create fake FetchReplies. Trawler: When adding new fields here, it is recommended that at least the following be rebuilt and pushed: - cron_fetcher_index mapreduces: so that UrlReplyIndex, etc. retain the new fields - tlookup, tlookup_server: want to be able to return the new fields - logviewer, fetchutil: annoying to get back 'tag88:' in results -------------------------- Next Tag: 124 -----------------------
   */
  export interface Schema$TrawlerFetchReplyData {
    /**
     * This field, if non-empty, contains the SSL certificate chain from the server. The filed should be serialized SSLCertificateInfo protobuf, although it used to be text format. Hence, one should ideally use trawler::CertificateUtil to check this field and understand in more detail. This field is populated in two cases: (1) something is wrong with the server certificate and we cannot verify the server's identity. In this case the URL most likely won't display in a browser; (2) if you turned on WantSSLCertificateChain in the FetchRequest. In this case the server certificate may be perfectly fine (despite the field name). This is for the initial hop; additional hops are in Redirects group.
     */
    BadSSLCertificate?: string | null;
    /**
     * Some client specific data that's set by client in the FetchRequest, and we just copy it here verbatim. This is similar to ClientInfo that we copy from FetchRequest to FetchReply, but this is copied to FetchReplyData, thus stored in trawler logs so can be useful for debugging cases.
     */
    ClientServiceInfo?: Schema$TrawlerClientServiceInfo;
    /**
     * Is the associated body compressed ?
     */
    CompressedBody?: boolean | null;
    crawldates?: Schema$TrawlerFetchReplyDataCrawlDates;
    CrawlTimes?: Schema$TrawlerCrawlTimes;
    /**
     * Transfer operation detailed report.
     */
    deliveryReport?: Schema$TrawlerFetchReplyDataDeliveryReport;
    /**
     * Sometimes the hostid and destination IP in the FetchReplyData are not for the hostname in the url. If that's the case DNSHost will be the host that we have used when resolving hostid and DNS. Right now there are two cases: (1) malware team provides a proxy IP:Port to us, so DNSHost will be the proxy IP; and (2) PSS team provides a reference DNS host; so DNSHost will be the reference DNS host.
     */
    DNSHost?: string | null;
    /**
     * The download time for this fetch (ms). This is the RTT time between fetcher and HOPE, note it does not include time from redirects, just initial hop. If you want the sum of the DownloadTime values for all fetches in the redirect chain, then use the DownLoadTime value in the FetchStats.
     */
    DownloadTime?: number | null;
    /**
     * If present, the edge region that we have used.
     */
    EgressRegion?: string | null;
    /**
     * If present, it means this host might be eligible for geo crawl. However, this does not mean we enable geo-crawl for this request. Check "GeoCrawlEgressRegion" instead to see if this fetch is conducted via geo crawl.
     */
    EligibleGeoCrawlEgressRegion?: string | null;
    /**
     * ------- If fetched, the IP from which we fetched, as well as source IP and ports. It is recommended to use trawler::DestinationIP()/HasDestinationIP() accessors, which return a proper IPAddress.
     */
    Endpoints?: Schema$TrawlerTCPIPInfo;
    Events?: Schema$TrawlerEvent[];
    /**
     * With the introduction of fetch pattern based hostload exceptions, one hostid may have multiple hostload buckets, each with its own hostload. In this case, FetchPatternFp will be set to identify the hostload bucket within the hostid. Note this field is only meaningful for the HostBucketData which is recorded only when the client requests to have as part of reply. However, this field is useful for certain stats gathering, so we choose to always record it if its value is available during the fetch.
     */
    FetchPatternFp?: string | null;
    fetchstats?: Schema$TrawlerFetchReplyDataFetchStats;
    /**
     * If present, fetch was conducted using floonet and this is the location of floonet egress point we used.
     */
    FlooEgressRegion?: string | null;
    /**
     * If present, the last hop of the fetch was conducted using floonet and this is the location of floonet egress point. It is different from EgressRegion and FlooEgressREgion because it is a Trawler transparent routing configured in the geo crawl rules(go/da-geo-crawl).
     */
    GeoCrawlEgressRegion?: string | null;
    /**
     * Whether we fallback from geo crawl to local crawl during fetch. The fallback could happen in any hops and there can be at most one fallback because once fallback happens, we will not try geo-crawl anymore.
     */
    GeoCrawlFallback?: boolean | null;
    /**
     * Set only when GeoCrawlFallback is true. Logs the geo crawl location we attempted but failed for this request.
     */
    GeoCrawlLocationAttempted?: string | null;
    /**
     * Returns the cache key used when doing cache lookup/update, on a per-hop basis (initial hop) Note this field will not be set if cache lookup/update is disabled/skipped.
     */
    HopCacheKeyForLookup?: string | null;
    HopCacheKeyForUpdate?: string | null;
    /**
     * Returns trawler::ReuseInfo with status of IMS/IMF/cache query, on a per-hop basis (initial hop) For example, if the URL redirect chain is [URL A] --\> [URL B] --\> [URL C], this field stores the reuse info of [URL A].
     */
    HopReuseInfo?: string | null;
    /**
     * Extra information in robots.txt for this page (integer: or'ed together of type trawler::RobotsInfo) on a per-hop basis (initial hop)
     */
    HopRobotsInfo?: number | null;
    /**
     * Data about the host bucket this request is in (if desired) Please talk with Trawler team before considering using this, since what we fill in here is subject to change.
     */
    HostBucketData?: Schema$TrawlerHostBucketData;
    /**
     * If known, the trawler::HostId that identifies the host (initial hop).
     */
    HostId?: string | null;
    /**
     * Set to: o HSTS_STATUS_NONE if there was no HSTS policy match for the URL's host. o HSTS_STATUS_AVAILABLE if there was an HSTS policy, but the URL was not rewritten from HTTP to HTTPS because enable_hsts was not set in client capability config. o HSTS_STATUS_REWRITTEN if the HSTS policy was followed and url was rewritten from HTTP to HTTPS. This field only pertains to the current URL fetch and does not explain a redirect's HSTS status. However, FetchReplyData.Redirects have their own HSTSInfo.
     */
    HSTSInfo?: string | null;
    /**
     * The http protocol we send to fetch this URL. This will only be set if the request is using http
     */
    HttpProtocol?: string | null;
    /**
     * The HTTP headers we sent to fetch this URL (initial hop). Not normally filled in, unless FetchParams.WantSentHeaders is set.
     */
    HttpRequestHeaders?: string | null;
    /**
     * HTTP headers from the response (initial hop). Trawler does not fill this in; this is intended as a placeholder for crawls like webmirror that fill in and want to track this across redirect hops.
     */
    HttpResponseHeaders?: string | null;
    /**
     * The received HTTP trailers if available.
     */
    HTTPTrailers?: Schema$TrawlerFetchReplyDataHTTPHeader[];
    /**
     * Stores the HTTP version we used in the final hop.
     */
    HttpVersion?: string | null;
    /**
     * Same as the ID of the matching request (used for matching internal fetchclient data in request/reply)
     */
    ID?: string | null;
    /**
     * Crawl status of the last url on chain
     */
    LastUrlStatus?: Schema$TrawlerFetchStatus;
    /**
     * If the input url in FetchRequest is Amazon S3 protocol or Apple Itunes protocol, we will translate it into https url and log it as https url. In the meantime we will store the original s3/itunes url in this field. Before sending back to client, the Url will be translated back to s3 and this field will be cleard.
     */
    originalProtocolUrl?: string | null;
    partialresponse?: Schema$TrawlerFetchReplyDataPartialResponse;
    /**
     * Trawler can optionally add a policy label to a FetchReply. Some uses: - "spam" label via trawler_site_info - "roboted:googlebot" label as a signal to crawls supporting multiple useragents that it's not safe to share the fetch replies with googlebot crawls.
     */
    PolicyData?: Schema$TrawlerPolicyData[];
    /**
     * If the fetch uses HTTP POST, PUT, or PATCH protocol, and WantPostData is true, the POST data will be copied here. This is only for initial hop. If there are redirects, HTTP POST will be changed to GET on subsequent hops, and the PostData will be cleared. There is only one exception, if the HTTP response code to the POST request is 307 (a new code introduced in RFC7321, sec. 6.4.7), we will preserve the request method and the PostData for the next hop.
     */
    PostData?: string | null;
    /**
     * This is available only if a fetch results in TIMEOUT_WEB, and we were able to predict, based on content length and bandwidth we were using, how much time (in ms) would be needed to download the entire content.
     */
    PredictedDownloadTimeMs?: number | null;
    protocolresponse?: Schema$TrawlerFetchReplyDataProtocolResponse;
    /**
     * Whether we fallback from HTTP/2 to HTTP/1.1 during fetch. The fallback could happen in any hops and there can be at most one fallback because once fallback happens, we will not try HTTP/2 anymore.
     */
    ProtocolVersionFallback?: boolean | null;
    redirects?: Schema$TrawlerFetchReplyDataRedirects[];
    /**
     * If this fetch was a result of a redirect, we populate the parent ID here.
     */
    RedirectSourceFetchId?: string | null;
    /**
     * RequestorId is the same on as in the request that triggers this reply -- mainly for diagnostics purpose
     */
    RequestorID?: string | null;
    /**
     * Machine that sent Trawler this request, for logging. An IPAddress object, packed as a string.
     */
    RequestorIPAddressPacked?: string | null;
    /**
     * -------- Returns trawler::ReuseInfo with status of IMS/IMF/cache query. Consider using HopReuseInfo instead, which has per-redirect hop detail. If there's URL redirection, this field stores the reuse info of the last hop. For example, if the and URL redirect chain is [URL A] --\> [URL B] --\> [URL C], this field stores the reuse info of [URL C].
     */
    ReuseInfo?: string | null;
    /**
     * Extra information in robots.txt for this page (ORed together bits from trawler::RobotsInfo). e.g. nosnippet vs. noarchive vs nofollow vs noindex vs disallow Consider using HopRobotsInfo instead, which has per-redirect hop detail.
     */
    RobotsInfo?: number | null;
    /**
     * Status of the robots.txt fetch. Currently, this is present if: - Certain robots error cases, such as URL_TIMEOUT-TIMEOUT_ROBOTS or URL_UNREACHABLE-UNREACHABLE_ROBOTS_ERROR. - If WantRobotsBody is set in the FetchParams.
     */
    RobotsStatus?: Schema$TrawlerFetchStatus;
    /**
     * The robots.txt we used for this URL (initial hop). Not normally filled in unless WantRobotsBody is set. This is mostly for debugging purposes and should not be used for large volumes of traffic.
     */
    RobotsTxt?: string | null;
    /**
     * Status of the fetch - refers to the final status at the end of the redirect chain.
     */
    Status?: Schema$TrawlerFetchStatus;
    /**
     * If present, Client API will enforce the contained constraints
     */
    ThrottleClient?: Schema$TrawlerThrottleClientData;
    /**
     * Sometimes we throw away content because we cannot store it in the internal buffers. These is how many bytes we have thrown away for this factor.
     */
    ThrownAwayBytes?: string | null;
    /**
     * When this reply came back from fetcher NOTE: TimestampInMS is used for internal debugging. To see when a document was crawled, check CrawlDates.
     */
    TimestampInMS?: string | null;
    /**
     * How many raw bytes we read from the connection to the server when we fetched the page. Includes everything: HTTP headers, overhead for HTTP chunked encoding, whatever compressed/uncompressed form (i.e. gzip/deflate accept-encoding) the content was sent in, etc. This is NOT the same as the size of the uncompressed FetchReply::Body - if the webserver used gzip encoding, this value might be much smaller, since it only counts the compressed wire size. To illustrate, think of 3 sizes: 1) TotalFetchedSize - amount Trawler read over the wire from the server. If they used gzip/deflate, this might be 4-5x smaller than the body. 2) UnTruncatedSize/CutoffSize - how big is the full document, after uncompressing any gzip/deflate encoding? If truncated, this is reflected in CutoffSize. 3) FetchReply::Body size - most crawls enable Trawler compression to save storage space (gzip + a google html dictionary). The body size that the end Trawler client sees is post-compression.
     */
    TotalFetchedSize?: string | null;
    /**
     * Traffic type of this fetch.
     */
    trafficType?: string | null;
    /**
     * If the url got rewriten by transparent rewrites, here it is the series of rewrites it got through. The fetched one is the last
     */
    TransparentRewrites?: string[] | null;
    /**
     * For logging only; not present in the actual fetcher response
     */
    TrawlerPrivate?: Schema$TrawlerTrawlerPrivateFetchReplyData;
    /**
     * The original url in the request we are answering. Even though "optional," url must be filled in on all well-formed replies. Trawler guarantees that it is filled in, and basically every client expects it (CHECKs in some cases). -\> Not filling this field in is a bug, if you share this data with other crawls/pipelines. You should expect everybody else to require a url.
     */
    Url?: string | null;
    /**
     * Encoding info for the original url itself. Bitfield encoding; see UrlEncoding::{Set,Get\}Value in webutil/urlencoding.
     */
    UrlEncoding?: number | null;
    /**
     * Use the special compression dictionary for uncompressing this. (trawler::kHtmlCompressionDict. Use trawler::FetchReplyUncompressor to uncompress; crawler/trawler/public/fetchreply-util.h)
     */
    UseHtmlCompressDictionary?: boolean | null;
  }
  /**
   * Reuse information returned if UrlState == CRAWLED, specifying when we may have reused from cache. See also ReuseInfo below. NOTE: Please use the CrawlTimes below. CrawlDates is deprecated. use CrawlTimes instead!
   */
  export interface Schema$TrawlerFetchReplyDataCrawlDates {
    /**
     * fetched from the web. Timestamp indicates when
     */
    NotChangedDate?: number | null;
    /**
     * Timestamp when the page was
     */
    OriginalCrawlDate?: number | null;
    /**
     * the page was last checked but found to be the same as before. If set, timestamp to indicate
     */
    ReuseDate?: number | null;
  }
  /**
   * Depending on which Data Acquisition API the client uses, the fetched content can be delivered to the client in the RPC, via Goops, or copied to the client's storage system (possibly after transformation). In the latter case, DeliveryReport will contain info about the delivery status, such as whether we have permission error, whether the destination storage is out of quota, etc).
   */
  export interface Schema$TrawlerFetchReplyDataDeliveryReport {
    /**
     * The events store the detail of messages (usually error).
     */
    events?: Schema$TrawlerEvent[];
    /**
     * The complete path (include the file name) of the file downloaded. For requests that require delivery, this path will be the user specified location. For requests that use Multiverse default storage, this path will be the managed by Multiverse.
     */
    filePath?: string | null;
    /**
     * Status of the transfer action.
     */
    status?: string | null;
  }
  /**
   * The fetcher keeps track of various time intervals spent in the states of the fetcher url control flow. Sometimes flows branch out into more than one flow (next flow), and we aggregate all the time intervals spent in a specific state for all the flows to get the time interval for the state. The time interval for a state is therefore not the time interval of an individual flow, if the WaitNextFlow time is non zero. The WaitNextFlow interval included here is the time spent by one flow waiting for another flow. Although the WaitNextFlow time is the time spent by a flow in the WaitNextFlow state, its also equivalent to the entire timeline of another flow. It is the time spent in the various states of another flow. In computing the total time spent in the primary flow, one must omit the WaitNextFlow time, since it is already included in the form of slices of individual state time intervals in the aggregated time intervals for other states, and will result in double counting.
   */
  export interface Schema$TrawlerFetchReplyDataFetchStats {
    /**
     * Overhead spent RPCing with the Bot/proxy.
     */
    BotOverheadMS?: number | null;
    ClientControlflowStats?: Schema$TrawlerFetchReplyDataFetchStatsClientStateStats;
    /**
     * Report only with first request on connection, so that we keep track of the connect time with a host. Sometimes a connection is initiated by a prior request that times out before the connection is established. Another request can get scheduled on a connection that is already in the process of being established but has no request scheduled onto it. We want to keep track of the entire connect time even if a request didn't need to wait for the entire connection establishment time. Sometimes a connection may get established before the first request uses it. We tag along the connect time with the first request using the connection. ConnectTimeMs also includes SSL negotiation time.
     */
    ConnectTimeMs?: number | null;
    ControlflowStats?: Schema$TrawlerFetchReplyDataFetchStatsStateStats;
    /**
     * DownLoadTime = Share of connect time + ServerResponseTimeMs + TransferTimeMs (see below) in ms
     */
    DownLoadTime?: number | null;
    /**
     * Overhead spent routing the request from HOPE to edge egress nodes, which open connection to webservers. This is only set for edge fetches (e.g., through Floonet egress nodes).
     */
    EdgeEgressOverheadMs?: number | null;
    /**
     * Time between the request send and the receipt of the first fragment of the response. For HTTP responses the first fragment is the first fragment of the response payload (the headers are ignored).
     */
    ServerResponseTimeMs?: number | null;
    /**
     * ConnectTimeMs includes TCP connect time + SSL time, whereas SSLConnectTimeMs includes only the latter.
     */
    SSLConnectTimeMs?: number | null;
    /**
     * Time to receive the entire response payload starting the clock on receiving the first fragment.
     */
    TransferTimeMs?: number | null;
  }
  /**
   * Records stats about state changes on the client side if there're any. For example, there's a state of cache lookup when using private-cache client library.
   */
  export interface Schema$TrawlerFetchReplyDataFetchStatsClientStateStats {
    WaitContentCacheUsec?: number | null;
  }
  /**
   * The following are only populated if Params.WantStateStats is true.
   */
  export interface Schema$TrawlerFetchReplyDataFetchStatsStateStats {
    EndTrackingTimeUsec?: string | null;
    /**
     * Start and end timestamp tracking the delays for this request.
     */
    StartTrackingTimeUsec?: string | null;
    WaitCompressTimeUsec?: number | null;
    WaitContentCacheUsec?: number | null;
    WaitCredentialTimeUsec?: number | null;
    WaitDNSTimeUsec?: number | null;
    WaitFetchClientUsec?: number | null;
    WaitForCachedContentStreamingUsec?: number | null;
    WaitForFetchUsec?: number | null;
    WaitHostIdTimeUsec?: number | null;
    WaitNextFlowUsec?: number | null;
    /**
     * obsolete. Not set.
     */
    WaitRobotsCacheTimeUsec?: number | null;
    /**
     * obsolete. Not set.
     */
    WaitRobotsFetchTimeUsec?: number | null;
    WaitRobotsTimeUsec?: number | null;
    WaitScheduleTimeUsec?: number | null;
  }
  /**
   * header : value
   */
  export interface Schema$TrawlerFetchReplyDataHTTPHeader {
    key?: string | null;
    value?: string | null;
  }
  /**
   * ---------------------------------------------------------------------- PartialResponse is used with streaming responses in LargeFileFetchAdapter. Rather than fitting entirely in a single FetchReply, there is a series of FetchReplies until IsFinalResponse. Each group of responses will have a unique FetchID to link them.
   */
  export interface Schema$TrawlerFetchReplyDataPartialResponse {
    /**
     * If set, indicates where the fetched body is, e.g. a CNS file path. FetchReply.Body should be empty in this case. In the case where client does not support streaming but the content is too large to be accumulated in memory, we keep writing the streaming chunks to some storage unit and notify client when it is done.
     */
    BodyLocation?: string | null;
    /**
     * Fetch number in this series of fetches
     */
    ChunkNumber?: number | null;
    /**
     * If there is a Content-Range header, the ranges in it
     */
    ContentRange?: Schema$TrawlerContentRangeInfo;
    /**
     * Any ETag seen in the headers
     */
    ETag?: string | null;
    /**
     * ID which links all partial fetches for this url
     */
    FetchID?: string | null;
    /**
     * Is this the final response for this fetch?
     */
    IsFinalResponse?: boolean | null;
  }
  /**
   * Group with protocol specific response (determined by the protocol of the url that generated the content we return).
   */
  export interface Schema$TrawlerFetchReplyDataProtocolResponse {
    /**
     * Response code. We emulate the HTTP response codes for all protocols that we know. -- HTTP: response code for the downloaded page. -- FTP: similar with HTTP: 200 - OK, 40X - errors (not found, etc), 500 - server unavailable
     */
    Code?: number | null;
    /**
     * Content type as inferred by the fetcher (webutil/http/content-type.proto)
     */
    ContentType?: string | null;
    /**
     * Where did we cut off? Includes headers plus truncated but uncompressed content. Present if and only if we truncated the document.
     */
    CutoffSize?: string | null;
    /**
     * DEPRECATED, see field 113. Stores the HTTP version we used in the final hop.
     */
    HttpVersion?: string | null;
    /**
     * DEPRECATED, see field 114. Whether we fallback from HTTP/2 to HTTP/1.1 during fetch. The fallback could happen in any hops and there can be at most one fallback because once fallback happens, we will not try HTTP/2 anymore.
     */
    ProtocolVersionFallback?: boolean | null;
    /**
     * The amount of data we got from the webserver before any truncation, but after undoing any HTTP gzip/deflate encoding. For HTTP, this includes headers and uncompressed content. Content size is excluded if content was not successfully fetched. See description above TotalFetchedSize for comparison.
     */
    UnTruncatedSize?: string | null;
  }
  /**
   * The sequence of redirects fetched, if applicable. This includes url plus stats for each hop after the first hop. NOTE: This can be one redirect longer than the chain of redirects *followed*, in the case where there was a redirect at the end of the chain that the fetcher detected but did not follow.
   */
  export interface Schema$TrawlerFetchReplyDataRedirects {
    /**
     * The server SSL certificate chain in SSLCertificateInfo protobuf format. See this field in FetchReplyData (i.e., the initial hop) for more description on when it will be populated.
     */
    BadSSLCertificate?: string | null;
    /**
     * Per redirect hop timestamps. This
     */
    CrawlTimes?: Schema$TrawlerCrawlTimes;
    /**
     * Download time of this fetch (ms)
     */
    DownloadTime?: number | null;
    /**
     * ## stats If fetched, ip info.
     */
    Endpoints?: Schema$TrawlerTCPIPInfo;
    /**
     * Extra trawler::PageNoIndexInfo for this hop. Integer: ORed together bits from trawler::PageNoIndexInfo. The information specified by this field comes from the http header or content of the source url, not the "TargetUrl" in this Redirects group.
     */
    HopPageNoIndexInfo?: number | null;
    /**
     * trawler::ReuseInfo with status of IMS/IMF/cache query, for this hop.
     */
    HopReuseInfo?: string | null;
    /**
     * Extra trawler::RobotsInfo for this hop. Integer: ORed together bits from trawler::RobotsInfo
     */
    HopRobotsInfo?: number | null;
    /**
     * If known, the hostid for this hop
     */
    HostId?: string | null;
    /**
     * This specifies if the url in a redirect was rewritten to HTTPS because of an HSTS policy for the domain. See comments on FetchReplyData.HSTSInfo for how this field's values. A redirect that was rewritten with HSTS will have HSTS_STATUS_REWRITTEN ## here.
     */
    HSTSInfo?: string | null;
    /**
     * The http headers we sent for fetching this redirect hop. Not normally filled in, unless FetchParams.WantSentHeaders is set.
     */
    HttpRequestHeaders?: string | null;
    /**
     * The HTTP response code for this hop. We need this since multiple response codes may have the same redirect type (e.g., 302 and 307 are both REDIRECT_TEMPORARILY), but clients may want to know which one was received. Note this is set only for the hops that are followed (i.e., TargetUrl is present). If the last redirect hop was not followed the fetch status will be URL_NOT_FOLLOWED, and the response code will be in the top level ProtocolResponse field.
     */
    HTTPResponseCode?: number | null;
    /**
     * The http headers we received from this redirect hop. Trawler does not fill this in; this is intended as a placeholder for crawls like webmirror that fill in and want to track this across redirect hops.
     */
    HttpResponseHeaders?: string | null;
    /**
     * bytes: can contain bad encoding.
     */
    RawTargetUrl?: string | null;
    /**
     * Refresh time in meta redirect tag
     */
    RefreshTime?: number | null;
    /**
     * The robots.txt we used for this fetch. Not normally filled in unless WantRobotsBody is set.
     */
    RobotsTxt?: string | null;
    /**
     * For meta-redirects, this field may contain the body of the source document. Currently only filled client side and not implemented (yet) for server-side redirects.
     */
    SourceBody?: Schema$TrawlerFetchBodyData;
    /**
     * Difference between the following two fields: TargetUrl is set when we have followed the redirect target, and the url is canonicalized. RawTargetUrl is set in either of the following two cases: (1) The url has not be been followed. For example, the redirect is intended to be handled by the client. In the fetch reply response, you will see the url's status as URL_NOT_FOLLOWED-NOT_FOLLOWED*. (2) The extracted redirect url is different from its *canonicalized* form. For example, if the target url contains fragments, then this RawTargetUrl will have the fragments. Redirect target
     */
    TargetUrl?: string | null;
    /**
     * URL and redirect type
     */
    Type?: string | null;
  }
  export interface Schema$TrawlerFetchStatus {
    /**
     * The Reason field gives further clarifying details about why or how the fetch had the given outcome. For instance, if State is URL_ERROR - was it a 404/NotFound or a DNS error? The Reason field is present iff State != URL_CRAWLED. For a given crawl status of URL_FOO, the Reason value will be one of the various FetchFooReason enum values from crawler/trawler/trawler_enums.proto
     */
    Reason?: number | null;
    /**
     * The State field describes the basic outcome of a fetch (URL_CRAWLED, URL_ROBOTED, URL_ERROR, etc). The value is one of the UrlStatusType enum values from crawler/trawler/trawler_enums.proto Note, there are several combinations of this Status/Reason tuple that could mean that your content is crawled or can be bucketed in a particular type of error. So instead of comparing the enumeration values manually, we suggest to use the predicate functions such as IsContentCrawled() provided in crawler/trawler/public/basictypes.h (see details there).
     */
    State?: string | null;
  }
  /**
   * ============================ Next Tag: 22 ============================ Data about the scheduling host bucket a URL was in (if the client wants to use this, e.g. for more intelligent scheduling, etc).
   */
  export interface Schema$TrawlerHostBucketData {
    /**
     * How much existing traffic
     */
    ClientTrafficFraction?: number | null;
    /**
     * belong to the client How much weight the client
     */
    ClientWeightFraction?: number | null;
    /**
     * How many connections are actively used for downloading ?
     */
    CurrentActiveConnections?: number | null;
    /**
     * Is this bucket currently full ?
     */
    IsFull?: boolean | null;
    /**
     * How many ms ago we last scheduled a url
     */
    LastScheduleIntervalMs?: string | null;
    /**
     * The current hostload value (# of connections) - if negative does not apply
     */
    MaxActiveConnections?: number | null;
    /**
     * The load the recent times (the actual hostload that we apply is MaxActiveConnections / MediumTermLoad) - a hostload of 1.00 is normal, while over 1.0 is higher than normal load
     */
    MediumTermLoad?: number | null;
    /**
     * The min delay between requests (in secs) - if negative does not apply
     */
    MinInterRequestSecs?: number | null;
    /**
     * If is full, when is becoming non-full (in ms)
     */
    NonFullIntervalMs?: string | null;
    /**
     * The following four fields attempt to make things simpler for clients to estimate available capacity. They are not populated yet as of 2013/08/21. Even after they are populated, they may change. So talk to trawler-dev@ before you use the fields. Total qps for this hostid
     */
    TotalCapacityQps?: number | null;
    /**
     * Currently used qps
     */
    TotalUsedQps?: number | null;
    urllist?: Schema$TrawlerHostBucketDataUrlList[];
  }
  /**
   * Per each list that wishes to schedule url we return one of these:
   */
  export interface Schema$TrawlerHostBucketDataUrlList {
    /**
     * Is this client/requestorid allowed to crawl now? (based on resource use)
     */
    ClientCanCrawl?: boolean | null;
    /**
     * Is this the 'default' user's list
     */
    IsDefaultNode?: boolean | null;
    /**
     * Was this the list that a given request landed in?
     */
    IsListForUrl?: boolean | null;
    /**
     * # of current active fetches
     */
    NumCurrentFetches?: number | null;
    /**
     * # of urls currently in the queue
     */
    NumUrls?: number | null;
    /**
     * Total qps for this partner dedicated hostload, for non partner it will be -1.0.
     */
    PartnerTotalCapacityQps?: number | null;
    /**
     * Currently used qps for this partner dedicated hostlaod, for non partner it will be -1.0.
     */
    PartnerTotalUsedQps?: number | null;
    /**
     * The fp64 of the requestor string
     */
    RequestorFp?: string | null;
    /**
     * The type of the request (low latency vs. high throughput)
     */
    RequestType?: string | null;
  }
  /**
   * Information about VPC fetches tracked for logging purposes.
   */
  export interface Schema$TrawlerLoggedVPCDestination {
    cloudRegion?: string | null;
    vnid?: Schema$NetFabricRpcVirtualNetworkId;
  }
  /**
   * Contain Multiverse client information, such as topic name. Can include other information such as crawl policy id in the future.
   */
  export interface Schema$TrawlerMultiverseClientIdentifier {
    topicName?: string | null;
    trafficType?: string | null;
  }
  /**
   * The information about the original client who starts the request.
   */
  export interface Schema$TrawlerOriginalClientParams {
    clientCell?: string | null;
    clientIp?: string | null;
    /**
     * through which RPC request
     */
    clientRpcType?: string | null;
    clientUsername?: string | null;
  }
  /**
   * Trawler can add a policy label to a FetchReply. The two main cases are: - "spam" label added for specific spammer IPs listed in trawler_site_info, which most crawls auto-reject. - "roboted:useragent" (e.g. "roboted:googlebot") if InfoOnlyUserAgents field is set in FetchParams
   */
  export interface Schema$TrawlerPolicyData {
    /**
     * in roboted case, the RobotsInfo
     */
    ExtraData?: number | null;
    /**
     * "spam" or "roboted:googlebot"
     */
    Label?: string | null;
  }
  /**
   * This protobuf specifies the results of https certificate validation, typically used for the BadSSLCertificate field in FetchReplyData. -------------------------- Next Tag: 13 -------------------------------
   */
  export interface Schema$TrawlerSSLCertificateInfo {
    /**
     * ALPN negotiated protocol, see https://tools.ietf.org/html/rfc7301 The value will either be empty, or one of the protocol names sent by the client that the server accepted. Examples include "h2" and "acme-tls/1".
     */
    ALPNNegotiatedProtocol?: string | null;
    /**
     * If present, this consists of the remote webserver's X.509 certificate chain in DER format. The chain stored here is the *reversed* result of SSL_get_peer_cert_chain(). That is to say, it is the chain presented by the peer (which may differ from the chain that was built and verified), but in leaf-last order. Typically the root cert will not be included. But do not assume anything, because servers do all manner of weird things. (For example on the beginning of the chain, there might be also some irrelevant certificates besides the root certificate.) Certificates may be the empty string, indicating an encoding failure. See also |IsTruncated|. Certs can be loaded with util/sig/cert.h Cert::LoadBinaryCert(), converted to ASCII PEM format (CertificateUtil::CertificateToPEM()) or shown as text at the commandline by piping them into 'openssl x509 -text -inform DER'.
     */
    CertificateChain?: string[] | null;
    /**
     * ErrorMessages contains errors from HTTPS validation. Examples of such errors include invalid certificates, failure to build a certificate chain, certificates that do not match the expected hostname, and internal errors. If ErrorMessages is empty, HTTPS validation succeeded. Otherwise, it failed. This is the only guarantee about the contents of this field, though legacy code exists that embeds invalid assumptions, b/70904498. New code should not do anything with this field other than test whether it is empty and display its value to humans. If you need to know more about the details of a particular HTTPS validation, you can revalidate |CertificateChain| independently.
     */
    ErrorMessages?: string[] | null;
    /**
     * This SSLCertificateInfo had its fields truncated because it was too large. It is no longer set (cl/205356251) but may be true in old records.
     */
    IsTruncated?: boolean | null;
    /**
     * Stapled OCSP response obtained during the TLS handshake, if any. An OCSP (Online Certificate Status Protocol) response is an indication, signed by the issuing CA, that the certificate has not been revoked. A TLS handshake extension allows servers to "staple" a response to the certificate served in the handshake, saving the need for the client to fetch it itself from the CA. This field contain the stapled OCSP response if the server served one. See RFC6066, Section 8 for the data format: https://tools.ietf.org/html/rfc6066#section-8
     */
    OCSPResponse?: string | null;
    /**
     * SCTList obtained during the TLS handshake, if any. See RFC6962, Section 3.3 for the data format: https://tools.ietf.org/html/rfc6962#section-3.3
     */
    SCTList?: string | null;
    SSLCipherSuite?: number | null;
    SSLCipherSuiteName?: string | null;
    /**
     * Details about the SSL/TLS protocol and cipher. See RFC5246 and google3/crawler/trawler/hope/proto/ssl.proto for more details.
     */
    SSLProtocolVersion?: number | null;
    /**
     * The names of the SSL protocol version and cipher suite. These strings are implementation defined and may be subject to change.
     */
    SSLProtocolVersionName?: string | null;
  }
  /**
   * To keep track of fetch connection endpoints. Note: You can use trawler::SourceIP(info) or trawler::DestinationIP(info) (as well as HasSourceIP/HasDestinationIP) in basictypes.h instead of accessing the packed strings directly. This will return a proper IPAddress. Never use the fixed32 based Source/Destination-IP in new code as they will go away (only IPv4).
   */
  export interface Schema$TrawlerTCPIPInfo {
    /**
     * Address of the destination host. Extract with trawler::DestinationIP() or decode with PackedStringToIPAddress().
     */
    DestinationIPAddressPacked?: string | null;
    DestinationPort?: number | null;
    /**
     * Source address of the crawl machine we originated the fetch from. Extract with trawler::SourceIP() or decode with PackedStringToIPAddress().
     */
    SourceIPAddressPacked?: string | null;
    SourcePort?: number | null;
  }
  export interface Schema$TrawlerThrottleClientData {
    IsBandwidthThrottle?: boolean | null;
    /**
     * Max doc_requestor urls/second allowed from this client to this fetcher.
     */
    MaxAllowedRate?: number | null;
  }
  /**
   * This is an optional container of arbitrary data that can be added to a FetchReplyData. This data is meant to be logged, but not sent back in a fetch reply (it should be added *after* the reply is prepared). Use FetchResponsePreparatorImpl::AddTrawlerPrivateDataToFetchReplyData to add. See also the comment in fetch_response_preparator_impl.cc. Next Tag: 46
   */
  export interface Schema$TrawlerTrawlerPrivateFetchReplyData {
    /**
     * Stores the OAuth authentication method.
     */
    authenticationInfo?: string | null;
    /**
     * If we fetched using BotFetchAgent, what is the BotGroupName?
     */
    BotGroupName?: string | null;
    /**
     * This is the HOPE server that we sent the url to. We log the HOPE backend cell and hope server shard number (e.g., 'qf:6'). This allows us to understand how we are balancing our load to the HOPE servers.
     */
    BotHostname?: string | null;
    /**
     * Cache hit for this url, bypassed host_overfull error.
     */
    bypassedHostOverfull?: boolean | null;
    /**
     * Corresponds to AcceptableAfterDate field in FetchParams.
     */
    cacheAcceptableAfterDate?: number | null;
    /**
     * Corresponds to AcceptableAge field in FetchParams.
     */
    cacheAcceptableAge?: number | null;
    /**
     * Only set if the fetch uses cache content (is_cache_fetch is true).
     */
    cacheHitType?: string | null;
    /**
     * Present if the reply is from the trawler cache. This is the requestorid of the trawler client that populated the cache with the data we are reusing.
     */
    CacheRequestorID?: string | null;
    cdnProvider?: string | null;
    /**
     * How many concurrent streams are on the connection when the request finishes (including this request). Export this value to monitor the stream multiplexing for HTTP/2.
     */
    concurrentStreamNum?: string | null;
    /**
     * Log the credential id
     */
    credentialId?: string | null;
    /**
     * Dependent fetch type
     */
    dependentFetchType?: string | null;
    /**
     * If the response header contains Content-Disposition header "attachment; filename="google.zip": the download_file_name would be "google.zip"
     */
    downloadFileName?: string | null;
    /**
     * Which Trawler fetcher task fetched this URL.
     */
    FetcherTaskNumber?: number | null;
    HadInMemCacheHit?: boolean | null;
    /**
     * If we do not have Endpoints in FetchReplyData (e.g., url rejected due to hostload limit), do we have a guess of the server IPAddress (e.g., from robots fetch)? This helps us classify URLs based on country code, etc. The field is filled with IPAddress::ToPackedString().
     */
    HintIPAddress?: string | null;
    /**
     * HTTP Strict-Transport-Security (RFC6797) header value. We log this so we can generate a list of hosts that prefer HTTPS over HTTP.
     */
    HSTSHeaderValue?: string | null;
    /**
     * Stores the HTTP version we used in the last hop.
     */
    httpVersion?: string | null;
    /**
     * Represents if the HostId belongs to HostId set in 5xx url patterns, it can work as a tag when emitting requestor minute summary, this helps us to aggregate traffic affected by 5xx patterns, and test if there are any fetching changes.
     */
    Is5xxHostId?: boolean | null;
    /**
     * Whether this is a bidirectional streaming fetch.
     */
    isBidiStreamingFetch?: boolean | null;
    isDedicatedHostload?: boolean | null;
    /**
     * Whether or not this is a Floonet fetch request. Floonet requests have inherent lower availability (due to HOPE rejections when HOPE is in degraded mode, and other Floonet specific reasons). Therefore, it is important for debugging and for our availability SLO to know whether of not it is a floonet fetch. IMPORTANT NOTE: This field is only currently set for traffic that explicitly requires Floonet and can not failover to use Googlebot (i.e. "transparent" or "implicit" Floonet fetches).
     */
    isFloonetFetch?: boolean | null;
    /**
     * Whether or not this response is sent from gRPC proxy service.
     */
    isFromGrpcProxy?: boolean | null;
    /**
     * Was this an internally-initiated robots.txt fetch?
     */
    IsRobotsFetch?: boolean | null;
    /**
     * Set if the fetch goes through the virtual private cloud path so we can track the VPC traffic.
     */
    isVpcTraffic?: boolean | null;
    /**
     * Set to the hit location (CNS filename) if cache comes from large store.
     */
    largeStoreHitLocation?: string | null;
    /**
     * Multiverse client information
     */
    multiverseClientIdentifier?: Schema$TrawlerMultiverseClientIdentifier;
    /**
     * Number of times we drop the content of a stream reply or the final reply, which can only be caused by REJECTED_NO_RPC_BUFFERS now.
     */
    numDroppedReplies?: string | null;
    /**
     * Store the original client information.
     */
    originalClientParams?: Schema$TrawlerOriginalClientParams;
    /**
     * What's the post data size (in bytes) if it's a post request.
     */
    PostDataSize?: string | null;
    /**
     * Note TrawlerPrivateFetchReplyData is never sent back to clients. The following field is just for Trawler and Multiverse internal tracking, and clients should not look at this field at all.
     */
    Producer?: string | null;
    /**
     * If set, this fetch was done through a proxy (e.g., fetchproxy).
     */
    ProxyInstance?: string | null;
    /**
     * Log the loas username in trawler private to help with debugging. Store the username in trawler private so clients won't see it from FetchReply. To reduce disk usage, we only log the loas username if the requestorid being used does not have ClientUsernameRestrictions.
     */
    RequestUserName?: string | null;
    /**
     * If the requestor shares resource bucket with other requestorids, we will store the resource bucket name in these fields.
     */
    resourceBucket?: string | null;
    /**
     * The number of bytes we sent back to the client.
     */
    ResponseBytes?: string | null;
    /**
     * If this was a robots.txt fetch (IsRobotsFetch above), this may contain the robots.txt body. (It may not, for instance, 404s are omitted; current policy is URL_CRAWLED + partially crawled) This includes http headers + body.
     */
    RobotsBody?: string | null;
    /**
     * RPC deadline left at the end of url control flow. Can be useful for debugging rpc deadline exceeded error received by clients, this field is only recorded if it's small enough.
     */
    RpcEndDeadlineLeftMs?: number | null;
    /**
     * RPC deadline left at the start of url control flow. Can be useful for debugging rpc deadline exceeded error received by clients, this field is only recorded if RpcEndDeadlineLeftMs is small enough.
     */
    RpcStartDeadlineLeftMs?: number | null;
    /**
     * An arbitrary string signature identifying the remote server type/version. In the case of HTTP, this would be the contents of the "Server:" header.
     */
    ServerSignature?: string | null;
    subResourceBucket?: string | null;
    /**
     * Service tier info will be used in traffic grapher for ploting per tier graph.
     */
    tier?: string | null;
    /**
     * Which Trawler cell was this response fetched in? (e.g. "HR" or "YQ")
     */
    TrawlerInstance?: string | null;
    /**
     * The useragent string sent to the remote webserver. It corresponds to UserAgentToSend field in FetchParams.
     */
    UserAgentSent?: string | null;
    /**
     * The fp2011 of useragent sent to the remote webserver, note it corresponds to UserAgentToSend field in FetchParams
     */
    UserAgentSentFp?: string | null;
    /**
     * The following are vpc information that's only set if is_vpc_traffic is true.
     */
    vpcDestination?: Schema$TrawlerLoggedVPCDestination;
  }
  /**
   * Information about the result support for a given interpretation.
   */
  export interface Schema$UniversalsearchNewPackerKnowledgeResultSupport {
    /**
     * A debug message that summarizes how the score was computed. Populated if result was matched and in debug mode.
     */
    debug?: string | null;
    /**
     * The docid of the result, if available.
     */
    docid?: string | null;
    /**
     * The naviness for this result. Each matcher can determine the naviness to use for the result. This can be copied directly from the result, or estimated based on clicks or some other heuristic. The value should be between 0 and 1 and should indicate the probability that the user will click on that result. The estimated_naviness is used to break ties when between results with the same rank.
     */
    estimatedNaviness?: number | null;
    /**
     * All provenances of this result support.
     */
    provenance?: Schema$UniversalsearchNewPackerKnowledgeResultSupportProvenance[];
    /**
     * The 0 based rank for this result. When the source is MAIN_GSR this corresponds to the index of the result in the generic search response specific in AddKnowledgePackerPreprocessors. Otherwise, the rank should be estimated so the result is closest in importance to the web result at the same rank.
     */
    rank?: number | null;
    /**
     * A score from 0 to 1 inclusive that represents the strength of the result support. A score of one indicates this result is entirely about this interpretation.
     */
    score?: number | null;
    /**
     * The source of the result support.
     */
    source?: string | null;
    /**
     * The result url when available.
     */
    url?: string | null;
  }
  /**
   * Information about provenance of a result support.
   */
  export interface Schema$UniversalsearchNewPackerKnowledgeResultSupportProvenance {
    /**
     * Entity group type of the supported entity. This field should only be set for support on entities.
     */
    entityGroupType?: string | null;
    /**
     * ===== Deprecated Fields ===== The bool flag indicating whether the ResultSupport comes from answer entities.
     */
    fromAnswer?: boolean | null;
    /**
     * The provenance provider name.
     */
    name?: string | null;
  }
  /**
   * Url poisoning information. This information is sparse: if num_spam_siblings is not populated, none of the following fields will be populated. Next tag: 6
   */
  export interface Schema$UrlPoisoningData {
    /**
     * fetched from the web. Time when the page was last
     */
    NotChangedTimeMs?: string | null;
    numSpamSiblings?: number | null;
    /**
     * Time when the page was
     */
    OriginalCrawlTimeMs?: string | null;
    /**
     * checked but found to be the same as before. If set, timestamp to indicate
     */
    ReuseTimeMs?: string | null;
    /**
     * when it is fetched from the repository. URL of the document for debugging
     */
    url?: string | null;
  }
  /**
   * Wire-format for a Status object
   */
  export interface Schema$UtilStatusProto {
    /**
     * The canonical error code (see codes.proto) that most closely corresponds to this status. This may be missing, and in the common case of the generic space, it definitely will be.
     */
    canonicalCode?: number | null;
    /**
     * Numeric code drawn from the space specified below. Often, this is the canonical error space, and code is drawn from google3/util/task/codes.proto
     */
    code?: number | null;
    /**
     * Detail message
     */
    message?: string | null;
    /**
     * message_set associates an arbitrary proto message with the status.
     */
    messageSet?: Schema$Proto2BridgeMessageSet;
    /**
     * The following are usually only present when code != 0 Space to which this status belongs
     */
    space?: string | null;
  }
  /**
   * ------------------------------------------------------------------------------ Proto message containing the trusted genome entities that belong to an app. Document type: ANDROID_APP See go/gd-server-design for more info. ## Next tag: 4
   */
  export interface Schema$VendingConsumerProtoTrustedGenomeAnnotation {
    /**
     * The list of trusted genome policy.
     */
    policy?: Schema$VendingConsumerProtoTrustedGenomePolicy;
    /**
     * The list of test code, used to log when serving. The test code is set in both control and experiment annotations when they are different.
     */
    testCode?: string[] | null;
    /**
     * The list of trusted genome hierarchy. One trusted_genome_hierarchy may contain one or multiple entities. This is required for TG 2.0 tags.
     */
    trustedGenomeHierarchy?: Schema$VendingConsumerProtoTrustedGenomeHierarchy[];
  }
  /**
   * Proto message containing the id, localized title, score, and hierarchy level of a trusted genome entity. Next ID: 10
   */
  export interface Schema$VendingConsumerProtoTrustedGenomeEntity {
    /**
     * The category id matching this trusted genome entity. e.g. Action tag with id /m/025zzc matches category of id GAME_ACTION
     */
    categoryId?: string | null;
    /**
     * The identifier of a play trusted genome entity. Required.
     */
    id?: string | null;
    /**
     * The level of the entity. E.g. in hierarchy like Action -\> Platformer \> Endless Runner. Action is level 1, Platformer is level 2 and Endless Runner is level 3. Currently, only APP_TAXONOMY and GAME_TAXONOMY type may have the levels. For entity that does not have hierarchy, its level is 1. Required.
     */
    level?: number | null;
    /**
     * The name of the relation between the app and the entity. Required.
     */
    predicateName?: string | null;
    /**
     * The localized query string for this trusted genome entity. This query will be used when we want to bring users to SERP on click.
     */
    queryText?: string | null;
    /**
     * The confidence score of the entity to the app.
     */
    score?: number | null;
    /**
     * The localized title. Required.
     */
    title?: string | null;
    /**
     * This boolean is used to decide whether this entity will be shown on user-facing features in the Store or not.
     */
    userVisible?: boolean | null;
  }
  /**
   * Proto message containing one or multiple trusted genome entity. This is used to capture entities that belong to the same type and have parent-children relationship in the taxonomy. e.g. One hierarchy may include 3 entities with Game_Taxonomy Type: (1) Action (Level 1) (2) Platformer (Level 2 under Action) (3) Endless Runner (Level 3 under Platformer) e.g. One hierarchy may also include only 1 entity with Game_Graphic_Style: (1) Anime (No level information) Next ID: 5
   */
  export interface Schema$VendingConsumerProtoTrustedGenomeHierarchy {
    /**
     * List of entities (one or multiple) that belong in the same hierarchy. The entries will be ordered such that the first entry will be of level 1, and the second entry will be of level 2, and so on. Required
     */
    entity?: Schema$VendingConsumerProtoTrustedGenomeEntity[];
    /**
     * The (hierarchy-level) type of this Trusted Genome hierarchy. Will only be populated when meeting certain criteria, e.g. 'GD2_Game_Main' means this hierarchy of entities can serve as the main game genre for Game Discovery 2.0.
     */
    hierarchyType?: string | null;
    /**
     * The source of this Trusted Genome hierarchy.
     */
    source?: string | null;
    /**
     * The (entity-level) type of trusted genome entities in this hierarchy. Required.
     */
    trustedGenomeType?: string | null;
  }
  /**
   * Proto message containing policy related information.
   */
  export interface Schema$VendingConsumerProtoTrustedGenomePolicy {
    /**
     * Override text for region for special treatment. Override will be used in special cases for example regions are too long to show in UI, the override will be "CA/NV/..." to cut it short. By keeping a region override string we'll have more flexibility to adjust what we show on UI. Optional.
     */
    localizedRegionOverride?: string | null;
    /**
     * Policy type. e.g. Government Endorsed, Apollo Required.
     */
    policyType?: string[] | null;
    /**
     * Contains target region for the current policy. Optional
     */
    targetRegion?: Schema$VendingConsumerProtoTrustedGenomePolicyTargetRegion[];
  }
  export interface Schema$VendingConsumerProtoTrustedGenomePolicyTargetRegion {
    /**
     * Localized name for targeted regions. e.g. San Francisco Bay Area Required.
     */
    localizedRegion?: string | null;
    /**
     * Associated KG entity mid for region. e.g. /m/06pvr
     */
    mid?: string | null;
  }
  export interface Schema$VideoAmbisonicsAmbisonicsMetadata {
    /**
     * Maps channel indexes of an audio stream to indexes corresponding to the specified ambisonics channel ordering scheme. For example: A 1st order pheriphonic ambisonics format is configured with 4 audio channels corresponding to ambisonic components W, X, Y, Z respectively. The channel_ordering scheme is specified as CHANNEL_ORDERING_ACN (which implies a W, Y, Z, X ordering). Therefore the channel_map is [0, 3, 1, 2].
     */
    channelMap?: number[] | null;
    channelOrdering?: string | null;
    nonDiegeticStereo?: boolean | null;
    normalization?: string | null;
    numChannels?: number | null;
    order?: number | null;
    type?: string | null;
    version?: number | null;
  }
  /**
   * Valid fields in ACL are "mdb/groupname", or "user/username", e.g., "mdb/youtube-prod", or "user/alice".
   */
  export interface Schema$VideoAssetsVenomACL {
    /**
     * REQUIRED: the current owner of this video. Please note that owner does not get implicit reader/writer access. You must set them explicitly.
     */
    owner?: string | null;
    /**
     * Allowed readers of this video.
     */
    reader?: string[] | null;
    /**
     * Allowed writers of this video.
     */
    writer?: string[] | null;
  }
  /**
   * Describes ingredient level settings. Clients are authoritative in defining Settings. See go/venom-trustme for how Settings and ProcessingCharacteristics work together. If your Settings extension contains PII fields, please 1) Annotate them appropriately with DataPol, and 2) Add your BUILD target to google3/video/assets/venom/proto/settings/BUILD:pii See google3/video/assets/venom/proto/settings/ for extension messages.
   */
  export interface Schema$VideoAssetsVenomSettings {}
  /**
   * As video mutations are reconciled by Venom, we can tell if the ingredient did or did not reach certain objectives. When processing has completed, all objectives will have a corresponding transition. All transitions are reset for every mutation, but will take into account assets outside of that mutation. For example, if Asset X fails, and was part of "OBJECTIVE_PRIMARY_ASSETS_DONE", a rerun of Asset Y is destined to result in OUTCOME_FAILED, regardless of the fate of Asset Y. Some phenonema have effects on most or all Objectives. For example, a bad input file will result on OUTCOME_INFEASIBLE across the board (eventually, for now it's just GO_LIVE and DO_ALL, work in progress), and a failure to produce Format 18 will cause OUTCOME_FAILED across most Objectives.
   */
  export interface Schema$VideoAssetsVenomTransition {
    /**
     * The objective this transition is about. REQUIRED.
     */
    objective?: string | null;
    /**
     * Whether the objective is reached or not. REQUIRED.
     */
    outcome?: string | null;
    /**
     * An optional debug string indicating the reason for this transition. This is typically omitted for OUTCOME_SUCCESS. e.g. "The video's content is invalid due to failed blobstore cloning."
     */
    reason?: string | null;
  }
  /**
   * A VideoId is the unique identifier of a video. Privacy: VideoIds are visible in logs, notifications, etc and must not contain PII.
   */
  export interface Schema$VideoAssetsVenomVideoId {
    /**
     * REQUIRED. IDs have some constraints: - 32 bytes max: this is enforced by the server - for the time being, must be parseable as a youtube ID (basically a base64-encoded string which maps to a 64-bit integer). This restriction will eventually be lifted.
     */
    id?: string | null;
    /**
     * LINT.ThenChange( //depot/google3/googledata/production/playbooks/video-assets/clients.md, //depot/google3/video/assets/venom/proto/namespace.proto ) REQUIRED.
     */
    ns?: string | null;
  }
  /**
   * Next tag: 10
   */
  export interface Schema$VideoAudioStream {
    /**
     * Audio bitrate in bits/s.
     */
    bitrate?: string | null;
    /**
     * Number of audio channels.
     */
    channels?: number | null;
    /**
     * Audio codec ID. Uses the numeric value corresponding to the CodecId enum object, in order to avoid the dependency on vsi/videostreaminfo.proto. http://cs/symbol:CodecId%20f:google3/video/vidproc/vsi/videostreaminfo.proto
     */
    codecId?: number | null;
    /**
     * Content type of the stream. Only populated with valid "acont" xtag values at the moment. Supported acont xtag values can be found in google3/video/storage/common/xtag_validation.cc. Examples: "original", "dubbed", "descriptive", "commentary", etc.
     */
    contentType?: string | null;
    /**
     * Language, examples: "eng", "en", "enG", etc.
     */
    language?: string | null;
    /**
     * Audio length, in seconds. This value is derived from metadata in the source video, and often differs from the actual duration of any given transcode. In videos without valid timestamps, this value is not calculable, and is reported as zero.
     */
    lengthSec?: number | null;
    loudness1770Lkfs?: number | null;
    /**
     * Audio sample rate.
     */
    sampleRate?: string | null;
    /**
     * Index of the stream in the file, 0-based.
     */
    streamIndex?: string | null;
  }
  /**
   * Generic clip information contains a key string and a value string.
   */
  export interface Schema$VideoClipInfo {
    key?: string | null;
    value?: string | null;
  }
  export interface Schema$VideoClosedCaptions {
    videoHasClosedCaptions?: boolean | null;
  }
  /**
   * Contains anchor level features that apply to all anchor types. Next id: 22.
   */
  export interface Schema$VideoContentSearchAnchorCommonFeatureSet {
    /**
     * QBST distance between the anchor and the top navboost query of the video if exists, or the video title otherwise.
     */
    anchorQbstDistance?: number | null;
    /**
     * Average of babel similarity between the anchor and all asr sentences.
     */
    asrAverageBabelSimilarityScore?: number | null;
    /**
     * Maximum babel similarity between the anchor and the asr sentences.
     */
    asrMaximumBabelSimilarityScore?: number | null;
    /**
     * Features needed for Bleurt inference.
     */
    bleurtFeatures?: Schema$VideoContentSearchBleurtFeatures;
    /**
     * The Bleurt inference score generated using the bleurt_features.
     */
    bleurtScore?: number | null;
    /**
     * Descartes similarity score between video title and anchor label.
     */
    descartesScoreWithTitle?: number | null;
    /**
     * Average of babel similarity between the anchor and all description sentences.
     */
    descriptionAverageBabelSimilarityScore?: number | null;
    /**
     * Maximum babel similarity between the anchor and the description sentences.
     */
    descriptionMaximumBabelSimilarityScore?: number | null;
    /**
     * The predicted descriptiveness and usefulness rating scores generated by the Unified Dolphin model. Rating template: experimental/video/video_anchors_oneside_without_thumbnail/template.jhtml
     */
    dolphinDescriptivenessScore?: number | null;
    /**
     * If the dolphin model is an ensemble model, this contains the scores associated to each individual ensemble model.
     */
    dolphinEnsembleScore?: Schema$VideoContentSearchDolphinEnsembleScore[];
    /**
     * The features used to generate the Dolphin score.
     */
    dolphinFeatures?: Schema$VideoContentSearchDolphinFeatures;
    /**
     * The score generated by the Dolphin callout model.
     */
    dolphinScore?: number | null;
    dolphinUsefulnessScore?: number | null;
    /**
     * A phrase embedding for the anchor label. The model used to generate the embedding can be found in VideoAnchorSets: video_score_info.common_features.label_phrase_embedding_model
     */
    labelPhraseEmbedding?: number[] | null;
    /**
     * The predicted descriptiveness of the anchor using the MUM unified scoring model.
     */
    mumDescriptivenessScore?: number | null;
    /**
     * The predicted usefulness of the anchor using the MUM unified scoring model.
     */
    mumUsefulnessScore?: number | null;
    /**
     * A score that is correlated with retention probability of the interval associated with this anchor (start time to end time). Retention probability of an interval is 1 - (probability the user does not watch the interval all the way through, given they started watching it). This score may be predicted by a model, or calculated from actual retention data.
     */
    retentionScore?: number | null;
    /**
     * A saft document generated from the anchor label.
     */
    saftDocument?: Schema$NlpSaftDocument;
    /**
     * For annotating labels and their timing and context info. For example, this is used for anchor labels within a passage.
     */
    timedLabelFeatures?: Schema$VideoContentSearchCaptionLabelFeatures[];
    timestamp?: Schema$VideoContentSearchAnchorCommonFeatureSetLabelSpanTimestamp[];
    /**
     * Babel similarity between the anchor and the video title.
     */
    titleAnchorBabelMatchScore?: number | null;
  }
  /**
   * When an anchor label has a long duration (for example, labels that contain multiple sentences), this field stores the mapping between label segments and the start time.
   */
  export interface Schema$VideoContentSearchAnchorCommonFeatureSetLabelSpanTimestamp {
    /**
     * The ASR confidence for the label span, if available.
     */
    asrConfidence?: number | null;
    /**
     * Whether or not this token is the first token in a sentence.
     */
    isSentenceStart?: boolean | null;
    /**
     * The character index range for the span. The end index is exclusive.
     */
    labelBeginCharIndex?: string | null;
    labelEndCharIndex?: string | null;
    /**
     * The time of the span.
     */
    timeMs?: string | null;
  }
  /**
   * Contains anchor set level features that apply to all anchor types.
   */
  export interface Schema$VideoContentSearchAnchorsCommonFeatureSet {
    /**
     * A summary of the Dolphin descriptiveness scores of the anchors in the set.
     */
    dolphinDescriptivenessStats?: Schema$VideoContentSearchMetricStats;
    /**
     * A summary of the Dolphin usefulness scores of the anchors in the set.
     */
    dolphinUsefulnessStats?: Schema$VideoContentSearchMetricStats;
    /**
     * A summary of the MUM descriptiveness scores of the anchors in the set.
     */
    mumDescriptivenessStats?: Schema$VideoContentSearchMetricStats;
    /**
     * A summary of the MUM usefulness scores of the anchors in the set.
     */
    mumUsefulnessStats?: Schema$VideoContentSearchMetricStats;
  }
  export interface Schema$VideoContentSearchAnchorsThumbnailInfo {
    /**
     * Whether or not any of the anchor thumbnails have missing Starburst embeddings.
     */
    hasMissingStarburst?: boolean | null;
    /**
     * Whether or not any of the anchors have missing thumbnails.
     */
    hasMissingThumbnails?: boolean | null;
    /**
     * A score representing how diverse a set of thumbnails is. This is currently defined as one minus the median pairwise cosine similarity between thumbnail Starburst embeddings.
     */
    thumbnailDiversity?: number | null;
  }
  /**
   * Properties of the thumbnail image to show for an anchor.
   */
  export interface Schema$VideoContentSearchAnchorThumbnail {
    /**
     * Serving docid for the thumbnail in the images-tbn tables.
     */
    imagesearchDocid?: string | null;
    /**
     * Set to true when no thumbnail could be generated for this anchor.
     */
    isThumbnailMissing?: boolean | null;
    /**
     * Metadata about the anchor thumbnail computed by Amarna, including dimensions and the size in bytes.
     */
    servingMetadata?: Schema$ImageBaseThumbnailMetadata;
    /**
     * Information about the thumbnail anchor.
     */
    thumbnailInfo?: Schema$VideoContentSearchAnchorThumbnailInfo;
    /**
     * Millisecond timestamp of the frame used for the thumbnail.
     */
    timestampMs?: number | null;
  }
  export interface Schema$VideoContentSearchAnchorThumbnailInfo {
    /**
     * Entropy of the clustered color distribution.
     */
    colorEntropy?: number | null;
    /**
     * Thumbnail image data for SafeSearch classification.
     */
    imageData?: Schema$ImageData;
    /**
     * Convenience field that consolidates signals for whether this thumbnail is safe.
     */
    isUnsafe?: boolean | null;
    /**
     * 64d float vector of starburst v4 embedings.
     */
    starburstV4Embedding?: Schema$DrishtiDenseFeatureData;
    /**
     * The raw data for a thumbnail.
     */
    thumbnailBytes?: string | null;
  }
  /**
   * Product aspect.
   */
  export interface Schema$VideoContentSearchAspect {
    /**
     * Product aspect to be used if non of the other aspects exist.
     */
    fallbackAspect?: string | null;
    /**
     * Product aspect produced by running SAFT annotation.
     */
    saftAspect?: string | null;
  }
  /**
   * Contains token-level information about ASR captions.
   */
  export interface Schema$VideoContentSearchAsrCaption {
    /**
     * The confidence score of the token: between 0 and 1.
     */
    confidence?: number | null;
    /**
     * The duration that the token is spoken for.
     */
    durationMs?: number | null;
    /**
     * The time in the video at which the token starts being spoken.
     */
    startTimeMs?: number | null;
    /**
     * The speech token.
     */
    text?: string | null;
  }
  /**
   * Contains features needed for Bleurt inference.
   */
  export interface Schema$VideoContentSearchBleurtFeatures {
    candidate?: string | null;
    reference?: string | null;
  }
  /**
   * Features and debug info for individual caption entity video anchors.
   */
  export interface Schema$VideoContentSearchCaptionEntityAnchorFeatures {
    /**
     * If the description anchor has been recognized as an entity and that entity has also been mention in the ASR, this is the mention text from the ASR.
     */
    asrMentionText?: string | null;
    /**
     * The start index of the ASR entity mention from the beginning of the ASR transcript. The index is included so that individual mentions that share the same mid and time can be distinguished which happens when an entity is mentioned multiple times in an ASR sentence. Each mid/asr_mention_transcript_offset will be unique.
     */
    asrMentionTranscriptOffset?: number | null;
    /**
     * The nearest ASR sentence.
     */
    asrSentence?: string | null;
    /**
     * The begin time in ms of the ASR sentence.
     */
    asrStartTime?: number | null;
    /**
     * The result of the BERT inference using the title, ASR sentence and entity mention text.
     */
    bertScores?: number[] | null;
    /**
     * A score to help determine how specific this entity is.
     */
    broadness?: number | null;
    /**
     * The percentage of the video covered by the span of the first mention to the last mention.
     */
    durationCoverage?: number | null;
    /**
     * The webref connectedness score of the entity.
     */
    entityConnectedness?: number | null;
    /**
     * A short text describing the entity.
     */
    entityDescription?: string | null;
    /**
     * Information about how many documents the entity occurred in and how many total mentions the entity has across the entire video corpus.
     */
    entityInfo?: Schema$VideoContentSearchCaptionEntityDocInfo;
    /**
     * Whether or not the entity mention text appears in the description of the video.
     */
    entityMentionInDescription?: boolean | null;
    /**
     * The estimated begin time in ms of the entity mention using the text offset divided by the ASR duration.
     */
    estimatedMentionTime?: number | null;
    /**
     * Average similarity between this anchor and other anchors in the set.
     */
    groupCohesion?: number | null;
    /**
     * The confidence of the hypernym used as the set label.
     */
    hypernymConfidence?: number | null;
    /**
     * Number of hypernyms used for calculating similarity.
     */
    hypernymCount?: number | null;
    /**
     * The cosine similarity between the document salient terms and the hyperpedia hypernyms for a given entity.
     */
    hyperpediaSalientTermsSimilarity?: number | null;
    /**
     * Whether or not this entity is in the webref entities.
     */
    inWebrefEntities?: boolean | null;
    /**
     * True if the given entity appears as an Oracle followup query.
     */
    isOracleEntity?: boolean | null;
    /**
     * Whether this entity counts as a 'product' for the purpose of dividing entities between the 'related topics' and 'products in this video' features.
     */
    isProduct?: boolean | null;
    /**
     * The maximum confidence of all of the entity mentions in the transcript.
     */
    maxMentionConfidence?: number | null;
    /**
     * The confidence that the ASR mention matches the given mid.
     */
    mentionConfidence?: number | null;
    /**
     * Number of times an entity is mentioned in the ASR transcript.
     */
    mentions?: number | null;
    /**
     * The duration in ms between this anchor and the previous anchor or the beginning of the video if this is the first anchor.
     */
    msFromLastAnchor?: number | null;
    /**
     * The ASR sentence after asr_sentence or "" if it is the last sentence.
     */
    nextAsrSentence?: string | null;
    /**
     * The ASR text of each mention of the entity.
     */
    otherAsrMentionText?: string[] | null;
    /**
     * Each time the entity was mentioned.
     */
    otherEstimatedMentionTimes?: number[] | null;
    /**
     * The ASR sentence before asr_sentence or "" if it is the first sentence.
     */
    previousAsrSentence?: string | null;
    /**
     * The confidence that the ASR mention is a trusted name.
     */
    trustedNameConfidence?: number | null;
    /**
     * The webref entity topicality score if the entity is a webref entity and 0 if not.
     */
    webrefEntityTopicality?: number | null;
  }
  /**
   * Features and debug info for clusters of caption entity video anchors.
   */
  export interface Schema$VideoContentSearchCaptionEntityAnchorSetFeatures {
    /**
     * The total score used for filtering and selecting entity sets.
     */
    aggregateScore?: number | null;
    /**
     * The prefiltered size of the entity set.
     */
    clusterSize?: number | null;
    /**
     * The number of entities in the anchor set that are in the webref entities.
     */
    entitiesInWebrefEntities?: number | null;
    /**
     * The number of anchors where the entity mention text appears in the description of the video.
     */
    entityMentionInDescriptionCount?: boolean | null;
    /**
     * The average cosine similarity between hypernyms of members of the set.
     */
    groupCohesion?: number | null;
    /**
     * The most prominent hypernym across the entities in the set.
     */
    hypernym?: string | null;
    /**
     * The salience of the best hypernym for the set.
     */
    hypernymSalience?: number | null;
    /**
     * Median number of times any member of the set was mentioned in the ASR transcript.
     */
    medianMentions?: number | null;
    /**
     * Mentions divided by the total number of entity mentions in the video.
     */
    mentionSalience?: number | null;
    /**
     * Salience of the set computed by aggregating the hypernyms from each member and calculating the cosine similarity with the salient terms.
     */
    salience?: number | null;
    /**
     * The top N hypernyms for the entities in the set.
     */
    topHypernym?: string[] | null;
    /**
     * Number of times any member of the group was mentioned in the ASR transcript.
     */
    totalMentions?: number | null;
  }
  /**
   * Contains information about document appearances of an entity.
   */
  export interface Schema$VideoContentSearchCaptionEntityDocInfo {
    /**
     * The number of documents where this entity was mentioned at least once.
     */
    entityDocCount?: string | null;
    /**
     * The number of times the entity was mentioned across the entire corpus.
     */
    entityMentionCount?: string | null;
    /**
     * The entity id.
     */
    mid?: string | null;
    /**
     * The number of documents in the corpus.
     */
    totalDocCount?: string | null;
    /**
     * The number of mentions of any entity across the entire corpus.
     */
    totalMentionCount?: string | null;
  }
  /**
   * Contains transcript-level data about a video whether it comes from ASR or closed captions.
   */
  export interface Schema$VideoContentSearchCaptionInfo {
    asrCaption?: Schema$VideoContentSearchAsrCaption[];
    saftDocument?: Schema$NlpSaftDocument;
  }
  /**
   * Contains timing and text for a given label.
   */
  export interface Schema$VideoContentSearchCaptionLabelFeatures {
    /**
     * OCR anchors with overlapping time-window with this anchor
     */
    alignedOcrTexts?: Schema$VideoContentSearchOCRText[];
    /**
     * The time stamp in milliseconds for the reference text (e.g. description anchor time).
     */
    alignedTime?: string | null;
    /**
     * Text around the aligned_time of a long duration, say [-15 minutes, +15 minutes]
     */
    contextText?: string | null;
    /**
     * The main label text for the feature.
     */
    labelText?: string | null;
    /**
     * Identified matching text by similarity.
     */
    textSimilarityFeatures?: Schema$VideoContentSearchTextSimilarityFeatures;
    /**
     * The text span in the passage starting from the aligned time.
     */
    textSpanAtAlignedTime?: string | null;
  }
  export interface Schema$VideoContentSearchCaptionSpanAnchorFeatures {
    /**
     * The features used to construct the inference example.
     */
    dolphinFeatures?: Schema$VideoContentSearchSpanDolphinFeatures;
    /**
     * The inference result from the Dolphin span model.
     */
    dolphinScores?: Schema$VideoContentSearchSpanDolphinScores;
    /**
     * Embedding distances (e.g. cosine distance) to the other anchors of the same video.
     */
    embeddingDistance?: number[] | null;
    /**
     * Time gap in ms to the next anchor. Always positive number.
     */
    postGapInMs?: number | null;
    /**
     * Time gap in ms to the previous anchor. Always a positive number.
     */
    preGapInMs?: number | null;
    /**
     * The range of tokens in video_info.saft_doc for the anchor label.
     */
    saftBeginTokenIndex?: number | null;
    saftEndTokenIndex?: number | null;
    saftTranscriptEndCharOffset?: number | null;
    /**
     * The range of characters in video_info.saft_transcript for the anchor label.
     */
    saftTranscriptStartCharOffset?: number | null;
    /**
     * A summary of the ASR confidence for the selected candidate.
     */
    spanAsrConfidenceStats?: Schema$VideoContentSearchMetricStats;
    /**
     * A summary of the Dolphin span token scores for the selected candidate.
     */
    spanDolphinScore?: Schema$VideoContentSearchMetricStats;
    /**
     * Word count of the span text, tokenized with SAFT.
     */
    wordCount?: number | null;
  }
  export interface Schema$VideoContentSearchCaptionSpanAnchorSetFeatures {
    /**
     * A summary of the dolphin scores over the anchor set.
     */
    anchorSetDolphinScoreStats?: Schema$VideoContentSearchMetricStats;
  }
  /**
   * A message containing set-level comment anchor features. Next ID: 3
   */
  export interface Schema$VideoContentSearchCommentAnchorSetFeatures {
    replies?: Schema$VideoContentSearchCommentAnchorSetFeaturesComment[];
    rootComment?: Schema$VideoContentSearchCommentAnchorSetFeaturesComment;
  }
  /**
   * A structure that represents a comment. Fields 1 through 6 are designed to store responses from the 3P YouTube Data API (see https://developers.google.com/youtube/v3/docs/comments). Field 7 is used to store the Google-internal representation of the comment; if it is populated, then all other fields may be empty. Next ID: 8
   */
  export interface Schema$VideoContentSearchCommentAnchorSetFeaturesComment {
    /**
     * The ID that YouTube uses to uniquely identify the comment.
     */
    commentId?: string | null;
    /**
     * The total number of likes (positive ratings) the comment has received.
     */
    likeCount?: number | null;
    /**
     * The MiniStanza object that represents the comment. If populated, all other fields in this message may be empty.
     */
    miniStanza?: Schema$YoutubeCommentsClusteringMiniStanza;
    /**
     * The date and time when the comment was orignally published, specified in ISO 8601 format.
     */
    publishedAt?: string | null;
    /**
     * The comment's text, in HTML.
     */
    textDisplay?: string | null;
    /**
     * The original, raw text of the comment.
     */
    textOriginal?: string | null;
    /**
     * The date and time when the comment was last updated, specified in ISO 8601 format.
     */
    updatedAt?: string | null;
  }
  export interface Schema$VideoContentSearchDescriptionAnchorFeatures {
    /**
     * When the description anchor text has been recognized as an entity, how much of the description anchor text is covered by the entity mention.
     */
    entityTextCoverage?: number | null;
    /**
     * Whether or not a mention of the description anchor exists in the ASR.
     */
    inAsr?: boolean | null;
    /**
     * Whether or not the anchor was created from the description for use in training data. This will be set to true for positive examples and false for negative examples.
     */
    isDescriptionAnchor?: boolean | null;
    /**
     * The distance from the ASR sentence to the description anchor time in ms.
     */
    spanToAsrTime?: number | null;
  }
  export interface Schema$VideoContentSearchDescriptionAnchorSetFeatures {
    /**
     * The number of description anchors that were matched to captions in the ASR.
     */
    asrAnchorCount?: number | null;
    /**
     * The fraction of anchors that were matched to captions in the ASR.
     */
    asrAnchorFraction?: number | null;
    /**
     * The number of unique mids which where matched to description anchors.
     */
    uniqueAsrMidCount?: number | null;
  }
  /**
   * Metadata about the span when the anchor source is description span.
   */
  export interface Schema$VideoContentSearchDescriptionSpanInfo {
    /**
     * The number of tokens in the context (sentence) where the description span is extracted from.
     */
    contextTokenCount?: number | null;
    /**
     * The inference result from the Dolphin span model if the anchor's source is description span.
     */
    dolphinScores?: Schema$VideoContentSearchSpanDolphinScores;
    /**
     * A summary of the Dolphin span token scores for the selected candidate. Currently, dolphin_scores in DescriptionSpanInfo would only contain a single span candidate so this field is essentially the copy of the score_stats for that span candidate.
     */
    spanDolphinScoreStats?: Schema$VideoContentSearchMetricStats;
    /**
     * The number of tokens in the description span. The description span is formed from non-contiguous segment spans of a sentence (context), where each segment span's score satifsies the min span thresholds.
     */
    spanTokenCount?: number | null;
    /**
     * The ratio of span_token_count / context_token_count.
     */
    spanTokenCountRatio?: number | null;
  }
  /**
   * Contains information about the scores from each individual dolphin ensemble model.
   */
  export interface Schema$VideoContentSearchDolphinEnsembleScore {
    /**
     * The score generated by the Dolphin callout model.
     */
    dolphinScore?: number | null;
    modelName?: string | null;
  }
  export interface Schema$VideoContentSearchDolphinFeatures {
    /**
     * The alt query used for building the Dolphin example.
     */
    altQuery?: string | null;
    /**
     * The answer used for building the Dolphin example.
     */
    answer?: string | null;
    /**
     * The query used for building the Dolphin example.
     */
    query?: string | null;
    /**
     * The time stamp of the video anchor in milliseconds.
     */
    timeMs?: string | null;
    /**
     * The title used for building the Dolphin example.
     */
    title?: string | null;
    /**
     * The url of the video.
     */
    url?: string | null;
  }
  export interface Schema$VideoContentSearchDolphinScoringConfig {
    /**
     * The output put keys for Dolphin PredictResponse
     */
    descriptivenessOutputKey?: string | null;
    /**
     * If the dolphin model is an ensemble model (e.g. Video QnA model which consists of 4 teacher models), stores each individual model name.
     */
    ensembleModelNames?: string[] | null;
    /**
     * The inference batch size to use for inference methods that handle batching.
     */
    inferenceBatchSize?: number | null;
    /**
     * The method to use for inference. This must be set or inference will fail.
     */
    inferenceMethod?: string | null;
    /**
     * Holds value of flag --max_rpc_retries.
     */
    maxRpcRetries?: number | null;
    /**
     * Model name used for ModelSpec in PredictRequest used in the PredictionService API.
     */
    modelName?: string | null;
    /**
     * Only used when using the bulk_inference API. See go/dolphin-models to learn about the different dolphin models.
     */
    modelPath?: string | null;
    /**
     * TODO(alexiaxu) To deprecate this field in the future Output key for Dolphin PredictResponse.
     */
    outputKey?: string | null;
    /**
     * Holds value of flag --rpc_deadline (converted to seconds).
     */
    rpcDeadlineSeconds?: number | null;
    /**
     * Tensorflow inference BNS address when using PredictionService API.
     */
    serviceBns?: string | null;
    usefulnessOutputKey?: string | null;
  }
  /**
   * Entity annotations for one of the mids representing an anchor label or a query text.
   */
  export interface Schema$VideoContentSearchEntityAnnotations {
    /**
     * The Webref category that this entity belongs to e.g. "/moka/software".
     */
    category?: string | null;
    /**
     * The overall confidence that this entity is annotated somewhere in the label.
     */
    confidence?: number | null;
    /**
     * Whether or not this entity belongs to a set of blocklisted categories.
     */
    isRestricted?: boolean | null;
    /**
     * The Webref entity mid.
     */
    mid?: string | null;
  }
  export interface Schema$VideoContentSearchEntityGroupInfo {
    /**
     * Collection id.
     */
    collectionId?: string | null;
    /**
     * Label for this anchor group.
     */
    label?: string | null;
  }
  /**
   * Frame-level similarities info for each topic for an interval of frames.
   */
  export interface Schema$VideoContentSearchFrameSimilarityInterval {
    /**
     * Timestamp in milliseconds for the last frame in this frame interval.
     */
    framesEndTimestampMs?: string | null;
    /**
     * The similarity between this topic and starburst features for frames in [frames[frame_level_starburst_start_index], frames[frame_level_starburst_start_index + len(frame_similarity)].
     */
    frameSimilarity?: number[] | null;
    /**
     * The index of the first frame within this interval of similar frames. VideoMultimodalTopicFeatures.frame_starburst_data.
     */
    framesStarburstStartIndex?: number | null;
    /**
     * Timestamp in milliseconds for the first frame in this frame interval.
     */
    framesStartTimestampMs?: string | null;
  }
  /**
   * Starburst frame-level dense data.
   */
  export interface Schema$VideoContentSearchFrameStarburstData {
    /**
     * Raw float feature vector of the starburst representation.
     */
    denseVector?: number[] | null;
    /**
     * Starburst version. Possible values are: STARBURST_TEXT_V4 STARBURST_TEXT_V4_5 STARBURST_TEXT_V4_PLC STARBURST_TEXT_V5
     */
    sbVersion?: string | null;
    /**
     * Timestamp in milliseconds for this frame.
     */
    timestampMs?: string | null;
  }
  export interface Schema$VideoContentSearchGenerativePredictionFeatures {
    /**
     * Features for inferences from generative models.
     */
    passage?: string | null;
    /**
     * Inference results.
     */
    predictions?: string[] | null;
    target?: string | null;
  }
  /**
   * The inference result features coming from the prediction service that generates the topics.
   */
  export interface Schema$VideoContentSearchGenerativeTopicPredictionFeatures {
    /**
     * This field is present if we already have a ground truth topic from the training data.
     */
    groundTruthTopic?: string | null;
    /**
     * The name of the model where the predictions come from.
     */
    modelName?: string | null;
    /**
     * Inference results from the prediction service. Since we generally use beam search with beam_size \> 1, this field is repeated to capture all the generated topic beams.
     */
    predictions?: string[] | null;
  }
  /**
   * Anchor-level Metadata about Instruction anchors. TODO(keyvana) Update this proto.
   */
  export interface Schema$VideoContentSearchInstructionAnchorFeatures {}
  /**
   * Anchor-level metadata about the instruction anchors. Each instruction passage anchor can contain multiple instruction steps and multiple description anchors and thus the following fields are defined as repeated.
   */
  export interface Schema$VideoContentSearchInstructionTrainingDataAnchorFeatures {
    /**
     * The match info about the description anchor matches with the ASR n-grams in the instruction passage. Each element represents the best match between a given description anchor and all qualified n-grams within the passage.
     */
    bestAsrAndDescriptionAnchorsMatchInfo?: Schema$VideoContentSearchSimilarityMatchInfo[];
    /**
     * The match info about the description anchor matches with the instruction anchors in a instruction passage. Each element represents the best match between a given description anchor and all the instruction anchors in the passage.
     */
    bestDescriptionAndInstructionAnchorsMatchInfo?: Schema$VideoContentSearchSimilarityMatchInfo[];
    /**
     * The match info about the instruction steps matches with the ASR. Each instruction step corresponds to a step extracted from a web doc. Each instruction passage can contain multiple instruction step matches thus the repeated field.
     */
    instructionAnchorsMatchInfo?: Schema$VideoContentSearchSimilarityMatchInfo[];
  }
  /**
   * Anchor-level Metadata about list description anchors.
   */
  export interface Schema$VideoContentSearchListAnchorFeatures {
    /**
     * The babel match info of the list anchor with its matched ASR text.
     */
    babelMatch?: Schema$VideoContentSearchTextMatchInfo;
    /**
     * The description span metadata about list anchor when the anchor source is DESCRIPTION_SPANS.
     */
    descriptionSpanInfo?: Schema$VideoContentSearchDescriptionSpanInfo;
    /**
     * The list item index of this anchor in the video description.
     */
    listItemIndex?: number | null;
    /**
     * The metadata about this list item's matches with different ASR snippets. This is currently used in the base model (DTW) to generate candidate anchors.
     */
    matchScores?: Schema$VideoContentSearchMatchScores[];
    /**
     * The score from the pretrigger model.
     */
    pretriggerScore?: number | null;
    /**
     * Babel similarity between the anchor and the video title.
     */
    titleAnchorBabelMatchScore?: number | null;
  }
  /**
   * Cluster-level Metadata about list anchors. Next id: 15.
   */
  export interface Schema$VideoContentSearchListAnchorSetFeatures {
    /**
     * The following fields are used for description span anchors, The aggregated span token texts over all the span candidates of the anchor set.
     */
    aggregatedSpanText?: string | null;
    /**
     * A summary of the span scores over the anchor set. This summary is calculated over the aggregation of the individual token spans belonging to the span candidates of anchors.
     */
    anchorSetSpanScoreStats?: Schema$VideoContentSearchMetricStats;
    /**
     * Median, average and standard deviation of babel_match_score among anchors in the same VideoAnchors cluster.
     */
    babelMatchScoreStats?: Schema$VideoContentSearchMetricStats;
    /**
     * A summary of the context token counts over the anchor set.
     */
    contextTokenCountStats?: Schema$VideoContentSearchMetricStats;
    /**
     * The ratio of anchors timespan duration over the total duration of the video. Anchors timespan duration is defined as the time span from the first anchor to the last anchor in VideoAnchors.
     */
    durationSpanRatio?: number | null;
    /**
     * Median, average and standard deviation of duration_to_predicted_time_ms among anchors in the same VideoAnchors cluster.
     */
    durationToPredictedTimeMsStats?: Schema$VideoContentSearchMetricStats;
    /**
     * The source of anchors extracted from the video descriptions.
     */
    listAnchorSource?: string | null;
    /**
     * The total number of list items mentioned in the video description. Not all these list items are necessarily found as list anchors.
     */
    listDescriptionItemsSize?: number | null;
    /**
     * The number of matched anchors in the list anchors over the total number of post-filtering list items in the video description, i.e. matched_list_description_anchors_ratio = matched_list_description_anchors_size / post_filtering_list_description_items_size.
     */
    matchedListDescriptionAnchorsRatio?: number | null;
    /**
     * The number of matched list anchors found in the ASR. The matched list anchors are a subset of the post-filtering list items in the video description, and as such matched_list_description_anchors_size <= post_filtering_list_description_items_size.
     */
    matchedListDescriptionAnchorsSize?: number | null;
    /**
     * The total number of list items in the video description that are actually considered for matching. This is a subset of list items in the video description that passed filterings such as language filtering, i.e. post_filtering_list_description_items_size <= list_description_items_size
     */
    postFilteringListDescriptionItemsSize?: number | null;
    /**
     * Median, average and standard deviation of pretrigger_score among anchors in the same cluster.
     */
    pretriggerScoreStats?: Schema$VideoContentSearchMetricStats;
    /**
     * A summary of the span token count ratios over the anchor set.
     */
    spanTokenCountRatioStats?: Schema$VideoContentSearchMetricStats;
    /**
     * A summary of the span token counts over the anchor set.
     */
    spanTokenCountStats?: Schema$VideoContentSearchMetricStats;
  }
  /**
   * Anchor-level metadata about the description anchors used as list items to build training data for list anchors.
   */
  export interface Schema$VideoContentSearchListTrainingDataAnchorFeatures {
    /**
     * The timestamp of when the description anchor is annotated to appear in the video in ms.
     */
    descriptionAnchorTimeMs?: number | null;
    /**
     * The time gap of when the description anchor is annotated to appear in the video (description_anchor_time_ms) from when it's matched in the ASR as the list anchor.
     */
    descriptionAnchorTimeToMatchedTimeMs?: string | null;
    /**
     * Closest edit distance between the anchor generated by description span and the description anchor where the span anchor must be within small threshold time difference of the description anchor timestamp.
     */
    editDistance?: number | null;
    /**
     * edit_distance over the description anchor's label length.
     */
    editDistanceRatio?: number | null;
    /**
     * The description anchor text used for matching to Span anchor text.
     */
    matchedDescriptionText?: string | null;
    /**
     * The description span anchor text that was the best match for the nearby description anchor.
     */
    matchedSpanText?: string | null;
  }
  /**
   * Cluster-level metadata about the description anchors used as list items to build training data for list anchors.
   */
  export interface Schema$VideoContentSearchListTrainingDataSetFeatures {
    /**
     * Summary of the edit_distance_ratios of the description spans from their best matched description anchor texts.
     */
    editDistanceRatioStats?: Schema$VideoContentSearchMetricStats;
    /**
     * Summary of the edit_distances of the description spans from their best matched description anchor texts.
     */
    editDistanceStats?: Schema$VideoContentSearchMetricStats;
    /**
     * Median, average and standard deviation of time gaps of when the description anchors is annotated to appear in the video (description_anchor_time_ms) from when they are matched in the ASR as the list description anchors.
     */
    matchedDescriptionAnchorsTimegapStats?: Schema$VideoContentSearchMetricStats;
    /**
     * Number of description anchors in the description of this video.
     */
    numDescriptionAnchors?: number | null;
  }
  export interface Schema$VideoContentSearchMatchScores {
    matchInfo?: Schema$VideoContentSearchTextMatchInfo[];
    /**
     * The method used for matching, e.g. 'babel', 'nlp', 'neon', ßß'phonetic'.
     */
    method?: string | null;
  }
  /**
   * Median, mean and standard deviation of a feature value.
   */
  export interface Schema$VideoContentSearchMetricStats {
    max?: number | null;
    mean?: number | null;
    median?: number | null;
    min?: number | null;
    stddev?: number | null;
    sum?: number | null;
  }
  /**
   * Multimodal features for a single generated topic. Next ID: 8
   */
  export interface Schema$VideoContentSearchMultimodalTopicFeatures {
    /**
     * The list of frame sequence similarities to this topic. The list of frames are picked to be around the topic timestamp. The set of frames selected are thresholded at a value to ensure the selected frame intervals are similar to the query.
     */
    frameSimilarityInterval?: Schema$VideoContentSearchFrameSimilarityInterval[];
    /**
     * The inference results from the prediction services that generate the topics.
     */
    generativeTopicPredictionFeatures?: Schema$VideoContentSearchGenerativeTopicPredictionFeatures[];
    /**
     * Features related to queries generated using document navboost data with timed anchors. Only populated if the query was generated using this approach.
     */
    navboostAnchorFeatures?: Schema$VideoContentSearchNavboostAnchorFeatures;
    /**
     * The text of the generated topic.
     */
    topic?: string | null;
    /**
     * End time of the topic.
     */
    topicEndMs?: string | null;
    /**
     * Start time of the topic.
     */
    topicStartMs?: string | null;
    /**
     * How the query was generated.
     */
    videoQuerySource?: string | null;
  }
  /**
   * Multimodal features for a single generated topic used to build training data.
   */
  export interface Schema$VideoContentSearchMultimodalTopicTrainingFeatures {
    /**
     * The similarity info for the frame with maximum similarity to the topic in its visual interval. The repeated similarity field in this proto has a single value corresponding to the maximum similarity. This similarity score is used to filter and pick the training data examples.
     */
    maxFrameSimilarityInterval?: Schema$VideoContentSearchFrameSimilarityInterval;
    /**
     * The topic/query normalized for Navboost and QBST lookups as well as fetching of the Rankembed nearest neighbors.
     */
    normalizedTopic?: string | null;
    /**
     * QBST terms overlap features for a candidate query.
     */
    qbstTermsOverlapFeatures?: Schema$VideoContentSearchQbstTermsOverlapFeatures;
    /**
     * Rankembed similarity features for a candidate nearest neighbor rankembed query.
     */
    rankembedNearestNeighborsFeatures?: Schema$VideoContentSearchRankEmbedNearestNeighborsFeatures;
    /**
     * The information about the saft entity annotation for this topic.
     */
    saftEntityInfo?: Schema$VideoContentSearchSaftEntityInfo;
    /**
     * Raw float feature vector of the topic's co-text embedding representation in the Starburst space.
     */
    topicDenseVector?: number[] | null;
  }
  /**
   * Message for SAFT named entities.
   */
  export interface Schema$VideoContentSearchNamedEntity {
    /**
     * Type name: e.g. /saft/person for a person's name.
     */
    entityType?: string | null;
    /**
     * Text referring to an entity of type entity_type;
     */
    text?: string | null;
  }
  /**
   * Features for queries generated using document navboost data with timed anchors.
   */
  export interface Schema$VideoContentSearchNavboostAnchorFeatures {
    /**
     * The anchor text used in the generated query.
     */
    anchorText?: string | null;
    /**
     * The navboost query used in the generated query.
     */
    navboostText?: string | null;
    /**
     * How the navboost-anchor query was constructed.
     */
    source?: string | null;
  }
  export interface Schema$VideoContentSearchOcrAsrFeature {
    /**
     * The minimum char edit distance between the normalized OCR text and candidate word strings taken from a time window around the OCR appearance.
     */
    minCharEditDistance?: number | null;
    /**
     * The matched ASR candidate for minimum char edit distance.
     */
    minCharEditDistanceAsrText?: string | null;
    /**
     * The min_char_edit_distance divided by the length of the OCR string.
     */
    minCharEditDistancePercent?: number | null;
    /**
     * The normalized OCR text which was used to match the candidate.
     */
    ocrTextNormalizedForCharMatch?: string | null;
    /**
     * The length of the normalized OCR text.
     */
    ocrTextNormalizedForCharMatchLength?: number | null;
    /**
     * The score from the pretrigger model.
     */
    pretriggerScore?: number | null;
    /**
     * The ASR text that was used for the word overlap calculation.
     */
    wordOverlapAsrText?: string | null;
    /**
     * The number of words found both in the OCR text and the ASR in a time window around OCR appearance.
     */
    wordOverlapCount?: number | null;
    /**
     * The word_overlap_count divided by the number of words in the OCR text.
     */
    wordOverlapPercent?: number | null;
  }
  export interface Schema$VideoContentSearchOcrAsrSetFeature {
    /**
     * The word_overlap_score divided by the greatest word_overlap_score for any cluster in the VideoAnchorSets.
     */
    normalizedWordOverlapScore?: number | null;
    /**
     * A score based on the number of overlapped words between the OCR and ASR for anchors in the cluster.
     */
    wordOverlapScore?: number | null;
  }
  /**
   * Metadata about the join of description anchors and OCR data which is used to build training data.
   */
  export interface Schema$VideoContentSearchOcrDescriptionTrainingDataAnchorFeatures {
    /**
     * The string edit distance from the anchor label to the nearest OCR text.
     */
    editDistance?: number | null;
    /**
     * edit_distance over the description anchor's label length.
     */
    editDistanceRatio?: number | null;
    /**
     * The description anchor text used for matching to OCR text.
     */
    matchedDescriptionText?: string | null;
    /**
     * The time of the selected OCR frame in ms. The best frame in a window around the target description anchor will be selected.
     */
    matchedFrameTimeMs?: number | null;
    /**
     * The OCR text that was the best match for the nearby description anchor.
     */
    matchedOcrText?: string | null;
  }
  /**
   * Metadata about the join of description anchors and OCR data for a set of description anchors.
   */
  export interface Schema$VideoContentSearchOcrDescriptionTrainingDataSetFeatures {
    /**
     * The max edit distance of any description anchor to its closest OCR text.
     */
    maxEditDistance?: number | null;
    /**
     * The maximum of (edit distance of any description anchor to its closest OCR text over description anchor label length).
     */
    maxEditDistanceRatio?: number | null;
    /**
     * The median edit distance of any description anchor to its closest OCR text.
     */
    medianEditDistance?: number | null;
  }
  /**
   * Contains OCR text, its start time and additional details about position/fonts
   */
  export interface Schema$VideoContentSearchOCRText {
    /**
     * Additional details about position/font/color etc. for the OCR text
     */
    ocrFeature?: Schema$VideoContentSearchOnScreenTextFeature;
    /**
     * The OCR recognized text label
     */
    ocrText?: string | null;
    /**
     * The time in ms at which the OCR text appears on the frame
     */
    timeMs?: string | null;
  }
  /**
   * Features for video level info.
   */
  export interface Schema$VideoContentSearchOcrVideoFeature {
    /**
     * Average text area ratio throughout video frames. Text area ratio for a frame is defined by sum(text area) / image area.
     */
    averageTextAreaRatio?: number | null;
    /**
     * Cluster id to the num of frames in each cluster.
     */
    clusterIdToFrameSize?: {[key: string]: number} | null;
    /**
     * Total time of this video in milliseconds.
     */
    durationInMs?: number | null;
    /**
     * Video level detected language by lang id, aggregated from each frame.
     */
    langIdDetectedLanguage?: string | null;
    /**
     * The number of ShotInfo clusters.
     */
    numClusters?: number | null;
    /**
     * The number of video frames contained in ShotInfo cluster.
     */
    numFrames?: number | null;
    /**
     * Video level detected language, aggregated from each frame.
     */
    ocrDetectedLanguage?: string | null;
  }
  /**
   * Features for the set of OnScreenText.
   */
  export interface Schema$VideoContentSearchOnScreenTextClusterFeature {
    /**
     * Average confidence.
     */
    averageConfidence?: number | null;
    averageDurationRatio?: number | null;
    averageHorizontalPosition?: number | null;
    /**
     * Deprecated. Please use ocr_text_length_stats.median instead. The average length of anchor labels. average_ocr_text_length is deprecated, because now ocr_text_length_stats has a field for holding the same value.
     */
    averageOcrTextLength?: number | null;
    /**
     * Deprecated. Please use text_height_ratio_stats.mean instead. Average value of text height ratio (over image height), which is taken average over the same text. average_of_average_text_height_ratio is deprecated, because now text_height_ratio_stats has a field for keeping the same value.
     */
    averageOfAverageTextHeightRatio?: number | null;
    /**
     * Average of label center position.
     */
    averageVerticalPosition?: number | null;
    /**
     * The number of anchors in the cluster over the number of anchors in the video.
     */
    clusterRatio?: number | null;
    /**
     * The number of anchors in the cluster.
     */
    clusterSize?: number | null;
    /**
     * The number of anchors that had a counting number over the number of anchors in total.
     */
    countingNumberRatio?: number | null;
    /**
     * Median, average and standard deviation of duration_ms among anchors in the same cluster.
     */
    durationMsStats?: Schema$VideoContentSearchMetricStats;
    /**
     * Frame size ratio over total frames in video.
     */
    frameSizeRatio?: number | null;
    /**
     * Average and standard deviation of logarithm of the length of labels among anchors in the same cluster.
     */
    logOcrTextLengthStats?: Schema$VideoContentSearchMetricStats;
    /**
     * Average and standard deviation of log(1000 + duration_ms) among anchors in the same cluster. Since duration_ms can be zero, 1000 is added before applying logarithm.
     */
    logp1000DurationMsStats?: Schema$VideoContentSearchMetricStats;
    /**
     * Average and standard deviation of log(average_text_height_ratio) among anchors in the same cluster.
     */
    logTextHeightRatioStats?: Schema$VideoContentSearchMetricStats;
    /**
     * Stats for ratio of frame time intervals, over total video time.
     */
    maximumDurationRatio?: number | null;
    /**
     * The maximum ratio of duration between two consecutive anchors to video duration. This is calculated after all anchor filtering has been completed.
     */
    maxVideoDurationRatioBetweenAnchors?: number | null;
    /**
     * The median cluster distance for the anchors in the cluster. The way the distance is calculated will vary depending on the clustering method.
     */
    medianClusteringDistance?: number | null;
    medianDurationRatio?: number | null;
    /**
     * Deprecated. Please use text_height_ratio_stats.median instead. Median value of text height ratio (over image height), which is taken average over the same text. median_of_average_text_height_ratio is deprecated, because now text_height_ratio_stats has a field for keeping the same value.
     */
    medianOfAverageTextHeightRatio?: number | null;
    /**
     * Features for the overlap between OCR and ASR.
     */
    ocrAsrFeature?: Schema$VideoContentSearchOcrAsrSetFeature;
    /**
     * Median, average and standard deviation of the length of labels among anchors in the same cluster.
     */
    ocrTextLengthStats?: Schema$VideoContentSearchMetricStats;
    stddevDurationRatio?: number | null;
    /**
     * Median, average and standard deviation of average_text_height_ratio among anchors in the same cluster.
     */
    textHeightRatioStats?: Schema$VideoContentSearchMetricStats;
  }
  /**
   * Keep feature values which are useful to filter titles, labels.
   */
  export interface Schema$VideoContentSearchOnScreenTextFeature {
    /**
     * The average of rotation angles (degree) of texts.
     */
    averageAngle?: number | null;
    /**
     * Average value of confidence.
     */
    averageConfidence?: number | null;
    /**
     * Font size or weight information. This is extracted from internal message, so may not be available in future.
     */
    averageFontsize?: number | null;
    averageFontweight?: number | null;
    averageHeightRatio?: number | null;
    backgroundBlue?: number | null;
    backgroundGray?: number | null;
    backgroundGreen?: number | null;
    backgroundRed?: number | null;
    boxHeightRatio?: number | null;
    /**
     * Box width and height ratio, against to the frame size, so the value range is [0, 1]. If this text feature consists of multiple text boxes, the box width / height is a union of each text box.
     */
    boxWidthRatio?: number | null;
    /**
     * Horizontal position of the center of this text, by ratio [0.0, 1.0].
     */
    centerHorizontalPositionRatio?: number | null;
    /**
     * Vertical position of the center of this text, by ratio [0.0, 1.0].
     */
    centerVerticalPositionRatio?: number | null;
    /**
     * Counting number in this anchor's original label.
     */
    countingNumber?: number | null;
    /**
     * # of numbered anchors that are not out-of-order / # of all the numbered anchors. If no counting number is detected, this will be empty.
     */
    countingNumberOooRatio?: number | null;
    /**
     * Prefix for counting number in this anchor's label. If no counting number is detected, this will be empty.
     */
    countingNumberPrefix?: string | null;
    /**
     * Suffix for counting number in this anchor's label. If no counting number is detected, this will be empty.
     */
    countingNumberSuffix?: string | null;
    /**
     * Duration time in millisec.
     */
    durationMs?: number | null;
    foregroundBlue?: number | null;
    /**
     * Color information, normalized to [0-1]. This color information is extracted from the largest word in the line entities of PageLayout message. See goodoc::PageLayoutEntity::Colors for details.
     */
    foregroundGray?: number | null;
    foregroundGreen?: number | null;
    foregroundRed?: number | null;
    /**
     * Whether or not this anchor had URL in its label before the label fixing step.
     */
    hadUrlInLabel?: boolean | null;
    /**
     * # of LINE entities that are recognized as handwritten texts over # of merged LINE entities.
     */
    handwrittenTextRatio?: number | null;
    /**
     * Whether or not the counting number in this anchor's label is out-of-order. If no counting number is detected, this will be empty.
     */
    isCountingNumberOoo?: boolean | null;
    /**
     * Languages predicted by OCR. "repeated" is employed for this field because LINE entities of PageLayout message are sometimes annotated with multiple languages, and also two VideoAnchor that are annotated with different languages can be merged into one VideoAnchor. When two VideoAnchor are merged into one, the weight field values of the new VideoAnchor will be the average of weight field values weighted by merged_line_count.
     */
    languages?: Schema$GoodocLanguageCombinationLanguage[];
    /**
     * Left position of this text, by ratio [0, 1].
     */
    leftPositionRatio?: number | null;
    /**
     * The median distance between this anchor and other anchors in the cluster. The way the distance is calculated will vary depending on the clustering method.
     */
    medianClusteringDistance?: number | null;
    /**
     * The number of LINE entities used for this text.
     */
    mergedLineCount?: number | null;
    /**
     * # of OCR texts that appear in the same frame. If duration of this OCR text is not zero, the maximum number among multiple frames where this OCR text appears is set to this field.
     */
    nTextsInSameFrame?: number | null;
    /**
     * The number of OCR texts that have the same text among temporally-merged OCR texts.
     */
    occurrenceCount?: number | null;
    /**
     * occurrence_count over the number of anchors merged to this anchor.
     */
    occurrenceRatio?: number | null;
    /**
     * Features for the overlap between OCR and ASR.
     */
    ocrAsrFeature?: Schema$VideoContentSearchOcrAsrFeature;
    /**
     * The label this VideoAnchor originally had before label clearning steps.
     */
    originalLabel?: string | null;
    relativeShotTimeMsPosteriorToEndTime?: number | null;
    relativeShotTimeMsPosteriorToStartTime?: number | null;
    relativeShotTimeMsPriorToEndTime?: number | null;
    /**
     * Shot boundary time nearest to OnScreenText's start and end time. The time is relative to each OnScreenText's start / end time (ex. -1 means shot time exists prior to the start / end time). If shot time and start/end time is the same, 0 is set in 'prior' field. If no shot info is available, the below fields are not set.
     */
    relativeShotTimeMsPriorToStartTime?: number | null;
    shotInfoCountDuringText?: number | null;
    /**
     * OCR language that has the highest weight.
     */
    topOcrLanguage?: string | null;
    /**
     * Note that top-left position is (0, 0) for position values. Top position of this text, by ratio [0, 1].
     */
    topPositionRatio?: number | null;
  }
  /**
   * QBST terms overlap features for the candidate query.
   */
  export interface Schema$VideoContentSearchQbstTermsOverlapFeatures {
    /**
     * Fraction of salient terms of original query covered by anchor text.
     */
    qbstAnchorOverlap?: number | null;
    /**
     * Fraction of salient terms of original query covered by top navboost query of the video.
     */
    qbstNavboostOverlap?: number | null;
  }
  /**
   * Features for individual Q&A anchors. Next ID: 23
   */
  export interface Schema$VideoContentSearchQnaAnchorFeatures {
    /**
     * Segment of text from the ASR.
     */
    answer?: string | null;
    descartesDotScore?: number | null;
    descartesRankingScore?: number | null;
    dolphinModelType?: string | null;
    /**
     * Dolphin score calculated using the question as the query, the ASR passage as the answer. See go/dolphin-models to learn more.
     */
    dolphinScore?: number | null;
    /**
     * Edit distance of the question and the title from 0 to 1 where 1 is most similar.
     */
    editDistance?: number | null;
    /**
     * End time in milliseconds relative to the beginning of the video.
     */
    endMs?: string | null;
    ensembleScore?: number | null;
    /**
     * True if question_title_similarity is less than 0.2.
     */
    isDuplicateOfTitle?: boolean | null;
    /**
     * Neon similarity of question and title.
     */
    neonScore?: number | null;
    /**
     * Pointwise GAP normalized score. Score ranges from 0 to 1 and corresponds to GAP precision. See go/wa-cgap-to-pgap-migration to learn more.
     */
    pointwiseNormalizedGapScore?: number | null;
    /**
     * QBST similarity of question and title.
     */
    qbstScore?: number | null;
    /**
     * NavBoostFeature f_query_count for questions that are NavBoost queries.
     */
    queryCount?: number | null;
    /**
     * NavBoostFeature f_query_doc_count for questions that are NavBoost queries.
     */
    queryDocCount?: number | null;
    /**
     * Question from Related Questions SSTable or NavBoost.
     */
    question?: string | null;
    questionTitleSimilarity?: number | null;
    questionType?: string | null;
    /**
     * Start time in milliseconds relative to the beginning of the video.
     */
    startMs?: string | null;
    /**
     * Duration of the video.
     */
    videoDurationMs?: string | null;
    /**
     * Video title.
     */
    videoTitle?: string | null;
    /**
     * Mid corresponding to the WebRef entity from the CDoc that was used to source the question.
     */
    webrefMid?: string | null;
    /**
     * The WebRef entity topicality score. Learn more about this score at: http://go/topicality-score
     */
    webrefTopicalityScore?: number | null;
  }
  /**
   * Debug info for Q&A anchors. Next ID: 15
   */
  export interface Schema$VideoContentSearchQnaAnchorSetFeatures {
    /**
     * Path to Descartes background encoding in the form of a serialized drishti.DenseFeatureData proto. This is generated by the flume_generate_background_encoding binary.
     */
    backgroundEncodingPath?: string | null;
    /**
     * This field is used for debugging which model the decartes_model_score is generated from. You can learn more about the Descartes model at go/descartes-qa.
     */
    descartesModelVersion?: string | null;
    /**
     * Descartes score threshold for determining whether to output a QA pair as an anchor. This currently effects only the Descartes ranking score.
     */
    descartesScoreThreshold?: number | null;
    /**
     * The configuration used for fetching Dolphin scores.
     */
    dolphinConfig?: Schema$VideoContentSearchDolphinScoringConfig;
    /**
     * Path to Ranklab ensemble model used in post-trigger step.
     */
    ensembleModelPath?: string | null;
    /**
     * Minimum score for video anchor to pass the post-trigger step. Calculated by training a logisitic regression model with 95% precision. Training colab can be found at go/video-qa-ensemble.
     */
    ensembleModelScoreThreshold?: number | null;
    /**
     * Threshold for determining whether to consider an entity from a CDoc for sourcing questions on that topic. Learn more about this score at: http://go/topicality-score
     */
    minEntityTopicalityScore?: number | null;
    /**
     * Threshold for determining whether questions belong in the same cluster.
     */
    minQuestionDistance?: number | null;
    /**
     * Path to the Related Questions SSTable that maps entities to questions.
     */
    relatedQuestionsSstablePath?: string | null;
    /**
     * The duration threshold for merging captions.
     */
    spanDurationSecs?: string | null;
  }
  /**
   * Rankembed neighbor neighbor features for the candidate query.
   */
  export interface Schema$VideoContentSearchRankEmbedNearestNeighborsFeatures {
    /**
     * Rankembed similarity between the rankembed neighbor and the video anchor.
     */
    anchorReSimilarity?: number | null;
    /**
     * Rankembed similarity between the rankembed neighbor and the top navboost query of the video.
     */
    navQueryReSimilarity?: number | null;
    /**
     * Rankembed similarity between the rankembed neighbor and the original query candidate.
     */
    reSimilarity?: number | null;
  }
  /**
   * Saft named-entities info for a given topic.
   */
  export interface Schema$VideoContentSearchSaftEntityInfo {
    /**
     * Representative canonical name for the entity.
     */
    canonicalEntityName?: string | null;
    /**
     * Score indicating the saliency (centrality) of this entity to the original_text.
     */
    entitySalience?: number | null;
    /**
     * The type name, like "/saft/person", "/saft/art". See README.entity-types for the inventory of SAFT type tags.
     */
    entityTypeName?: string | null;
    /**
     * Representative entity name mention extracted from original_text.
     */
    mentionText?: string | null;
    /**
     * SAFT Mention type.
     */
    mentionType?: string | null;
    /**
     * Freebase MID for entity if this the saft entity corresponds to a Webref KG mid. This field is not always populated and is taken from FREEBASE_MID mid in EntityProfile in the saft entity annotation.
     */
    mid?: string | null;
    /**
     * The original input text (e.g. the anchor text) where the saft entity annotation was run on.
     */
    originalText?: string | null;
  }
  /**
   * Features for an individual Shopping Opinions Anchor. This file is used for video anchor use case. Next Id: 34
   */
  export interface Schema$VideoContentSearchShoppingOpinionsAnchorFeatures {
    /**
     * The anchor label.
     */
    anchorLabel?: string | null;
    /**
     * The first anchor_label mention position (word index, 0-based). It is computed from the snippet_sub_segment if exists. Otherwise it is computed from the snippet. It is not populated if there is no such mention.
     */
    anchorLabelFirstMentionPos?: number | null;
    /**
     * The sentiment score of the anchor label, with range: [-1, 1]. If using Lumin Pro/Con tags as the anchor labels, the "Pro" Lumin tag will have a score of 1 and Con Lumin tag will have a score of -1.
     */
    anchorLabelSentiment?: number | null;
    /**
     * The number of times words in anchor label (that is not a stopword) being mentioned in the snippet.
     */
    anchorLabelWordsMentions?: number | null;
    /**
     * The smaller number of anchor_label_first_mention_pos and lumin_aspect_first_mention_pos.
     */
    anchorOrAspectFirstMentionPos?: number | null;
    /**
     * The number of times words in anchor label or Lumin aspect (that is not a stopword) being mentioned in the snippet. If a word exists in both anchor label and Lumin aspect, it shall be only counted once for a mention in the snippet.
     */
    anchorOrAspectWordsMentions?: number | null;
    /**
     * Product aspect being discussed by this Shopping Opinions.
     */
    aspect?: Schema$VideoContentSearchAspect;
    /**
     * The asr with sentence break that was used for pro/con extraction.
     */
    asrForProConExtraction?: string | null;
    /**
     * The Babel similarity score between the snippet and the anchor label.
     */
    babelSimilarityScore?: number | null;
    /**
     * The classification score of the anchor being a con opinion.
     */
    conScore?: number | null;
    /**
     * The score from the Grampus model if the pro/con is extracted by Grampus.
     */
    grampusScore?: number | null;
    /**
     * Whether the anchor is classified as a con opinion.
     */
    isCon?: boolean | null;
    /**
     * Whether the anchor is classified as a pro opinion.
     */
    isPro?: boolean | null;
    /**
     * True if the anchor is considered as pro or con when extracted from MUM.
     */
    isProConWhenExtractedFromMum?: boolean | null;
    /**
     * The lumin aspect of the Pro/Con Lumin tag. e.g. "weight".
     */
    luminAspect?: string | null;
    /**
     * The first Lumin aspect mention position (word index, 0-based). It is computed from the snippet_sub_segment if exists. Otherwise it is computed from the snippet. It is not populated if there is no such mention.
     */
    luminAspectFirstMentionPos?: number | null;
    /**
     * The number of times words in Lumin aspect (that is not a stopword) being mentioned in the snippet.
     */
    luminAspectWordsMentions?: number | null;
    /**
     * The Lumin model score for the anchor label against the segment.
     */
    luminScore?: number | null;
    /**
     * The product aspect of the pro/con generated using the MUM model.
     */
    mumProductAspect?: string | null;
    /**
     * The score from the MUM model if the pro/con anchor is extracted by MUM.
     */
    mumScore?: number | null;
    /**
     * Scores from Opinions Dolphin scorer. Opinions Dolphin scorer is built by finetuning the Dolphin-based Video Anchor Unified Scorer V2 on the Opinions anchors ratings. It outputs two scores, which are optimized for descriptiveness and usefulness ratings respectively. 'descriptiveness_score' measures how well the anchor label describes the video section. 'usefulness_score' measures how useful the anchor label is for jumping to an important section in the video. go/vs-opinions-migration-report
     */
    opinionsDolphinDescriptivenessScore?: number | null;
    opinionsDolphinUsefulnessScore?: number | null;
    /**
     * The product name from title extracted by the grampus model.
     */
    productNameFromTitle?: string | null;
    /**
     * The classification score of the anchor being a pro opinion.
     */
    proScore?: number | null;
    /**
     * The question used to score this video segment.
     */
    question?: string | null;
    /**
     * The ASR for the selected segment window.
     */
    snippet?: string | null;
    /**
     * The QA model score for the selected segment window against the question.
     */
    snippetQaScore?: number | null;
    /**
     * The go/scarlett sentiment score of the selected segment window. Positive score represents positive sentiment. Negative score represents negative sentiment.
     */
    snippetSentimentScore?: number | null;
    /**
     * The ASR for the best matched sub segment inside the selected segment.
     */
    snippetSubSegment?: string | null;
    /**
     * The QA model score for the best sub segment against the question.
     */
    snippetSubSegmentQaScore?: number | null;
    /**
     * The go/scarlett sentiment score of the best matched sub segment. Positive score represents positive sentiment. Negative score represents negative sentiment.
     */
    snippetSubSegmentSentimentScore?: number | null;
    /**
     * The number of words in the ASR for the best matched sub segment.
     */
    snippetSubSegmentWordCount?: number | null;
    /**
     * The number of words in the ASR for the selected segment window.
     */
    snippetWordCount?: number | null;
  }
  export interface Schema$VideoContentSearchSimilarityMatchInfo {
    /**
     * The timestamp of when the first token in the token sequence is spoken in the video.
     */
    instructionStartMs?: number | null;
    /**
     * The instruction step text coming from the web document. Currently only populated for best_description_and_instruction_anchors_match_info.
     */
    instructionText?: string | null;
    /**
     * The reference text used for matching against token_sequence (e.g. description anchor text or instruction step text).
     */
    referenceText?: string | null;
    /**
     * The timestamp of when the reference text is pointing in the video (e.g. this is the description anchor timestamp when reference_text is description anchor. For instruction step used as the reference, no timestamps exists and thus this field is not populated).
     */
    referenceTextTimeMs?: number | null;
    /**
     * Similarity scorer name.
     */
    scoringMethodName?: string | null;
    /**
     * The similarity score given by the scoring method specified by the message scoring_method_name.
     */
    similarityScore?: number | null;
    /**
     * The index of the step in HowToInstructions that this token_sequence corresponds to.
     */
    stepIndex?: number | null;
    /**
     * The matched token sequence text in ASR.
     */
    tokenSequence?: string | null;
    /**
     * The length of the tokens in the token sequence.
     */
    tokenSequenceLength?: number | null;
    /**
     * The token offset of the matched token sequence from the beginning of the document.
     */
    tokenStartPos?: number | null;
  }
  export interface Schema$VideoContentSearchSpanDolphinFeatures {
    /**
     * The text passage from ASR.
     */
    passage?: string | null;
    /**
     * The title of the video.
     */
    title?: string | null;
  }
  export interface Schema$VideoContentSearchSpanDolphinScores {
    /**
     * The span candidates extracted from the list of span tokens. Each token is added to a span if its score is above a certain threshold.
     */
    spanCandidate?: Schema$VideoContentSearchSpanDolphinScoresSpanCandidate[];
    /**
     * The token-score pairs for the passage.
     */
    spanToken?: Schema$VideoContentSearchSpanDolphinScoresSpanToken[];
  }
  export interface Schema$VideoContentSearchSpanDolphinScoresSpanCandidate {
    /**
     * A summary of the token asr_confidence scores that make up the candidate.
     */
    asrConfidenceStats?: Schema$VideoContentSearchMetricStats;
    /**
     * A summary of the token scores that make up the candidate.
     */
    scoreStats?: Schema$VideoContentSearchMetricStats;
    /**
     * The passage text from which this span candidate belongs to. In case of description spans, this field stores the sentence containing the span candidate where the sentence is a subset of the passage used for generating the span candidate.
     */
    sourcePassage?: string | null;
    /**
     * The span candidate text.
     */
    text?: string | null;
    /**
     * The start time for the span candidate.
     */
    timeMs?: string | null;
  }
  export interface Schema$VideoContentSearchSpanDolphinScoresSpanToken {
    /**
     * The ASR confidence for the token, if available.
     */
    asrConfidence?: number | null;
    /**
     * Whether or not this token is the first token in a sentence.
     */
    isSentenceStart?: boolean | null;
    /**
     * A score correlated with the probability that the token is part of a span candidate.
     */
    score?: number | null;
    /**
     * The token text.
     */
    text?: string | null;
    /**
     * The start time of the passage with this token.
     */
    timeMs?: string | null;
  }
  /**
   * Features for a set of Sports Key Moments (SKM) Anchors. Each instance of this object should be associated with a VideoAnchorSets object. Next ID: 3
   */
  export interface Schema$VideoContentSearchSportsKeyMomentsAnchorSetFeatures {
    /**
     * The Prefilter classification label associated with the video that contains the VideoAnchorSets this object is asociated with. E.g. "basketball".
     */
    prefilterClassificationLabel?: string | null;
    /**
     * Version of the underlying TensorFlow model.
     */
    tensorflowModelVersion?: string | null;
  }
  export interface Schema$VideoContentSearchTextMatchInfo {
    /**
     * The time gap of the matched_time_ms from the predicted timestamp of when this anchor should appear in the video.
     */
    durationToPredictedTimeMs?: string | null;
    /**
     * The start token offset from the beginning of ASR where matched_asr_text starts.
     */
    matchedAsrStartPos?: number | null;
    /**
     * The ASR text that was a candidate match for the list anchor.
     */
    matchedAsrText?: string | null;
    /**
     * The timestamp of the matched ASR in the video in milliseconds.
     */
    matchedAsrTimeMs?: string | null;
    /**
     * The ratio of the matched_asr_time_ms over the total duration of the video.
     */
    matchedAsrTimeRatio?: number | null;
    /**
     * The number of tokens in matched_asr_text
     */
    matchedAsrTokenCount?: number | null;
    /**
     * The ratio of the video description item index this match corresponds to over the total number of list description items for the video.
     */
    matchedDescriptionItemIndexRatio?: number | null;
    /**
     * The video description text matched with the ASR that's used as the anchor label.
     */
    matchedDescriptionText?: string | null;
    /**
     * The number of tokens in matched_description_text.
     */
    matchedDescriptionTokenCount?: number | null;
    /**
     * The float similarty score from the anchor label to matched_asr_text.
     */
    matchScore?: number | null;
  }
  export interface Schema$VideoContentSearchTextSimilarityFeatures {
    /**
     * The hypothesis text that was used for the token overlap calculation.
     */
    hypothesisText?: string | null;
    /**
     * The time in ms for the hypothesis_text.
     */
    hypothesisTextTime?: string | null;
    referenceText?: string | null;
    /**
     * Similarity scorer name.
     */
    scoringMethodName?: string | null;
    /**
     * The similarity score given by the scoring method specified by the message scoring_method_name.
     */
    similarityScore?: number | null;
    /**
     * Token by token matching stats. Exact matched token count.
     */
    tokenMatchCount?: number | null;
    /**
     * The token_overlap_count divided by the number of tokens in the hypothesis text.
     */
    tokenMatchPercent?: number | null;
    /**
     * Word by word alignment.
     */
    wordAlignment?: Schema$VideoContentSearchTokenAlignment[];
  }
  /**
   * Token by token mapping between hypothesis text and reference text.
   */
  export interface Schema$VideoContentSearchTokenAlignment {
    /**
     * Index of the token in hypothesis text.
     */
    hypothesisIndex?: number | null;
    /**
     * Token in hypothesis.
     */
    hypothesisToken?: string | null;
    /**
     * Index of the word in reference.
     */
    referenceIndex?: number | null;
    /**
     * Token in label.
     */
    referenceToken?: string | null;
    /**
     * Whether it's a perfect match.
     */
    tokenIsMatched?: boolean | null;
  }
  /**
   * Token level timing information for ASR spans. This is expected to be extracted from PseudoVideoData in the CDoc. Next ID: 5
   */
  export interface Schema$VideoContentSearchTokenTimingInfo {
    /**
     * Generated from th PseudoVideoData Timestamp Confidence field, which is quantized values in range 0-127. To convert to range 0-1 this field divides the PseudoVideoData Timestamp Confidence field by 127.
     */
    confidence?: number | null;
    durationMs?: string | null;
    startMs?: string | null;
    /**
     * Should be a single token.
     */
    text?: string | null;
  }
  /**
   * Video level info for online pipeline usage. For example: skip pattern as defined in https://schema.org/SeekToAction.
   */
  export interface Schema$VideoContentSearchVideoActions {
    /**
     * startOffset_input name as defined in https://schema.org/SeekToAction
     */
    skipPatternStartOffsetInput?: string | null;
    /**
     * Skip to time pattern as defined in https://schema.org/SeekToAction
     */
    skipToTimePattern?: string | null;
  }
  /**
   * Next ID: 23
   */
  export interface Schema$VideoContentSearchVideoAnchor {
    /**
     * The score indicating anchor confidence.
     */
    anchorScore?: number | null;
    /**
     * Specifies the type of the anchor.
     */
    anchorType?: string | null;
    /**
     * Context text from ASR of long duration, used for longT5 models.
     */
    contextText?: string | null;
    /**
     * When set, this is the link that should be used when clicking on a video anchor. This should jump to the given time in the video.
     */
    destinationUrl?: string | null;
    /**
     * The duration of the video anchor in milliseconds.
     */
    duration?: string | null;
    /**
     * The score indicating the usefulness of the entity identified by 'mid'.
     */
    entityScore?: number | null;
    /**
     * If is_filtered is true, this field illustrates the reasons.
     */
    filterReason?: string[] | null;
    /**
     * If true, the anchor is filtered and not served online.
     */
    isFiltered?: boolean | null;
    /**
     * Convenience field that consolidates signals for whether this label is safe.
     */
    isSafe?: boolean | null;
    /**
     * whether this label is bad by go/scuti
     */
    isScutiBad?: boolean | null;
    /**
     * The text label of the video anchor.
     */
    label?: string | null;
    /**
     * The score indicating label confidence.
     */
    labelScore?: number | null;
    /**
     * The mid of the video anchor.
     */
    mid?: string | null;
    /**
     * Specifies named enitities the label has.
     */
    namedEntity?: Schema$VideoContentSearchNamedEntity[];
    /**
     * The precision for which the anchor should trigger. For example, if the desired precision is 95%, anchors with precision_score < 0.95 should be removed.
     */
    precisionScore?: number | null;
    /**
     * Additional scoring info used for debugging.
     */
    scoreInfo?: Schema$VideoContentSearchVideoAnchorScoreInfo;
    /**
     * Visual tokens for the anchor. Eg. starbust feature vectors for several frames concatenated together.
     */
    starburstFeatures?: Schema$VideoContentSearchVisualFeatures;
    /**
     * Data about the thumbnail to display for this anchor.
     */
    thumbnail?: Schema$VideoContentSearchAnchorThumbnail;
    /**
     * The url for a frame to display for this anchor.
     */
    thumbnailUrl?: string | null;
    /**
     * The time stamp of the video anchor in milliseconds.
     */
    time?: string | null;
    /**
     * Timing info for each token in the anchor label.
     */
    tokenTimingInfo?: Schema$VideoContentSearchTokenTimingInfo[];
  }
  /**
   * Aggregated rating score, used in training pipeline, etc.
   */
  export interface Schema$VideoContentSearchVideoAnchorRatingScore {
    /**
     * Average score of bookmark usefulness.
     */
    averageBookmarkUsefulness?: number | null;
    /**
     * Average score of description quality.
     */
    averageDescriptionQuality?: number | null;
    /**
     * Furball URL(s) of the rating score (may have been rated more than once)
     */
    furballUrl?: string[] | null;
  }
  /**
   * A video can have a list of text anchors, which have different anchor types. Next ID: 15
   */
  export interface Schema$VideoContentSearchVideoAnchors {
    anchorType?: string | null;
    /**
     * The list of entity groups derived from the caption entities.
     */
    entityGroupInfo?: Schema$VideoContentSearchEntityGroupInfo;
    /**
     * Same as above, but used for experimenting with new models.
     */
    experimentalPredictedQuerylessTocUsefulness?: number | null;
    /**
     * If is_filtered is true, this field illustrates the reasons.
     */
    filterReason?: string[] | null;
    /**
     * If true, the anchor set is filtered and not served online.
     */
    isFiltered?: boolean | null;
    /**
     * The anchor sources being used to generate this merged anchors. This field is filled only when this is a merged anchor.
     */
    mergedAnchorsSources?: string[] | null;
    /**
     * The score that predicts the usefulness of this anchor set on the Huh table of contents eval without considering the query.
     */
    predictedQuerylessTocUsefulness?: number | null;
    /**
     * The quality of the anchor set.
     */
    score?: number | null;
    /**
     * Additional scoring info used for debugging.
     */
    scoreInfo?: Schema$VideoContentSearchVideoAnchorsScoreInfo;
    /**
     * Whether or not thumbnails should be displayed when serving anchors.
     */
    shouldServeThumbnails?: boolean | null;
    /**
     * This field indicates that the thumbnail should be hidden but is forced to show.
     */
    thumbnailForced?: boolean | null;
    /**
     * Information about the set of thumbnails.
     */
    thumbnailSetInfo?: Schema$VideoContentSearchAnchorsThumbnailInfo;
    videoAnchor?: Schema$VideoContentSearchVideoAnchor[];
    /**
     * Information about the video's introduction segment.
     */
    videoIntroduction?: Schema$VideoContentSearchVideoIntroduction;
  }
  /**
   * Message to contain scoring / debugging information. If you want to add information which is not directly used in the final VideoAnchor data, it should be put here. Next ID: 27
   */
  export interface Schema$VideoContentSearchVideoAnchorScoreInfo {
    /**
     * Common features for any anchor types.
     */
    anchorCommonFeatureSet?: Schema$VideoContentSearchAnchorCommonFeatureSet;
    /**
     * Additional attachments which extend MessageSet.
     */
    attachments?: Schema$Proto2BridgeMessageSet;
    /**
     * The path to the particular babel checkpoint
     */
    babelCheckpointPath?: string | null;
    /**
     * Training features and debug info for caption entity anchors.
     */
    captionEntityAnchorFeatures?: Schema$VideoContentSearchCaptionEntityAnchorFeatures;
    /**
     * Features for caption span anchors for use in training.
     */
    captionSpanAnchorFeatures?: Schema$VideoContentSearchCaptionSpanAnchorFeatures;
    /**
     * Description anchor features for use in training.
     */
    descriptionAnchorFeatures?: Schema$VideoContentSearchDescriptionAnchorFeatures;
    /**
     * Whether or not the anchor will be removed in the final proto.
     */
    filtered?: boolean | null;
    /**
     * A description of why the anchor was removed. This is intended for debugging anchor sets which use multiple heuristics to filter anchors.
     */
    filterReason?: string[] | null;
    /**
     * Generated predictions from generative models
     */
    generativeFeatures?: Schema$VideoContentSearchGenerativePredictionFeatures[];
    /**
     * Anchor level features for Instruction anchors.
     */
    instructionAnchorFeatures?: Schema$VideoContentSearchInstructionAnchorFeatures;
    /**
     * Training data features for Instruction anchors.
     */
    instructionTrainingDataAnchorFeatures?: Schema$VideoContentSearchInstructionTrainingDataAnchorFeatures;
    /**
     * Detected language of label
     */
    labelLanguage?: string | null;
    labelTransformation?: Schema$VideoContentSearchVideoAnchorScoreInfoLabelTransformation[];
    /**
     * List anchor features.
     */
    listAnchorFeatures?: Schema$VideoContentSearchListAnchorFeatures;
    /**
     * Anchor level metadata about the description anchors used to build training data for list anchors.
     */
    listTrainingDataAnchorFeatures?: Schema$VideoContentSearchListTrainingDataAnchorFeatures;
    /**
     * Multimodal features for a generated topic.
     */
    multimodalTopicFeatures?: Schema$VideoContentSearchMultimodalTopicFeatures;
    /**
     * Features for a generated topic used to build training data for multimodal topics.
     */
    multimodalTopicTrainingFeatures?: Schema$VideoContentSearchMultimodalTopicTrainingFeatures;
    /**
     * Normalized babel embedding of anchor.label(). If the label has more than one sentences, the embedding will be the averaged normalized embedding of each sentence.
     */
    normalizedBabelEmbedding?: number[] | null;
    /**
     * OCR anchor features.
     */
    ocrAnchorFeature?: Schema$VideoContentSearchOnScreenTextFeature;
    /**
     * Anchor level metadata about the join of description anchors and OCR data which is used to build training data.
     */
    ocrDescriptionTrainingDataAnchorFeatures?: Schema$VideoContentSearchOcrDescriptionTrainingDataAnchorFeatures;
    /**
     * Shopping Opinions anchor features.
     */
    opinionsAnchorFeatures?: Schema$VideoContentSearchShoppingOpinionsAnchorFeatures;
    /**
     * Q&A anchor features for use in training.
     */
    qnaAnchorFeatures?: Schema$VideoContentSearchQnaAnchorFeatures;
    /**
     * Human rating score, used for training.
     */
    ratingScore?: Schema$VideoContentSearchVideoAnchorRatingScore;
    /**
     * The output of Safe Search's MultiLabelClassifier.
     */
    safeSearchClassifierOutput?: Schema$ClassifierPornQueryMultiLabelClassifierOutput;
    /**
     * ASR matching feature for any anchor types.
     */
    textSimilarityFeatures?: Schema$VideoContentSearchTextSimilarityFeatures[];
    /**
     * Information about the thumbnail anchor.
     */
    thumbnailInfo?: Schema$VideoContentSearchAnchorThumbnailInfo;
  }
  /**
   * Used to store the label before label cleaning or other transformations. If the label goes through multiple transformations, the original_label vector will include the transformations in chronological order.
   */
  export interface Schema$VideoContentSearchVideoAnchorScoreInfoLabelTransformation {
    /**
     * A label for the transformation.
     */
    description?: string | null;
    /**
     * The label that was transformated from.
     */
    sourceLabel?: string | null;
  }
  /**
   * Aggregated set level rating score, used in training pipeline, etc.
   */
  export interface Schema$VideoContentSearchVideoAnchorSetRatingScore {
    /**
     * Average score of set level description quality.
     */
    averageSetDescriptionQuality?: number | null;
    /**
     * Average score of how useful the set is for navigation.
     */
    averageSetNavigationUsefulness?: number | null;
  }
  /**
   * One video can have multiple types of text anchors. For example, https://www.youtube.com/watch?v=Rtk0I5PVOIc has both list anchors and OCR anchors.
   */
  export interface Schema$VideoContentSearchVideoAnchorSets {
    videoActions?: Schema$VideoContentSearchVideoActions;
    videoAnchors?: Schema$VideoContentSearchVideoAnchors[];
    videoInfo?: Schema$VideoContentSearchVideoInfo;
    videoScoreInfo?: Schema$VideoContentSearchVideoScoreInfo;
  }
  /**
   * Message to contain scoring / debugging information. If you want to add information which is not directly used in the final VideoAnchors data, it should be put here. Next ID: 14
   */
  export interface Schema$VideoContentSearchVideoAnchorsScoreInfo {
    /**
     * Common set-level features for any anchor types.
     */
    anchorsCommonFeatureSet?: Schema$VideoContentSearchAnchorsCommonFeatureSet;
    /**
     * Training features and debug info for caption entity anchors.
     */
    captionEntityAnchorSetFeatures?: Schema$VideoContentSearchCaptionEntityAnchorSetFeatures;
    captionSpanAnchorSetFeatures?: Schema$VideoContentSearchCaptionSpanAnchorSetFeatures;
    /**
     * Set-level features for comment anchors.
     */
    commentAnchorSetFeatures?: Schema$VideoContentSearchCommentAnchorSetFeatures;
    /**
     * Description anchor features for use in training.
     */
    descriptionAnchorSetFeatures?: Schema$VideoContentSearchDescriptionAnchorSetFeatures;
    /**
     * Whether or not the anchors will be removed in the final proto.
     */
    filtered?: boolean | null;
    /**
     * Set-level features for list anchors.
     */
    listAnchorSetFeatures?: Schema$VideoContentSearchListAnchorSetFeatures;
    /**
     * Set level metadata about the description anchors used to build training data for List Description anchors.
     */
    listTrainingDataSetFeatures?: Schema$VideoContentSearchListTrainingDataSetFeatures;
    /**
     * OCR anchor cluster features.
     */
    ocrAnchorClusterFeature?: Schema$VideoContentSearchOnScreenTextClusterFeature;
    /**
     * Set level metadata about the join of description anchors and OCR data which is used to build training data.
     */
    ocrDescriptionTrainingDataSetFeatures?: Schema$VideoContentSearchOcrDescriptionTrainingDataSetFeatures;
    /**
     * Metadata such as model versions for Q&A anchors.
     */
    qnaAnchorSetFeatures?: Schema$VideoContentSearchQnaAnchorSetFeatures;
    /**
     * Human rating score, used for training.
     */
    ratingScore?: Schema$VideoContentSearchVideoAnchorSetRatingScore;
    sportsKeyMomentsAnchorSetFeatures?: Schema$VideoContentSearchSportsKeyMomentsAnchorSetFeatures;
  }
  /**
   * Contains video level features that apply to all anchor types.
   */
  export interface Schema$VideoContentSearchVideoCommonFeatures {
    /**
     * The total number of anchors in all video anchor sets.
     */
    anchorCount?: number | null;
    /**
     * The caption data for the video transcript. The models used for unified scorer. Should be a filepath that contains saved_model.pb and a variables/ folder
     */
    captionInfo?: Schema$VideoContentSearchCaptionInfo;
    /**
     * The model used for generating label_phrase_embedding.
     */
    labelPhraseEmbeddingModel?: string | null;
    unifiedScoringBertModels?: string[] | null;
  }
  /**
   * Contains video level features for generated queries that are applied at the video level.
   */
  export interface Schema$VideoContentSearchVideoGeneratedQueryFeatures {
    /**
     * A description of why the video was removed. This is intended for debugging generated queries that are filtered at the video level.
     */
    filterReason?: string[] | null;
    /**
     * The total number of passages that were input to generating queries for this video. This count might be bigger than the total number of anchors in the video as some of the anchors might have been filtered by the pipeline.
     */
    prefilteredPassageCount?: number | null;
    /**
     * Entity annotations for one of the mids representing the video title. This entity is either one of the blocklisted entities if at least of the mentioned entities in the title belongs to the blocklisted categories, or is the highest confidence entity for the title.
     */
    titleEntityAnnotations?: Schema$VideoContentSearchEntityAnnotations;
    /**
     * The total number of queries that belong to the blocklisted categories for this video.
     */
    totalRestrictedQueries?: number | null;
  }
  /**
   * This message holds metadata and signals of one video. It is typically used for holding debug data in tables produced by offline pipelines related to video anchors. Please never populate this message into the search serving stack. Next ID: 31
   */
  export interface Schema$VideoContentSearchVideoInfo {
    /**
     * A hash of the video bytes used as a key to Amarna's video_metadata table.
     */
    amarnaDocid?: string | null;
    /**
     * Language information, extracted from content_based_metadata.speech_properties.
     */
    asrLanguage?: string | null;
    /**
     * Craps data from the video cdoc.
     */
    crapsData?: Schema$QualityNavboostCrapsCrapsData;
    /**
     * Video description.
     */
    description?: string | null;
    /**
     * Language information, extracted from DocProperties.
     */
    docLanguage?: string | null;
    /**
     * Video duration in ms.
     */
    durationMs?: number | null;
    /**
     * Whether or not automatic speech recognition has been generated for this video.
     */
    hasAsr?: boolean | null;
    /**
     * Whether or not the video has description anchors.
     */
    hasDescriptionAnchors?: boolean | null;
    /**
     * Convenience field that is false if any of the video's anchors have their is_safe field set to false.
     */
    isSafe?: boolean | null;
    /**
     * Whether or not this is watchpage.
     */
    isWatchpage?: boolean | null;
    /**
     * Navqueries for the video.
     */
    navqueries?: string[] | null;
    /**
     * NSR for the video page document.
     */
    nsr?: number | null;
    /**
     * Number of views.
     */
    numViews?: string | null;
    /**
     * ASR with timing info for each token copied from doc_videos.content_based_metadata.transcript_asr.
     */
    pseudoVideoData?: Schema$PseudoVideoData;
    /**
     * The Saft document generated from the anchor labels.
     */
    saftDoc?: Schema$NlpSaftDocument;
    /**
     * The transcript used to generate the Saft doc.
     */
    saftTranscript?: string | null;
    /**
     * Salient term set from the document. This message contains a lot of data and dependencies, so sub-messages are disabled in model evaluation in scorer.
     */
    salientTermSet?: Schema$QualitySalientTermsSalientTermSet;
    /**
     * The subindexid from the cdoc. Stored as an int to avoid a cyclical dependency. Should be convertible to CompositeDoc.SubIndexType.
     */
    subindexid?: number[] | null;
    /**
     * Video title.
     */
    title?: string | null;
    /**
     * Video title language Language information, set automatically by the SAFT LangID.
     */
    titleLanguage?: string | null;
    /**
     * Transcript annotations that include information about the ASR including timing and entity mentions.
     */
    transcriptAnnotations?: Schema$QualityWebanswersTranscriptAnnotations;
    /**
     * Number of unique visits in Chrome.
     */
    uniqueChromeViews?: number | null;
    /**
     * Document url.
     */
    url?: string | null;
    /**
     * Top petacat verticals of the video produced by indexing/ml/vertical, sorted in descending order by vertical confidence.
     */
    verticalItem?: Schema$IndexingMlVerticalVerticalItem[];
    /**
     * Genre of the video from the page metadata. Concatenate all with a comma separator if there are multiple genres.
     */
    videoGenre?: string | null;
    videoType?: string | null;
    /**
     * Video url. Note that VideoInfo::url is a page url that has this video, while this is a video file url.
     */
    videoUrl?: string | null;
    /**
     * Represents a collection of entities returned by the WebRef service. This message contains a lot of data and dependencies, so sub-messages are disabled in model evaluation in scorer.
     */
    webrefEntities?: Schema$RepositoryWebrefWebrefEntities;
  }
  /**
   * Specifies whether a video has an introduction part that can be skipped. An introduction is the beginning part of a video that can be safely skipped without impacting user's understanding of the overall video content.
   */
  export interface Schema$VideoContentSearchVideoIntroduction {
    /**
     * If set to true, it means the video has an introduction spanning from intro_start_ms to intro_end_ms.
     */
    hasIntro?: boolean | null;
    /**
     * Timestamp of the end of an introduction. Will only be set if has_intro is true. Indicates video may be skipped to this timestamp with minimal impact on understanding the overall video contents.
     */
    introEndMs?: string | null;
    /**
     * Timestamp of the beginning of an introduction. Will only be set if has_intro is true. This value may be nonzero.
     */
    introStartMs?: string | null;
  }
  /**
   * Video-level Multimodal features for generated topics. Next ID: 2
   */
  export interface Schema$VideoContentSearchVideoMultimodalTopicFeatures {
    /**
     * Starburst vectors. Sorted by timestamp.
     */
    frameStarburstData?: Schema$VideoContentSearchFrameStarburstData[];
  }
  /**
   * Video level scoring info.
   */
  export interface Schema$VideoContentSearchVideoScoreInfo {
    /**
     * Anchor scoring features that apply to all anchor types.
     */
    commonFeatures?: Schema$VideoContentSearchVideoCommonFeatures;
    /**
     * OCR specific video level feature.
     */
    ocrVideoFeature?: Schema$VideoContentSearchOcrVideoFeature;
    /**
     * The output of Safe Search's MultiLabelClassifier for video title.
     */
    safeSearchClassifierOutput?: Schema$ClassifierPornQueryMultiLabelClassifierOutput;
    /**
     * The version of this VideoAnchorSets in spanner.
     */
    version?: string | null;
    /**
     * Video-level features that apply to all the generated queries within this VideoAnchorSets.
     */
    videoGeneratedQueryFeatures?: Schema$VideoContentSearchVideoGeneratedQueryFeatures;
    /**
     * Video-level features for Multimodal topics.
     */
    videoMultimodalTopicFeatures?: Schema$VideoContentSearchVideoMultimodalTopicFeatures;
  }
  /**
   * Startburst visual tokens or features, more details in go/starburst-mum-user-guide
   */
  export interface Schema$VideoContentSearchVisualFeatures {
    /**
     * Starburst features semantic or visual/
     */
    features?: number[] | null;
    starbustVersion?: string | null;
    /**
     * Starburst visual tokens
     */
    tokens?: number[] | null;
  }
  /**
   * This message is used to store information about Inline Playback in the VideoWebAttachment portion of the websearch index. LINT.IfChange
   */
  export interface Schema$VideoCrawlVideoInlinePlaybackMetadata {
    /**
     * Timestamp (measured in seconds since epoch) when a video may not be used for inline playback in the interest feed.
     */
    expirationTimestampSec?: string | null;
    /**
     * Publisher's Google Analytics Id to which we can report view metrics.
     */
    googleAnalyticsId?: string | null;
    /**
     * All two-letter codes for countries where this video may NOT be played.
     */
    playbackCountryBlacklist?: string[] | null;
    /**
     * All two-letter codes for countries where this video may be played. If empty, then all countries not on the blacklist are allowed for playback.
     */
    playbackCountryWhitelist?: string[] | null;
    /**
     * Set of transcodes which are available for the video.
     */
    transcodeItags?: number[] | null;
    /**
     * VAST tag for ads to be played along with this video. Currently, we only support VAST tags from Doubleclick and FreeWheel.
     */
    vastTag?: string | null;
    /**
     * Identifier video is known by in the video infrastructure. The format given here is the YoutubeId format (base-64) used in Venom; for Viper/Bandaid/ StreamingURLService, convert to ContentIdHex.
     */
    videoId?: string | null;
    /**
     * Set if the video is hosted on an external CDN, in which case it is not to be transcoded and hosted at Google for the Interest Feed.
     */
    videoUrlOnExternalCdn?: string | null;
  }
  /**
   * Decoder configuration for Dolby Vision encoded by any codec. Dolby Vision defines a separate profile & level hierarchy regardless of the base codec. See Dolby Vision profiles, levels and compatibility: https://dolby.my.salesforce.com/sfc/p/#700000009YuG/a/4u000000l6G4/4R18riPaaW3gxpVx7XwyQLdEITLFjB.w.Si0LoQR5j8 Dolby Vision DASH streaming: https://professional.dolby.com/siteassets/content-creation/dolby-vision-for-content-creators/dolbyvisioninmpegdashspecification_v2_0_public_20190107.pdf HTTP Live Streaming: https://professional.dolby.com/siteassets/content-creation/dolby-vision-for-content-creators/dolby-vision-streams-within-the-http-live-streaming-format-v2.0-13-november-2018.pdf Dolby Vision bitstreams: https://professional.dolby.com/siteassets/pdfs/dolbyvisionstreamsinisobmffspecification-v2.1.2.pdf
   */
  export interface Schema$VideoDoViDecoderConfiguration {
    /**
     * If a track contains the base layer substream.
     */
    blPresentFlag?: boolean | null;
    /**
     * Whether the stream is compatible with other sets of standard.
     */
    dvBlSignalCompatibilityId?: number | null;
    dvLevel?: number | null;
    dvProfile?: number | null;
    /**
     * Specifies the major version number of the Dolby Vision specification that the stream complies with.
     */
    dvVersionMajor?: number | null;
    /**
     * Specifies the minor version number of the Dolby Vision specification that the stream complies with.
     */
    dvVersionMinor?: number | null;
    /**
     * If a track contains the enhancement layer substream.
     */
    elPresentFlag?: boolean | null;
    /**
     * dvhe, dvh1, dvav, dva1: https://screenshot.googleplex.com/ipMGXFqLX9E
     */
    fourccTag?: string | null;
    /**
     * If a track contains the reference picture unit substream.
     */
    rpuPresentFlag?: boolean | null;
  }
  /**
   * A message holding all of the color information about a signal: -Color primaries identify the meaning of red, green, and blue ( and the white point). -The transfer characteristic identifies the mapping used to go between linear and coded values of light. -The matrix coefficients identifies, e.g., the conversion between Ycbcr to RGB (in the space of the primaries) -And the color range defines the min/max of the levels used.
   */
  export interface Schema$VideoFileColorInfo {
    matrixCoefficients?: string | null;
    primaries?: string | null;
    range?: string | null;
    transferCharacteristics?: string | null;
  }
  /**
   * A message holding the equivalent of the content light level information in HEVC or its representation in matroska/webm. This gives coarse stats on the luminance levels in the content and may be used as a hint by algorithms & displays to tone map.
   */
  export interface Schema$VideoFileContentLightLevel {
    /**
     * Defines the maximum content light level (in cd/m^2) over the entire video.
     */
    maxContentLightLevel?: number | null;
    /**
     * The maximum (over entire video) of the frame average light level.
     */
    maxFrameAverageLightLevel?: number | null;
  }
  /**
   * Information on Frame Packing arrangement
   */
  export interface Schema$VideoFileFramePackingArrangement {
    /**
     * Grid positions
     */
    gridOffset0Horizontal?: number | null;
    gridOffset0Vertical?: number | null;
    gridOffset1Horizontal?: number | null;
    gridOffset1Vertical?: number | null;
    /**
     * Content interpretation
     */
    interpretation?: string | null;
    /**
     * Quincunx sampling flag indicating if quincunx sampling is used
     */
    quincunxSampling?: boolean | null;
    /**
     * Arrangement type
     */
    type?: string | null;
  }
  /**
   * Stats on HDR10+ (SMPTE 2094-40:2016 standard) over video frames.
   */
  export interface Schema$VideoFileHDR10PlusStats {
    /**
     * Application version is set to max version over all frames.
     */
    applicationVersion?: number | null;
    /**
     * The average of the nominal maximum display luminance of the targeted system display over all frames.
     */
    averageTargetedSystemDisplayMaximumLuminance?: number | null;
    /**
     * This flag is set if any frame has it.
     */
    masteringDisplayActualPeakLuminanceFlag?: boolean | null;
    maxNumWindows?: number | null;
    /**
     * This flag is set if any frame has it.
     */
    targetedSystemDisplayActualPeakLuminanceFlag?: boolean | null;
  }
  /**
   * A message holding information about the mastering display color volume. This metadata can be used when tone mapping an HDR signal to a display with a different gamut or brightness characteristics than the mastering display. This message is capable of containing SMPTE 2086 metadata.
   */
  export interface Schema$VideoFileMasteringDisplayMetadata {
    /**
     * Coordinates of the blue primary of the mastering display.
     */
    blue?: Schema$VideoFileMasteringDisplayMetadataCIE1931Coordinate;
    /**
     * Coordinates of the green primary of the mastering display.
     */
    green?: Schema$VideoFileMasteringDisplayMetadataCIE1931Coordinate;
    /**
     * Maximum luminance of the display (in cd/m^2).
     */
    maxLuminance?: number | null;
    /**
     * Minimum luminance of the display (in cd/m^2).
     */
    minLuminance?: number | null;
    /**
     * Coordinates of the red primary of the mastering display.
     */
    red?: Schema$VideoFileMasteringDisplayMetadataCIE1931Coordinate;
    /**
     * Coordinates of the white point of the mastering display.
     */
    whitePoint?: Schema$VideoFileMasteringDisplayMetadataCIE1931Coordinate;
  }
  /**
   * Representation of a color coordinate in CIE1931 color space.
   */
  export interface Schema$VideoFileMasteringDisplayMetadataCIE1931Coordinate {
    x?: number | null;
    y?: number | null;
  }
  /**
   * Globally allowed spherical meta data.
   */
  export interface Schema$VideoFileSphericalMetadata {
    /**
     * Like above, but with high-pass motion filtering applied and yaw rotation limited to +/- 15-degrees
     */
    clampedOptimalFovBounds?: Schema$VideoFileSphericalMetadataFOVBounds;
    cubemap?: Schema$VideoFileSphericalMetadataCubemapProjection;
    deprecatedCroppedArea?: Schema$VideoFileSphericalMetadataCroppedArea;
    /**
     * InitialView is from v1 spec, and is more or less equivalent to Pose from v2 spec. Therefore, InitialView found in xml metadata would populate the pose field in this proto.
     */
    deprecatedInitialView?: Schema$VideoFileSphericalMetadataViewDirection;
    equirect?: Schema$VideoFileSphericalMetadataEquirectProjection;
    fullPanoHeightPixels?: number | null;
    /**
     * Dimensions of the full video frame.
     */
    fullPanoWidthPixels?: number | null;
    mesh?: Schema$VideoFileSphericalMetadataMeshProjection;
    /**
     * Metadata source v2(svhd)
     */
    metadataSource?: string | null;
    /**
     * If video contains Wally-sanitized mesh and camera motion metadata (see go/wally-format ), this contains the optimal FOV (smallest FOV that encompass all combinations of input mesh FOV and rotations). This field will only be present if full FfmpegAnalyze is performed.
     */
    optimalFovBounds?: Schema$VideoFileSphericalMetadataFOVBounds;
    pose?: Schema$VideoFileSphericalMetadataPose;
    /**
     * Mapping type used to map the sphere to the rectangular video E.g., "equirectangular", http://en.wikipedia.org/wiki/Equirectangular_projection This is kept as string so that we can retain values that are unknown to us.
     */
    projectionType?: string | null;
    /**
     * The number of camera sources used to generate this video.
     */
    sourceCount?: number | null;
    /**
     * Whether the video is spherical or not.
     */
    spherical?: boolean | null;
    /**
     * The stereo mode.
     */
    stereoMode?: string | null;
    /**
     * Whether the video has already been stitched.
     */
    stitched?: boolean | null;
    /**
     * The stitching software.
     */
    stitchingSoftware?: string | null;
    /**
     * Epoch Timestamp of when the first frame in the video was recorded
     */
    timestamp?: string | null;
  }
  /**
   * The cropping coordinates, in pixels.
   */
  export interface Schema$VideoFileSphericalMetadataCroppedArea {
    height?: number | null;
    left?: number | null;
    top?: number | null;
    width?: number | null;
  }
  /**
   * Specifies usage of cubemap projection.
   */
  export interface Schema$VideoFileSphericalMetadataCubemapProjection {
    /**
     * Values 0 to 255 are reserved for current and future layouts. Value of 0 corresponds to a grid with 3 columns and 2 rows as follows: | right face | left face | up face | | down face | front face | back face |
     */
    layout?: number | null;
    /**
     * Number of pixels to pad from the edge of each cube face
     */
    padding?: number | null;
  }
  /**
   * Specifies usage of equirectangular projection. More specifically, these are the proportion of projection cropped from each edge not covered by the video frame. For uncropped frame, all values are 0. For v1 metadata, this contains CroppedArea information (CroppedAreaLeftPixels, CroppedAreaTopPixels, CroppedAreaImageWidthPixels, CroppedAreaImageHeightPixels)
   */
  export interface Schema$VideoFileSphericalMetadataEquirectProjection {
    projectionBoundsBottom?: number | null;
    projectionBoundsLeft?: number | null;
    projectionBoundsRight?: number | null;
    projectionBoundsTop?: number | null;
  }
  export interface Schema$VideoFileSphericalMetadataFOVBounds {
    endTiltInDegrees?: number | null;
    endYawInDegrees?: number | null;
    startTiltInDegrees?: number | null;
    startYawInDegrees?: number | null;
  }
  /**
   * Specifies usage of mesh projection. "content" contains the mshp atom: version/flags, CRC, compression method, description of the mesh(es) (vertices, coordinates corresponding to each vertex, and vertex lists to describe the projection). See go/pir-spec for mshp atom data layout.
   */
  export interface Schema$VideoFileSphericalMetadataMeshProjection {
    /**
     * Once mesh is analyzed, this field contains the bounds of the mesh(es) In case of stereo mesh, this will be the aggregate of both eye meshes
     */
    bounds?: Schema$VideoFileSphericalMetadataFOVBounds;
    content?: string | null;
    /**
     * The mesh type field will only be populated when we have done analysis on the mesh. If this field is missing, mesh analysis has not been done.
     */
    type?: string | null;
  }
  /**
   * Specifies the compass heading, pitch & roll for the origin of the projection. The origin for the "equirectangular" projection is the center of the image. The origin for the other projection types is defined as the location in the image that corresponds to the origin of an "equirectangular" projection.
   */
  export interface Schema$VideoFileSphericalMetadataPose {
    headingDegrees?: number | null;
    pitchDegrees?: number | null;
    rollDegrees?: number | null;
  }
  export interface Schema$VideoFileSphericalMetadataViewDirection {
    headingDegrees?: number | null;
    pitchDegrees?: number | null;
    rollDegrees?: number | null;
  }
  /**
   * YT app video information. (go/yt-create-vsi-data)
   */
  export interface Schema$VideoGoogleVideoClipInfo {
    /**
     * YT app version (ie. YT Create app version).
     */
    appVersion?: string | null;
    /**
     * List of YT media asset logging ids.
     */
    assetLoggingId?: string[] | null;
  }
  export interface Schema$VideoLegosLegosAnnotationsSet {
    featureSetName?: string | null;
    legosAnnotations?: Schema$YoutubeDiscoveryLegosLegosAnnotations;
  }
  export interface Schema$VideoLegosLegosAnnotationsSets {
    annotationsSet?: Schema$VideoLegosLegosAnnotationsSet[];
  }
  /**
   * Feel free to ignore this lint warning if only the trivia (e.g., comments) is is changed. LINT.IfChange
   */
  export interface Schema$VideoMediaInfo {
    /**
     * Each entry corresponds to one audio stream in the original media file.
     */
    audioStream?: Schema$VideoAudioStream[];
    /**
     * Container type of the file, e.g. FLV, H264, MP3. Uses the numeric value corresponding to the ContainerId enum objects, in order to avoid the dependency on vsi/videostreaminfo.proto. http://cs/symbol:ContainerId%20f:google3/video/vidproc/vsi/videostreaminfo.proto
     */
    containerId?: number | null;
    /**
     * Media file size in bytes.
     */
    fileSize?: string | null;
    /**
     * This is a high-level description of the media. It does not contain PII.
     */
    overview?: Schema$VideoMediaOverview;
    /**
     * Each entry corresponds to one video stream (usually just one) in the original media file.
     */
    videoStream?: Schema$VideoVideoStream[];
  }
  /**
   * Next ID: 19 IMPORTANT: This file is used in scattered directories, such that it is risky to add values to any enumerated type. (First of all, compilation breaks on switch statements without default clauses.) Run a global tap presubmit: tap_presubmit -p all --train -c before submitting. Also check out the blame layer of previous updates for hints on what other files to changes.
   */
  export interface Schema$VideoMediaOverview {
    aspectRatio?: string | null;
    audioOverview?: Schema$VideoMediaOverviewAudioOverview[];
    authoringTool?: string | null;
    colorDynamicRange?: string | null;
    /**
     * Creation timestamp of this media_info, in Unix timestamp since epoch.
     */
    creationTimeStampUsec?: string | null;
    dataOverview?: Schema$VideoMediaOverviewDataOverview[];
    frameRate?: string | null;
    /**
     * Currently used by originals replacement pipeline to exclude all videos containing chapter info.
     */
    hasChapters?: boolean | null;
    mediaClipInfoOverview?: Schema$VideoMediaOverviewMediaClipInfoOverview;
    /**
     * The orientation is annotated based on the final displayed resolution of the video file. A video will be labelled PORTRAIT whenever the height is greater than the width. The orientation is only labelled UNKNOWN in the case that the video stream had some transformation that was not a rotation in the video stream.
     */
    orientation?: string | null;
    origin?: string | null;
    projection?: string | null;
    /**
     * The resolution for a video takes into account the displayed video size, and takes into account the orientation. For example: - A 1920x1080 video will have ORIENTATION_LANDSCAPE and RESOLUTION_1080P - A 1080x1920 video will have ORIENTATION_PORTRAIT and RESOLUTION_1080P - A 1080x1080 video will have ORIENTATION_LANDSCAPE and RESOLUTION_1080P
     */
    resolution?: string | null;
    spatialAudioMode?: string | null;
    stereoMode?: string | null;
    timedtextOverview?: Schema$VideoMediaOverviewTimedTextOverview[];
    videoOverview?: Schema$VideoMediaOverviewVideoOverview[];
    /**
     * This only applies when: projection = PROJECTION_PARTIALLY_SPHERICAL
     */
    wallyMeshType?: string | null;
  }
  /**
   * Audio stream description with no PII.
   */
  export interface Schema$VideoMediaOverviewAudioOverview {
    /**
     * Number of audio channels.
     */
    channels?: number | null;
    /**
     * Content type of the audio track extracted from VSI. This is only populated with valid "acont" xtag values at the moment, i.e., if VSI reports an invalid string, we ignore it. Supported acont xtag values can be found in google3/video/storage/common/xtag_validation.cc. Examples: "original", "dubbed", "descriptive", "commentary", etc.
     */
    contentType?: string | null;
    /**
     * Language of the audio track extracted from VSI. Populated if it's deemed a valid code by ISO639-2b, ISO639-2t or III library.
     */
    language?: string | null;
    loudness1770Lkfs?: number | null;
    /**
     * Approximate audio length, has the same caveats as its video equivalent.
     */
    roundedUpOriginalDurationSec?: number | null;
    spatialAudioMode?: string | null;
  }
  /**
   * Data stream description with no PII. Currently used by originals replacement pipeline to exclude all clips that have data streams. Fields in proto are used to exclude clips with certain types of data streams.
   */
  export interface Schema$VideoMediaOverviewDataOverview {
    /**
     * Whether the data stream has camera motion metadata (dynamic) or not (static). Some Wally/VR180 videos do.
     */
    hasCameraMotionMetadata?: boolean | null;
    /**
     * If true, source contains metadata for OZO spatial audio support. See b/62393568 for more information about the OZO spatial audio format. Note that SpatialAudioMode is independent of this format.
     */
    hasOzoAudio?: boolean | null;
  }
  /**
   * Video clip info description with no PII.
   */
  export interface Schema$VideoMediaOverviewMediaClipInfoOverview {
    /**
     * Corresponds to vsi.video_clip_info().has_geolocation()
     */
    hasGeolocation?: boolean | null;
  }
  /**
   * Timed text stream description with no PII. Currently used by originals replacement pipeline to exclude all clips that have timed text streams. Add fields to proto if we want to only exclude clips with certain types of timed text streams in the future.
   */
  export interface Schema$VideoMediaOverviewTimedTextOverview {}
  /**
   * Video stream description with no PII.
   */
  export interface Schema$VideoMediaOverviewVideoOverview {
    aspectRatio?: string | null;
    /**
     * Prefer average_fps to match the logic used in transcoder for format profile frame rate checks. First added for Photos, see b/165839654.
     */
    averageFps?: number | null;
    codecId?: number | null;
    colorDynamicRange?: string | null;
    fps?: number | null;
    height?: number | null;
    resolution?: string | null;
    /**
     * Approximate video length. Data is rounded up to the next second, to avoid being PII. (Long ago, YTFE set a precedent of rounding up durations, rather than rounding to the closest second.) This value is derived from metadata in the source video, and often differs from the actual duration of any given transcode. In videos without valid timestamps, this value is not calculable, and is reported as zero. Prefer the value from MediaInfo::VideoStream over this value, which was added to resolve b/202864365.
     */
    roundedUpOriginalDurationSec?: number | null;
    videoHasClosedCaptions?: boolean | null;
    width?: number | null;
  }
  export interface Schema$VideoPerDocData {
    coreSignals?: Schema$MediaIndexVideoCoreSignals;
    frames?: Schema$MediaIndexVideoFrames;
  }
  export interface Schema$VideoPipelineViperThumbnailerColumnData {
    /**
     * The blobRef where the representative frame is stored. This is repeated in order to support multiple thumbnails in the future.
     */
    frameBlobRefs?: Schema$BlobstoreBlobRef[];
    /**
     * Video frame files (based on file_dir_to_save_frames parameter)
     */
    frameFileList?: Schema$VideoThumbnailsFrameFileList;
    /**
     * Frame type generated (VR/360/3D/default).
     */
    frameTypeGenerated?: string | null;
    /**
     * True if the thumbnails are generated from drishti_thumbnailer.
     */
    generatedFromDrishtiThumbnailer?: boolean | null;
    highResPreviewThumbnailGenerated?: boolean | null;
    /**
     * hq720.jpg is a 1280x720 pixel image generated only when the input video resolution is 1280x720 or higher.
     */
    hq720Generated?: boolean | null;
    /**
     * The flags below indicate whether certain optional thumbnail images were generated. hqdefault.jpg is a 480x360 pixel high quality image which should normally be always generated.
     */
    hqdefaultGenerated?: boolean | null;
    /**
     * True if a set of backup HVC thumbnails is generated.
     */
    hvcBackupGenerated?: boolean | null;
    /**
     * True if the thumbnails are generated with background crop and scrim.
     */
    improvedVerticalGenerated?: boolean | null;
    /**
     * maxresdefault.jpg is an image of the same resolution as the input video. It is generated only when the input video is significantly higher-resolution than 640x480.
     */
    maxresdefaultGenerated?: boolean | null;
    /**
     * Height of the generated maxresdefault thumbnail.
     */
    maxresdefaultHeight?: number | null;
    /**
     * Width of the generated maxresdefault thumbnail.
     */
    maxresdefaultWidth?: number | null;
    /**
     * True if moving thumbnails are generated.
     */
    movingThumbnailGenerated?: boolean | null;
    /**
     * True if private thumbnails were generated and stored in the thumbnail database.
     */
    privateThumbnailsGenerated?: boolean | null;
    /**
     * True if public thumbnails were generated and stored in the thumbnail database.
     */
    publicThumbnailsGenerated?: boolean | null;
    /**
     * Analysis result of running the rerun thumbnailer
     */
    rerunStatus?: string | null;
    /**
     * sddefault.jpg is a 640x480 pixel image generated only when the input video resolution is 640x480 or higher.
     */
    sddefaultGenerated?: boolean | null;
    /**
     * This flag indicates if storyboard mosaic images were generated and stored in the thumbnail database.
     */
    storyboardGenerated?: boolean | null;
    /**
     * Number of levels of storyboard generated (0 if policy default).
     */
    storyboardNumLevels?: number | null;
    /**
     * Policy number that governed the storyboard generation. If zero, no policy was used and the storyboard format is not fully specified by the parameters contained in this message.
     */
    storyboardPolicy?: number | null;
    /**
     * Version of the storyboard.
     */
    storyboardVersion?: number | null;
    /**
     * Video duration of the video.
     */
    storyboardVideoDurationMs?: number | null;
    /**
     * Height of the video that was storyboarded.
     */
    storyboardVideoHeight?: number | null;
    /**
     * Width of the video that was storyboarded.
     */
    storyboardVideoWidth?: number | null;
    /**
     * This flag indicates if images in WebP format were created and stored in the thumbnail database.
     */
    webpGenerated?: boolean | null;
  }
  export interface Schema$VideoPipelineViperVSIColumnData {
    info?: Schema$VideoVideoStreamInfo;
    /**
     * Total time taken in seconds to read the input
     */
    inputReadTime?: number | null;
    /**
     * Was the VSI computed on a partial file ?
     */
    partialFile?: boolean | null;
    /**
     * Total time (of all attempts) taken in seconds to compute VSI
     */
    totalVsiTime?: number | null;
    vsiStats?: Schema$VideoPipelineViperVSIColumnDataVsiStats[];
  }
  /**
   * The stats of each output vsi.
   */
  export interface Schema$VideoPipelineViperVSIColumnDataVsiStats {
    /**
     * True if the output vsi is a partial vsi.
     */
    partialVsi?: boolean | null;
    /**
     * The time (in secondes) from vsi_engine init to vsi written to output buffer.
     */
    vsiTime?: number | null;
  }
  export interface Schema$VideoRational32 {
    denominator?: number | null;
    numerator?: number | null;
  }
  /**
   * This SEI message only takes the payload type and the sum of the payload sizes for all SEI messages of this type. More informations, such as timestamp, payload, may be added in the future.
   */
  export interface Schema$VideoSEIMessage {
    /**
     * message count of each payloadtype
     */
    count?: number | null;
    /**
     * If the video stream has multiple SEI messages with the same payload type, this is the sum of all these payloads' sizes.
     */
    cumulativeSize?: string | null;
    /**
     * use int type in case there are payload types that are not included in the SEIPayloadType enum below. The enum can be used for lookup
     */
    payloadtype?: number | null;
  }
  /**
   * Measurement of loudness. Next tag = 3
   */
  export interface Schema$VideoStorageLoudnessData {
    /**
     * Loudness measured using ITU-R BS. 1770
     */
    itu1770LoudnessDb?: number | null;
    /**
     * Perceived loudness of audio measured using replaygain.
     */
    perceptualLoudnessDb?: number | null;
  }
  /**
   * Individual video frame saved in an image file.
   */
  export interface Schema$VideoThumbnailsFrameFile {
    filename?: string | null;
    height?: number | null;
    msOffset?: number | null;
    width?: number | null;
  }
  /**
   * List of individual video frames, each saved as an image file
   */
  export interface Schema$VideoThumbnailsFrameFileList {
    frameFiles?: Schema$VideoThumbnailsFrameFile[];
  }
  /**
   * LINT.IfChange Score calculated from a thumbnail. NextID: 16
   */
  export interface Schema$VideoThumbnailsThumbnailScore {
    /**
     * Checksum of the thumbnail bytes used to identify which image the score belongs to. Only filled when thumbnail version is 0.
     */
    checksum?: string | null;
    /**
     * Color sampling score encoded as uint32. Encode/Decode using youtube::color::RgbToUint / UIntToRgb. Field is only relevant for TYPE_COLOR_SAMPLING.
     */
    colorSampling?: number | null;
    /**
     * Thumbnail dense features.
     */
    denseFeatures?: number[] | null;
    /**
     * FeatureExtra extension for dense features.
     */
    denseGeneralExtraFeatures?: Schema$DrishtiFeatureExtra;
    /**
     * A unique identifier for the image that is independent of the resolution. The Image ID accompanies the image bytes through its lifecycle, from creation till vanishing. Image ID is not based on image content; it is different than checksum (e.g. two different images with the same bytes may not have the same image ID). This ID is used as a unique identifier for clients such as T&S and classifiers. For more info refer to go/thumbnail-id-ts-ab-testing Note: Image ID's are still in development and are currently not exposed externally (may be done in the future). Please contact yt-thumbnails-core@ before using it. Do not use externally or in logs before contacting yt-thumbnails-core@
     */
    externalImageId?: string | null;
    /**
     * If true, score is manually assigned.
     */
    isAssigned?: boolean | null;
    /**
     * If true, score will be instantly indexed by YouTube search indexer.
     */
    isInstant?: boolean | null;
    modelVersion?: string | null;
    overwriteReason?: string | null;
    /**
     * Thumbnail quantized dense features, available in TYPE_STARBURST_COMPRESSED
     */
    quantizedFeatures?: string | null;
    score?: number | null;
    /**
     * Thumbnail sparse features, available in TYPE_STARBURST
     */
    sparseFeatures?: Schema$DrishtiSparseFeatureData;
    thumbnailSet?: string | null;
    /**
     * Version number of the thumbnail. Should be consistent with the version number in the ytimg_content column family.
     */
    thumbnailVersion?: string | null;
    type?: string | null;
  }
  export interface Schema$VideoTimedtextS4ALIResults {
    /**
     * The complete list of language scores, sorted from high score to low.
     */
    langResults?: Schema$VideoTimedtextS4LangScore[];
    /**
     * What kind of speech (if any) was detected.
     */
    speechClass?: string | null;
  }
  export interface Schema$VideoTimedtextS4LangScore {
    /**
     * A score between 0.0 and 1.0; the relative probability that this is the language of the video. This should not be interpreted as an absolute probability. For instance, scores may be calculated for all languages even for videos for which no speech was detected.
     */
    confidence?: number | null;
    /**
     * The language code for one of the languages supported by automatic language identification.
     */
    langCode?: string | null;
  }
  /**
   * This message contains user data registered itu-t t.35 data
   */
  export interface Schema$VideoUserDataRegisteredItuTT35 {
    /**
     * Counts itu-t t.35 message with the same country code and provider code
     */
    count?: number | null;
    countryCode?: number | null;
    providerCode?: number | null;
  }
  /**
   * This message contains unregistered user data identified by a UUID
   */
  export interface Schema$VideoUserDataUnregistered {
    /**
     * Counts user data with the same uuid and payload If payload size is larger than limit, the payload will be 'Payload size is larger than limit: ' + limit size Count will be for user data with same uuid and payload exceeds limit in this case
     */
    count?: number | null;
    /**
     * Payload may not be filled in Payload may contain user data
     */
    payload?: string | null;
    uuid?: string | null;
  }
  /**
   * VideoClipInfo : meta information extracted from video file Next id: 26
   */
  export interface Schema$VideoVideoClipInfo {
    /**
     * Lists the artist of the original subject of the file.
     */
    artist?: string | null;
    /**
     * Audio vendor ID
     */
    audioVendorId?: string | null;
    /**
     * Different containers use different video clip info. The following fields include info from popular formats: AVI, MOV, and WMV.
     */
    author?: string | null;
    comment?: string | null;
    /**
     * Lists the name of the person or organization that commissioned the subject of the file.
     */
    commissioned?: string | null;
    /**
     * Records the copyright information for the file.
     */
    copyright?: string | null;
    digitizationTime?: string | null;
    director?: string | null;
    /**
     * The engineer who worked on the file.
     */
    engineer?: string | null;
    /**
     * Optional geo-location information in WGS 84.
     */
    geolocation?: Schema$VideoVideoGeoLocation;
    info?: string | null;
    /**
     * Provides a list of keywords that refer to the file or subject of the file.
     */
    keywords?: string | null;
    /**
     * The camera make such as Apple, Samsung etc.
     */
    make?: string | null;
    /**
     * Describes the original subject of the file.
     */
    medium?: string | null;
    /**
     * Container level metadata
     */
    metadata?: Schema$VideoClipInfo[];
    /**
     * The camera model such as iPhone7 or Pixel, etc.
     */
    model?: string | null;
    performer?: string | null;
    producer?: string | null;
    requirements?: string | null;
    /**
     * Identifies the name of the software packages used to create the file.
     */
    software?: string | null;
    /**
     * Identifies the name of the person or organization who supplied the original subject of the file.
     */
    sourceProvider?: string | null;
    /**
     * Describes the contents of the file.
     */
    subject?: string | null;
    /**
     * Identifies the technician who digitized the subject file.
     */
    technician?: string | null;
    title?: string | null;
    /**
     * Video vendor ID
     */
    videoVendorId?: string | null;
  }
  /**
   * Generic geo-location information. This is error-prone due to the fact that is uses signed integer fields, which are not supported by proto1 API and are cast to unsigned integers. Consider using the metadata_util function directly, which fills out a version 2 API proto.
   */
  export interface Schema$VideoVideoGeoLocation {
    /**
     * Altitude is in meters and multiplied by 100 (i.e., in centimeters). Up till 10 km this fits in 3 bytes.
     */
    altitudeE2?: number | null;
    /**
     * Latitude and longitude are in degrees and multiplied by 10^7. This gives the worst precision of about 1 cm at the equator.
     */
    latitudeE7?: number | null;
    longitudeE7?: number | null;
  }
  export interface Schema$VideoVideoStream {
    /**
     * Video bitrate in bits/s.
     */
    bitrate?: string | null;
    /**
     * Video codec ID. Uses the numeric value corresponding to the CodecId enum object, in order to avoid the dependency on vsi/videostreaminfo.proto. http://cs/symbol:CodecId%20f:google3/video/vidproc/vsi/videostreaminfo.proto
     */
    codecId?: number | null;
    /**
     * Video frame per second, obtained by parsing video header information. The value can be inaccurate for some types of codecs. See comments at http://cs/symbol:video_fps%20f:google3/video/vidproc/vsi/videostreaminfo.proto
     */
    fps?: number | null;
    height?: number | null;
    /**
     * Video length, in seconds. This value is derived from metadata in the source video, and often differs from the actual duration of any given transcode. In videos without valid timestamps, this value is not calculable, and is reported as zero.
     */
    lengthSec?: number | null;
    /**
     * Index of the stream in the file, 0-based.
     */
    streamIndex?: string | null;
    /**
     * The video stream's width and height. Important notes: 1) These are the coded dimensions of the video stream and DO NOT take into account any rotation metadata that may be present in the video container. Prefer to use the MediaOverview::resolution and MediaOverview::orientation when possible. 2) In the case you want detailed displayed width/height information, you can use the MediaOverview::orientation to determine the displayed dimensions. E.g., in the case of PORTRAIT orientation: displayed_width = min(width, height) displayed_height = max(width, height) And for LANDSCAPE orientation: displayed_width = max(width, height) displayed_height = min(width, height)
     */
    width?: number | null;
  }
  /**
   * Note that when a VSI is from a user video, the information reflects the info in that source. Fields like lengths, fps, etc. are not guaranteed to be the same as those of transcodes. If the relevant info in source is too broken, the corresponding fields (e.g., lengths) could be unset or with the default value, meaning VSI cannot compute them from the given info. Next id: 83
   */
  export interface Schema$VideoVideoStreamInfo {
    /**
     * audio bitrate in bits/s
     */
    audioBitrate?: number | null;
    /**
     * audio channels
     */
    audioChannels?: number | null;
    /**
     * Primary audio codec information Fields 15-20, 41-42, 48, 52-53 for audio will be obsolete soon. Please start using the new repeated audio_stream and video_stream. For now, audio_stream(0) will match these fields. Primary audio codec information starts:
     */
    audioCodecId?: string | null;
    audioEndTimestamp?: string | null;
    /**
     * audio frame size
     */
    audioFrameSize?: string | null;
    /**
     * audio length in seconds Note that when the VSI is from users videos, it is not guaranteed to be the same as transcode lengths and it could be 0 when the full VSI cannot compute the length from the source header and timestamps (for example when header and timestamps are too broken).
     */
    audioLength?: number | null;
    /**
     * Number of audio frames. Ffmpeg does not report the number of frames accurately. video::TranscodedVideoFileInformation calls Google's analyzer to get information of both audio and video frame numbers.
     */
    audioNumberOfFrames?: string | null;
    /**
     * audio sample rate
     */
    audioSampleRate?: string | null;
    /**
     * Number of meaningful bits per decoded audio sample. This is an implicit conceptual meaning. This is *NOT* the same as ffmpeg's internal sample format that is used when actually decoding with ffmpeg.
     */
    audioSampleSize?: number | null;
    audioStartTimestamp?: string | null;
    audioStream?: Schema$VideoVideoStreamInfoAudioStream[];
    audioStreamCodecTag?: string | null;
    /**
     * Audio-Video interleaving distance between packets (in bytes)
     */
    avDistance?: string | null;
    /**
     * Average video fps from analyzing entire file.
     */
    averageVideoFps?: number | null;
    /**
     * Audio and video length in seconds. It's the max of the audio and video length. Note that when the VSI is from users videos, it is not guaranteed to be the same as transcode lengths and it could be 0 when the full VSI cannot compute the length from the source header and timestamps (for example when header and timestamps are too broken).
     */
    avLength?: number | null;
    /**
     * Build label of the VSI mpm.
     */
    buildLabel?: string | null;
    /**
     * Container Id.
     */
    containerId?: string | null;
    /**
     * Name of the container format guessed by ffmpeg.
     */
    containerType?: string | null;
    /**
     * If the video contains chapters info.
     */
    containsChapters?: boolean | null;
    dataStream?: Schema$VideoVideoStreamInfoDataStream[];
    displayHeight?: number | null;
    /**
     * final display video width and height if explicitly set in the video otherwise this can be calculated from source width/height and video_pixel_aspect_ratio
     */
    displayWidth?: number | null;
    /**
     * Input file header fingerprint
     */
    fileHeaderFingerprint?: string | null;
    /**
     * The file type string returned by libmagic, a third party library. It might accidentally include some user content. Some normal file_magic examples: -- RIFF (little-endian) data, AVI, 1016 x 696, 30.00 fps, video: XviD, audio: (stereo, 48000 Hz) -- MPEG sequence, v2, program multiplex -- ISO Media, MPEG v4 system, iTunes AVC-LC -- Microsoft Windows Movie Maker project file
     */
    fileMagic?: string | null;
    /**
     * Input file modification time
     */
    fileModifiedTime?: string | null;
    /**
     * Input file name. DEPRECATED; don't expect the file name to be correct.
     */
    fileName?: string | null;
    /**
     * Input file size in bytes
     */
    fileSize?: string | null;
    /**
     * High-level file type guessed by looking at the file headers and libmagic.
     */
    fileType?: number | null;
    /**
     * YT app created video information,
     */
    googleVideoClipInfo?: Schema$VideoGoogleVideoClipInfo;
    imageStream?: Schema$VideoVideoStreamInfoVideoStream[];
    /**
     * True if the video is likely to be an ASF file.
     */
    isAsf?: boolean | null;
    /**
     * True if the video is actually an image file (JPEG, PNG, GIF, etc) and not a video file.
     */
    isImageFile?: boolean | null;
    /**
     * Check if a video size insane or not. It is set if the input file is an MOV file.
     */
    isVideoInsaneSize?: boolean | null;
    level?: number | null;
    metadata?: Schema$VideoVideoStreamInfoMetadata;
    /**
     * Total number of audio streams in the file
     */
    numAudioStreams?: number | null;
    /**
     * Total number of data streams in the file
     */
    numDataStreams?: number | null;
    /**
     * Total number of image streams in the file
     */
    numImageStreams?: number | null;
    /**
     * Total number of timedtext streams in the file
     */
    numTimedtextStreams?: number | null;
    /**
     * Total number of video streams in the file
     */
    numVideoStreams?: number | null;
    /**
     * If this field is not set, then only base video file information has been generated (and ffmpeg parsing hasn't yet been done). If this is set to 'false', then ffmpeg failed to parse the file - otherwise it will set to 'true'
     */
    parsedByFfmpeg?: boolean | null;
    /**
     * By default we assume that the entire file was given computing the VSI - if that is not true this flag should be set to true.
     */
    partialFile?: boolean | null;
    /**
     * Pixel format for the video stream.
     */
    pixFmt?: string | null;
    /**
     * video profile
     */
    profile?: string | null;
    timedtextStream?: Schema$VideoVideoStreamInfoTimedTextStream[];
    /**
     * video bitrate in bits/s
     */
    videoBitrate?: number | null;
    /**
     * Video clip information, such as copyright, title, and author.
     */
    videoClipInfo?: Schema$VideoVideoClipInfo;
    /**
     * Primary video codec information Fields 1-2, 4-10, 28, 37, 44, 49, 51, 54-55, 57-62, 69 will be obsolete soon. Please start using the new repeated video_stream. For now, video_stream(0) will match these fields. Note however that some of the fields in VideoStream are not populated correctly yet in videostreaminfo.cc, but that will be handled gradually.
     */
    videoCodecId?: string | null;
    videoEndTimestamp?: string | null;
    /**
     * video frame per second, obtained by parsing video header information. It could be inaccurate for some types of codecs, notably, WMV, ASF, and FLV. It will be inaccurate for videos that does not have constant frame rate since it is the smallest framerate that can accurately represent all timestamps (see ffmpeg doc for AVStream.r_frame_rate). Also frame rate can be parsed from headers and can be wrong if it is not available there since ffmpeg uses a heuristic for determining it.
     */
    videoFps?: number | null;
    /**
     * video frame size
     */
    videoFrameSize?: string | null;
    /**
     * video has b frames
     */
    videoHasBFrames?: boolean | null;
    /**
     * video (MOV) has fragments
     */
    videoHasFragments?: boolean | null;
    /**
     * video (MOV) has moov atom before mdat atom allowing streaming transcoding
     */
    videoHasLeadingMoovAtom?: boolean | null;
    /**
     * video has non-monotonic DTS (potential problem)
     */
    videoHasNonMonotonicDts?: boolean | null;
    /**
     * video has non-monotonic PTS.
     */
    videoHasNonMonotonicPts?: boolean | null;
    /**
     * video (MOV) has a possibly av desync issue due to edit lists not starting at 0
     */
    videoHasNonZeroStartEditList?: boolean | null;
    /**
     * video has possible open GOP
     */
    videoHasPossibleOpenGop?: boolean | null;
    /**
     * video has frames with different aspect ratios.
     */
    videoHasVariableAspectRatio?: boolean | null;
    videoHeight?: number | null;
    /**
     * Information on interlaced video.
     */
    videoInterlace?: string | null;
    /**
     * video length in seconds Note that when the VSI is from users videos, it is not guaranteed to be the same as transcode lengths and it could be 0 when the full VSI cannot compute the length from the source header and timestamps (for example when header and timestamps are too broken).
     */
    videoLength?: number | null;
    /**
     * Number of Video frames Warning: running video::FfmpegVideoFileInformation() won't set this info Ffmpeg tool does not report the number of frames accurately. We can't rely on fps and video length. So we will set this after we processed every frame using the filter framework
     */
    videoNumberOfFrames?: string | null;
    /**
     * Invisible frame count Keep a count of frames that are not displayed should the full frame count be needed for the video stream. The only codec currently reporting this value is VP8 with alternate reference frames enabled
     */
    videoNumberOfInvisibleFrames?: number | null;
    /**
     * video pixel aspect ratio
     */
    videoPixelAspectRatio?: number | null;
    /**
     * Is the video rotated ?
     */
    videoRotation?: string | null;
    /**
     * Start/end timestamps of audio/video in ms.
     */
    videoStartTimestamp?: string | null;
    videoStream?: Schema$VideoVideoStreamInfoVideoStream[];
    videoStreamCodecTag?: number | null;
    /**
     * Version number of the videostreaminfo application that generated this protobuf.
     */
    videostreaminfoVersion?: number | null;
    /**
     * source video width and height
     */
    videoWidth?: number | null;
    /**
     * Luma PSNR of the transcoded file.
     */
    yPsnr?: number | null;
  }
  /**
   * Next id: 25
   */
  export interface Schema$VideoVideoStreamInfoAudioStream {
    /**
     * Optional ambisonics metadata.
     */
    ambisonics?: Schema$VideoAmbisonicsAmbisonicsMetadata;
    /**
     * audio bitrate in bits/s
     */
    bitrate?: string | null;
    channelPosition?: string[] | null;
    /**
     * number of audio channels
     */
    channels?: number | null;
    /**
     * some container allows for a clock discontinuity. In this case, the end_timestamp may not be the correct DTS of the stream.
     */
    clockDiscontinuityUs?: string | null;
    codecFourcc?: string | null;
    /**
     * Primary audio codec information
     */
    codecId?: string | null;
    /**
     * RFC6381 Codec string.
     */
    codecString?: string | null;
    /**
     * Specifies the content_type of the audio stream as given in the metadata.
     */
    contentType?: string | null;
    /**
     * The bytes offset of the end of the first decodable packet.
     */
    decodeOffset?: string | null;
    endTimestamp?: string | null;
    /**
     * audio frame size
     */
    frameSize?: string | null;
    /**
     * Specifies the language of the audio stream as given in the metadata.
     */
    language?: string | null;
    /**
     * audio length in seconds Note that when the VSI is from users videos, it is not guaranteed to be the same as transcode lengths and it could be 0 when the full VSI cannot compute the length from the source header and timestamps (for example when header and timestamps are too broken).
     */
    length?: number | null;
    /**
     * Metadata for audio elementary stream;
     */
    metadata?: Schema$VideoClipInfo[];
    /**
     * Number of audio frames.
     */
    numberOfFrames?: string | null;
    profile?: string | null;
    /**
     * audio sample rate
     */
    sampleRate?: string | null;
    /**
     * Number of meaningful bits per decoded audio sample. This is an implicit conceptual meaning. This is *NOT* the same as ffmpeg's internal sample format that is used when actually decoding with ffmpeg.
     */
    sampleSize?: number | null;
    /**
     * Start/end timestamps of audio in ms.
     */
    startTimestamp?: string | null;
    streamCodecTag?: string | null;
    /**
     * Index of the stream in the file. it is 0 based.
     */
    streamIndex?: string | null;
  }
  /**
   * Data streams refer to additional data separate from audio and video streams For example: camera motion metadata (see http://go/wally-format) Available tags: 4+
   */
  export interface Schema$VideoVideoStreamInfoDataStream {
    codecFourcc?: string | null;
    /**
     * Codec information
     */
    codecId?: string | null;
    streamCodecTag?: string | null;
    /**
     * Index of the stream in the file
     */
    streamIndex?: string | null;
  }
  export interface Schema$VideoVideoStreamInfoMetadata {
    luts?: Schema$VideoVideoStreamInfoMetadataLutAttachments;
    /**
     * Information on Frame Packing arrangement
     */
    videoFpa?: Schema$VideoFileFramePackingArrangement;
  }
  /**
   * An attached 3D look up table
   */
  export interface Schema$VideoVideoStreamInfoMetadataLutAttachments {
    lut?: Schema$VideoVideoStreamInfoMetadataLutAttachmentsLut3D[];
  }
  /**
   * Description and encoding of a 3d lut.
   */
  export interface Schema$VideoVideoStreamInfoMetadataLutAttachmentsLut3D {
    /**
     * Lut data, sanitized and encoded in google's binary coded form of 3D look-up tables.
     */
    data?: string | null;
    /**
     * Original file name of the lut (present in the original file)
     */
    fileName?: string | null;
    /**
     * The size (in each dimension) of the lut. For a 3D cube of size NxNxN, this will be N. If the value is -1, then the file was determined to be invalid. This is useful for logging files where the input could not be parsed, and is useful for to indicate info of the 3D lut without having to decode/inspect the binary data.
     */
    size?: number | null;
  }
  /**
   * Timed text streams refer to the streams that are separated from audio and video streams. Closed caption streams embedded in video streams (e.g. MPEG-2 - Line 21) do not belong here.
   */
  export interface Schema$VideoVideoStreamInfoTimedTextStream {
    /**
     * Codec information.
     */
    codecId?: string | null;
    /**
     * Metadata for the stream.
     */
    metadata?: Schema$VideoClipInfo[];
    streamCodecTag?: string | null;
    /**
     * Index of the stream in the file. it is 0 based.
     */
    streamIndex?: string | null;
  }
  /**
   * TODO(yanghu) add 25/50/75 percentiles of FPS to have a 5 number summary. Next id: 48
   */
  export interface Schema$VideoVideoStreamInfoVideoStream {
    /**
     * This represents the canonical frame rate of the video. This is named average_fps for historical reasons, and may not actually be the arithmetic mean. For variable frame rate videos, the algorithm may change again in future. Currently, full vsi set it with arithmetic mean, and partial vsi set it with median.
     */
    averageFps?: number | null;
    /**
     * video bitrate in bits/s
     */
    bitrate?: string | null;
    /**
     * Contains the color information obtained after inspection of the bitstream in cases where there may be inconsistencies between container and coded bitstream that are resolved in favor of the container.
     */
    bitstreamColorInfo?: Schema$VideoFileColorInfo;
    cleanAperture?: Schema$VideoVideoStreamInfoVideoStreamCleanAperture;
    /**
     * some container allows for a clock discontinuity. In this case, the end_timestamp may not be the correct DTS of the stream.
     */
    clockDiscontinuityUs?: string | null;
    closedCaptions?: Schema$VideoClosedCaptions;
    /**
     * closed_gop_size refers to chunkable boundaries for each specified codec and may actually contain one or more GOPs, e.g. for H.264, closed_gop_size will denote the distance (frame count) between two IDR frames.
     */
    closedGopSize?: Schema$VideoVideoStreamInfoVideoStreamStatistics;
    codecFourcc?: string | null;
    /**
     * Primary video codec information
     */
    codecId?: string | null;
    /**
     * RFC6381 Codec string.
     */
    codecString?: string | null;
    colorInfo?: Schema$VideoFileColorInfo;
    contentLightLevel?: Schema$VideoFileContentLightLevel;
    /**
     * The bytes offset of the end of the first decodable packet.
     */
    decodeOffset?: string | null;
    displayHeight?: number | null;
    /**
     * final display video width and height if explicitly set in the video otherwise this can be calculated from source width/height and video_pixel_aspect_ratio
     */
    displayWidth?: number | null;
    /**
     * Dolby Vision configuration if stream is compatible.
     */
    doviConfiguration?: Schema$VideoDoViDecoderConfiguration;
    endTimestamp?: string | null;
    /**
     * Should the video be mirrored horizontally / vertically? When rotation and flip both are present for a video, it is assumed that the flip is applied first, and then the rotation.
     */
    flip?: string | null;
    /**
     * video frame per second, obtained by parsing video header information. It could be inaccurate for some types of codecs, notably, WMV, ASF, and FLV. It will be inaccurate for videos that does not have constant frame rate since it is the smallest framerate that can accurately represent all timestamps (see ffmpeg doc for AVStream.r_frame_rate). Also frame rate can be parsed from headers and can be wrong if it is not available there since ffmpeg uses a heuristic for determining it.
     */
    fps?: number | null;
    /**
     * video frame size
     */
    frameSize?: string | null;
    /**
     * Statistics about gop sizes of the video.
     */
    gopSize?: Schema$VideoVideoStreamInfoVideoStreamStatistics;
    /**
     * video has b frames
     */
    hasBFrames?: boolean | null;
    /**
     * Stats on HDR10+ over video frames.
     */
    hdr10PlusStats?: Schema$VideoFileHDR10PlusStats;
    height?: number | null;
    /**
     * Information on interlaced video.
     */
    interlace?: string | null;
    /**
     * Check if a video size insane or not. It is set if the input file is an MOV file.
     */
    isInsaneSize?: boolean | null;
    /**
     * User data registered Itu-T T.35 SEI message
     */
    ituTT35?: Schema$VideoUserDataRegisteredItuTT35[];
    /**
     * video length in seconds Note that when the VSI is from users videos, it is not guaranteed to be the same as transcode lengths and it could be 0 when the full VSI cannot compute the length from the source header and timestamps (for example when header and timestamps are too broken).
     */
    length?: number | null;
    level?: number | null;
    masteringDisplayMetadata?: Schema$VideoFileMasteringDisplayMetadata;
    /**
     * Maximum instantaneous frame rate seen from analyzing the entire stream.
     */
    maxFps?: number | null;
    /**
     * Metadata for video elementary stream;
     */
    metadata?: Schema$VideoClipInfo[];
    /**
     * Minimum instantaneous frame rate seen from analyzing the entire stream.
     */
    minFps?: number | null;
    /**
     * Number of video frames.
     */
    numberOfFrames?: string | null;
    /**
     * Invisible frame count Keep a count of frames that are not displayed should the full frame count be needed for the video stream. The only codec currently reporting this value is VP8 with alternate reference frames enabled
     */
    numberOfInvisibleFrames?: number | null;
    /**
     * video pixel aspect ratio
     */
    pixelAspectRatio?: number | null;
    /**
     * Pixel format for the video stream.
     */
    pixFmt?: string | null;
    profile?: string | null;
    /**
     * The nominal frame rate ('fps' field) represented as a fraction.
     */
    rationalFps?: Schema$VideoRational32;
    /**
     * Is the video rotated ?
     */
    rotation?: string | null;
    /**
     * video SEI payload types and total payload size of a type this is only for H.264 and H.265
     */
    seiMessage?: Schema$VideoSEIMessage[];
    /**
     * Optional spherical video information.
     */
    spherical?: Schema$VideoFileSphericalMetadata;
    /**
     * Start/end timestamps of audio/video in ms.
     */
    startTimestamp?: string | null;
    streamCodecTag?: string | null;
    /**
     * Index of the stream in the file. it is 0 based.
     */
    streamIndex?: string | null;
    /**
     * User data unregistered SEI message
     */
    userDataUnregistered?: Schema$VideoUserDataUnregistered[];
    /**
     * source video width and height
     */
    width?: number | null;
  }
  export interface Schema$VideoVideoStreamInfoVideoStreamCleanAperture {
    height?: number | null;
    horizontalOffset?: number | null;
    verticalOffset?: number | null;
    width?: number | null;
  }
  export interface Schema$VideoVideoStreamInfoVideoStreamStatistics {
    max?: string | null;
    mean?: number | null;
    min?: string | null;
  }
  export interface Schema$VideoYoutubeCommentsClassificationProtoSmartSuggestion {
    /**
     * Diversification threshold used in prediction. Additional responses which are closer than the threshold to the already selected responses will be skipped.
     */
    diversificationThreshold?: number | null;
    /**
     * Bias weight used in prediction.
     */
    likelihoodBiasWeight?: number | null;
    /**
     * Content of the reply snippet (could include emoji as well as text).
     */
    replyContent?: string | null;
    /**
     * Model score for the predicted reply snippet.
     */
    score?: number | null;
  }
  /**
   * Smart reply suggestions for comment.
   */
  export interface Schema$VideoYoutubeCommentsClassificationProtoYouTubeCommentSmartReply {
    /**
     * The order of the reply snippets in the list determines how they should be displayed in the UI and the client is not supposed to re-order the list using the scores.
     */
    smartSuggestions?: Schema$VideoYoutubeCommentsClassificationProtoSmartSuggestion[];
    /**
     * Identifier (language_code, channel_id, etc) for the suggestion list from which the top k suggestions are selected.
     */
    suggestionListIdentifier?: string | null;
  }
  /**
   * Used for stanza KV pair. Next tag: 7.
   */
  export interface Schema$VideoYoutubeCommentsRankingCTRMetrics {
    downvotes?: string | null;
    impressions?: string | null;
    measureWindow?: string | null;
    teaserClicks?: string | null;
    teaserImpressions?: string | null;
    upvotes?: string | null;
  }
  export interface Schema$WatchpageLanguageWatchPageLanguageResult {
    /**
     * The language predicted by the WatchPage Language model.
     */
    watchpageLanguage?: string | null;
  }
  /**
   * Page boosting using Live Results data. Attaching this proto to a document indicates that a Live Result feed exists for that document, and that this feed has sufficient reliability to warrant potential boosting of the document rank. Next ID: 3
   */
  export interface Schema$WeboftrustLiveResultDocBoostData {
    /**
     * Identifies the degree to which the existence of this LiveResult should boost a query's score (when the query is performed within the hot_times range). This field is always in the range [0,1]. A missing field, a value of 0, or a value outside the legal range indicates that no boosting is performed. A value of 1 indicates that the maximum level of boosting will be applied. This field will be updated from time to time based on CTR and other signals.
     */
    boostLevel?: number | null;
    /**
     * Specifies the time range within which this LiveResult is relevant. Used for deciding whether the rank of the corresponding page should be boosted. For example, this range can be set to encompass a few days before and after a sports game to which the page refers. If this field is missing, no boosting is performed. Specifying that a page should always be boosted is not recommended, but can be accomplished by setting hot_times.start_unix_time=0 and hot_time.end_unix_time=0x7fffffff. Note that multiple time ranges can be implemented by adding several LiveResultDocBoostData messages to the LiveResultsDocAttachments proto. If overlapping time ranges are used, the proto containing the highest boost level will be used.
     */
    hotTimes?: Schema$WeboftrustTimeRange;
  }
  /**
   * Per-provider attachment of a LiveResult. Used to identify pages for which result-based triggering of Live Results should appear. Theoretically there can be more than one attachment per web document, so we keep them as a repeated field of the LiveResultsDocAttachment. Next ID: 4
   */
  export interface Schema$WeboftrustLiveResultProviderDocAttachment {
    providerId?: string | null;
    /**
     * Tag that specifies the use-case within provider's data. It appears as a string in Alexandria signal and in the DocJoins. During the indexing stage this field will be converted to a 64-bit fingerprint to save space. See the "tag_fp" field, below.
     */
    tag?: string | null;
    /**
     * A fingerprint of the "tag" field, automatically calculated during the indexing stage. Will be used as a key for fetching the data.
     */
    tagFp?: string | null;
  }
  /**
   * Message to which we attach to web documents in order to decide which LiveResult to trigger. Next ID: 3
   */
  export interface Schema$WeboftrustLiveResultsDocAttachments {
    /**
     * Information about potential rank boosting for the document by virtue of its Live Result feed.
     */
    docBoost?: Schema$WeboftrustLiveResultDocBoostData[];
    /**
     * Identifies a Live Result which is to be attached to the document.
     */
    providerAttachment?: Schema$WeboftrustLiveResultProviderDocAttachment[];
  }
  /**
   * Time range (start time and end time). Used to indicate the times in which a LiveResult is considered "hot" and thus a potential for boosting. Specified as Unix time (seconds since midnight, January 1, 1970). Time zone is same as that for query_start_time (i.e., GMT). Next ID: 3
   */
  export interface Schema$WeboftrustTimeRange {
    endUnixTime?: string | null;
    /**
     * Start and end times should always appear. Marked as optional to avoid breaking code.
     */
    startUnixTime?: string | null;
  }
  /**
   * IMPORTANT: It is unsafe to accept this message from an untrusted source, since it's trivial for an attacker to forge serialized messages that don't fulfill the type's safety contract -- for example, it could contain attacker controlled script. A system which receives a SafeHtmlProto implicitly trusts the producer of the SafeHtmlProto. So, it's generally safe to return this message in RPC responses, but generally unsafe to accept it in RPC requests.
   */
  export interface Schema$WebutilHtmlTypesSafeHtmlProto {
    /**
     * IMPORTANT: Never set or read this field, even from tests, it is private. See documentation at the top of .proto file for programming language packages with which to create or read this message.
     */
    privateDoNotAccessOrElseSafeHtmlWrappedValue?: string | null;
  }
  export interface Schema$WirelessTranscoderFetchFetchMetadata {
    name?: string | null;
    value?: string | null;
  }
  /**
   * To tag which fetcher satisfied this fetch request with optional detail.
   */
  export interface Schema$WirelessTranscoderFetchFetchSourceInfo {
    /**
     * Provides fetcher-specific detail about how source satisfied the request.
     */
    detail?: string | null;
    /**
     * The fetcher that ultimately satisfied this fetch request.
     */
    source?: string | null;
  }
  /**
   * Some per-doc info is returned for all www DocInfo requests. Next id: 94
   */
  export interface Schema$WWWDocInfo {
    /**
     * Additional stats output by SafeSearch. See classifier/porn/public/porn-attachments.h.
     */
    additionalSafesearchStats?: number[] | null;
    /**
     * Sometimes called secureid
     */
    authMethod?: number | null;
    /**
     * Bad meta flag
     */
    badMetadescription?: boolean | null;
    /**
     * Size of document
     */
    bodySize?: number | null;
    bodyTitleLanguages?: string[] | null;
    boilerplateMetadescription?: boolean | null;
    /**
     * Detected color in the image in RGB565 format in the lower 16 bits.
     */
    colorDetectionResult?: number | null;
    /**
     * If not present, then the type
     */
    contentType?: string | null;
    /**
     * Url of coupled doc (e.g. image)
     */
    coupledUrl?: string | null;
    coupledUrlEncoding?: number | null;
    /**
     * Last time this doc crawled
     */
    crawlTime?: string | null;
    /**
     * Thumbnail cropping information.
     */
    cropData?: number | null;
    dataVersion?: string | null;
    /**
     * Fields generated by the docserver, but whose meaning is unclear. Sometimes last crawl time
     */
    docVersionId?: string | null;
    encoding?: string | null;
    /**
     * fails_safe_search is never filled in production.
     */
    failsSafeSearch?: string | null;
    /**
     * If converted to TEXT or HTML
     */
    fileTypeId?: string | null;
    /**
     * Indicate if the meta description in a different language than its page.
     */
    foreignMetadescription?: boolean | null;
    fuzzyMetadescription?: boolean | null;
    /**
     * Addition to support google label per-search-result annotation.
     */
    googleLabelData?: string | null;
    /**
     * If true, the original document has a bad SSL certificate.
     */
    hasBadSslCertificate?: boolean | null;
    /**
     * image height
     */
    imageHeight?: number | null;
    /**
     * Image license info such as license url and how to acquire the license.
     */
    imageLicenseInfo?: Schema$ImageSearchImageLicenseInfo;
    imagePublisher?: string | null;
    /**
     * size in bytes;
     */
    imageSize?: number | null;
    /**
     * image width
     */
    imageWidth?: number | null;
    /**
     * The timestamp (the time since the Epoch, in microseconds) when the docjoin is exported from indexing. This is mainly exported and used by Youtube Search. See MustangBasicInfo.indexing_ts for more details.
     */
    indexingTs?: string | null;
    /**
     * If ipaddr is set, ip should be ignored (it should not be set). Ipaddr should be either 4- or 16-byte string for IPv4 or IPv6 addresses. If ipaddr is not set, ip is set to the IPv4 address for the host.
     */
    ip?: number | null;
    ipaddr?: string | null;
    /**
     * Is this image animated?
     */
    isAnimated?: boolean | null;
    /**
     * Hosted Images related fields.
     */
    isHostedImage?: boolean | null;
    /**
     * Doc porn classification.
     */
    isPorn?: boolean | null;
    /**
     * Is disallowed for crawling according to host's robots.txt.
     */
    isRoboted?: boolean | null;
    /**
     * Consider the page classification is_porn as an alternative for is_site_porn, and talk to safesearch@google.com for additional information if needed.
     */
    isSitePorn?: boolean | null;
    /**
     * Doc softporn classification.
     */
    isSoftporn?: boolean | null;
    /**
     * go/iii-td b/130371355
     */
    language?: string | null;
    /**
     * This returns the most probable language for the document. The complete set of languages is in the GenericSearchResponse. (If some future use requires all languages from the doc request, note that fetching that will require decoding the entire per-doc data attachment, which is a performance hit) Use docinfo-util.h to set & read language fields. Language tag as defined by http://www.unicode.org/reports/tr35/#Identifiers and https://tools.ietf.org/html/bcp47 If not present, then use language.
     */
    languageTag?: string | null;
    /**
     * Unused by gws
     */
    lastModTime?: string | null;
    /**
     * Indicates the web-master opt-in state of this image. This project is still in MVP stage, please contact us licensed-media-team@ before use.
     */
    licensedWebImagesOptInState?: string | null;
    lowQualityMetadescription?: boolean | null;
    /**
     * If meta description/body title were detected to be in a different language from the document language (the 'language' field above) in RosettaLanguageAnnotator, the detected languages are populated here. Note: as of ariane/154728, no more than one language is populated for each field.
     */
    metaDescriptionLanguages?: string[] | null;
    /**
     * Nearby text of the image on landing page. Used to construct Scroll to Image urls.
     */
    nearbyText?: string | null;
    /**
     * If not 0, we should not show the image in overlay mode in image snippets.
     */
    noimageframeoverlayreason?: number | null;
    /**
     * Sitechunk used by NSR. For most pages this is equivalent HOST_LEVEL_V3 sitechunk. Main difference is that, for sites like youtube.com and vimeo.com, nsr_sitechunks are channel level (based on schema.org markup, not url alone). See go/nsr-chunks for more details.
     */
    nsrSitechunk?: string | null;
    partialBoilerplateMetadescription?: boolean | null;
    /**
     * 'porn_stats' is used in porn demotion and filtering. See classifier/porn/public/porn-attachments.h.
     */
    pornStats?: number | null;
    /**
     * Quality score (also known as QScore, see go/qscore-faq).
     */
    qualityWithoutAdjustment?: number | null;
    /**
     * Url of referring doc
     */
    referrerUrl?: string | null;
    relatedimages?: Schema$WWWDocInfoRelatedImages[];
    /**
     * True if the meta-description is duplicated on many other pages and this page is the rootpage of such pages which have the same meta-description.
     */
    rootpageDuplicateMetadescription?: boolean | null;
    /**
     * Has noarchive meta robots flag
     */
    seenNoarchive?: boolean | null;
    /**
     * Has noindex meta robots flag
     */
    seenNoindex?: boolean | null;
    /**
     * NOTE(kinoue): ODP/GWD snippet is unlaunched as of June 2017. This is no longer used.
     */
    seenNoodp?: boolean | null;
    /**
     * Has nopreview meta robots flag
     */
    seenNopreview?: boolean | null;
    /**
     * Has nosnippet meta robots flag
     */
    seenNosnippet?: boolean | null;
    /**
     * Has notranslate meta robots flag
     */
    seenNotranslate?: boolean | null;
    shoppingAttachment?: Schema$QualityShoppingShoppingAttachment;
    /**
     * Shopping offer info from Inventory & Policy Service.
     */
    shoppingOffers?: Schema$ImageMustangShoppingOffer[];
    /**
     * Subindex id of the document should be one of the values defined by enum CompositeDoc::SubIndexType. Used for superroot/gws logging if a shard has documents from multiple indices.
     */
    subindex?: number | null;
    /**
     * thumbnail height
     */
    thumbHeight?: number | null;
    thumbnail?: Schema$WWWDocInfoThumbnail[];
    /**
     * Additions for image search.
     */
    thumbWidth?: number | null;
    /**
     * Landing page title.
     */
    title?: string | null;
    unionBuildTime?: string | null;
    /**
     * Url
     */
    url?: string | null;
    /**
     * empty =\> same as url
     */
    urlAfterRedirects?: string | null;
    /**
     * See webutil/urlencoding
     */
    urlEncoding?: number | null;
    /**
     * If an image request, was the coupled image visible on the page?
     */
    visibleImage?: boolean | null;
    /**
     * Is this doc visual RTL? See enum VisualType in visualtype.h. Default is NOT_VISUAL_DOCUMENT.
     */
    visualType?: string | null;
  }
  /**
   * Return related images.
   */
  export interface Schema$WWWDocInfoRelatedImages {
    imageDocid?: string | null;
    thumbHeight?: number | null;
    thumbType?: string | null;
    thumbWidth?: number | null;
  }
  export interface Schema$WWWDocInfoThumbnail {
    expirationTimestampMicros?: string | null;
    height?: number | null;
    /**
     * The type here corresponds to image_base::ThumbnailType defined in image/base/thumbnail-type.proto.
     */
    type?: number | null;
    width?: number | null;
  }
  /**
   * We can return the content attribute for some or all meta tags.
   */
  export interface Schema$WWWMetaTag {
    content?: string | null;
    name?: string | null;
  }
  /**
   * The following message contains info of sub image docs, it is populated in query_state and consumed in web image boost twiddler: (go/WebImageBoostTwiddler). NextID: 26
   */
  export interface Schema$WWWResultInfoSubImageDocInfo {
    additionalSafesearchSignals?: number[] | null;
    /**
     * The best thumbnail type is either 300K or 50K.
     */
    bestThumbnailType?: string | null;
    crops?: number | null;
    /**
     * Deepcrop thumbnail cropping hints.
     */
    deepCropBytes?: string | null;
    /**
     * EQ* v3: Deep Image Engagingness(DImE) go/deep-image-engagingness-slides
     */
    dimeScore?: number | null;
    docid?: string | null;
    documentTrust?: number | null;
    /**
     * EQ* is a unified signal to capture the emotional quality (e.g. inspiration, lifestyle, context, etc.) of an image. For more information, please refer to go/image-inspiration-ranking-framework.
     */
    eqStar?: number | null;
    /**
     * Estimated Image Relevance ranging between 0.0 (Off-Topic) to 1.0 (Very Useful).
     */
    estRelevance?: number | null;
    /**
     * Estimated Sigma U calculated from U*.
     */
    estSigmaU?: number | null;
    flowOutput?: Schema$ImageContentFlowProtoProd;
    height?: number | null;
    height50k?: number | null;
    /**
     * DeepTags human model score. go/VisualShoppingImageAttributes
     */
    humanModelScore?: number | null;
    imageUrl?: string | null;
    pamirNormalizedScore?: number | null;
    /**
     * Encoded Safe Search annotations of the image. See image/safesearch/overall/public/image_porn_attachments.h for decoding functions.
     */
    pornSignals?: number | null;
    /**
     * Result is not on the Images Universal blacklist. For more comprehensive filtering of IU images, including this bit, see superroot/impls/images/quality/safesearch/iu_inappropriate_filter_lib.h
     */
    safeForUniversal?: boolean | null;
    /**
     * Salient score, indicating how important an image is to the page it's on. Check go/salient-images-design-doc for details.
     */
    salience?: number | null;
    /**
     * 4-bytes: (low order on the left) RRRRRRRR GGGGGGGG BBBBBBBB SS where R: 8-bits encoding color 'r' G: 8-bits encoding color 'g' B: 8-bits encoding color 'b' S: 2-bits encoding the color source - 00 = from color detection result - 01 = from cairo This field has the salient color information.
     */
    salientColorInfo?: number | null;
    score?: number | null;
    /**
     * TQ* is a signal to capture the technical quality (e.g. exposure, sharpness, composition, etc.) of an image. For more information, please refer to go/tqstar.
     */
    tqStar?: number | null;
    tradFrac?: number | null;
    width?: number | null;
    /**
     * Width and height of the AREA_50K thumbnail for this image.
     */
    width50k?: number | null;
  }
  /**
   * Per-document response for a www DocInfo request. Next field position: 55
   */
  export interface Schema$WWWSnippetResponse {
    /**
     * A list of answers that had at least one hit in the document. Answers are identified by their index into the QRewriteQueryParams_AnswerSnippetInfo array (see //query/proto/query-params.proto).
     */
    answerDocMatches?: number[] | null;
    /**
     * Tidbits chosen from the document body. Consists of repeated [begin, end) half-open ranges in token offsets from the beginning of the document.
     */
    chosenBodyTidbits?: number[] | null;
    docInfo?: Schema$WWWDocInfo;
    /**
     * DocPreviewRestrictions for canonical url.
     */
    docPreviewRestrictions?: Schema$QualityDniDocPreviewRestrictions;
    /**
     * DocPreviewRestrictions for amp result.
     */
    docPreviewRestrictionsForAmp?: Schema$QualityDniDocPreviewRestrictions;
    /**
     * Bitfield of snippet events and the various events. See SnippetEvents in ./snippets/defines.h for details on the contents.
     */
    events?: string | null;
    /**
     * If requested, the extra snippet info
     */
    extraInfo?: Schema$ExtraSnippetInfoResponse;
    /**
     * A bitvector of the tidbits in the snippet that are appropriate for the Quick Scroll (Findy) Chrome extension. Typically these contain "extra body matches", i.e., important query items not in the title.
     */
    findyTidbits?: number | null;
    /**
     * Additional available data (message type ids)
     */
    hasMessageType?: number[] | null;
    /**
     * Additional data. Currently, this is used for sitelinks, localinfo, manybox, discussion metadata, richsnippets, similarpages and breadcrumbs.
     */
    info?: Schema$Proto2BridgeMessageSet;
    /**
     * True if the document represents a login page.
     */
    isLoginPage?: boolean | null;
    /**
     * Assume this is true unless we discover that the result doesn't match the the query, in which case this result is invalid despite having returned docinfo.
     */
    isValidResult?: boolean | null;
    /**
     * Document keywords
     */
    keyword?: string[] | null;
    /**
     * List snippet data.
     */
    listSnippet?: Schema$ListSnippetResponse;
    /**
     * List summary phrase for list pages.
     */
    listSummary?: string | null;
    /**
     * Returned if want_long_structured_snippets. If present, caller should ignore the normal snippet.
     */
    longStructuredSnippet?: Schema$LongStructuredSnippet;
    /**
     * Bitmap representing matches to leaf query terms within document (body section and url). It gets populated if query_matches_info = true.
     */
    matchesBitmapEncoded?: string | null;
    matchesBitmapSize?: number | null;
    /**
     * Meta tags
     */
    metaTags?: Schema$WWWMetaTag[];
    numberOfPages?: number | null;
    /**
     * Similar to num_tokens_skipped_by_in_doc_restrictions_in_scoring, but this number is for tokens skipped during printing, since printer owns its own token info manager which populates tokens.
     */
    numTokensSkippedByInDocRestrictionsInPrinting?: number | null;
    /**
     * Number of tokens that is skipped because of in doc restrictions during scoring. This is an estimate, as the list of tokens is cached in TokenInfoManager. We should only monitor the cases where this number is too big or non-zero.
     */
    numTokensSkippedByInDocRestrictionsInScoring?: number | null;
    /**
     * LocalWWWInfo
     */
    obsoleteLocalinfo?: string | null;
    /**
     * ManyboxData
     */
    obsoleteManybox?: string | null;
    /**
     * These fields were previously optional messages, but CL 2388905 moved them into the MessageSet. However, at this time, old Mustang binaries are still deployed in production and probably will be around for awhile. So, servers which need to talk to old binaries and need to use these fields need to check both the obsolete versions and the MessageSet version. Sitemap
     */
    obsoleteSitemap?: string | null;
    /**
     * Was odp used in the snippets? DEPRECATED - this is no longer populated as of June 2017.
     */
    odp?: boolean | null;
    /**
     * DEPRECATED If requested, the orion entities
     */
    orionEntities?: Schema$OrionDocEntitiesProto;
    /**
     * Abbreviated bibliographic data from Google Scholar.
     */
    scienceInfo?: Schema$ScienceIndexSignal;
    sectionHeadingAnchorName?: string | null;
    /**
     * If requested, the snippet generator may take note of query items present in an entry in an on-page table-of-contents (i.e. a series of on-page links to named anchors.) If so, these two fields contain the formatted and highlighted entry and the name of the on-page anchor it links to, respectively. This may be used by GWS to show a direct link to that named anchor on the page.
     */
    sectionHeadingText?: string | null;
    /**
     * Did a negative query term match the meta description?
     */
    seenNotTerm?: boolean | null;
    /**
     * DEPRECATED Sentiment snippets
     */
    sentimentSnippets?: Schema$RepositoryAnnotationsMustangSentimentSnippetAnnotations[];
    /**
     * The display name of the document's domain used as the first part of VisUrl, e.g, "Google \> play \> store" is the VisUrl of "https://play.google.com/store/". Wherein, "Google" is site_display_name of the domain "google.com". See go/site-display-name for more details.
     */
    siteDisplayName?: string | null;
    /**
     * Byline date for time sensitive snippets. Most of the time it originates from quality_timebased::SyntacticDate and it is floored to PT midnight.
     */
    snippetBylineDate?: string | null;
    snippetExtraInfo?: Schema$SnippetExtraInfo;
    /**
     * A hash for duplicate detection. Two results with the same content can return different snippets if, for example, one has an ODP entry and the other does not. Gws can use this value reliably to filter duplicates. It is a hash of body only tidbits.
     */
    snippethash?: string | null;
    /**
     * List of bitmaps representing matches to leaf query terms within each of the highlighted snippet text fragments. Consecutive bitmaps correspond to consecutive text fragments. It gets populated iff return_query_snippet_highlight_matches = true. Example: document body section: "This cafe has pet friendly patio." squery: (a (o dog :o pet :syn:general) friendly :o (o restaurant :o cafe :syn:general)) Let's assume the returned snippet text contains the whole document body section where two fragments get highlighted as follows: "This *cafe* has *pet friendly* patio." Then, the returned snippet_highlight_matches_bitmap[] list will have two bitmaps: bitmap[0] = <"cafe" -\> leaf term with index 4\> = {encoded: DenseEncode("00001"), size: 5\} bitmap[1] = <"pet" and "friendly" -\> leaf terms with indexes 1 and 2\> = {encoded: DenseEncode("011"), size: 3\}
     */
    snippetHighlightMatchesBitmap?: Schema$WWWSnippetResponseBitmapPB[];
    /**
     * If requested the page number on which the snippet begins. (Only for documents such as PDFs where page numbers are well-defined.)
     */
    snippetPageNumber?: number | null;
    /**
     * Character counts of snippet prefix, if any. E.g. section heading, list summary, byline date.
     */
    snippetPrefixCharCount?: number | null;
    /**
     * How tokens are rendered in generating snippet.
     */
    snippetRenderedToken?: Schema$MustangSnippetsRenderedToken[];
    /**
     * Records features to analyze titles/snippets in ranklab.
     */
    snippetsRanklabFeatures?: Schema$MustangReposWwwSnippetsSnippetsRanklabFeatures;
    /**
     * This field is never set.
     */
    squeryFingerprint?: string | null;
    /**
     * True if the title length is already adjusted for the browser width. If it is true, GWS needs not truncate the title.
     */
    titleLengthAdjustedForBrowserWidth?: boolean | null;
    /**
     * How tokens are rendered in generating title. Note: In rendering a title, the page title part and the site/host/domain title part can be flipped after initial rendering. The flip, if happend, may not be reflected in this field. That is, this field may contain the tokens in the original, pre-flip, order.
     */
    titleRenderedToken?: Schema$MustangSnippetsRenderedToken[];
    /**
     * Will only be set when `title_use_num_of_chars` is false.
     */
    titleSizeParams?: Schema$TitleSizeParams;
    /**
     * Only for desktop web search. Please refer to Title.keep_original_title_and_populate_truncated_one for more details.
     */
    truncatedTitle?: string | null;
  }
  /**
   * Encoded bitmap.
   */
  export interface Schema$WWWSnippetResponseBitmapPB {
    encoded?: string | null;
    size?: number | null;
  }
  /**
   * Contains information about comment that is posted through a Super Thanks purchase. Next ID: 7
   */
  export interface Schema$YoutubeBackstageSuperVodCommentInfo {
    /**
     * Currency code the user uses to purchase this Super Thanks item.
     */
    currencyCode?: string | null;
    /**
     * The ID of the Super Thanks entitlement. It uniquely identifies a Super Thanks purchase. This field is deprecated in favor of transaction_id, see go/st-deprecate-ent-id.
     */
    entitlementId?: string | null;
    /**
     * Price of Super Thanks item the user purchases in micros.
     */
    priceInMicros?: string | null;
    /**
     * The Super Thanks item the user purchases, it represents price tier.
     */
    superVodItemId?: string | null;
    /**
     * The ID of the Super Thanks transaction. It uniquely identifies a Super Thanks purchase.
     */
    transactionId?: string | null;
    /**
     * Which version of experiment this Super Thanks comment is posted in.
     */
    version?: string | null;
  }
  /**
   * Intended to be simpler to work with than the ExportedStanza it's derived from See documentation: https://g3doc.corp.google.com/company/teams/youtube/community_intelligence/eng_resources/data_sources.md#ministanza Next available: 78
   */
  export interface Schema$YoutubeCommentsClusteringMiniStanza {
    /**
     * TnS Ansible scores map. Keyed by various model names.
     */
    ansibleScores?: {[key: string]: number} | null;
    /**
     * Automod scores map. Keyed by various model names.
     */
    automodScores?: {[key: string]: number} | null;
    /**
     * The blarney stone score.
     */
    blarneyStoneScore?: Schema$YoutubeDistillerBlarneyStoneScores;
    /**
     * The channel this channel discussion comment belongs to. Note that this will match channel_id for such comments.
     */
    channelDiscussionId?: string | null;
    /**
     * The channel of the video this comment belongs to.
     */
    channelId?: string | null;
    /**
     * Channel profile quality scores map. Keyed by various model names.
     */
    channelProfileQualityScores?: {[key: string]: number} | null;
    /**
     * Char entropy of the comment.
     */
    charEntropy?: number | null;
    /**
     * Comment classification mapping all secondary keys to values. E.g. {"joke_v1":0.8, "joke_v2":0.7, "question_v1":0.3\}.
     */
    commentClassification?: {[key: string]: number} | null;
    /**
     * List of pre-defined classification score buckets to which the comment belongs. E.g. satisfaction_v1_percentile_80.
     */
    commentClassificationBuckets?: string[] | null;
    /**
     * Comment classification for ranking mapping all secondary keys to values. E.g. {"joke_v1":0.8, "joke_v2":0.7, "question_v1":0.3\}.
     */
    commentClassificationRanking?: {[key: string]: number} | null;
    /**
     * Whether the comment is on a video, post, or other product.
     */
    commentType?: string | null;
    /**
     * The text content of the comment.
     */
    content?: string | null;
    /**
     * The stanza content last update timestamp, as observed by the server. Note that for many comments older than Nov. 2014 this is unset in the original stanza. MiniStanza tries to be consistent with the original so for such comments it remains unset in MiniStanza. If you use this field you should check has_content_update_timestamp().
     */
    contentUpdateTimestamp?: string | null;
    /**
     * Whether or not this comment is eligible for comment classifier coverage sampling (in Kapla). Refer to go/coverage-monitoring-for-kapla-comment-classifiers for more information.
     */
    coverageSamplingEligible?: boolean | null;
    /**
     * The creation device. Derived from shares:yt_creation_device
     */
    creationDevice?: string | null;
    /**
     * The time when the comment is created.
     */
    creationTimeInSeconds?: string | null;
    /**
     * The language code with extra script details. This is derived from detailed_language_code if it's populated, otherwise the same as language_code. E.g. mr-Latn
     */
    detailedLanguageCode?: string | null;
    /**
     * All distiller engagements like reports and downvotes.
     */
    distillerEngagements?: Schema$AppsPeopleActivityStreamqualityDistillerEngagements;
    /**
     * The qualified comment teaser filters that this comment is eligible for. Refer to go/comment-teaser-design for more information.
     */
    eligibleQualifiedTeaserFilters?: string[] | null;
    /**
     * Comments empirical CTRs.
     */
    empiricalCtrs?: Schema$VideoYoutubeCommentsRankingCTRMetrics;
    /**
     * Fountain Discovery Score, which represents the reputation of the author.
     */
    fds?: number | null;
    /**
     * Indicator for whether there is creator heart on this comment.
     */
    hasCreatorHeart?: boolean | null;
    /**
     * If the comment has a creator reply.
     */
    hasCreatorReply?: boolean | null;
    /**
     * Impersonation scores map. Keyed by secondary key (score type).
     */
    impersonationScores?: {[key: string]: number} | null;
    /**
     * If the author is a channel member (sponsor).
     */
    isAuthorSponsor?: boolean | null;
    /**
     * Whether a comment is from deleted shares. See stanza_restrictions for more specific information and is_publicly_visible for comments which are allowed to be seen by everyone.
     */
    isDeleted?: boolean | null;
    /**
     * Whether the comment is pinned. This is derived from the DestinationStreamDump.
     */
    isPinned?: boolean | null;
    /**
     * If the post is publicly visible.
     */
    isPubliclyVisible?: boolean | null;
    /**
     * Whether the comment is a reply.
     */
    isReply?: boolean | null;
    /**
     * If the comment author is publicly subscribed to the channel.
     */
    isSubscriber?: boolean | null;
    /**
     * Unicode CLDR language code of the segments, as implemented by //depot/google3/java/com/google/i18n/identifiers/LanguageCode.java This is derived from user_content and should be considered the canonical language code of the comment.
     */
    languageCode?: string | null;
    /**
     * The time when last reply is created.
     */
    lastReplyTimestampUsec?: string | null;
    /**
     * Low quality decisions. Keyed by decision types corresponding to secondary keys.
     */
    lowQualityDecisions?: {[key: string]: boolean} | null;
    /**
     * Timed comments for the "mentioned" secondary key.
     */
    mentionedTimestampCommentSecond?: number | null;
    /**
     * Misinfo scores map. Keyed by various model names.
     */
    misinfoScores?: {[key: string]: number} | null;
    /**
     * Number of dislikes the comment has.
     */
    numDislikes?: number | null;
    /**
     * Number of likes the comment has.
     */
    numLikes?: number | null;
    /**
     * Number of different repliers the comment has.
     */
    numRepliers?: number | null;
    /**
     * Number of non-abusive replies the comment has.
     */
    numReplies?: number | null;
    /**
     * Bucketed number of subscribers held by comment author.
     */
    numSubscribersBucket?: number | null;
    /**
     * Offline engagement scores map. Keyed by various model names.
     */
    offlineEngagementScores?: {[key: string]: number} | null;
    /**
     * The parent stanza's stanza_id, empty for top-level posts (non-replies). Prefer is_reply field for checking if a comment is a reply since that is unaffected by surrogatization. For replies to replies, this is the root stanza_id (not guaranteed AFAIK).
     */
    parentId?: string | null;
    /**
     * The post this comment belongs to.
     */
    postId?: string | null;
    /**
     * The language code stored in the KV pair ranking:post_language. This should usually be the same as language_code but is not guaranteed to be identical. The KV pair is needed because ranking can't consume user_content.
     */
    rankingPostLanguage?: string | null;
    /**
     * A textual content for the context.
     */
    segments?: Schema$SocialCommonSegments;
    /**
     * Sensitivity scores map for smart reply sensitivity scores. Keyed by model names. See (g3doc/company/teams/expander/research/conversation/sensitive.md) for more information on sensitivity scores.
     */
    sensitivityScores?: {[key: string]: number} | null;
    /**
     * Sentiment. This omits entity_sentiment and keeps only the polarity, magnitude, and score. Sentiment as currently implemented is not debiased and has limited language coverage. Please read go/comments-sentiment-access before using.
     */
    sentiment?: Schema$YoutubeCommentsSentimentSentiment;
    /**
     * Associated Short Reply video ID if the comment represents a Short Reply. See go/yt-comment-sticker-m2.
     */
    shortReplyVideoId?: string | null;
    /**
     * Smart replies for this comment. Keyed by model names.
     */
    smartReplies?: {
      [
        key: string
      ]: Schema$VideoYoutubeCommentsClassificationProtoYouTubeCommentSmartReply;
    } | null;
    /**
     * Refers to the stanza this data is derived from.
     */
    stanzaId?: string | null;
    /**
     * Contains various restriction information about a stanza.
     */
    stanzaRestrictions?: Schema$SocialStanzaStanzaRestriction[];
    /**
     * The author of the comment
     */
    subject?: Schema$SecurityCredentialsPrincipalProto;
    /**
     * Whether the comment is authored by the creator.
     */
    subjectIsVideoOwner?: boolean | null;
    /**
     * The timestamp (in seconds) when the author subscribed to the channel.
     */
    subscriptionTimestamp?: string | null;
    /**
     * Super Thanks related info if a comment is posted through a Super Thanks purchase.
     */
    superThanksInfo?: Schema$YoutubeBackstageSuperVodCommentInfo;
    /**
     * Comment text embedding.
     */
    textEmbedding?: {
      [key: string]: Schema$YoutubeCommentsRankingYouTubeCommentTextEmbedding;
    } | null;
    /**
     * Text length of the comment.
     */
    textLength?: number | null;
    /**
     * Predicted probability of the comment being flagged based on the text.
     */
    textQualityScores?: Schema$YoutubeCommentsRankingYouTubeCommentTextQualityAnnotation;
    /**
     * Predicted probability of the comment being flagged based on the text. For testing the new annotation process only.
     */
    textQualityScores2?: Schema$YoutubeCommentsRankingYouTubeCommentTextQualityAnnotation;
    /**
     * The video this comment belongs to.
     */
    videoId?: string | null;
    /**
     * Unique video timestamps in seconds sorted by timestamp. This is derived from text Segments, not from a KV. These may exceed the length of the video since that isn't checked at segmentation time. The segmentation rules have changed over time e.g. in the past "10:00 PM" was treated as a timestamp.
     */
    videoTimestamps?: number[] | null;
    /**
     * Word entropy of the comment.
     */
    wordEntropy?: number | null;
    /**
     * The youtube channel id of the comment author.
     */
    ytAuthorChannelId?: string | null;
    /**
     * Existing quality corpus scores.
     */
    ytCommentQualityScore?: number | null;
    ytCommentQualityScore2?: number | null;
    ytCommentQualityScore3?: number | null;
    /**
     * For replies to replies, this contains the parent reply's id. The parent_id field is actually the root stanza_id (not guaranteed AFAIK).
     */
    ytReplyToItemId?: string | null;
  }
  /**
   * Comment text embedding.
   */
  export interface Schema$YoutubeCommentsRankingYouTubeCommentTextEmbedding {
    /**
     * Comment text embedding.
     */
    textEmbedding?: number[] | null;
  }
  /**
   * Text quality scores for a single comment.
   */
  export interface Schema$YoutubeCommentsRankingYouTubeCommentTextQualityAnnotation {
    /**
     * Score produced by the user flag prediction model.
     */
    flagPredictionScore?: number | null;
    /**
     * Version identifier of the flag prediction model.
     */
    flagPredictionVersion?: string | null;
  }
  /**
   * Sentiment information extracted from the annotated content by Goldmine. This mirrors nlp_sentiment.SentimentAnnotation. Next tag: 5.
   */
  export interface Schema$YoutubeCommentsSentimentSentiment {
    entitySentiment?: Schema$YoutubeCommentsSentimentSentimentEntitySentimentAnnotation[];
    /**
     * Total magnitude of the sentiment. A positive number representing the total intensity of sentiment regardless of positive vs negative polarity.
     */
    magnitude?: number | null;
    /**
     * Polarity of the sentiment. Value is between -1.0 and 1.0 inclusive, with larger numbers representing more positive sentiment and negative numbers representing negative sentiment.
     */
    polarity?: number | null;
    /**
     * The average score over sentences. This combines the polarity and magnitude signals into one value. Bounded between -1.0 and 1.0.
     */
    score?: number | null;
  }
  /**
   * An entity level sentiment annotation containing the sentiment values aggregated over all mentions of an entity. Next tag: 7.
   */
  export interface Schema$YoutubeCommentsSentimentSentimentEntitySentimentAnnotation {
    /**
     * The representative entity name. This can be blank for cases when there is no explicit name like "I" or "it". The mentions' tokens can be used to get more details about each entity.
     */
    entityName?: string | null;
    /**
     * Total magnitude of the sentiment.
     */
    magnitude?: number | null;
    mentionSentiment?: Schema$YoutubeCommentsSentimentSentimentEntitySentimentAnnotationMentionSentimentAnnotation[];
    /**
     * MID for this entity, if available.
     */
    mid?: string | null;
    /**
     * Polarity of the sentiment. See above for detail.
     */
    polarity?: number | null;
    /**
     * The per entity score between -1.0 and 1.0. Combines the signal from polarity and magnitude values.
     */
    score?: number | null;
  }
  /**
   * A mention level sentiment annotation containing the sentiment values for a single entity mention. // Next tag: 6.
   */
  export interface Schema$YoutubeCommentsSentimentSentimentEntitySentimentAnnotationMentionSentimentAnnotation {
    /**
     * Token end index in corresponding SAFT document (inclusive).
     */
    endToken?: string | null;
    /**
     * Total magnitude of the sentiment.
     */
    magnitude?: number | null;
    /**
     * Polarity of the sentiment. See above for detail.
     */
    polarity?: number | null;
    /**
     * The per mention score between -1.0 and 1.0. Combines the signal from polarity and magnitude values.
     */
    score?: number | null;
    /**
     * Token start index in corresponding SAFT document.
     */
    startToken?: string | null;
  }
  /**
   * The annotation of a document by a given entity, for a given type of relationship.
   */
  export interface Schema$YoutubeDiscoveryLegosLegosAnnotation {
    /**
     * The entity annotating the document.
     */
    entity?: Schema$YoutubeDiscoveryLegosLegosEntity;
    /**
     * The annotation is a format annotation, i.e. it tells the format of the video.
     */
    format?: Schema$YoutubeDiscoveryLegosLegosFormatRelationship;
    /**
     * The annotation is present in the video. Semantic Legos and Presence Legos naturally overlap and can contain the same entities. However, we do not enforce a strict subset relation.
     */
    present?: Schema$YoutubeDiscoveryLegosLegosPresentRelationship;
    /**
     * The annotation is a semantic annotation, i.e. it tells what the document is about and what the reasons to watch the video are. The annotation should be valid for the complete annotated document, not simply a part of the document such as a video segment.
     */
    semantic?: Schema$YoutubeDiscoveryLegosLegosSemanticRelationship;
    /**
     * The annotation is a taxonomic annotation, i.e. it tells to which class of the Legos taxonomy the document belongs to.
     */
    taxonomic?: Schema$YoutubeDiscoveryLegosLegosTaxonomicRelationship;
  }
  /**
   * A collection of annotations returned by Legos for a document.
   */
  export interface Schema$YoutubeDiscoveryLegosLegosAnnotations {
    /**
     * The annotations for this document. For a given (entity, relationship type) pair, there will be at most one annotation. The list has no particular order.
     */
    annotations?: Schema$YoutubeDiscoveryLegosLegosAnnotation[];
  }
  /**
   * The identification of a Knowledge Graph (KG) entity in Legos.
   */
  export interface Schema$YoutubeDiscoveryLegosLegosEntity {
    /**
     * DO NOT USE THIS FIELD. The entity name here can be random garbage and when it's actually a name it will be in a random language (most of the time English but not always). This field is going away soon. For a replacement you should probably use the following RPC: cs/symbol:Ytpedia.GetNames please read go/ytks-calling details on how to call it and don't hesitate to write to us for help with this (or in any case before starting to send real traffic to us) at: g/yt-knowledge-service
     */
    debugName?: string | null;
    /**
     * The ID of the Knowledge Graph entity. Note: this is the primary ID at generation time. See https://sites.google.com/a/google.com/knowledge-graph/data/primary_ids
     */
    kgId?: string | null;
  }
  /**
   * Description of a format Legos annotation. http://go/legos/formats.md
   */
  export interface Schema$YoutubeDiscoveryLegosLegosFormatRelationship {
    /**
     * Format classification confidence score, in the 0-1 range. A score of XX% means that we expect at least XX% of the documents annotated with this format to be correctly annotated; i.e. thresholding at XX% yields a precision of at least XX%.
     */
    confidence?: number | null;
  }
  /**
   * Description of a present Legos annotation.
   */
  export interface Schema$YoutubeDiscoveryLegosLegosPresentRelationship {
    /**
     * Confidence score. Thresholding at the confidence score at 0.XX yields annotations of precision of at least XX%.
     */
    confidence?: number | null;
    /**
     * Extra context about how the entity relates to the document. Typically vertical-specific. Please refrain from populating this field as we're working on migrating most of the use cases to the LegosEntity proto so clients don't have to scan all relationships to know which annotations they may be interested in.
     */
    contexts?: Schema$YoutubeDiscoveryLegosLegosSemanticRelationshipContext[];
  }
  /**
   * Description of a semantic Legos annotation. http://go/legos/project.md#semantic-intent-annotations
   */
  export interface Schema$YoutubeDiscoveryLegosLegosSemanticRelationship {
    /**
     * Confidence score. Thresholding at the confidence score at 0.XX yields annotations of precision of at least XX%. Only filled in the intent definition Legos. Please use IsSemanticAnnotationAtConfidenceThreshold() from video/youtube/discovery/legos/annotations/public/legos_annotations_util.h to obtain only intent definition Legos. For more information on the migration please look at go/legos-intent-migration.
     */
    confidence?: number | null;
    contexts?: Schema$YoutubeDiscoveryLegosLegosSemanticRelationshipContext[];
    /**
     * DEPRECATED. Please use confidence instead. Will be set to the same value as confidence in early January 2019. See go/legos-intent-migration for more information.
     */
    topicalityScore?: number | null;
  }
  /**
   * Extra context about how the entity relates to the document. Typically vertical-specific.
   */
  export interface Schema$YoutubeDiscoveryLegosLegosSemanticRelationshipContext {
    /**
     * The subject of the semantic relationship. This is set when the relationship is derived from some other entity. The exact meaning of this field depends on the ContextType.
     */
    subject?: Schema$YoutubeDiscoveryLegosLegosEntity;
    /**
     * The type of semantic relationship between the document and the entity. This allows one to retrieve vertical-specific fine-grained information about the document.
     */
    type?: string | null;
  }
  /**
   * Description of a taxonomic Legos annotation. http://go/legos/project.md#taxonomy-annotations
   */
  export interface Schema$YoutubeDiscoveryLegosLegosTaxonomicRelationship {
    /**
     * Set to true if the taxonomy annotation is redundant amongst the set of other taxonomy annotations for the same document, i.e. if there is at least one other taxonomy annotation that is a child node of this one.
     */
    isRedundant?: boolean | null;
    /**
     * A score, in the 0-1 range, used to rank taxonomy annotations.
     */
    score?: number | null;
  }
  /**
   * Blarney Stone classification scores: go/blarneystone Next available ID: 6
   */
  export interface Schema$YoutubeDistillerBlarneyStoneScores {
    familySafeV1Score?: number | null;
    mildHateHarassV1Score?: number | null;
    mildHateHarassV2Score?: number | null;
    /**
     * The scores corresponds to each of the abe_models in /cns/yk-d/home/blarneystone/model0/config-2015-11-20.pbtxt
     */
    modelScores?: Schema$YoutubeDistillerModelScore[];
    severeHateHarassV1Score?: number | null;
  }
  /**
   * Next available ID: 4
   */
  export interface Schema$YoutubeDistillerModelScore {
    /**
     * The classifier trained with tensor flow.
     */
    classifier?: string | null;
    /**
     * The model trained with dist belief [going to be deprecated].
     */
    model?: string | null;
    score?: number | null;
  }

  export class Resource$Projects {
    context: APIRequestContext;
    locations: Resource$Projects$Locations;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.locations = new Resource$Projects$Locations(this.context);
    }

    /**
     * Gets the access control policy for a resource. Returns NOT_FOUND error if the resource does not exist. Returns an empty policy if the resource exists but does not have a policy set.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    fetchAcl(
      params: Params$Resource$Projects$Fetchacl,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    fetchAcl(
      params?: Params$Resource$Projects$Fetchacl,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>;
    fetchAcl(
      params: Params$Resource$Projects$Fetchacl,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    fetchAcl(
      params: Params$Resource$Projects$Fetchacl,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>
    ): void;
    fetchAcl(
      params: Params$Resource$Projects$Fetchacl,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>
    ): void;
    fetchAcl(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>
    ): void;
    fetchAcl(
      paramsOrCallback?:
        | Params$Resource$Projects$Fetchacl
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Fetchacl;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Fetchacl;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+resource}:fetchAcl').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['resource'],
        pathParams: ['resource'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>(
          parameters
        );
      }
    }

    /**
     * Sets the access control policy for a resource. Replaces any existing policy.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    setAcl(
      params: Params$Resource$Projects$Setacl,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    setAcl(
      params?: Params$Resource$Projects$Setacl,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1SetAclResponse>;
    setAcl(
      params: Params$Resource$Projects$Setacl,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    setAcl(
      params: Params$Resource$Projects$Setacl,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SetAclResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SetAclResponse>
    ): void;
    setAcl(
      params: Params$Resource$Projects$Setacl,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SetAclResponse>
    ): void;
    setAcl(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SetAclResponse>
    ): void;
    setAcl(
      paramsOrCallback?:
        | Params$Resource$Projects$Setacl
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SetAclResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SetAclResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SetAclResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1SetAclResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback || {}) as Params$Resource$Projects$Setacl;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Setacl;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+resource}:setAcl').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['resource'],
        pathParams: ['resource'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1SetAclResponse>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1SetAclResponse>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Projects$Fetchacl
    extends StandardParameters {
    /**
     * Required. REQUIRED: The resource for which the policy is being requested. Format for document: projects/{project_number\}/locations/{location\}/documents/{document_id\}. Format for collection: projects/{project_number\}/locations/{location\}/collections/{collection_id\}. Format for project: projects/{project_number\}.
     */
    resource?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1FetchAclRequest;
  }
  export interface Params$Resource$Projects$Setacl extends StandardParameters {
    /**
     * Required. REQUIRED: The resource for which the policy is being requested. Format for document: projects/{project_number\}/locations/{location\}/documents/{document_id\}. Format for collection: projects/{project_number\}/locations/{location\}/collections/{collection_id\}. Format for project: projects/{project_number\}.
     */
    resource?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1SetAclRequest;
  }

  export class Resource$Projects$Locations {
    context: APIRequestContext;
    documents: Resource$Projects$Locations$Documents;
    documentSchemas: Resource$Projects$Locations$Documentschemas;
    operations: Resource$Projects$Locations$Operations;
    ruleSets: Resource$Projects$Locations$Rulesets;
    synonymSets: Resource$Projects$Locations$Synonymsets;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.documents = new Resource$Projects$Locations$Documents(this.context);
      this.documentSchemas = new Resource$Projects$Locations$Documentschemas(
        this.context
      );
      this.operations = new Resource$Projects$Locations$Operations(
        this.context
      );
      this.ruleSets = new Resource$Projects$Locations$Rulesets(this.context);
      this.synonymSets = new Resource$Projects$Locations$Synonymsets(
        this.context
      );
    }

    /**
     * Get the project status.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    getStatus(
      params: Params$Resource$Projects$Locations$Getstatus,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    getStatus(
      params?: Params$Resource$Projects$Locations$Getstatus,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1ProjectStatus>;
    getStatus(
      params: Params$Resource$Projects$Locations$Getstatus,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    getStatus(
      params: Params$Resource$Projects$Locations$Getstatus,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ProjectStatus>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ProjectStatus>
    ): void;
    getStatus(
      params: Params$Resource$Projects$Locations$Getstatus,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ProjectStatus>
    ): void;
    getStatus(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ProjectStatus>
    ): void;
    getStatus(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Getstatus
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ProjectStatus>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ProjectStatus>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ProjectStatus>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1ProjectStatus>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Getstatus;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Getstatus;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+location}:getStatus').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['location'],
        pathParams: ['location'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1ProjectStatus>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1ProjectStatus>(
          parameters
        );
      }
    }

    /**
     * Provisions resources for given tenant project. Returns a long running operation.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    initialize(
      params: Params$Resource$Projects$Locations$Initialize,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    initialize(
      params?: Params$Resource$Projects$Locations$Initialize,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleLongrunningOperation>;
    initialize(
      params: Params$Resource$Projects$Locations$Initialize,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    initialize(
      params: Params$Resource$Projects$Locations$Initialize,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>,
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    initialize(
      params: Params$Resource$Projects$Locations$Initialize,
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    initialize(
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    initialize(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Initialize
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleLongrunningOperation>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Initialize;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Initialize;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+location}:initialize').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['location'],
        pathParams: ['location'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleLongrunningOperation>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleLongrunningOperation>(parameters);
      }
    }

    /**
     * Run a predefined pipeline.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    runPipeline(
      params: Params$Resource$Projects$Locations$Runpipeline,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    runPipeline(
      params?: Params$Resource$Projects$Locations$Runpipeline,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleLongrunningOperation>;
    runPipeline(
      params: Params$Resource$Projects$Locations$Runpipeline,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    runPipeline(
      params: Params$Resource$Projects$Locations$Runpipeline,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>,
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    runPipeline(
      params: Params$Resource$Projects$Locations$Runpipeline,
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    runPipeline(
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    runPipeline(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Runpipeline
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleLongrunningOperation>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Runpipeline;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Runpipeline;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}:runPipeline').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleLongrunningOperation>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleLongrunningOperation>(parameters);
      }
    }
  }

  export interface Params$Resource$Projects$Locations$Getstatus
    extends StandardParameters {
    /**
     * Required. The location to be queried Format: projects/{project_number\}/locations/{location\}.
     */
    location?: string;
  }
  export interface Params$Resource$Projects$Locations$Initialize
    extends StandardParameters {
    /**
     * Required. The location to be initialized Format: projects/{project_number\}/locations/{location\}.
     */
    location?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1InitializeProjectRequest;
  }
  export interface Params$Resource$Projects$Locations$Runpipeline
    extends StandardParameters {
    /**
     * Required. The resource name which owns the resources of the pipeline. Format: projects/{project_number\}/locations/{location\}.
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1RunPipelineRequest;
  }

  export class Resource$Projects$Locations$Documents {
    context: APIRequestContext;
    documentLinks: Resource$Projects$Locations$Documents$Documentlinks;
    referenceId: Resource$Projects$Locations$Documents$Referenceid;
    constructor(context: APIRequestContext) {
      this.context = context;
      this.documentLinks =
        new Resource$Projects$Locations$Documents$Documentlinks(this.context);
      this.referenceId = new Resource$Projects$Locations$Documents$Referenceid(
        this.context
      );
    }

    /**
     * Creates a document.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    create(
      params: Params$Resource$Projects$Locations$Documents$Create,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    create(
      params?: Params$Resource$Projects$Locations$Documents$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1CreateDocumentResponse>;
    create(
      params: Params$Resource$Projects$Locations$Documents$Create,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    create(
      params: Params$Resource$Projects$Locations$Documents$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1CreateDocumentResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1CreateDocumentResponse>
    ): void;
    create(
      params: Params$Resource$Projects$Locations$Documents$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1CreateDocumentResponse>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1CreateDocumentResponse>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documents$Create
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1CreateDocumentResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1CreateDocumentResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1CreateDocumentResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1CreateDocumentResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documents$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Documents$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/documents').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1CreateDocumentResponse>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1CreateDocumentResponse>(
          parameters
        );
      }
    }

    /**
     * Deletes a document. Returns NOT_FOUND if the document does not exist.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    delete(
      params: Params$Resource$Projects$Locations$Documents$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Projects$Locations$Documents$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleProtobufEmpty>;
    delete(
      params: Params$Resource$Projects$Locations$Documents$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Projects$Locations$Documents$Delete,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    delete(
      params: Params$Resource$Projects$Locations$Documents$Delete,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    delete(callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documents$Delete
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleProtobufEmpty>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documents$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Documents$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}:delete').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleProtobufEmpty>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleProtobufEmpty>(parameters);
      }
    }

    /**
     * Gets the access control policy for a resource. Returns NOT_FOUND error if the resource does not exist. Returns an empty policy if the resource exists but does not have a policy set.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    fetchAcl(
      params: Params$Resource$Projects$Locations$Documents$Fetchacl,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    fetchAcl(
      params?: Params$Resource$Projects$Locations$Documents$Fetchacl,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>;
    fetchAcl(
      params: Params$Resource$Projects$Locations$Documents$Fetchacl,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    fetchAcl(
      params: Params$Resource$Projects$Locations$Documents$Fetchacl,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>
    ): void;
    fetchAcl(
      params: Params$Resource$Projects$Locations$Documents$Fetchacl,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>
    ): void;
    fetchAcl(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>
    ): void;
    fetchAcl(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documents$Fetchacl
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documents$Fetchacl;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Documents$Fetchacl;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+resource}:fetchAcl').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['resource'],
        pathParams: ['resource'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1FetchAclResponse>(
          parameters
        );
      }
    }

    /**
     * Gets a document. Returns NOT_FOUND if the document does not exist.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    get(
      params: Params$Resource$Projects$Locations$Documents$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Projects$Locations$Documents$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1Document>;
    get(
      params: Params$Resource$Projects$Locations$Documents$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Projects$Locations$Documents$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
    ): void;
    get(
      params: Params$Resource$Projects$Locations$Documents$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documents$Get
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1Document>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documents$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Documents$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}:get').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1Document>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1Document>(
          parameters
        );
      }
    }

    /**
     * Return all source document-links from the document.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    linkedSources(
      params: Params$Resource$Projects$Locations$Documents$Linkedsources,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    linkedSources(
      params?: Params$Resource$Projects$Locations$Documents$Linkedsources,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1ListLinkedSourcesResponse>;
    linkedSources(
      params: Params$Resource$Projects$Locations$Documents$Linkedsources,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    linkedSources(
      params: Params$Resource$Projects$Locations$Documents$Linkedsources,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListLinkedSourcesResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListLinkedSourcesResponse>
    ): void;
    linkedSources(
      params: Params$Resource$Projects$Locations$Documents$Linkedsources,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListLinkedSourcesResponse>
    ): void;
    linkedSources(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListLinkedSourcesResponse>
    ): void;
    linkedSources(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documents$Linkedsources
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListLinkedSourcesResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListLinkedSourcesResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListLinkedSourcesResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1ListLinkedSourcesResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documents$Linkedsources;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params =
          {} as Params$Resource$Projects$Locations$Documents$Linkedsources;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/linkedSources').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1ListLinkedSourcesResponse>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1ListLinkedSourcesResponse>(
          parameters
        );
      }
    }

    /**
     * Return all target document-links from the document.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    linkedTargets(
      params: Params$Resource$Projects$Locations$Documents$Linkedtargets,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    linkedTargets(
      params?: Params$Resource$Projects$Locations$Documents$Linkedtargets,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1ListLinkedTargetsResponse>;
    linkedTargets(
      params: Params$Resource$Projects$Locations$Documents$Linkedtargets,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    linkedTargets(
      params: Params$Resource$Projects$Locations$Documents$Linkedtargets,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListLinkedTargetsResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListLinkedTargetsResponse>
    ): void;
    linkedTargets(
      params: Params$Resource$Projects$Locations$Documents$Linkedtargets,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListLinkedTargetsResponse>
    ): void;
    linkedTargets(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListLinkedTargetsResponse>
    ): void;
    linkedTargets(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documents$Linkedtargets
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListLinkedTargetsResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListLinkedTargetsResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListLinkedTargetsResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1ListLinkedTargetsResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documents$Linkedtargets;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params =
          {} as Params$Resource$Projects$Locations$Documents$Linkedtargets;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/linkedTargets').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1ListLinkedTargetsResponse>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1ListLinkedTargetsResponse>(
          parameters
        );
      }
    }

    /**
     * Lock the document so the document cannot be updated by other users.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    lock(
      params: Params$Resource$Projects$Locations$Documents$Lock,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    lock(
      params?: Params$Resource$Projects$Locations$Documents$Lock,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1Document>;
    lock(
      params: Params$Resource$Projects$Locations$Documents$Lock,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    lock(
      params: Params$Resource$Projects$Locations$Documents$Lock,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
    ): void;
    lock(
      params: Params$Resource$Projects$Locations$Documents$Lock,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
    ): void;
    lock(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
    ): void;
    lock(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documents$Lock
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1Document>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documents$Lock;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Documents$Lock;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}:lock').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1Document>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1Document>(
          parameters
        );
      }
    }

    /**
     * Updates a document. Returns INVALID_ARGUMENT if the name of the document is non-empty and does not equal the existing name.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    patch(
      params: Params$Resource$Projects$Locations$Documents$Patch,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    patch(
      params?: Params$Resource$Projects$Locations$Documents$Patch,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>;
    patch(
      params: Params$Resource$Projects$Locations$Documents$Patch,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    patch(
      params: Params$Resource$Projects$Locations$Documents$Patch,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>
    ): void;
    patch(
      params: Params$Resource$Projects$Locations$Documents$Patch,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>
    ): void;
    patch(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>
    ): void;
    patch(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documents$Patch
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documents$Patch;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Documents$Patch;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>(
          parameters
        );
      }
    }

    /**
     * Searches for documents using provided SearchDocumentsRequest. This call only returns documents that the caller has permission to search against.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    search(
      params: Params$Resource$Projects$Locations$Documents$Search,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    search(
      params?: Params$Resource$Projects$Locations$Documents$Search,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1SearchDocumentsResponse>;
    search(
      params: Params$Resource$Projects$Locations$Documents$Search,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    search(
      params: Params$Resource$Projects$Locations$Documents$Search,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SearchDocumentsResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SearchDocumentsResponse>
    ): void;
    search(
      params: Params$Resource$Projects$Locations$Documents$Search,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SearchDocumentsResponse>
    ): void;
    search(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SearchDocumentsResponse>
    ): void;
    search(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documents$Search
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SearchDocumentsResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SearchDocumentsResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SearchDocumentsResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1SearchDocumentsResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documents$Search;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Documents$Search;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/documents:search').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1SearchDocumentsResponse>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1SearchDocumentsResponse>(
          parameters
        );
      }
    }

    /**
     * Sets the access control policy for a resource. Replaces any existing policy.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    setAcl(
      params: Params$Resource$Projects$Locations$Documents$Setacl,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    setAcl(
      params?: Params$Resource$Projects$Locations$Documents$Setacl,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1SetAclResponse>;
    setAcl(
      params: Params$Resource$Projects$Locations$Documents$Setacl,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    setAcl(
      params: Params$Resource$Projects$Locations$Documents$Setacl,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SetAclResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SetAclResponse>
    ): void;
    setAcl(
      params: Params$Resource$Projects$Locations$Documents$Setacl,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SetAclResponse>
    ): void;
    setAcl(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SetAclResponse>
    ): void;
    setAcl(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documents$Setacl
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SetAclResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SetAclResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SetAclResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1SetAclResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documents$Setacl;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Documents$Setacl;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+resource}:setAcl').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['resource'],
        pathParams: ['resource'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1SetAclResponse>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1SetAclResponse>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Projects$Locations$Documents$Create
    extends StandardParameters {
    /**
     * Required. The parent name. Format: projects/{project_number\}/locations/{location\}.
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1CreateDocumentRequest;
  }
  export interface Params$Resource$Projects$Locations$Documents$Delete
    extends StandardParameters {
    /**
     * Required. The name of the document to delete. Format: projects/{project_number\}/locations/{location\}/documents/{document_id\} or projects/{project_number\}/locations/{location\}/documents/referenceId/{reference_id\}.
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1DeleteDocumentRequest;
  }
  export interface Params$Resource$Projects$Locations$Documents$Fetchacl
    extends StandardParameters {
    /**
     * Required. REQUIRED: The resource for which the policy is being requested. Format for document: projects/{project_number\}/locations/{location\}/documents/{document_id\}. Format for collection: projects/{project_number\}/locations/{location\}/collections/{collection_id\}. Format for project: projects/{project_number\}.
     */
    resource?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1FetchAclRequest;
  }
  export interface Params$Resource$Projects$Locations$Documents$Get
    extends StandardParameters {
    /**
     * Required. The name of the document to retrieve. Format: projects/{project_number\}/locations/{location\}/documents/{document_id\} or projects/{project_number\}/locations/{location\}/documents/referenceId/{reference_id\}.
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1GetDocumentRequest;
  }
  export interface Params$Resource$Projects$Locations$Documents$Linkedsources
    extends StandardParameters {
    /**
     * Required. The name of the document, for which all source links are returned. Format: projects/{project_number\}/locations/{location\}/documents/{source_document_id\}.
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1ListLinkedSourcesRequest;
  }
  export interface Params$Resource$Projects$Locations$Documents$Linkedtargets
    extends StandardParameters {
    /**
     * Required. The name of the document, for which all target links are returned. Format: projects/{project_number\}/locations/{location\}/documents/{target_document_id\}.
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1ListLinkedTargetsRequest;
  }
  export interface Params$Resource$Projects$Locations$Documents$Lock
    extends StandardParameters {
    /**
     * Required. The name of the document to lock. Format: projects/{project_number\}/locations/{location\}/documents/{document\}.
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1LockDocumentRequest;
  }
  export interface Params$Resource$Projects$Locations$Documents$Patch
    extends StandardParameters {
    /**
     * Required. The name of the document to update. Format: projects/{project_number\}/locations/{location\}/documents/{document_id\} or projects/{project_number\}/locations/{location\}/documents/referenceId/{reference_id\}.
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1UpdateDocumentRequest;
  }
  export interface Params$Resource$Projects$Locations$Documents$Search
    extends StandardParameters {
    /**
     * Required. The parent, which owns this collection of documents. Format: projects/{project_number\}/locations/{location\}.
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1SearchDocumentsRequest;
  }
  export interface Params$Resource$Projects$Locations$Documents$Setacl
    extends StandardParameters {
    /**
     * Required. REQUIRED: The resource for which the policy is being requested. Format for document: projects/{project_number\}/locations/{location\}/documents/{document_id\}. Format for collection: projects/{project_number\}/locations/{location\}/collections/{collection_id\}. Format for project: projects/{project_number\}.
     */
    resource?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1SetAclRequest;
  }

  export class Resource$Projects$Locations$Documents$Documentlinks {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * Create a link between a source document and a target document.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    create(
      params: Params$Resource$Projects$Locations$Documents$Documentlinks$Create,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    create(
      params?: Params$Resource$Projects$Locations$Documents$Documentlinks$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1DocumentLink>;
    create(
      params: Params$Resource$Projects$Locations$Documents$Documentlinks$Create,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    create(
      params: Params$Resource$Projects$Locations$Documents$Documentlinks$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentLink>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentLink>
    ): void;
    create(
      params: Params$Resource$Projects$Locations$Documents$Documentlinks$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentLink>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentLink>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documents$Documentlinks$Create
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentLink>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentLink>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentLink>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1DocumentLink>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documents$Documentlinks$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params =
          {} as Params$Resource$Projects$Locations$Documents$Documentlinks$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/documentLinks').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1DocumentLink>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1DocumentLink>(
          parameters
        );
      }
    }

    /**
     * Remove the link between the source and target documents.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    delete(
      params: Params$Resource$Projects$Locations$Documents$Documentlinks$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Projects$Locations$Documents$Documentlinks$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleProtobufEmpty>;
    delete(
      params: Params$Resource$Projects$Locations$Documents$Documentlinks$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Projects$Locations$Documents$Documentlinks$Delete,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    delete(
      params: Params$Resource$Projects$Locations$Documents$Documentlinks$Delete,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    delete(callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documents$Documentlinks$Delete
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleProtobufEmpty>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documents$Documentlinks$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params =
          {} as Params$Resource$Projects$Locations$Documents$Documentlinks$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}:delete').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleProtobufEmpty>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleProtobufEmpty>(parameters);
      }
    }
  }

  export interface Params$Resource$Projects$Locations$Documents$Documentlinks$Create
    extends StandardParameters {
    /**
     * Required. Parent of the document-link to be created. parent of document-link should be a document. Format: projects/{project_number\}/locations/{location\}/documents/{source_document_id\}.
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1CreateDocumentLinkRequest;
  }
  export interface Params$Resource$Projects$Locations$Documents$Documentlinks$Delete
    extends StandardParameters {
    /**
     * Required. The name of the document-link to be deleted. Format: projects/{project_number\}/locations/{location\}/documents/{source_document_id\}/documentLinks/{document_link_id\}.
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1DeleteDocumentLinkRequest;
  }

  export class Resource$Projects$Locations$Documents$Referenceid {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * Deletes a document. Returns NOT_FOUND if the document does not exist.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    delete(
      params: Params$Resource$Projects$Locations$Documents$Referenceid$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Projects$Locations$Documents$Referenceid$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleProtobufEmpty>;
    delete(
      params: Params$Resource$Projects$Locations$Documents$Referenceid$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Projects$Locations$Documents$Referenceid$Delete,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    delete(
      params: Params$Resource$Projects$Locations$Documents$Referenceid$Delete,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    delete(callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documents$Referenceid$Delete
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleProtobufEmpty>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documents$Referenceid$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params =
          {} as Params$Resource$Projects$Locations$Documents$Referenceid$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}:delete').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleProtobufEmpty>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleProtobufEmpty>(parameters);
      }
    }

    /**
     * Gets a document. Returns NOT_FOUND if the document does not exist.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    get(
      params: Params$Resource$Projects$Locations$Documents$Referenceid$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Projects$Locations$Documents$Referenceid$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1Document>;
    get(
      params: Params$Resource$Projects$Locations$Documents$Referenceid$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Projects$Locations$Documents$Referenceid$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
    ): void;
    get(
      params: Params$Resource$Projects$Locations$Documents$Referenceid$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documents$Referenceid$Get
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1Document>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1Document>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documents$Referenceid$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params =
          {} as Params$Resource$Projects$Locations$Documents$Referenceid$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}:get').replace(/([^:]\/)\/+/g, '$1'),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1Document>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1Document>(
          parameters
        );
      }
    }

    /**
     * Updates a document. Returns INVALID_ARGUMENT if the name of the document is non-empty and does not equal the existing name.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    patch(
      params: Params$Resource$Projects$Locations$Documents$Referenceid$Patch,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    patch(
      params?: Params$Resource$Projects$Locations$Documents$Referenceid$Patch,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>;
    patch(
      params: Params$Resource$Projects$Locations$Documents$Referenceid$Patch,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    patch(
      params: Params$Resource$Projects$Locations$Documents$Referenceid$Patch,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>
    ): void;
    patch(
      params: Params$Resource$Projects$Locations$Documents$Referenceid$Patch,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>
    ): void;
    patch(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>
    ): void;
    patch(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documents$Referenceid$Patch
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documents$Referenceid$Patch;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params =
          {} as Params$Resource$Projects$Locations$Documents$Referenceid$Patch;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1UpdateDocumentResponse>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Projects$Locations$Documents$Referenceid$Delete
    extends StandardParameters {
    /**
     * Required. The name of the document to delete. Format: projects/{project_number\}/locations/{location\}/documents/{document_id\} or projects/{project_number\}/locations/{location\}/documents/referenceId/{reference_id\}.
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1DeleteDocumentRequest;
  }
  export interface Params$Resource$Projects$Locations$Documents$Referenceid$Get
    extends StandardParameters {
    /**
     * Required. The name of the document to retrieve. Format: projects/{project_number\}/locations/{location\}/documents/{document_id\} or projects/{project_number\}/locations/{location\}/documents/referenceId/{reference_id\}.
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1GetDocumentRequest;
  }
  export interface Params$Resource$Projects$Locations$Documents$Referenceid$Patch
    extends StandardParameters {
    /**
     * Required. The name of the document to update. Format: projects/{project_number\}/locations/{location\}/documents/{document_id\} or projects/{project_number\}/locations/{location\}/documents/referenceId/{reference_id\}.
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1UpdateDocumentRequest;
  }

  export class Resource$Projects$Locations$Documentschemas {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * Creates a document schema.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    create(
      params: Params$Resource$Projects$Locations$Documentschemas$Create,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    create(
      params?: Params$Resource$Projects$Locations$Documentschemas$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1DocumentSchema>;
    create(
      params: Params$Resource$Projects$Locations$Documentschemas$Create,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    create(
      params: Params$Resource$Projects$Locations$Documentschemas$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
    ): void;
    create(
      params: Params$Resource$Projects$Locations$Documentschemas$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documentschemas$Create
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documentschemas$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params =
          {} as Params$Resource$Projects$Locations$Documentschemas$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/documentSchemas').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1DocumentSchema>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1DocumentSchema>(
          parameters
        );
      }
    }

    /**
     * Deletes a document schema. Returns NOT_FOUND if the document schema does not exist. Returns BAD_REQUEST if the document schema has documents depending on it.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    delete(
      params: Params$Resource$Projects$Locations$Documentschemas$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Projects$Locations$Documentschemas$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleProtobufEmpty>;
    delete(
      params: Params$Resource$Projects$Locations$Documentschemas$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Projects$Locations$Documentschemas$Delete,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    delete(
      params: Params$Resource$Projects$Locations$Documentschemas$Delete,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    delete(callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documentschemas$Delete
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleProtobufEmpty>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documentschemas$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params =
          {} as Params$Resource$Projects$Locations$Documentschemas$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleProtobufEmpty>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleProtobufEmpty>(parameters);
      }
    }

    /**
     * Gets a document schema. Returns NOT_FOUND if the document schema does not exist.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    get(
      params: Params$Resource$Projects$Locations$Documentschemas$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Projects$Locations$Documentschemas$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1DocumentSchema>;
    get(
      params: Params$Resource$Projects$Locations$Documentschemas$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Projects$Locations$Documentschemas$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
    ): void;
    get(
      params: Params$Resource$Projects$Locations$Documentschemas$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documentschemas$Get
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documentschemas$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Documentschemas$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1DocumentSchema>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1DocumentSchema>(
          parameters
        );
      }
    }

    /**
     * Lists document schemas.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    list(
      params: Params$Resource$Projects$Locations$Documentschemas$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Projects$Locations$Documentschemas$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1ListDocumentSchemasResponse>;
    list(
      params: Params$Resource$Projects$Locations$Documentschemas$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Projects$Locations$Documentschemas$List,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListDocumentSchemasResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListDocumentSchemasResponse>
    ): void;
    list(
      params: Params$Resource$Projects$Locations$Documentschemas$List,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListDocumentSchemasResponse>
    ): void;
    list(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListDocumentSchemasResponse>
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documentschemas$List
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListDocumentSchemasResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListDocumentSchemasResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListDocumentSchemasResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1ListDocumentSchemasResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documentschemas$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Documentschemas$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/documentSchemas').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1ListDocumentSchemasResponse>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1ListDocumentSchemasResponse>(
          parameters
        );
      }
    }

    /**
     * Updates a Document Schema. Returns INVALID_ARGUMENT if the name of the Document Schema is non-empty and does not equal the existing name. Supports only appending new properties, adding new ENUM possible values, and updating the EnumTypeOptions.validation_check_disabled flag for ENUM possible values. Updating existing properties will result into INVALID_ARGUMENT.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    patch(
      params: Params$Resource$Projects$Locations$Documentschemas$Patch,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    patch(
      params?: Params$Resource$Projects$Locations$Documentschemas$Patch,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1DocumentSchema>;
    patch(
      params: Params$Resource$Projects$Locations$Documentschemas$Patch,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    patch(
      params: Params$Resource$Projects$Locations$Documentschemas$Patch,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
    ): void;
    patch(
      params: Params$Resource$Projects$Locations$Documentschemas$Patch,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
    ): void;
    patch(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
    ): void;
    patch(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Documentschemas$Patch
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1DocumentSchema>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Documentschemas$Patch;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Documentschemas$Patch;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1DocumentSchema>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1DocumentSchema>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Projects$Locations$Documentschemas$Create
    extends StandardParameters {
    /**
     * Required. The parent name.
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1DocumentSchema;
  }
  export interface Params$Resource$Projects$Locations$Documentschemas$Delete
    extends StandardParameters {
    /**
     * Required. The name of the document schema to delete.
     */
    name?: string;
  }
  export interface Params$Resource$Projects$Locations$Documentschemas$Get
    extends StandardParameters {
    /**
     * Required. The name of the document schema to retrieve.
     */
    name?: string;
  }
  export interface Params$Resource$Projects$Locations$Documentschemas$List
    extends StandardParameters {
    /**
     * The maximum number of document schemas to return. The service may return fewer than this value. If unspecified, at most 50 document schemas will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
     */
    pageSize?: number;
    /**
     * A page token, received from a previous `ListDocumentSchemas` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListDocumentSchemas` must match the call that provided the page token.
     */
    pageToken?: string;
    /**
     * Required. The parent, which owns this collection of document schemas. Format: projects/{project_number\}/locations/{location\}.
     */
    parent?: string;
  }
  export interface Params$Resource$Projects$Locations$Documentschemas$Patch
    extends StandardParameters {
    /**
     * Required. The name of the document schema to update. Format: projects/{project_number\}/locations/{location\}/documentSchemas/{document_schema_id\}.
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1UpdateDocumentSchemaRequest;
  }

  export class Resource$Projects$Locations$Operations {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    get(
      params: Params$Resource$Projects$Locations$Operations$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Projects$Locations$Operations$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleLongrunningOperation>;
    get(
      params: Params$Resource$Projects$Locations$Operations$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Projects$Locations$Operations$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>,
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    get(
      params: Params$Resource$Projects$Locations$Operations$Get,
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleLongrunningOperation>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Operations$Get
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleLongrunningOperation>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleLongrunningOperation>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Operations$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Operations$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleLongrunningOperation>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleLongrunningOperation>(parameters);
      }
    }
  }

  export interface Params$Resource$Projects$Locations$Operations$Get
    extends StandardParameters {
    /**
     * The name of the operation resource.
     */
    name?: string;
  }

  export class Resource$Projects$Locations$Rulesets {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * Creates a ruleset.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    create(
      params: Params$Resource$Projects$Locations$Rulesets$Create,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    create(
      params?: Params$Resource$Projects$Locations$Rulesets$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1RuleSet>;
    create(
      params: Params$Resource$Projects$Locations$Rulesets$Create,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    create(
      params: Params$Resource$Projects$Locations$Rulesets$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
    ): void;
    create(
      params: Params$Resource$Projects$Locations$Rulesets$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Rulesets$Create
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1RuleSet>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Rulesets$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Rulesets$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/ruleSets').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1RuleSet>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1RuleSet>(
          parameters
        );
      }
    }

    /**
     * Deletes a ruleset. Returns NOT_FOUND if the document does not exist.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    delete(
      params: Params$Resource$Projects$Locations$Rulesets$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Projects$Locations$Rulesets$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleProtobufEmpty>;
    delete(
      params: Params$Resource$Projects$Locations$Rulesets$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Projects$Locations$Rulesets$Delete,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    delete(
      params: Params$Resource$Projects$Locations$Rulesets$Delete,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    delete(callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Rulesets$Delete
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleProtobufEmpty>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Rulesets$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Rulesets$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleProtobufEmpty>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleProtobufEmpty>(parameters);
      }
    }

    /**
     * Gets a ruleset. Returns NOT_FOUND if the ruleset does not exist.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    get(
      params: Params$Resource$Projects$Locations$Rulesets$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Projects$Locations$Rulesets$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1RuleSet>;
    get(
      params: Params$Resource$Projects$Locations$Rulesets$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Projects$Locations$Rulesets$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
    ): void;
    get(
      params: Params$Resource$Projects$Locations$Rulesets$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Rulesets$Get
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1RuleSet>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Rulesets$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Rulesets$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1RuleSet>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1RuleSet>(
          parameters
        );
      }
    }

    /**
     * Lists rulesets.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    list(
      params: Params$Resource$Projects$Locations$Rulesets$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Projects$Locations$Rulesets$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1ListRuleSetsResponse>;
    list(
      params: Params$Resource$Projects$Locations$Rulesets$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Projects$Locations$Rulesets$List,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListRuleSetsResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListRuleSetsResponse>
    ): void;
    list(
      params: Params$Resource$Projects$Locations$Rulesets$List,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListRuleSetsResponse>
    ): void;
    list(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListRuleSetsResponse>
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Rulesets$List
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListRuleSetsResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListRuleSetsResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListRuleSetsResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1ListRuleSetsResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Rulesets$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Rulesets$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/ruleSets').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1ListRuleSetsResponse>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1ListRuleSetsResponse>(
          parameters
        );
      }
    }

    /**
     * Updates a ruleset. Returns INVALID_ARGUMENT if the name of the ruleset is non-empty and does not equal the existing name.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    patch(
      params: Params$Resource$Projects$Locations$Rulesets$Patch,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    patch(
      params?: Params$Resource$Projects$Locations$Rulesets$Patch,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1RuleSet>;
    patch(
      params: Params$Resource$Projects$Locations$Rulesets$Patch,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    patch(
      params: Params$Resource$Projects$Locations$Rulesets$Patch,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
    ): void;
    patch(
      params: Params$Resource$Projects$Locations$Rulesets$Patch,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
    ): void;
    patch(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
    ): void;
    patch(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Rulesets$Patch
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1RuleSet>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1RuleSet>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Rulesets$Patch;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Rulesets$Patch;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1RuleSet>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1RuleSet>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Projects$Locations$Rulesets$Create
    extends StandardParameters {
    /**
     * Required. The parent name. Format: projects/{project_number\}/locations/{location\}.
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1RuleSet;
  }
  export interface Params$Resource$Projects$Locations$Rulesets$Delete
    extends StandardParameters {
    /**
     * Required. The name of the rule set to delete. Format: projects/{project_number\}/locations/{location\}/ruleSets/{rule_set_id\}.
     */
    name?: string;
  }
  export interface Params$Resource$Projects$Locations$Rulesets$Get
    extends StandardParameters {
    /**
     * Required. The name of the rule set to retrieve. Format: projects/{project_number\}/locations/{location\}/ruleSets/{rule_set_id\}.
     */
    name?: string;
  }
  export interface Params$Resource$Projects$Locations$Rulesets$List
    extends StandardParameters {
    /**
     * The maximum number of rule sets to return. The service may return fewer than this value. If unspecified, at most 50 rule sets will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
     */
    pageSize?: number;
    /**
     * A page token, received from a previous `ListRuleSets` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListRuleSets` must match the call that provided the page token.
     */
    pageToken?: string;
    /**
     * Required. The parent, which owns this collection of document. Format: projects/{project_number\}/locations/{location\}.
     */
    parent?: string;
  }
  export interface Params$Resource$Projects$Locations$Rulesets$Patch
    extends StandardParameters {
    /**
     * Required. The name of the rule set to update. Format: projects/{project_number\}/locations/{location\}/ruleSets/{rule_set_id\}.
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1UpdateRuleSetRequest;
  }

  export class Resource$Projects$Locations$Synonymsets {
    context: APIRequestContext;
    constructor(context: APIRequestContext) {
      this.context = context;
    }

    /**
     * Creates a SynonymSet for a single context. Throws an ALREADY_EXISTS exception if a synonymset already exists for the context.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    create(
      params: Params$Resource$Projects$Locations$Synonymsets$Create,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    create(
      params?: Params$Resource$Projects$Locations$Synonymsets$Create,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1SynonymSet>;
    create(
      params: Params$Resource$Projects$Locations$Synonymsets$Create,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    create(
      params: Params$Resource$Projects$Locations$Synonymsets$Create,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
    ): void;
    create(
      params: Params$Resource$Projects$Locations$Synonymsets$Create,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
    ): void;
    create(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
    ): void;
    create(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Synonymsets$Create
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1SynonymSet>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Synonymsets$Create;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Synonymsets$Create;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/synonymSets').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'POST',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1SynonymSet>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1SynonymSet>(
          parameters
        );
      }
    }

    /**
     * Deletes a SynonymSet for a given context. Throws a NOT_FOUND exception if the SynonymSet is not found.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    delete(
      params: Params$Resource$Projects$Locations$Synonymsets$Delete,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    delete(
      params?: Params$Resource$Projects$Locations$Synonymsets$Delete,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleProtobufEmpty>;
    delete(
      params: Params$Resource$Projects$Locations$Synonymsets$Delete,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    delete(
      params: Params$Resource$Projects$Locations$Synonymsets$Delete,
      options: MethodOptions | BodyResponseCallback<Schema$GoogleProtobufEmpty>,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    delete(
      params: Params$Resource$Projects$Locations$Synonymsets$Delete,
      callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>
    ): void;
    delete(callback: BodyResponseCallback<Schema$GoogleProtobufEmpty>): void;
    delete(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Synonymsets$Delete
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleProtobufEmpty>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleProtobufEmpty>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Synonymsets$Delete;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Synonymsets$Delete;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'DELETE',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleProtobufEmpty>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleProtobufEmpty>(parameters);
      }
    }

    /**
     * Gets a SynonymSet for a particular context. Throws a NOT_FOUND exception if the Synonymset does not exist
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    get(
      params: Params$Resource$Projects$Locations$Synonymsets$Get,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    get(
      params?: Params$Resource$Projects$Locations$Synonymsets$Get,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1SynonymSet>;
    get(
      params: Params$Resource$Projects$Locations$Synonymsets$Get,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    get(
      params: Params$Resource$Projects$Locations$Synonymsets$Get,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
    ): void;
    get(
      params: Params$Resource$Projects$Locations$Synonymsets$Get,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
    ): void;
    get(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
    ): void;
    get(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Synonymsets$Get
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1SynonymSet>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Synonymsets$Get;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Synonymsets$Get;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1SynonymSet>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1SynonymSet>(
          parameters
        );
      }
    }

    /**
     * Returns all SynonymSets (for all contexts) for the specified location.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    list(
      params: Params$Resource$Projects$Locations$Synonymsets$List,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    list(
      params?: Params$Resource$Projects$Locations$Synonymsets$List,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1ListSynonymSetsResponse>;
    list(
      params: Params$Resource$Projects$Locations$Synonymsets$List,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    list(
      params: Params$Resource$Projects$Locations$Synonymsets$List,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListSynonymSetsResponse>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListSynonymSetsResponse>
    ): void;
    list(
      params: Params$Resource$Projects$Locations$Synonymsets$List,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListSynonymSetsResponse>
    ): void;
    list(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListSynonymSetsResponse>
    ): void;
    list(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Synonymsets$List
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListSynonymSetsResponse>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListSynonymSetsResponse>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1ListSynonymSetsResponse>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1ListSynonymSetsResponse>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Synonymsets$List;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Synonymsets$List;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+parent}/synonymSets').replace(
              /([^:]\/)\/+/g,
              '$1'
            ),
            method: 'GET',
          },
          options
        ),
        params,
        requiredParams: ['parent'],
        pathParams: ['parent'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1ListSynonymSetsResponse>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1ListSynonymSetsResponse>(
          parameters
        );
      }
    }

    /**
     * Remove the existing SynonymSet for the context and replaces it with a new one. Throws a NOT_FOUND exception if the SynonymSet is not found.
     *
     * @param params - Parameters for request
     * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
     * @param callback - Optional callback that handles the response.
     * @returns A promise if used with async/await, or void if used with a callback.
     */
    patch(
      params: Params$Resource$Projects$Locations$Synonymsets$Patch,
      options: StreamMethodOptions
    ): GaxiosPromise<Readable>;
    patch(
      params?: Params$Resource$Projects$Locations$Synonymsets$Patch,
      options?: MethodOptions
    ): GaxiosPromise<Schema$GoogleCloudContentwarehouseV1SynonymSet>;
    patch(
      params: Params$Resource$Projects$Locations$Synonymsets$Patch,
      options: StreamMethodOptions | BodyResponseCallback<Readable>,
      callback: BodyResponseCallback<Readable>
    ): void;
    patch(
      params: Params$Resource$Projects$Locations$Synonymsets$Patch,
      options:
        | MethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
    ): void;
    patch(
      params: Params$Resource$Projects$Locations$Synonymsets$Patch,
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
    ): void;
    patch(
      callback: BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
    ): void;
    patch(
      paramsOrCallback?:
        | Params$Resource$Projects$Locations$Synonymsets$Patch
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
        | BodyResponseCallback<Readable>,
      optionsOrCallback?:
        | MethodOptions
        | StreamMethodOptions
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
        | BodyResponseCallback<Readable>,
      callback?:
        | BodyResponseCallback<Schema$GoogleCloudContentwarehouseV1SynonymSet>
        | BodyResponseCallback<Readable>
    ):
      | void
      | GaxiosPromise<Schema$GoogleCloudContentwarehouseV1SynonymSet>
      | GaxiosPromise<Readable> {
      let params = (paramsOrCallback ||
        {}) as Params$Resource$Projects$Locations$Synonymsets$Patch;
      let options = (optionsOrCallback || {}) as MethodOptions;

      if (typeof paramsOrCallback === 'function') {
        callback = paramsOrCallback;
        params = {} as Params$Resource$Projects$Locations$Synonymsets$Patch;
        options = {};
      }

      if (typeof optionsOrCallback === 'function') {
        callback = optionsOrCallback;
        options = {};
      }

      const rootUrl =
        options.rootUrl || 'https://contentwarehouse.googleapis.com/';
      const parameters = {
        options: Object.assign(
          {
            url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
            method: 'PATCH',
          },
          options
        ),
        params,
        requiredParams: ['name'],
        pathParams: ['name'],
        context: this.context,
      };
      if (callback) {
        createAPIRequest<Schema$GoogleCloudContentwarehouseV1SynonymSet>(
          parameters,
          callback as BodyResponseCallback<unknown>
        );
      } else {
        return createAPIRequest<Schema$GoogleCloudContentwarehouseV1SynonymSet>(
          parameters
        );
      }
    }
  }

  export interface Params$Resource$Projects$Locations$Synonymsets$Create
    extends StandardParameters {
    /**
     * Required. The parent name. Format: projects/{project_number\}/locations/{location\}.
     */
    parent?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1SynonymSet;
  }
  export interface Params$Resource$Projects$Locations$Synonymsets$Delete
    extends StandardParameters {
    /**
     * Required. The name of the synonymSet to delete Format: projects/{project_number\}/locations/{location\}/synonymSets/{context\}.
     */
    name?: string;
  }
  export interface Params$Resource$Projects$Locations$Synonymsets$Get
    extends StandardParameters {
    /**
     * Required. The name of the synonymSet to retrieve Format: projects/{project_number\}/locations/{location\}/synonymSets/{context\}.
     */
    name?: string;
  }
  export interface Params$Resource$Projects$Locations$Synonymsets$List
    extends StandardParameters {
    /**
     * The maximum number of synonymSets to return. The service may return fewer than this value. If unspecified, at most 50 rule sets will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
     */
    pageSize?: number;
    /**
     * A page token, received from a previous `ListSynonymSets` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListSynonymSets` must match the call that provided the page token.
     */
    pageToken?: string;
    /**
     * Required. The parent name. Format: projects/{project_number\}/locations/{location\}.
     */
    parent?: string;
  }
  export interface Params$Resource$Projects$Locations$Synonymsets$Patch
    extends StandardParameters {
    /**
     * Required. The name of the synonymSet to update Format: projects/{project_number\}/locations/{location\}/synonymSets/{context\}.
     */
    name?: string;

    /**
     * Request body metadata
     */
    requestBody?: Schema$GoogleCloudContentwarehouseV1SynonymSet;
  }
}
